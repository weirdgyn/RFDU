

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Jul 09 15:59:54 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	16LF1618
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    23                           	psect	inittext,global,class=CODE,delta=2
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=3
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=3
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=3
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=3
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=3
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=3
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=3
    66                           	psect	text38,local,class=CODE,merge=1,delta=2,group=3
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	intentry,global,class=CODE,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   124                           	dabs	1,0x7E,2
   125  0000                     
   126                           ; Generated 07/09/2023 GMT
   127                           ; 
   128                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   129                           ; All rights reserved.
   130                           ; 
   131                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   132                           ; 
   133                           ; Redistribution and use in source and binary forms, with or without modification, are
   134                           ; permitted provided that the following conditions are met:
   135                           ; 
   136                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   137                           ;        conditions and the following disclaimer.
   138                           ; 
   139                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   140                           ;        of conditions and the following disclaimer in the documentation and/or other
   141                           ;        materials provided with the distribution. Publication is not required when
   142                           ;        this file is used in an embedded application.
   143                           ; 
   144                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   145                           ;        software without specific prior written permission.
   146                           ; 
   147                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   148                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   149                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   150                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   151                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   152                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   153                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   154                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   155                           ; 
   156                           ; 
   157                           ; Code-generator required, PIC16LF1618 Definitions
   158                           ; 
   159                           ; SFR Addresses
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0093                     	;# 
   201  0094                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  0111                     	;# 
   217  0112                     	;# 
   218  0113                     	;# 
   219  0114                     	;# 
   220  0115                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  0118                     	;# 
   224  0119                     	;# 
   225  011C                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0191                     	;# 
   230  0191                     	;# 
   231  0192                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0194                     	;# 
   235  0195                     	;# 
   236  0196                     	;# 
   237  0199                     	;# 
   238  0199                     	;# 
   239  0199                     	;# 
   240  019A                     	;# 
   241  019A                     	;# 
   242  019A                     	;# 
   243  019B                     	;# 
   244  019B                     	;# 
   245  019B                     	;# 
   246  019B                     	;# 
   247  019B                     	;# 
   248  019C                     	;# 
   249  019C                     	;# 
   250  019C                     	;# 
   251  019D                     	;# 
   252  019D                     	;# 
   253  019D                     	;# 
   254  019E                     	;# 
   255  019E                     	;# 
   256  019E                     	;# 
   257  019F                     	;# 
   258  019F                     	;# 
   259  019F                     	;# 
   260  019F                     	;# 
   261  019F                     	;# 
   262  020C                     	;# 
   263  020D                     	;# 
   264  020E                     	;# 
   265  0211                     	;# 
   266  0211                     	;# 
   267  0212                     	;# 
   268  0212                     	;# 
   269  0213                     	;# 
   270  0213                     	;# 
   271  0214                     	;# 
   272  0214                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0215                     	;# 
   276  0215                     	;# 
   277  0216                     	;# 
   278  0216                     	;# 
   279  0217                     	;# 
   280  0217                     	;# 
   281  028C                     	;# 
   282  028D                     	;# 
   283  028E                     	;# 
   284  0291                     	;# 
   285  0291                     	;# 
   286  0292                     	;# 
   287  0293                     	;# 
   288  0294                     	;# 
   289  0298                     	;# 
   290  0298                     	;# 
   291  0299                     	;# 
   292  029A                     	;# 
   293  029B                     	;# 
   294  029E                     	;# 
   295  030C                     	;# 
   296  030D                     	;# 
   297  030E                     	;# 
   298  038C                     	;# 
   299  038D                     	;# 
   300  038E                     	;# 
   301  0391                     	;# 
   302  0392                     	;# 
   303  0393                     	;# 
   304  0394                     	;# 
   305  0395                     	;# 
   306  0396                     	;# 
   307  0397                     	;# 
   308  0398                     	;# 
   309  0399                     	;# 
   310  040E                     	;# 
   311  0413                     	;# 
   312  0413                     	;# 
   313  0414                     	;# 
   314  0414                     	;# 
   315  0415                     	;# 
   316  0416                     	;# 
   317  0417                     	;# 
   318  0418                     	;# 
   319  041A                     	;# 
   320  041A                     	;# 
   321  041B                     	;# 
   322  041B                     	;# 
   323  041C                     	;# 
   324  041D                     	;# 
   325  041E                     	;# 
   326  041F                     	;# 
   327  0493                     	;# 
   328  0494                     	;# 
   329  0495                     	;# 
   330  0496                     	;# 
   331  049A                     	;# 
   332  049B                     	;# 
   333  049C                     	;# 
   334  049D                     	;# 
   335  058C                     	;# 
   336  058C                     	;# 
   337  058D                     	;# 
   338  058E                     	;# 
   339  058E                     	;# 
   340  058F                     	;# 
   341  0590                     	;# 
   342  0590                     	;# 
   343  0591                     	;# 
   344  0592                     	;# 
   345  0592                     	;# 
   346  0593                     	;# 
   347  0594                     	;# 
   348  0594                     	;# 
   349  0595                     	;# 
   350  0596                     	;# 
   351  0596                     	;# 
   352  0597                     	;# 
   353  0598                     	;# 
   354  0599                     	;# 
   355  059A                     	;# 
   356  059B                     	;# 
   357  059B                     	;# 
   358  059C                     	;# 
   359  059D                     	;# 
   360  060C                     	;# 
   361  060C                     	;# 
   362  060D                     	;# 
   363  060E                     	;# 
   364  060F                     	;# 
   365  060F                     	;# 
   366  0610                     	;# 
   367  0611                     	;# 
   368  0612                     	;# 
   369  0613                     	;# 
   370  0614                     	;# 
   371  0617                     	;# 
   372  0617                     	;# 
   373  0618                     	;# 
   374  0619                     	;# 
   375  061A                     	;# 
   376  061A                     	;# 
   377  061B                     	;# 
   378  061C                     	;# 
   379  0691                     	;# 
   380  0692                     	;# 
   381  0693                     	;# 
   382  0694                     	;# 
   383  0695                     	;# 
   384  0696                     	;# 
   385  0697                     	;# 
   386  0699                     	;# 
   387  069A                     	;# 
   388  0711                     	;# 
   389  0712                     	;# 
   390  0713                     	;# 
   391  0714                     	;# 
   392  0715                     	;# 
   393  0718                     	;# 
   394  0718                     	;# 
   395  0719                     	;# 
   396  071A                     	;# 
   397  071A                     	;# 
   398  071B                     	;# 
   399  071C                     	;# 
   400  071D                     	;# 
   401  0791                     	;# 
   402  0791                     	;# 
   403  0792                     	;# 
   404  0793                     	;# 
   405  0793                     	;# 
   406  0794                     	;# 
   407  0795                     	;# 
   408  0795                     	;# 
   409  0796                     	;# 
   410  0797                     	;# 
   411  0797                     	;# 
   412  0798                     	;# 
   413  0799                     	;# 
   414  079A                     	;# 
   415  080C                     	;# 
   416  080C                     	;# 
   417  080D                     	;# 
   418  080E                     	;# 
   419  080E                     	;# 
   420  080F                     	;# 
   421  0810                     	;# 
   422  0810                     	;# 
   423  0811                     	;# 
   424  0812                     	;# 
   425  0812                     	;# 
   426  0813                     	;# 
   427  0814                     	;# 
   428  0815                     	;# 
   429  0816                     	;# 
   430  0817                     	;# 
   431  0818                     	;# 
   432  0819                     	;# 
   433  081A                     	;# 
   434  081A                     	;# 
   435  081B                     	;# 
   436  081C                     	;# 
   437  081C                     	;# 
   438  081D                     	;# 
   439  088C                     	;# 
   440  088D                     	;# 
   441  088E                     	;# 
   442  088F                     	;# 
   443  088F                     	;# 
   444  0890                     	;# 
   445  0891                     	;# 
   446  0892                     	;# 
   447  0893                     	;# 
   448  0893                     	;# 
   449  0894                     	;# 
   450  0895                     	;# 
   451  0896                     	;# 
   452  0897                     	;# 
   453  0897                     	;# 
   454  0898                     	;# 
   455  0899                     	;# 
   456  0D8C                     	;# 
   457  0D8C                     	;# 
   458  0D8D                     	;# 
   459  0D8E                     	;# 
   460  0D8F                     	;# 
   461  0D8F                     	;# 
   462  0D90                     	;# 
   463  0D91                     	;# 
   464  0D92                     	;# 
   465  0D92                     	;# 
   466  0D93                     	;# 
   467  0D94                     	;# 
   468  0D95                     	;# 
   469  0D95                     	;# 
   470  0D96                     	;# 
   471  0D97                     	;# 
   472  0D98                     	;# 
   473  0D99                     	;# 
   474  0D9A                     	;# 
   475  0D9B                     	;# 
   476  0D9C                     	;# 
   477  0D9D                     	;# 
   478  0D9E                     	;# 
   479  0D9E                     	;# 
   480  0D9F                     	;# 
   481  0DA0                     	;# 
   482  0DA1                     	;# 
   483  0DA1                     	;# 
   484  0DA2                     	;# 
   485  0DA3                     	;# 
   486  0DA4                     	;# 
   487  0DA4                     	;# 
   488  0DA5                     	;# 
   489  0DA6                     	;# 
   490  0DA7                     	;# 
   491  0DA7                     	;# 
   492  0DA8                     	;# 
   493  0DA9                     	;# 
   494  0DAA                     	;# 
   495  0DAB                     	;# 
   496  0DAC                     	;# 
   497  0DAD                     	;# 
   498  0DAE                     	;# 
   499  0DAF                     	;# 
   500  0E0F                     	;# 
   501  0E10                     	;# 
   502  0E11                     	;# 
   503  0E12                     	;# 
   504  0E13                     	;# 
   505  0E14                     	;# 
   506  0E15                     	;# 
   507  0E16                     	;# 
   508  0E17                     	;# 
   509  0E17                     	;# 
   510  0E18                     	;# 
   511  0E18                     	;# 
   512  0E19                     	;# 
   513  0E1A                     	;# 
   514  0E1B                     	;# 
   515  0E1B                     	;# 
   516  0E1C                     	;# 
   517  0E1D                     	;# 
   518  0E1E                     	;# 
   519  0E1E                     	;# 
   520  0E1F                     	;# 
   521  0E20                     	;# 
   522  0E21                     	;# 
   523  0E22                     	;# 
   524  0E23                     	;# 
   525  0E24                     	;# 
   526  0E25                     	;# 
   527  0E26                     	;# 
   528  0E27                     	;# 
   529  0E28                     	;# 
   530  0E29                     	;# 
   531  0E2A                     	;# 
   532  0E2B                     	;# 
   533  0E2C                     	;# 
   534  0E2D                     	;# 
   535  0E2E                     	;# 
   536  0E90                     	;# 
   537  0E91                     	;# 
   538  0E92                     	;# 
   539  0E94                     	;# 
   540  0E95                     	;# 
   541  0E9C                     	;# 
   542  0E9D                     	;# 
   543  0E9E                     	;# 
   544  0E9F                     	;# 
   545  0EA0                     	;# 
   546  0EA1                     	;# 
   547  0EA2                     	;# 
   548  0EA3                     	;# 
   549  0EA4                     	;# 
   550  0EA5                     	;# 
   551  0EA6                     	;# 
   552  0EA7                     	;# 
   553  0F0F                     	;# 
   554  0F10                     	;# 
   555  0F11                     	;# 
   556  0F12                     	;# 
   557  0F13                     	;# 
   558  0F14                     	;# 
   559  0F15                     	;# 
   560  0F16                     	;# 
   561  0F17                     	;# 
   562  0F18                     	;# 
   563  0F19                     	;# 
   564  0F1A                     	;# 
   565  0F1B                     	;# 
   566  0F1C                     	;# 
   567  0F1D                     	;# 
   568  0F1E                     	;# 
   569  0F1F                     	;# 
   570  0F20                     	;# 
   571  0F21                     	;# 
   572  0F22                     	;# 
   573  0F23                     	;# 
   574  0FE4                     	;# 
   575  0FE5                     	;# 
   576  0FE6                     	;# 
   577  0FE7                     	;# 
   578  0FE8                     	;# 
   579  0FE9                     	;# 
   580  0FEA                     	;# 
   581  0FEB                     	;# 
   582  0FED                     	;# 
   583  0FEE                     	;# 
   584  0FEF                     	;# 
   585  0000                     	;# 
   586  0001                     	;# 
   587  0002                     	;# 
   588  0003                     	;# 
   589  0004                     	;# 
   590  0005                     	;# 
   591  0006                     	;# 
   592  0007                     	;# 
   593  0008                     	;# 
   594  0009                     	;# 
   595  000A                     	;# 
   596  000B                     	;# 
   597  000C                     	;# 
   598  000D                     	;# 
   599  000E                     	;# 
   600  0010                     	;# 
   601  0011                     	;# 
   602  0012                     	;# 
   603  0013                     	;# 
   604  0014                     	;# 
   605  0015                     	;# 
   606  0016                     	;# 
   607  0016                     	;# 
   608  0017                     	;# 
   609  0018                     	;# 
   610  0019                     	;# 
   611  001A                     	;# 
   612  001A                     	;# 
   613  001B                     	;# 
   614  001B                     	;# 
   615  001C                     	;# 
   616  001D                     	;# 
   617  001E                     	;# 
   618  001F                     	;# 
   619  008C                     	;# 
   620  008D                     	;# 
   621  008E                     	;# 
   622  0090                     	;# 
   623  0091                     	;# 
   624  0092                     	;# 
   625  0093                     	;# 
   626  0094                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0098                     	;# 
   630  0099                     	;# 
   631  009A                     	;# 
   632  009B                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  010C                     	;# 
   639  010D                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011C                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  018E                     	;# 
   654  0191                     	;# 
   655  0191                     	;# 
   656  0192                     	;# 
   657  0193                     	;# 
   658  0193                     	;# 
   659  0194                     	;# 
   660  0195                     	;# 
   661  0196                     	;# 
   662  0199                     	;# 
   663  0199                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019A                     	;# 
   667  019A                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019C                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019D                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019E                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  019F                     	;# 
   684  019F                     	;# 
   685  019F                     	;# 
   686  019F                     	;# 
   687  020C                     	;# 
   688  020D                     	;# 
   689  020E                     	;# 
   690  0211                     	;# 
   691  0211                     	;# 
   692  0212                     	;# 
   693  0212                     	;# 
   694  0213                     	;# 
   695  0213                     	;# 
   696  0214                     	;# 
   697  0214                     	;# 
   698  0215                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0216                     	;# 
   703  0216                     	;# 
   704  0217                     	;# 
   705  0217                     	;# 
   706  028C                     	;# 
   707  028D                     	;# 
   708  028E                     	;# 
   709  0291                     	;# 
   710  0291                     	;# 
   711  0292                     	;# 
   712  0293                     	;# 
   713  0294                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  029B                     	;# 
   719  029E                     	;# 
   720  030C                     	;# 
   721  030D                     	;# 
   722  030E                     	;# 
   723  038C                     	;# 
   724  038D                     	;# 
   725  038E                     	;# 
   726  0391                     	;# 
   727  0392                     	;# 
   728  0393                     	;# 
   729  0394                     	;# 
   730  0395                     	;# 
   731  0396                     	;# 
   732  0397                     	;# 
   733  0398                     	;# 
   734  0399                     	;# 
   735  040E                     	;# 
   736  0413                     	;# 
   737  0413                     	;# 
   738  0414                     	;# 
   739  0414                     	;# 
   740  0415                     	;# 
   741  0416                     	;# 
   742  0417                     	;# 
   743  0418                     	;# 
   744  041A                     	;# 
   745  041A                     	;# 
   746  041B                     	;# 
   747  041B                     	;# 
   748  041C                     	;# 
   749  041D                     	;# 
   750  041E                     	;# 
   751  041F                     	;# 
   752  0493                     	;# 
   753  0494                     	;# 
   754  0495                     	;# 
   755  0496                     	;# 
   756  049A                     	;# 
   757  049B                     	;# 
   758  049C                     	;# 
   759  049D                     	;# 
   760  058C                     	;# 
   761  058C                     	;# 
   762  058D                     	;# 
   763  058E                     	;# 
   764  058E                     	;# 
   765  058F                     	;# 
   766  0590                     	;# 
   767  0590                     	;# 
   768  0591                     	;# 
   769  0592                     	;# 
   770  0592                     	;# 
   771  0593                     	;# 
   772  0594                     	;# 
   773  0594                     	;# 
   774  0595                     	;# 
   775  0596                     	;# 
   776  0596                     	;# 
   777  0597                     	;# 
   778  0598                     	;# 
   779  0599                     	;# 
   780  059A                     	;# 
   781  059B                     	;# 
   782  059B                     	;# 
   783  059C                     	;# 
   784  059D                     	;# 
   785  060C                     	;# 
   786  060C                     	;# 
   787  060D                     	;# 
   788  060E                     	;# 
   789  060F                     	;# 
   790  060F                     	;# 
   791  0610                     	;# 
   792  0611                     	;# 
   793  0612                     	;# 
   794  0613                     	;# 
   795  0614                     	;# 
   796  0617                     	;# 
   797  0617                     	;# 
   798  0618                     	;# 
   799  0619                     	;# 
   800  061A                     	;# 
   801  061A                     	;# 
   802  061B                     	;# 
   803  061C                     	;# 
   804  0691                     	;# 
   805  0692                     	;# 
   806  0693                     	;# 
   807  0694                     	;# 
   808  0695                     	;# 
   809  0696                     	;# 
   810  0697                     	;# 
   811  0699                     	;# 
   812  069A                     	;# 
   813  0711                     	;# 
   814  0712                     	;# 
   815  0713                     	;# 
   816  0714                     	;# 
   817  0715                     	;# 
   818  0718                     	;# 
   819  0718                     	;# 
   820  0719                     	;# 
   821  071A                     	;# 
   822  071A                     	;# 
   823  071B                     	;# 
   824  071C                     	;# 
   825  071D                     	;# 
   826  0791                     	;# 
   827  0791                     	;# 
   828  0792                     	;# 
   829  0793                     	;# 
   830  0793                     	;# 
   831  0794                     	;# 
   832  0795                     	;# 
   833  0795                     	;# 
   834  0796                     	;# 
   835  0797                     	;# 
   836  0797                     	;# 
   837  0798                     	;# 
   838  0799                     	;# 
   839  079A                     	;# 
   840  080C                     	;# 
   841  080C                     	;# 
   842  080D                     	;# 
   843  080E                     	;# 
   844  080E                     	;# 
   845  080F                     	;# 
   846  0810                     	;# 
   847  0810                     	;# 
   848  0811                     	;# 
   849  0812                     	;# 
   850  0812                     	;# 
   851  0813                     	;# 
   852  0814                     	;# 
   853  0815                     	;# 
   854  0816                     	;# 
   855  0817                     	;# 
   856  0818                     	;# 
   857  0819                     	;# 
   858  081A                     	;# 
   859  081A                     	;# 
   860  081B                     	;# 
   861  081C                     	;# 
   862  081C                     	;# 
   863  081D                     	;# 
   864  088C                     	;# 
   865  088D                     	;# 
   866  088E                     	;# 
   867  088F                     	;# 
   868  088F                     	;# 
   869  0890                     	;# 
   870  0891                     	;# 
   871  0892                     	;# 
   872  0893                     	;# 
   873  0893                     	;# 
   874  0894                     	;# 
   875  0895                     	;# 
   876  0896                     	;# 
   877  0897                     	;# 
   878  0897                     	;# 
   879  0898                     	;# 
   880  0899                     	;# 
   881  0D8C                     	;# 
   882  0D8C                     	;# 
   883  0D8D                     	;# 
   884  0D8E                     	;# 
   885  0D8F                     	;# 
   886  0D8F                     	;# 
   887  0D90                     	;# 
   888  0D91                     	;# 
   889  0D92                     	;# 
   890  0D92                     	;# 
   891  0D93                     	;# 
   892  0D94                     	;# 
   893  0D95                     	;# 
   894  0D95                     	;# 
   895  0D96                     	;# 
   896  0D97                     	;# 
   897  0D98                     	;# 
   898  0D99                     	;# 
   899  0D9A                     	;# 
   900  0D9B                     	;# 
   901  0D9C                     	;# 
   902  0D9D                     	;# 
   903  0D9E                     	;# 
   904  0D9E                     	;# 
   905  0D9F                     	;# 
   906  0DA0                     	;# 
   907  0DA1                     	;# 
   908  0DA1                     	;# 
   909  0DA2                     	;# 
   910  0DA3                     	;# 
   911  0DA4                     	;# 
   912  0DA4                     	;# 
   913  0DA5                     	;# 
   914  0DA6                     	;# 
   915  0DA7                     	;# 
   916  0DA7                     	;# 
   917  0DA8                     	;# 
   918  0DA9                     	;# 
   919  0DAA                     	;# 
   920  0DAB                     	;# 
   921  0DAC                     	;# 
   922  0DAD                     	;# 
   923  0DAE                     	;# 
   924  0DAF                     	;# 
   925  0E0F                     	;# 
   926  0E10                     	;# 
   927  0E11                     	;# 
   928  0E12                     	;# 
   929  0E13                     	;# 
   930  0E14                     	;# 
   931  0E15                     	;# 
   932  0E16                     	;# 
   933  0E17                     	;# 
   934  0E17                     	;# 
   935  0E18                     	;# 
   936  0E18                     	;# 
   937  0E19                     	;# 
   938  0E1A                     	;# 
   939  0E1B                     	;# 
   940  0E1B                     	;# 
   941  0E1C                     	;# 
   942  0E1D                     	;# 
   943  0E1E                     	;# 
   944  0E1E                     	;# 
   945  0E1F                     	;# 
   946  0E20                     	;# 
   947  0E21                     	;# 
   948  0E22                     	;# 
   949  0E23                     	;# 
   950  0E24                     	;# 
   951  0E25                     	;# 
   952  0E26                     	;# 
   953  0E27                     	;# 
   954  0E28                     	;# 
   955  0E29                     	;# 
   956  0E2A                     	;# 
   957  0E2B                     	;# 
   958  0E2C                     	;# 
   959  0E2D                     	;# 
   960  0E2E                     	;# 
   961  0E90                     	;# 
   962  0E91                     	;# 
   963  0E92                     	;# 
   964  0E94                     	;# 
   965  0E95                     	;# 
   966  0E9C                     	;# 
   967  0E9D                     	;# 
   968  0E9E                     	;# 
   969  0E9F                     	;# 
   970  0EA0                     	;# 
   971  0EA1                     	;# 
   972  0EA2                     	;# 
   973  0EA3                     	;# 
   974  0EA4                     	;# 
   975  0EA5                     	;# 
   976  0EA6                     	;# 
   977  0EA7                     	;# 
   978  0F0F                     	;# 
   979  0F10                     	;# 
   980  0F11                     	;# 
   981  0F12                     	;# 
   982  0F13                     	;# 
   983  0F14                     	;# 
   984  0F15                     	;# 
   985  0F16                     	;# 
   986  0F17                     	;# 
   987  0F18                     	;# 
   988  0F19                     	;# 
   989  0F1A                     	;# 
   990  0F1B                     	;# 
   991  0F1C                     	;# 
   992  0F1D                     	;# 
   993  0F1E                     	;# 
   994  0F1F                     	;# 
   995  0F20                     	;# 
   996  0F21                     	;# 
   997  0F22                     	;# 
   998  0F23                     	;# 
   999  0FE4                     	;# 
  1000  0FE5                     	;# 
  1001  0FE6                     	;# 
  1002  0FE7                     	;# 
  1003  0FE8                     	;# 
  1004  0FE9                     	;# 
  1005  0FEA                     	;# 
  1006  0FEB                     	;# 
  1007  0FED                     	;# 
  1008  0FEE                     	;# 
  1009  0FEF                     	;# 
  1010  0000                     	;# 
  1011  0001                     	;# 
  1012  0002                     	;# 
  1013  0003                     	;# 
  1014  0004                     	;# 
  1015  0005                     	;# 
  1016  0006                     	;# 
  1017  0007                     	;# 
  1018  0008                     	;# 
  1019  0009                     	;# 
  1020  000A                     	;# 
  1021  000B                     	;# 
  1022  000C                     	;# 
  1023  000D                     	;# 
  1024  000E                     	;# 
  1025  0010                     	;# 
  1026  0011                     	;# 
  1027  0012                     	;# 
  1028  0013                     	;# 
  1029  0014                     	;# 
  1030  0015                     	;# 
  1031  0016                     	;# 
  1032  0016                     	;# 
  1033  0017                     	;# 
  1034  0018                     	;# 
  1035  0019                     	;# 
  1036  001A                     	;# 
  1037  001A                     	;# 
  1038  001B                     	;# 
  1039  001B                     	;# 
  1040  001C                     	;# 
  1041  001D                     	;# 
  1042  001E                     	;# 
  1043  001F                     	;# 
  1044  008C                     	;# 
  1045  008D                     	;# 
  1046  008E                     	;# 
  1047  0090                     	;# 
  1048  0091                     	;# 
  1049  0092                     	;# 
  1050  0093                     	;# 
  1051  0094                     	;# 
  1052  0095                     	;# 
  1053  0096                     	;# 
  1054  0098                     	;# 
  1055  0099                     	;# 
  1056  009A                     	;# 
  1057  009B                     	;# 
  1058  009B                     	;# 
  1059  009C                     	;# 
  1060  009D                     	;# 
  1061  009E                     	;# 
  1062  009F                     	;# 
  1063  010C                     	;# 
  1064  010D                     	;# 
  1065  010E                     	;# 
  1066  0111                     	;# 
  1067  0112                     	;# 
  1068  0113                     	;# 
  1069  0114                     	;# 
  1070  0115                     	;# 
  1071  0116                     	;# 
  1072  0117                     	;# 
  1073  0118                     	;# 
  1074  0119                     	;# 
  1075  011C                     	;# 
  1076  018C                     	;# 
  1077  018D                     	;# 
  1078  018E                     	;# 
  1079  0191                     	;# 
  1080  0191                     	;# 
  1081  0192                     	;# 
  1082  0193                     	;# 
  1083  0193                     	;# 
  1084  0194                     	;# 
  1085  0195                     	;# 
  1086  0196                     	;# 
  1087  0199                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  020C                     	;# 
  1113  020D                     	;# 
  1114  020E                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  028C                     	;# 
  1132  028D                     	;# 
  1133  028E                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0294                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  029B                     	;# 
  1144  029E                     	;# 
  1145  030C                     	;# 
  1146  030D                     	;# 
  1147  030E                     	;# 
  1148  038C                     	;# 
  1149  038D                     	;# 
  1150  038E                     	;# 
  1151  0391                     	;# 
  1152  0392                     	;# 
  1153  0393                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  0397                     	;# 
  1158  0398                     	;# 
  1159  0399                     	;# 
  1160  040E                     	;# 
  1161  0413                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0414                     	;# 
  1165  0415                     	;# 
  1166  0416                     	;# 
  1167  0417                     	;# 
  1168  0418                     	;# 
  1169  041A                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041B                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  041F                     	;# 
  1177  0493                     	;# 
  1178  0494                     	;# 
  1179  0495                     	;# 
  1180  0496                     	;# 
  1181  049A                     	;# 
  1182  049B                     	;# 
  1183  049C                     	;# 
  1184  049D                     	;# 
  1185  058C                     	;# 
  1186  058C                     	;# 
  1187  058D                     	;# 
  1188  058E                     	;# 
  1189  058E                     	;# 
  1190  058F                     	;# 
  1191  0590                     	;# 
  1192  0590                     	;# 
  1193  0591                     	;# 
  1194  0592                     	;# 
  1195  0592                     	;# 
  1196  0593                     	;# 
  1197  0594                     	;# 
  1198  0594                     	;# 
  1199  0595                     	;# 
  1200  0596                     	;# 
  1201  0596                     	;# 
  1202  0597                     	;# 
  1203  0598                     	;# 
  1204  0599                     	;# 
  1205  059A                     	;# 
  1206  059B                     	;# 
  1207  059B                     	;# 
  1208  059C                     	;# 
  1209  059D                     	;# 
  1210  060C                     	;# 
  1211  060C                     	;# 
  1212  060D                     	;# 
  1213  060E                     	;# 
  1214  060F                     	;# 
  1215  060F                     	;# 
  1216  0610                     	;# 
  1217  0611                     	;# 
  1218  0612                     	;# 
  1219  0613                     	;# 
  1220  0614                     	;# 
  1221  0617                     	;# 
  1222  0617                     	;# 
  1223  0618                     	;# 
  1224  0619                     	;# 
  1225  061A                     	;# 
  1226  061A                     	;# 
  1227  061B                     	;# 
  1228  061C                     	;# 
  1229  0691                     	;# 
  1230  0692                     	;# 
  1231  0693                     	;# 
  1232  0694                     	;# 
  1233  0695                     	;# 
  1234  0696                     	;# 
  1235  0697                     	;# 
  1236  0699                     	;# 
  1237  069A                     	;# 
  1238  0711                     	;# 
  1239  0712                     	;# 
  1240  0713                     	;# 
  1241  0714                     	;# 
  1242  0715                     	;# 
  1243  0718                     	;# 
  1244  0718                     	;# 
  1245  0719                     	;# 
  1246  071A                     	;# 
  1247  071A                     	;# 
  1248  071B                     	;# 
  1249  071C                     	;# 
  1250  071D                     	;# 
  1251  0791                     	;# 
  1252  0791                     	;# 
  1253  0792                     	;# 
  1254  0793                     	;# 
  1255  0793                     	;# 
  1256  0794                     	;# 
  1257  0795                     	;# 
  1258  0795                     	;# 
  1259  0796                     	;# 
  1260  0797                     	;# 
  1261  0797                     	;# 
  1262  0798                     	;# 
  1263  0799                     	;# 
  1264  079A                     	;# 
  1265  080C                     	;# 
  1266  080C                     	;# 
  1267  080D                     	;# 
  1268  080E                     	;# 
  1269  080E                     	;# 
  1270  080F                     	;# 
  1271  0810                     	;# 
  1272  0810                     	;# 
  1273  0811                     	;# 
  1274  0812                     	;# 
  1275  0812                     	;# 
  1276  0813                     	;# 
  1277  0814                     	;# 
  1278  0815                     	;# 
  1279  0816                     	;# 
  1280  0817                     	;# 
  1281  0818                     	;# 
  1282  0819                     	;# 
  1283  081A                     	;# 
  1284  081A                     	;# 
  1285  081B                     	;# 
  1286  081C                     	;# 
  1287  081C                     	;# 
  1288  081D                     	;# 
  1289  088C                     	;# 
  1290  088D                     	;# 
  1291  088E                     	;# 
  1292  088F                     	;# 
  1293  088F                     	;# 
  1294  0890                     	;# 
  1295  0891                     	;# 
  1296  0892                     	;# 
  1297  0893                     	;# 
  1298  0893                     	;# 
  1299  0894                     	;# 
  1300  0895                     	;# 
  1301  0896                     	;# 
  1302  0897                     	;# 
  1303  0897                     	;# 
  1304  0898                     	;# 
  1305  0899                     	;# 
  1306  0D8C                     	;# 
  1307  0D8C                     	;# 
  1308  0D8D                     	;# 
  1309  0D8E                     	;# 
  1310  0D8F                     	;# 
  1311  0D8F                     	;# 
  1312  0D90                     	;# 
  1313  0D91                     	;# 
  1314  0D92                     	;# 
  1315  0D92                     	;# 
  1316  0D93                     	;# 
  1317  0D94                     	;# 
  1318  0D95                     	;# 
  1319  0D95                     	;# 
  1320  0D96                     	;# 
  1321  0D97                     	;# 
  1322  0D98                     	;# 
  1323  0D99                     	;# 
  1324  0D9A                     	;# 
  1325  0D9B                     	;# 
  1326  0D9C                     	;# 
  1327  0D9D                     	;# 
  1328  0D9E                     	;# 
  1329  0D9E                     	;# 
  1330  0D9F                     	;# 
  1331  0DA0                     	;# 
  1332  0DA1                     	;# 
  1333  0DA1                     	;# 
  1334  0DA2                     	;# 
  1335  0DA3                     	;# 
  1336  0DA4                     	;# 
  1337  0DA4                     	;# 
  1338  0DA5                     	;# 
  1339  0DA6                     	;# 
  1340  0DA7                     	;# 
  1341  0DA7                     	;# 
  1342  0DA8                     	;# 
  1343  0DA9                     	;# 
  1344  0DAA                     	;# 
  1345  0DAB                     	;# 
  1346  0DAC                     	;# 
  1347  0DAD                     	;# 
  1348  0DAE                     	;# 
  1349  0DAF                     	;# 
  1350  0E0F                     	;# 
  1351  0E10                     	;# 
  1352  0E11                     	;# 
  1353  0E12                     	;# 
  1354  0E13                     	;# 
  1355  0E14                     	;# 
  1356  0E15                     	;# 
  1357  0E16                     	;# 
  1358  0E17                     	;# 
  1359  0E17                     	;# 
  1360  0E18                     	;# 
  1361  0E18                     	;# 
  1362  0E19                     	;# 
  1363  0E1A                     	;# 
  1364  0E1B                     	;# 
  1365  0E1B                     	;# 
  1366  0E1C                     	;# 
  1367  0E1D                     	;# 
  1368  0E1E                     	;# 
  1369  0E1E                     	;# 
  1370  0E1F                     	;# 
  1371  0E20                     	;# 
  1372  0E21                     	;# 
  1373  0E22                     	;# 
  1374  0E23                     	;# 
  1375  0E24                     	;# 
  1376  0E25                     	;# 
  1377  0E26                     	;# 
  1378  0E27                     	;# 
  1379  0E28                     	;# 
  1380  0E29                     	;# 
  1381  0E2A                     	;# 
  1382  0E2B                     	;# 
  1383  0E2C                     	;# 
  1384  0E2D                     	;# 
  1385  0E2E                     	;# 
  1386  0E90                     	;# 
  1387  0E91                     	;# 
  1388  0E92                     	;# 
  1389  0E94                     	;# 
  1390  0E95                     	;# 
  1391  0E9C                     	;# 
  1392  0E9D                     	;# 
  1393  0E9E                     	;# 
  1394  0E9F                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0EA6                     	;# 
  1402  0EA7                     	;# 
  1403  0F0F                     	;# 
  1404  0F10                     	;# 
  1405  0F11                     	;# 
  1406  0F12                     	;# 
  1407  0F13                     	;# 
  1408  0F14                     	;# 
  1409  0F15                     	;# 
  1410  0F16                     	;# 
  1411  0F17                     	;# 
  1412  0F18                     	;# 
  1413  0F19                     	;# 
  1414  0F1A                     	;# 
  1415  0F1B                     	;# 
  1416  0F1C                     	;# 
  1417  0F1D                     	;# 
  1418  0F1E                     	;# 
  1419  0F1F                     	;# 
  1420  0F20                     	;# 
  1421  0F21                     	;# 
  1422  0F22                     	;# 
  1423  0F23                     	;# 
  1424  0FE4                     	;# 
  1425  0FE5                     	;# 
  1426  0FE6                     	;# 
  1427  0FE7                     	;# 
  1428  0FE8                     	;# 
  1429  0FE9                     	;# 
  1430  0FEA                     	;# 
  1431  0FEB                     	;# 
  1432  0FED                     	;# 
  1433  0FEE                     	;# 
  1434  0FEF                     	;# 
  1435  0000                     	;# 
  1436  0001                     	;# 
  1437  0002                     	;# 
  1438  0003                     	;# 
  1439  0004                     	;# 
  1440  0005                     	;# 
  1441  0006                     	;# 
  1442  0007                     	;# 
  1443  0008                     	;# 
  1444  0009                     	;# 
  1445  000A                     	;# 
  1446  000B                     	;# 
  1447  000C                     	;# 
  1448  000D                     	;# 
  1449  000E                     	;# 
  1450  0010                     	;# 
  1451  0011                     	;# 
  1452  0012                     	;# 
  1453  0013                     	;# 
  1454  0014                     	;# 
  1455  0015                     	;# 
  1456  0016                     	;# 
  1457  0016                     	;# 
  1458  0017                     	;# 
  1459  0018                     	;# 
  1460  0019                     	;# 
  1461  001A                     	;# 
  1462  001A                     	;# 
  1463  001B                     	;# 
  1464  001B                     	;# 
  1465  001C                     	;# 
  1466  001D                     	;# 
  1467  001E                     	;# 
  1468  001F                     	;# 
  1469  008C                     	;# 
  1470  008D                     	;# 
  1471  008E                     	;# 
  1472  0090                     	;# 
  1473  0091                     	;# 
  1474  0092                     	;# 
  1475  0093                     	;# 
  1476  0094                     	;# 
  1477  0095                     	;# 
  1478  0096                     	;# 
  1479  0098                     	;# 
  1480  0099                     	;# 
  1481  009A                     	;# 
  1482  009B                     	;# 
  1483  009B                     	;# 
  1484  009C                     	;# 
  1485  009D                     	;# 
  1486  009E                     	;# 
  1487  009F                     	;# 
  1488  010C                     	;# 
  1489  010D                     	;# 
  1490  010E                     	;# 
  1491  0111                     	;# 
  1492  0112                     	;# 
  1493  0113                     	;# 
  1494  0114                     	;# 
  1495  0115                     	;# 
  1496  0116                     	;# 
  1497  0117                     	;# 
  1498  0118                     	;# 
  1499  0119                     	;# 
  1500  011C                     	;# 
  1501  018C                     	;# 
  1502  018D                     	;# 
  1503  018E                     	;# 
  1504  0191                     	;# 
  1505  0191                     	;# 
  1506  0192                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0199                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  019A                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019C                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019D                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019E                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  020C                     	;# 
  1538  020D                     	;# 
  1539  020E                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  028C                     	;# 
  1557  028D                     	;# 
  1558  028E                     	;# 
  1559  0291                     	;# 
  1560  0291                     	;# 
  1561  0292                     	;# 
  1562  0293                     	;# 
  1563  0294                     	;# 
  1564  0298                     	;# 
  1565  0298                     	;# 
  1566  0299                     	;# 
  1567  029A                     	;# 
  1568  029B                     	;# 
  1569  029E                     	;# 
  1570  030C                     	;# 
  1571  030D                     	;# 
  1572  030E                     	;# 
  1573  038C                     	;# 
  1574  038D                     	;# 
  1575  038E                     	;# 
  1576  0391                     	;# 
  1577  0392                     	;# 
  1578  0393                     	;# 
  1579  0394                     	;# 
  1580  0395                     	;# 
  1581  0396                     	;# 
  1582  0397                     	;# 
  1583  0398                     	;# 
  1584  0399                     	;# 
  1585  040E                     	;# 
  1586  0413                     	;# 
  1587  0413                     	;# 
  1588  0414                     	;# 
  1589  0414                     	;# 
  1590  0415                     	;# 
  1591  0416                     	;# 
  1592  0417                     	;# 
  1593  0418                     	;# 
  1594  041A                     	;# 
  1595  041A                     	;# 
  1596  041B                     	;# 
  1597  041B                     	;# 
  1598  041C                     	;# 
  1599  041D                     	;# 
  1600  041E                     	;# 
  1601  041F                     	;# 
  1602  0493                     	;# 
  1603  0494                     	;# 
  1604  0495                     	;# 
  1605  0496                     	;# 
  1606  049A                     	;# 
  1607  049B                     	;# 
  1608  049C                     	;# 
  1609  049D                     	;# 
  1610  058C                     	;# 
  1611  058C                     	;# 
  1612  058D                     	;# 
  1613  058E                     	;# 
  1614  058E                     	;# 
  1615  058F                     	;# 
  1616  0590                     	;# 
  1617  0590                     	;# 
  1618  0591                     	;# 
  1619  0592                     	;# 
  1620  0592                     	;# 
  1621  0593                     	;# 
  1622  0594                     	;# 
  1623  0594                     	;# 
  1624  0595                     	;# 
  1625  0596                     	;# 
  1626  0596                     	;# 
  1627  0597                     	;# 
  1628  0598                     	;# 
  1629  0599                     	;# 
  1630  059A                     	;# 
  1631  059B                     	;# 
  1632  059B                     	;# 
  1633  059C                     	;# 
  1634  059D                     	;# 
  1635  060C                     	;# 
  1636  060C                     	;# 
  1637  060D                     	;# 
  1638  060E                     	;# 
  1639  060F                     	;# 
  1640  060F                     	;# 
  1641  0610                     	;# 
  1642  0611                     	;# 
  1643  0612                     	;# 
  1644  0613                     	;# 
  1645  0614                     	;# 
  1646  0617                     	;# 
  1647  0617                     	;# 
  1648  0618                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061A                     	;# 
  1652  061B                     	;# 
  1653  061C                     	;# 
  1654  0691                     	;# 
  1655  0692                     	;# 
  1656  0693                     	;# 
  1657  0694                     	;# 
  1658  0695                     	;# 
  1659  0696                     	;# 
  1660  0697                     	;# 
  1661  0699                     	;# 
  1662  069A                     	;# 
  1663  0711                     	;# 
  1664  0712                     	;# 
  1665  0713                     	;# 
  1666  0714                     	;# 
  1667  0715                     	;# 
  1668  0718                     	;# 
  1669  0718                     	;# 
  1670  0719                     	;# 
  1671  071A                     	;# 
  1672  071A                     	;# 
  1673  071B                     	;# 
  1674  071C                     	;# 
  1675  071D                     	;# 
  1676  0791                     	;# 
  1677  0791                     	;# 
  1678  0792                     	;# 
  1679  0793                     	;# 
  1680  0793                     	;# 
  1681  0794                     	;# 
  1682  0795                     	;# 
  1683  0795                     	;# 
  1684  0796                     	;# 
  1685  0797                     	;# 
  1686  0797                     	;# 
  1687  0798                     	;# 
  1688  0799                     	;# 
  1689  079A                     	;# 
  1690  080C                     	;# 
  1691  080C                     	;# 
  1692  080D                     	;# 
  1693  080E                     	;# 
  1694  080E                     	;# 
  1695  080F                     	;# 
  1696  0810                     	;# 
  1697  0810                     	;# 
  1698  0811                     	;# 
  1699  0812                     	;# 
  1700  0812                     	;# 
  1701  0813                     	;# 
  1702  0814                     	;# 
  1703  0815                     	;# 
  1704  0816                     	;# 
  1705  0817                     	;# 
  1706  0818                     	;# 
  1707  0819                     	;# 
  1708  081A                     	;# 
  1709  081A                     	;# 
  1710  081B                     	;# 
  1711  081C                     	;# 
  1712  081C                     	;# 
  1713  081D                     	;# 
  1714  088C                     	;# 
  1715  088D                     	;# 
  1716  088E                     	;# 
  1717  088F                     	;# 
  1718  088F                     	;# 
  1719  0890                     	;# 
  1720  0891                     	;# 
  1721  0892                     	;# 
  1722  0893                     	;# 
  1723  0893                     	;# 
  1724  0894                     	;# 
  1725  0895                     	;# 
  1726  0896                     	;# 
  1727  0897                     	;# 
  1728  0897                     	;# 
  1729  0898                     	;# 
  1730  0899                     	;# 
  1731  0D8C                     	;# 
  1732  0D8C                     	;# 
  1733  0D8D                     	;# 
  1734  0D8E                     	;# 
  1735  0D8F                     	;# 
  1736  0D8F                     	;# 
  1737  0D90                     	;# 
  1738  0D91                     	;# 
  1739  0D92                     	;# 
  1740  0D92                     	;# 
  1741  0D93                     	;# 
  1742  0D94                     	;# 
  1743  0D95                     	;# 
  1744  0D95                     	;# 
  1745  0D96                     	;# 
  1746  0D97                     	;# 
  1747  0D98                     	;# 
  1748  0D99                     	;# 
  1749  0D9A                     	;# 
  1750  0D9B                     	;# 
  1751  0D9C                     	;# 
  1752  0D9D                     	;# 
  1753  0D9E                     	;# 
  1754  0D9E                     	;# 
  1755  0D9F                     	;# 
  1756  0DA0                     	;# 
  1757  0DA1                     	;# 
  1758  0DA1                     	;# 
  1759  0DA2                     	;# 
  1760  0DA3                     	;# 
  1761  0DA4                     	;# 
  1762  0DA4                     	;# 
  1763  0DA5                     	;# 
  1764  0DA6                     	;# 
  1765  0DA7                     	;# 
  1766  0DA7                     	;# 
  1767  0DA8                     	;# 
  1768  0DA9                     	;# 
  1769  0DAA                     	;# 
  1770  0DAB                     	;# 
  1771  0DAC                     	;# 
  1772  0DAD                     	;# 
  1773  0DAE                     	;# 
  1774  0DAF                     	;# 
  1775  0E0F                     	;# 
  1776  0E10                     	;# 
  1777  0E11                     	;# 
  1778  0E12                     	;# 
  1779  0E13                     	;# 
  1780  0E14                     	;# 
  1781  0E15                     	;# 
  1782  0E16                     	;# 
  1783  0E17                     	;# 
  1784  0E17                     	;# 
  1785  0E18                     	;# 
  1786  0E18                     	;# 
  1787  0E19                     	;# 
  1788  0E1A                     	;# 
  1789  0E1B                     	;# 
  1790  0E1B                     	;# 
  1791  0E1C                     	;# 
  1792  0E1D                     	;# 
  1793  0E1E                     	;# 
  1794  0E1E                     	;# 
  1795  0E1F                     	;# 
  1796  0E20                     	;# 
  1797  0E21                     	;# 
  1798  0E22                     	;# 
  1799  0E23                     	;# 
  1800  0E24                     	;# 
  1801  0E25                     	;# 
  1802  0E26                     	;# 
  1803  0E27                     	;# 
  1804  0E28                     	;# 
  1805  0E29                     	;# 
  1806  0E2A                     	;# 
  1807  0E2B                     	;# 
  1808  0E2C                     	;# 
  1809  0E2D                     	;# 
  1810  0E2E                     	;# 
  1811  0E90                     	;# 
  1812  0E91                     	;# 
  1813  0E92                     	;# 
  1814  0E94                     	;# 
  1815  0E95                     	;# 
  1816  0E9C                     	;# 
  1817  0E9D                     	;# 
  1818  0E9E                     	;# 
  1819  0E9F                     	;# 
  1820  0EA0                     	;# 
  1821  0EA1                     	;# 
  1822  0EA2                     	;# 
  1823  0EA3                     	;# 
  1824  0EA4                     	;# 
  1825  0EA5                     	;# 
  1826  0EA6                     	;# 
  1827  0EA7                     	;# 
  1828  0F0F                     	;# 
  1829  0F10                     	;# 
  1830  0F11                     	;# 
  1831  0F12                     	;# 
  1832  0F13                     	;# 
  1833  0F14                     	;# 
  1834  0F15                     	;# 
  1835  0F16                     	;# 
  1836  0F17                     	;# 
  1837  0F18                     	;# 
  1838  0F19                     	;# 
  1839  0F1A                     	;# 
  1840  0F1B                     	;# 
  1841  0F1C                     	;# 
  1842  0F1D                     	;# 
  1843  0F1E                     	;# 
  1844  0F1F                     	;# 
  1845  0F20                     	;# 
  1846  0F21                     	;# 
  1847  0F22                     	;# 
  1848  0F23                     	;# 
  1849  0FE4                     	;# 
  1850  0FE5                     	;# 
  1851  0FE6                     	;# 
  1852  0FE7                     	;# 
  1853  0FE8                     	;# 
  1854  0FE9                     	;# 
  1855  0FEA                     	;# 
  1856  0FEB                     	;# 
  1857  0FED                     	;# 
  1858  0FEE                     	;# 
  1859  0FEF                     	;# 
  1860  0000                     	;# 
  1861  0001                     	;# 
  1862  0002                     	;# 
  1863  0003                     	;# 
  1864  0004                     	;# 
  1865  0005                     	;# 
  1866  0006                     	;# 
  1867  0007                     	;# 
  1868  0008                     	;# 
  1869  0009                     	;# 
  1870  000A                     	;# 
  1871  000B                     	;# 
  1872  000C                     	;# 
  1873  000D                     	;# 
  1874  000E                     	;# 
  1875  0010                     	;# 
  1876  0011                     	;# 
  1877  0012                     	;# 
  1878  0013                     	;# 
  1879  0014                     	;# 
  1880  0015                     	;# 
  1881  0016                     	;# 
  1882  0016                     	;# 
  1883  0017                     	;# 
  1884  0018                     	;# 
  1885  0019                     	;# 
  1886  001A                     	;# 
  1887  001A                     	;# 
  1888  001B                     	;# 
  1889  001B                     	;# 
  1890  001C                     	;# 
  1891  001D                     	;# 
  1892  001E                     	;# 
  1893  001F                     	;# 
  1894  008C                     	;# 
  1895  008D                     	;# 
  1896  008E                     	;# 
  1897  0090                     	;# 
  1898  0091                     	;# 
  1899  0092                     	;# 
  1900  0093                     	;# 
  1901  0094                     	;# 
  1902  0095                     	;# 
  1903  0096                     	;# 
  1904  0098                     	;# 
  1905  0099                     	;# 
  1906  009A                     	;# 
  1907  009B                     	;# 
  1908  009B                     	;# 
  1909  009C                     	;# 
  1910  009D                     	;# 
  1911  009E                     	;# 
  1912  009F                     	;# 
  1913  010C                     	;# 
  1914  010D                     	;# 
  1915  010E                     	;# 
  1916  0111                     	;# 
  1917  0112                     	;# 
  1918  0113                     	;# 
  1919  0114                     	;# 
  1920  0115                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  0118                     	;# 
  1924  0119                     	;# 
  1925  011C                     	;# 
  1926  018C                     	;# 
  1927  018D                     	;# 
  1928  018E                     	;# 
  1929  0191                     	;# 
  1930  0191                     	;# 
  1931  0192                     	;# 
  1932  0193                     	;# 
  1933  0193                     	;# 
  1934  0194                     	;# 
  1935  0195                     	;# 
  1936  0196                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  0199                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019E                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  019F                     	;# 
  1960  019F                     	;# 
  1961  019F                     	;# 
  1962  020C                     	;# 
  1963  020D                     	;# 
  1964  020E                     	;# 
  1965  0211                     	;# 
  1966  0211                     	;# 
  1967  0212                     	;# 
  1968  0212                     	;# 
  1969  0213                     	;# 
  1970  0213                     	;# 
  1971  0214                     	;# 
  1972  0214                     	;# 
  1973  0215                     	;# 
  1974  0215                     	;# 
  1975  0215                     	;# 
  1976  0215                     	;# 
  1977  0216                     	;# 
  1978  0216                     	;# 
  1979  0217                     	;# 
  1980  0217                     	;# 
  1981  028C                     	;# 
  1982  028D                     	;# 
  1983  028E                     	;# 
  1984  0291                     	;# 
  1985  0291                     	;# 
  1986  0292                     	;# 
  1987  0293                     	;# 
  1988  0294                     	;# 
  1989  0298                     	;# 
  1990  0298                     	;# 
  1991  0299                     	;# 
  1992  029A                     	;# 
  1993  029B                     	;# 
  1994  029E                     	;# 
  1995  030C                     	;# 
  1996  030D                     	;# 
  1997  030E                     	;# 
  1998  038C                     	;# 
  1999  038D                     	;# 
  2000  038E                     	;# 
  2001  0391                     	;# 
  2002  0392                     	;# 
  2003  0393                     	;# 
  2004  0394                     	;# 
  2005  0395                     	;# 
  2006  0396                     	;# 
  2007  0397                     	;# 
  2008  0398                     	;# 
  2009  0399                     	;# 
  2010  040E                     	;# 
  2011  0413                     	;# 
  2012  0413                     	;# 
  2013  0414                     	;# 
  2014  0414                     	;# 
  2015  0415                     	;# 
  2016  0416                     	;# 
  2017  0417                     	;# 
  2018  0418                     	;# 
  2019  041A                     	;# 
  2020  041A                     	;# 
  2021  041B                     	;# 
  2022  041B                     	;# 
  2023  041C                     	;# 
  2024  041D                     	;# 
  2025  041E                     	;# 
  2026  041F                     	;# 
  2027  0493                     	;# 
  2028  0494                     	;# 
  2029  0495                     	;# 
  2030  0496                     	;# 
  2031  049A                     	;# 
  2032  049B                     	;# 
  2033  049C                     	;# 
  2034  049D                     	;# 
  2035  058C                     	;# 
  2036  058C                     	;# 
  2037  058D                     	;# 
  2038  058E                     	;# 
  2039  058E                     	;# 
  2040  058F                     	;# 
  2041  0590                     	;# 
  2042  0590                     	;# 
  2043  0591                     	;# 
  2044  0592                     	;# 
  2045  0592                     	;# 
  2046  0593                     	;# 
  2047  0594                     	;# 
  2048  0594                     	;# 
  2049  0595                     	;# 
  2050  0596                     	;# 
  2051  0596                     	;# 
  2052  0597                     	;# 
  2053  0598                     	;# 
  2054  0599                     	;# 
  2055  059A                     	;# 
  2056  059B                     	;# 
  2057  059B                     	;# 
  2058  059C                     	;# 
  2059  059D                     	;# 
  2060  060C                     	;# 
  2061  060C                     	;# 
  2062  060D                     	;# 
  2063  060E                     	;# 
  2064  060F                     	;# 
  2065  060F                     	;# 
  2066  0610                     	;# 
  2067  0611                     	;# 
  2068  0612                     	;# 
  2069  0613                     	;# 
  2070  0614                     	;# 
  2071  0617                     	;# 
  2072  0617                     	;# 
  2073  0618                     	;# 
  2074  0619                     	;# 
  2075  061A                     	;# 
  2076  061A                     	;# 
  2077  061B                     	;# 
  2078  061C                     	;# 
  2079  0691                     	;# 
  2080  0692                     	;# 
  2081  0693                     	;# 
  2082  0694                     	;# 
  2083  0695                     	;# 
  2084  0696                     	;# 
  2085  0697                     	;# 
  2086  0699                     	;# 
  2087  069A                     	;# 
  2088  0711                     	;# 
  2089  0712                     	;# 
  2090  0713                     	;# 
  2091  0714                     	;# 
  2092  0715                     	;# 
  2093  0718                     	;# 
  2094  0718                     	;# 
  2095  0719                     	;# 
  2096  071A                     	;# 
  2097  071A                     	;# 
  2098  071B                     	;# 
  2099  071C                     	;# 
  2100  071D                     	;# 
  2101  0791                     	;# 
  2102  0791                     	;# 
  2103  0792                     	;# 
  2104  0793                     	;# 
  2105  0793                     	;# 
  2106  0794                     	;# 
  2107  0795                     	;# 
  2108  0795                     	;# 
  2109  0796                     	;# 
  2110  0797                     	;# 
  2111  0797                     	;# 
  2112  0798                     	;# 
  2113  0799                     	;# 
  2114  079A                     	;# 
  2115  080C                     	;# 
  2116  080C                     	;# 
  2117  080D                     	;# 
  2118  080E                     	;# 
  2119  080E                     	;# 
  2120  080F                     	;# 
  2121  0810                     	;# 
  2122  0810                     	;# 
  2123  0811                     	;# 
  2124  0812                     	;# 
  2125  0812                     	;# 
  2126  0813                     	;# 
  2127  0814                     	;# 
  2128  0815                     	;# 
  2129  0816                     	;# 
  2130  0817                     	;# 
  2131  0818                     	;# 
  2132  0819                     	;# 
  2133  081A                     	;# 
  2134  081A                     	;# 
  2135  081B                     	;# 
  2136  081C                     	;# 
  2137  081C                     	;# 
  2138  081D                     	;# 
  2139  088C                     	;# 
  2140  088D                     	;# 
  2141  088E                     	;# 
  2142  088F                     	;# 
  2143  088F                     	;# 
  2144  0890                     	;# 
  2145  0891                     	;# 
  2146  0892                     	;# 
  2147  0893                     	;# 
  2148  0893                     	;# 
  2149  0894                     	;# 
  2150  0895                     	;# 
  2151  0896                     	;# 
  2152  0897                     	;# 
  2153  0897                     	;# 
  2154  0898                     	;# 
  2155  0899                     	;# 
  2156  0D8C                     	;# 
  2157  0D8C                     	;# 
  2158  0D8D                     	;# 
  2159  0D8E                     	;# 
  2160  0D8F                     	;# 
  2161  0D8F                     	;# 
  2162  0D90                     	;# 
  2163  0D91                     	;# 
  2164  0D92                     	;# 
  2165  0D92                     	;# 
  2166  0D93                     	;# 
  2167  0D94                     	;# 
  2168  0D95                     	;# 
  2169  0D95                     	;# 
  2170  0D96                     	;# 
  2171  0D97                     	;# 
  2172  0D98                     	;# 
  2173  0D99                     	;# 
  2174  0D9A                     	;# 
  2175  0D9B                     	;# 
  2176  0D9C                     	;# 
  2177  0D9D                     	;# 
  2178  0D9E                     	;# 
  2179  0D9E                     	;# 
  2180  0D9F                     	;# 
  2181  0DA0                     	;# 
  2182  0DA1                     	;# 
  2183  0DA1                     	;# 
  2184  0DA2                     	;# 
  2185  0DA3                     	;# 
  2186  0DA4                     	;# 
  2187  0DA4                     	;# 
  2188  0DA5                     	;# 
  2189  0DA6                     	;# 
  2190  0DA7                     	;# 
  2191  0DA7                     	;# 
  2192  0DA8                     	;# 
  2193  0DA9                     	;# 
  2194  0DAA                     	;# 
  2195  0DAB                     	;# 
  2196  0DAC                     	;# 
  2197  0DAD                     	;# 
  2198  0DAE                     	;# 
  2199  0DAF                     	;# 
  2200  0E0F                     	;# 
  2201  0E10                     	;# 
  2202  0E11                     	;# 
  2203  0E12                     	;# 
  2204  0E13                     	;# 
  2205  0E14                     	;# 
  2206  0E15                     	;# 
  2207  0E16                     	;# 
  2208  0E17                     	;# 
  2209  0E17                     	;# 
  2210  0E18                     	;# 
  2211  0E18                     	;# 
  2212  0E19                     	;# 
  2213  0E1A                     	;# 
  2214  0E1B                     	;# 
  2215  0E1B                     	;# 
  2216  0E1C                     	;# 
  2217  0E1D                     	;# 
  2218  0E1E                     	;# 
  2219  0E1E                     	;# 
  2220  0E1F                     	;# 
  2221  0E20                     	;# 
  2222  0E21                     	;# 
  2223  0E22                     	;# 
  2224  0E23                     	;# 
  2225  0E24                     	;# 
  2226  0E25                     	;# 
  2227  0E26                     	;# 
  2228  0E27                     	;# 
  2229  0E28                     	;# 
  2230  0E29                     	;# 
  2231  0E2A                     	;# 
  2232  0E2B                     	;# 
  2233  0E2C                     	;# 
  2234  0E2D                     	;# 
  2235  0E2E                     	;# 
  2236  0E90                     	;# 
  2237  0E91                     	;# 
  2238  0E92                     	;# 
  2239  0E94                     	;# 
  2240  0E95                     	;# 
  2241  0E9C                     	;# 
  2242  0E9D                     	;# 
  2243  0E9E                     	;# 
  2244  0E9F                     	;# 
  2245  0EA0                     	;# 
  2246  0EA1                     	;# 
  2247  0EA2                     	;# 
  2248  0EA3                     	;# 
  2249  0EA4                     	;# 
  2250  0EA5                     	;# 
  2251  0EA6                     	;# 
  2252  0EA7                     	;# 
  2253  0F0F                     	;# 
  2254  0F10                     	;# 
  2255  0F11                     	;# 
  2256  0F12                     	;# 
  2257  0F13                     	;# 
  2258  0F14                     	;# 
  2259  0F15                     	;# 
  2260  0F16                     	;# 
  2261  0F17                     	;# 
  2262  0F18                     	;# 
  2263  0F19                     	;# 
  2264  0F1A                     	;# 
  2265  0F1B                     	;# 
  2266  0F1C                     	;# 
  2267  0F1D                     	;# 
  2268  0F1E                     	;# 
  2269  0F1F                     	;# 
  2270  0F20                     	;# 
  2271  0F21                     	;# 
  2272  0F22                     	;# 
  2273  0F23                     	;# 
  2274  0FE4                     	;# 
  2275  0FE5                     	;# 
  2276  0FE6                     	;# 
  2277  0FE7                     	;# 
  2278  0FE8                     	;# 
  2279  0FE9                     	;# 
  2280  0FEA                     	;# 
  2281  0FEB                     	;# 
  2282  0FED                     	;# 
  2283  0FEE                     	;# 
  2284  0FEF                     	;# 
  2285  0000                     	;# 
  2286  0001                     	;# 
  2287  0002                     	;# 
  2288  0003                     	;# 
  2289  0004                     	;# 
  2290  0005                     	;# 
  2291  0006                     	;# 
  2292  0007                     	;# 
  2293  0008                     	;# 
  2294  0009                     	;# 
  2295  000A                     	;# 
  2296  000B                     	;# 
  2297  000C                     	;# 
  2298  000D                     	;# 
  2299  000E                     	;# 
  2300  0010                     	;# 
  2301  0011                     	;# 
  2302  0012                     	;# 
  2303  0013                     	;# 
  2304  0014                     	;# 
  2305  0015                     	;# 
  2306  0016                     	;# 
  2307  0016                     	;# 
  2308  0017                     	;# 
  2309  0018                     	;# 
  2310  0019                     	;# 
  2311  001A                     	;# 
  2312  001A                     	;# 
  2313  001B                     	;# 
  2314  001B                     	;# 
  2315  001C                     	;# 
  2316  001D                     	;# 
  2317  001E                     	;# 
  2318  001F                     	;# 
  2319  008C                     	;# 
  2320  008D                     	;# 
  2321  008E                     	;# 
  2322  0090                     	;# 
  2323  0091                     	;# 
  2324  0092                     	;# 
  2325  0093                     	;# 
  2326  0094                     	;# 
  2327  0095                     	;# 
  2328  0096                     	;# 
  2329  0098                     	;# 
  2330  0099                     	;# 
  2331  009A                     	;# 
  2332  009B                     	;# 
  2333  009B                     	;# 
  2334  009C                     	;# 
  2335  009D                     	;# 
  2336  009E                     	;# 
  2337  009F                     	;# 
  2338  010C                     	;# 
  2339  010D                     	;# 
  2340  010E                     	;# 
  2341  0111                     	;# 
  2342  0112                     	;# 
  2343  0113                     	;# 
  2344  0114                     	;# 
  2345  0115                     	;# 
  2346  0116                     	;# 
  2347  0117                     	;# 
  2348  0118                     	;# 
  2349  0119                     	;# 
  2350  011C                     	;# 
  2351  018C                     	;# 
  2352  018D                     	;# 
  2353  018E                     	;# 
  2354  0191                     	;# 
  2355  0191                     	;# 
  2356  0192                     	;# 
  2357  0193                     	;# 
  2358  0193                     	;# 
  2359  0194                     	;# 
  2360  0195                     	;# 
  2361  0196                     	;# 
  2362  0199                     	;# 
  2363  0199                     	;# 
  2364  0199                     	;# 
  2365  019A                     	;# 
  2366  019A                     	;# 
  2367  019A                     	;# 
  2368  019B                     	;# 
  2369  019B                     	;# 
  2370  019B                     	;# 
  2371  019B                     	;# 
  2372  019B                     	;# 
  2373  019C                     	;# 
  2374  019C                     	;# 
  2375  019C                     	;# 
  2376  019D                     	;# 
  2377  019D                     	;# 
  2378  019D                     	;# 
  2379  019E                     	;# 
  2380  019E                     	;# 
  2381  019E                     	;# 
  2382  019F                     	;# 
  2383  019F                     	;# 
  2384  019F                     	;# 
  2385  019F                     	;# 
  2386  019F                     	;# 
  2387  020C                     	;# 
  2388  020D                     	;# 
  2389  020E                     	;# 
  2390  0211                     	;# 
  2391  0211                     	;# 
  2392  0212                     	;# 
  2393  0212                     	;# 
  2394  0213                     	;# 
  2395  0213                     	;# 
  2396  0214                     	;# 
  2397  0214                     	;# 
  2398  0215                     	;# 
  2399  0215                     	;# 
  2400  0215                     	;# 
  2401  0215                     	;# 
  2402  0216                     	;# 
  2403  0216                     	;# 
  2404  0217                     	;# 
  2405  0217                     	;# 
  2406  028C                     	;# 
  2407  028D                     	;# 
  2408  028E                     	;# 
  2409  0291                     	;# 
  2410  0291                     	;# 
  2411  0292                     	;# 
  2412  0293                     	;# 
  2413  0294                     	;# 
  2414  0298                     	;# 
  2415  0298                     	;# 
  2416  0299                     	;# 
  2417  029A                     	;# 
  2418  029B                     	;# 
  2419  029E                     	;# 
  2420  030C                     	;# 
  2421  030D                     	;# 
  2422  030E                     	;# 
  2423  038C                     	;# 
  2424  038D                     	;# 
  2425  038E                     	;# 
  2426  0391                     	;# 
  2427  0392                     	;# 
  2428  0393                     	;# 
  2429  0394                     	;# 
  2430  0395                     	;# 
  2431  0396                     	;# 
  2432  0397                     	;# 
  2433  0398                     	;# 
  2434  0399                     	;# 
  2435  040E                     	;# 
  2436  0413                     	;# 
  2437  0413                     	;# 
  2438  0414                     	;# 
  2439  0414                     	;# 
  2440  0415                     	;# 
  2441  0416                     	;# 
  2442  0417                     	;# 
  2443  0418                     	;# 
  2444  041A                     	;# 
  2445  041A                     	;# 
  2446  041B                     	;# 
  2447  041B                     	;# 
  2448  041C                     	;# 
  2449  041D                     	;# 
  2450  041E                     	;# 
  2451  041F                     	;# 
  2452  0493                     	;# 
  2453  0494                     	;# 
  2454  0495                     	;# 
  2455  0496                     	;# 
  2456  049A                     	;# 
  2457  049B                     	;# 
  2458  049C                     	;# 
  2459  049D                     	;# 
  2460  058C                     	;# 
  2461  058C                     	;# 
  2462  058D                     	;# 
  2463  058E                     	;# 
  2464  058E                     	;# 
  2465  058F                     	;# 
  2466  0590                     	;# 
  2467  0590                     	;# 
  2468  0591                     	;# 
  2469  0592                     	;# 
  2470  0592                     	;# 
  2471  0593                     	;# 
  2472  0594                     	;# 
  2473  0594                     	;# 
  2474  0595                     	;# 
  2475  0596                     	;# 
  2476  0596                     	;# 
  2477  0597                     	;# 
  2478  0598                     	;# 
  2479  0599                     	;# 
  2480  059A                     	;# 
  2481  059B                     	;# 
  2482  059B                     	;# 
  2483  059C                     	;# 
  2484  059D                     	;# 
  2485  060C                     	;# 
  2486  060C                     	;# 
  2487  060D                     	;# 
  2488  060E                     	;# 
  2489  060F                     	;# 
  2490  060F                     	;# 
  2491  0610                     	;# 
  2492  0611                     	;# 
  2493  0612                     	;# 
  2494  0613                     	;# 
  2495  0614                     	;# 
  2496  0617                     	;# 
  2497  0617                     	;# 
  2498  0618                     	;# 
  2499  0619                     	;# 
  2500  061A                     	;# 
  2501  061A                     	;# 
  2502  061B                     	;# 
  2503  061C                     	;# 
  2504  0691                     	;# 
  2505  0692                     	;# 
  2506  0693                     	;# 
  2507  0694                     	;# 
  2508  0695                     	;# 
  2509  0696                     	;# 
  2510  0697                     	;# 
  2511  0699                     	;# 
  2512  069A                     	;# 
  2513  0711                     	;# 
  2514  0712                     	;# 
  2515  0713                     	;# 
  2516  0714                     	;# 
  2517  0715                     	;# 
  2518  0718                     	;# 
  2519  0718                     	;# 
  2520  0719                     	;# 
  2521  071A                     	;# 
  2522  071A                     	;# 
  2523  071B                     	;# 
  2524  071C                     	;# 
  2525  071D                     	;# 
  2526  0791                     	;# 
  2527  0791                     	;# 
  2528  0792                     	;# 
  2529  0793                     	;# 
  2530  0793                     	;# 
  2531  0794                     	;# 
  2532  0795                     	;# 
  2533  0795                     	;# 
  2534  0796                     	;# 
  2535  0797                     	;# 
  2536  0797                     	;# 
  2537  0798                     	;# 
  2538  0799                     	;# 
  2539  079A                     	;# 
  2540  080C                     	;# 
  2541  080C                     	;# 
  2542  080D                     	;# 
  2543  080E                     	;# 
  2544  080E                     	;# 
  2545  080F                     	;# 
  2546  0810                     	;# 
  2547  0810                     	;# 
  2548  0811                     	;# 
  2549  0812                     	;# 
  2550  0812                     	;# 
  2551  0813                     	;# 
  2552  0814                     	;# 
  2553  0815                     	;# 
  2554  0816                     	;# 
  2555  0817                     	;# 
  2556  0818                     	;# 
  2557  0819                     	;# 
  2558  081A                     	;# 
  2559  081A                     	;# 
  2560  081B                     	;# 
  2561  081C                     	;# 
  2562  081C                     	;# 
  2563  081D                     	;# 
  2564  088C                     	;# 
  2565  088D                     	;# 
  2566  088E                     	;# 
  2567  088F                     	;# 
  2568  088F                     	;# 
  2569  0890                     	;# 
  2570  0891                     	;# 
  2571  0892                     	;# 
  2572  0893                     	;# 
  2573  0893                     	;# 
  2574  0894                     	;# 
  2575  0895                     	;# 
  2576  0896                     	;# 
  2577  0897                     	;# 
  2578  0897                     	;# 
  2579  0898                     	;# 
  2580  0899                     	;# 
  2581  0D8C                     	;# 
  2582  0D8C                     	;# 
  2583  0D8D                     	;# 
  2584  0D8E                     	;# 
  2585  0D8F                     	;# 
  2586  0D8F                     	;# 
  2587  0D90                     	;# 
  2588  0D91                     	;# 
  2589  0D92                     	;# 
  2590  0D92                     	;# 
  2591  0D93                     	;# 
  2592  0D94                     	;# 
  2593  0D95                     	;# 
  2594  0D95                     	;# 
  2595  0D96                     	;# 
  2596  0D97                     	;# 
  2597  0D98                     	;# 
  2598  0D99                     	;# 
  2599  0D9A                     	;# 
  2600  0D9B                     	;# 
  2601  0D9C                     	;# 
  2602  0D9D                     	;# 
  2603  0D9E                     	;# 
  2604  0D9E                     	;# 
  2605  0D9F                     	;# 
  2606  0DA0                     	;# 
  2607  0DA1                     	;# 
  2608  0DA1                     	;# 
  2609  0DA2                     	;# 
  2610  0DA3                     	;# 
  2611  0DA4                     	;# 
  2612  0DA4                     	;# 
  2613  0DA5                     	;# 
  2614  0DA6                     	;# 
  2615  0DA7                     	;# 
  2616  0DA7                     	;# 
  2617  0DA8                     	;# 
  2618  0DA9                     	;# 
  2619  0DAA                     	;# 
  2620  0DAB                     	;# 
  2621  0DAC                     	;# 
  2622  0DAD                     	;# 
  2623  0DAE                     	;# 
  2624  0DAF                     	;# 
  2625  0E0F                     	;# 
  2626  0E10                     	;# 
  2627  0E11                     	;# 
  2628  0E12                     	;# 
  2629  0E13                     	;# 
  2630  0E14                     	;# 
  2631  0E15                     	;# 
  2632  0E16                     	;# 
  2633  0E17                     	;# 
  2634  0E17                     	;# 
  2635  0E18                     	;# 
  2636  0E18                     	;# 
  2637  0E19                     	;# 
  2638  0E1A                     	;# 
  2639  0E1B                     	;# 
  2640  0E1B                     	;# 
  2641  0E1C                     	;# 
  2642  0E1D                     	;# 
  2643  0E1E                     	;# 
  2644  0E1E                     	;# 
  2645  0E1F                     	;# 
  2646  0E20                     	;# 
  2647  0E21                     	;# 
  2648  0E22                     	;# 
  2649  0E23                     	;# 
  2650  0E24                     	;# 
  2651  0E25                     	;# 
  2652  0E26                     	;# 
  2653  0E27                     	;# 
  2654  0E28                     	;# 
  2655  0E29                     	;# 
  2656  0E2A                     	;# 
  2657  0E2B                     	;# 
  2658  0E2C                     	;# 
  2659  0E2D                     	;# 
  2660  0E2E                     	;# 
  2661  0E90                     	;# 
  2662  0E91                     	;# 
  2663  0E92                     	;# 
  2664  0E94                     	;# 
  2665  0E95                     	;# 
  2666  0E9C                     	;# 
  2667  0E9D                     	;# 
  2668  0E9E                     	;# 
  2669  0E9F                     	;# 
  2670  0EA0                     	;# 
  2671  0EA1                     	;# 
  2672  0EA2                     	;# 
  2673  0EA3                     	;# 
  2674  0EA4                     	;# 
  2675  0EA5                     	;# 
  2676  0EA6                     	;# 
  2677  0EA7                     	;# 
  2678  0F0F                     	;# 
  2679  0F10                     	;# 
  2680  0F11                     	;# 
  2681  0F12                     	;# 
  2682  0F13                     	;# 
  2683  0F14                     	;# 
  2684  0F15                     	;# 
  2685  0F16                     	;# 
  2686  0F17                     	;# 
  2687  0F18                     	;# 
  2688  0F19                     	;# 
  2689  0F1A                     	;# 
  2690  0F1B                     	;# 
  2691  0F1C                     	;# 
  2692  0F1D                     	;# 
  2693  0F1E                     	;# 
  2694  0F1F                     	;# 
  2695  0F20                     	;# 
  2696  0F21                     	;# 
  2697  0F22                     	;# 
  2698  0F23                     	;# 
  2699  0FE4                     	;# 
  2700  0FE5                     	;# 
  2701  0FE6                     	;# 
  2702  0FE7                     	;# 
  2703  0FE8                     	;# 
  2704  0FE9                     	;# 
  2705  0FEA                     	;# 
  2706  0FEB                     	;# 
  2707  0FED                     	;# 
  2708  0FEE                     	;# 
  2709  0FEF                     	;# 
  2710  0000                     	;# 
  2711  0001                     	;# 
  2712  0002                     	;# 
  2713  0003                     	;# 
  2714  0004                     	;# 
  2715  0005                     	;# 
  2716  0006                     	;# 
  2717  0007                     	;# 
  2718  0008                     	;# 
  2719  0009                     	;# 
  2720  000A                     	;# 
  2721  000B                     	;# 
  2722  000C                     	;# 
  2723  000D                     	;# 
  2724  000E                     	;# 
  2725  0010                     	;# 
  2726  0011                     	;# 
  2727  0012                     	;# 
  2728  0013                     	;# 
  2729  0014                     	;# 
  2730  0015                     	;# 
  2731  0016                     	;# 
  2732  0016                     	;# 
  2733  0017                     	;# 
  2734  0018                     	;# 
  2735  0019                     	;# 
  2736  001A                     	;# 
  2737  001A                     	;# 
  2738  001B                     	;# 
  2739  001B                     	;# 
  2740  001C                     	;# 
  2741  001D                     	;# 
  2742  001E                     	;# 
  2743  001F                     	;# 
  2744  008C                     	;# 
  2745  008D                     	;# 
  2746  008E                     	;# 
  2747  0090                     	;# 
  2748  0091                     	;# 
  2749  0092                     	;# 
  2750  0093                     	;# 
  2751  0094                     	;# 
  2752  0095                     	;# 
  2753  0096                     	;# 
  2754  0098                     	;# 
  2755  0099                     	;# 
  2756  009A                     	;# 
  2757  009B                     	;# 
  2758  009B                     	;# 
  2759  009C                     	;# 
  2760  009D                     	;# 
  2761  009E                     	;# 
  2762  009F                     	;# 
  2763  010C                     	;# 
  2764  010D                     	;# 
  2765  010E                     	;# 
  2766  0111                     	;# 
  2767  0112                     	;# 
  2768  0113                     	;# 
  2769  0114                     	;# 
  2770  0115                     	;# 
  2771  0116                     	;# 
  2772  0117                     	;# 
  2773  0118                     	;# 
  2774  0119                     	;# 
  2775  011C                     	;# 
  2776  018C                     	;# 
  2777  018D                     	;# 
  2778  018E                     	;# 
  2779  0191                     	;# 
  2780  0191                     	;# 
  2781  0192                     	;# 
  2782  0193                     	;# 
  2783  0193                     	;# 
  2784  0194                     	;# 
  2785  0195                     	;# 
  2786  0196                     	;# 
  2787  0199                     	;# 
  2788  0199                     	;# 
  2789  0199                     	;# 
  2790  019A                     	;# 
  2791  019A                     	;# 
  2792  019A                     	;# 
  2793  019B                     	;# 
  2794  019B                     	;# 
  2795  019B                     	;# 
  2796  019B                     	;# 
  2797  019B                     	;# 
  2798  019C                     	;# 
  2799  019C                     	;# 
  2800  019C                     	;# 
  2801  019D                     	;# 
  2802  019D                     	;# 
  2803  019D                     	;# 
  2804  019E                     	;# 
  2805  019E                     	;# 
  2806  019E                     	;# 
  2807  019F                     	;# 
  2808  019F                     	;# 
  2809  019F                     	;# 
  2810  019F                     	;# 
  2811  019F                     	;# 
  2812  020C                     	;# 
  2813  020D                     	;# 
  2814  020E                     	;# 
  2815  0211                     	;# 
  2816  0211                     	;# 
  2817  0212                     	;# 
  2818  0212                     	;# 
  2819  0213                     	;# 
  2820  0213                     	;# 
  2821  0214                     	;# 
  2822  0214                     	;# 
  2823  0215                     	;# 
  2824  0215                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0216                     	;# 
  2828  0216                     	;# 
  2829  0217                     	;# 
  2830  0217                     	;# 
  2831  028C                     	;# 
  2832  028D                     	;# 
  2833  028E                     	;# 
  2834  0291                     	;# 
  2835  0291                     	;# 
  2836  0292                     	;# 
  2837  0293                     	;# 
  2838  0294                     	;# 
  2839  0298                     	;# 
  2840  0298                     	;# 
  2841  0299                     	;# 
  2842  029A                     	;# 
  2843  029B                     	;# 
  2844  029E                     	;# 
  2845  030C                     	;# 
  2846  030D                     	;# 
  2847  030E                     	;# 
  2848  038C                     	;# 
  2849  038D                     	;# 
  2850  038E                     	;# 
  2851  0391                     	;# 
  2852  0392                     	;# 
  2853  0393                     	;# 
  2854  0394                     	;# 
  2855  0395                     	;# 
  2856  0396                     	;# 
  2857  0397                     	;# 
  2858  0398                     	;# 
  2859  0399                     	;# 
  2860  040E                     	;# 
  2861  0413                     	;# 
  2862  0413                     	;# 
  2863  0414                     	;# 
  2864  0414                     	;# 
  2865  0415                     	;# 
  2866  0416                     	;# 
  2867  0417                     	;# 
  2868  0418                     	;# 
  2869  041A                     	;# 
  2870  041A                     	;# 
  2871  041B                     	;# 
  2872  041B                     	;# 
  2873  041C                     	;# 
  2874  041D                     	;# 
  2875  041E                     	;# 
  2876  041F                     	;# 
  2877  0493                     	;# 
  2878  0494                     	;# 
  2879  0495                     	;# 
  2880  0496                     	;# 
  2881  049A                     	;# 
  2882  049B                     	;# 
  2883  049C                     	;# 
  2884  049D                     	;# 
  2885  058C                     	;# 
  2886  058C                     	;# 
  2887  058D                     	;# 
  2888  058E                     	;# 
  2889  058E                     	;# 
  2890  058F                     	;# 
  2891  0590                     	;# 
  2892  0590                     	;# 
  2893  0591                     	;# 
  2894  0592                     	;# 
  2895  0592                     	;# 
  2896  0593                     	;# 
  2897  0594                     	;# 
  2898  0594                     	;# 
  2899  0595                     	;# 
  2900  0596                     	;# 
  2901  0596                     	;# 
  2902  0597                     	;# 
  2903  0598                     	;# 
  2904  0599                     	;# 
  2905  059A                     	;# 
  2906  059B                     	;# 
  2907  059B                     	;# 
  2908  059C                     	;# 
  2909  059D                     	;# 
  2910  060C                     	;# 
  2911  060C                     	;# 
  2912  060D                     	;# 
  2913  060E                     	;# 
  2914  060F                     	;# 
  2915  060F                     	;# 
  2916  0610                     	;# 
  2917  0611                     	;# 
  2918  0612                     	;# 
  2919  0613                     	;# 
  2920  0614                     	;# 
  2921  0617                     	;# 
  2922  0617                     	;# 
  2923  0618                     	;# 
  2924  0619                     	;# 
  2925  061A                     	;# 
  2926  061A                     	;# 
  2927  061B                     	;# 
  2928  061C                     	;# 
  2929  0691                     	;# 
  2930  0692                     	;# 
  2931  0693                     	;# 
  2932  0694                     	;# 
  2933  0695                     	;# 
  2934  0696                     	;# 
  2935  0697                     	;# 
  2936  0699                     	;# 
  2937  069A                     	;# 
  2938  0711                     	;# 
  2939  0712                     	;# 
  2940  0713                     	;# 
  2941  0714                     	;# 
  2942  0715                     	;# 
  2943  0718                     	;# 
  2944  0718                     	;# 
  2945  0719                     	;# 
  2946  071A                     	;# 
  2947  071A                     	;# 
  2948  071B                     	;# 
  2949  071C                     	;# 
  2950  071D                     	;# 
  2951  0791                     	;# 
  2952  0791                     	;# 
  2953  0792                     	;# 
  2954  0793                     	;# 
  2955  0793                     	;# 
  2956  0794                     	;# 
  2957  0795                     	;# 
  2958  0795                     	;# 
  2959  0796                     	;# 
  2960  0797                     	;# 
  2961  0797                     	;# 
  2962  0798                     	;# 
  2963  0799                     	;# 
  2964  079A                     	;# 
  2965  080C                     	;# 
  2966  080C                     	;# 
  2967  080D                     	;# 
  2968  080E                     	;# 
  2969  080E                     	;# 
  2970  080F                     	;# 
  2971  0810                     	;# 
  2972  0810                     	;# 
  2973  0811                     	;# 
  2974  0812                     	;# 
  2975  0812                     	;# 
  2976  0813                     	;# 
  2977  0814                     	;# 
  2978  0815                     	;# 
  2979  0816                     	;# 
  2980  0817                     	;# 
  2981  0818                     	;# 
  2982  0819                     	;# 
  2983  081A                     	;# 
  2984  081A                     	;# 
  2985  081B                     	;# 
  2986  081C                     	;# 
  2987  081C                     	;# 
  2988  081D                     	;# 
  2989  088C                     	;# 
  2990  088D                     	;# 
  2991  088E                     	;# 
  2992  088F                     	;# 
  2993  088F                     	;# 
  2994  0890                     	;# 
  2995  0891                     	;# 
  2996  0892                     	;# 
  2997  0893                     	;# 
  2998  0893                     	;# 
  2999  0894                     	;# 
  3000  0895                     	;# 
  3001  0896                     	;# 
  3002  0897                     	;# 
  3003  0897                     	;# 
  3004  0898                     	;# 
  3005  0899                     	;# 
  3006  0D8C                     	;# 
  3007  0D8C                     	;# 
  3008  0D8D                     	;# 
  3009  0D8E                     	;# 
  3010  0D8F                     	;# 
  3011  0D8F                     	;# 
  3012  0D90                     	;# 
  3013  0D91                     	;# 
  3014  0D92                     	;# 
  3015  0D92                     	;# 
  3016  0D93                     	;# 
  3017  0D94                     	;# 
  3018  0D95                     	;# 
  3019  0D95                     	;# 
  3020  0D96                     	;# 
  3021  0D97                     	;# 
  3022  0D98                     	;# 
  3023  0D99                     	;# 
  3024  0D9A                     	;# 
  3025  0D9B                     	;# 
  3026  0D9C                     	;# 
  3027  0D9D                     	;# 
  3028  0D9E                     	;# 
  3029  0D9E                     	;# 
  3030  0D9F                     	;# 
  3031  0DA0                     	;# 
  3032  0DA1                     	;# 
  3033  0DA1                     	;# 
  3034  0DA2                     	;# 
  3035  0DA3                     	;# 
  3036  0DA4                     	;# 
  3037  0DA4                     	;# 
  3038  0DA5                     	;# 
  3039  0DA6                     	;# 
  3040  0DA7                     	;# 
  3041  0DA7                     	;# 
  3042  0DA8                     	;# 
  3043  0DA9                     	;# 
  3044  0DAA                     	;# 
  3045  0DAB                     	;# 
  3046  0DAC                     	;# 
  3047  0DAD                     	;# 
  3048  0DAE                     	;# 
  3049  0DAF                     	;# 
  3050  0E0F                     	;# 
  3051  0E10                     	;# 
  3052  0E11                     	;# 
  3053  0E12                     	;# 
  3054  0E13                     	;# 
  3055  0E14                     	;# 
  3056  0E15                     	;# 
  3057  0E16                     	;# 
  3058  0E17                     	;# 
  3059  0E17                     	;# 
  3060  0E18                     	;# 
  3061  0E18                     	;# 
  3062  0E19                     	;# 
  3063  0E1A                     	;# 
  3064  0E1B                     	;# 
  3065  0E1B                     	;# 
  3066  0E1C                     	;# 
  3067  0E1D                     	;# 
  3068  0E1E                     	;# 
  3069  0E1E                     	;# 
  3070  0E1F                     	;# 
  3071  0E20                     	;# 
  3072  0E21                     	;# 
  3073  0E22                     	;# 
  3074  0E23                     	;# 
  3075  0E24                     	;# 
  3076  0E25                     	;# 
  3077  0E26                     	;# 
  3078  0E27                     	;# 
  3079  0E28                     	;# 
  3080  0E29                     	;# 
  3081  0E2A                     	;# 
  3082  0E2B                     	;# 
  3083  0E2C                     	;# 
  3084  0E2D                     	;# 
  3085  0E2E                     	;# 
  3086  0E90                     	;# 
  3087  0E91                     	;# 
  3088  0E92                     	;# 
  3089  0E94                     	;# 
  3090  0E95                     	;# 
  3091  0E9C                     	;# 
  3092  0E9D                     	;# 
  3093  0E9E                     	;# 
  3094  0E9F                     	;# 
  3095  0EA0                     	;# 
  3096  0EA1                     	;# 
  3097  0EA2                     	;# 
  3098  0EA3                     	;# 
  3099  0EA4                     	;# 
  3100  0EA5                     	;# 
  3101  0EA6                     	;# 
  3102  0EA7                     	;# 
  3103  0F0F                     	;# 
  3104  0F10                     	;# 
  3105  0F11                     	;# 
  3106  0F12                     	;# 
  3107  0F13                     	;# 
  3108  0F14                     	;# 
  3109  0F15                     	;# 
  3110  0F16                     	;# 
  3111  0F17                     	;# 
  3112  0F18                     	;# 
  3113  0F19                     	;# 
  3114  0F1A                     	;# 
  3115  0F1B                     	;# 
  3116  0F1C                     	;# 
  3117  0F1D                     	;# 
  3118  0F1E                     	;# 
  3119  0F1F                     	;# 
  3120  0F20                     	;# 
  3121  0F21                     	;# 
  3122  0F22                     	;# 
  3123  0F23                     	;# 
  3124  0FE4                     	;# 
  3125  0FE5                     	;# 
  3126  0FE6                     	;# 
  3127  0FE7                     	;# 
  3128  0FE8                     	;# 
  3129  0FE9                     	;# 
  3130  0FEA                     	;# 
  3131  0FEB                     	;# 
  3132  0FED                     	;# 
  3133  0FEE                     	;# 
  3134  0FEF                     	;# 
  3135  0000                     	;# 
  3136  0001                     	;# 
  3137  0002                     	;# 
  3138  0003                     	;# 
  3139  0004                     	;# 
  3140  0005                     	;# 
  3141  0006                     	;# 
  3142  0007                     	;# 
  3143  0008                     	;# 
  3144  0009                     	;# 
  3145  000A                     	;# 
  3146  000B                     	;# 
  3147  000C                     	;# 
  3148  000D                     	;# 
  3149  000E                     	;# 
  3150  0010                     	;# 
  3151  0011                     	;# 
  3152  0012                     	;# 
  3153  0013                     	;# 
  3154  0014                     	;# 
  3155  0015                     	;# 
  3156  0016                     	;# 
  3157  0016                     	;# 
  3158  0017                     	;# 
  3159  0018                     	;# 
  3160  0019                     	;# 
  3161  001A                     	;# 
  3162  001A                     	;# 
  3163  001B                     	;# 
  3164  001B                     	;# 
  3165  001C                     	;# 
  3166  001D                     	;# 
  3167  001E                     	;# 
  3168  001F                     	;# 
  3169  008C                     	;# 
  3170  008D                     	;# 
  3171  008E                     	;# 
  3172  0090                     	;# 
  3173  0091                     	;# 
  3174  0092                     	;# 
  3175  0093                     	;# 
  3176  0094                     	;# 
  3177  0095                     	;# 
  3178  0096                     	;# 
  3179  0098                     	;# 
  3180  0099                     	;# 
  3181  009A                     	;# 
  3182  009B                     	;# 
  3183  009B                     	;# 
  3184  009C                     	;# 
  3185  009D                     	;# 
  3186  009E                     	;# 
  3187  009F                     	;# 
  3188  010C                     	;# 
  3189  010D                     	;# 
  3190  010E                     	;# 
  3191  0111                     	;# 
  3192  0112                     	;# 
  3193  0113                     	;# 
  3194  0114                     	;# 
  3195  0115                     	;# 
  3196  0116                     	;# 
  3197  0117                     	;# 
  3198  0118                     	;# 
  3199  0119                     	;# 
  3200  011C                     	;# 
  3201  018C                     	;# 
  3202  018D                     	;# 
  3203  018E                     	;# 
  3204  0191                     	;# 
  3205  0191                     	;# 
  3206  0192                     	;# 
  3207  0193                     	;# 
  3208  0193                     	;# 
  3209  0194                     	;# 
  3210  0195                     	;# 
  3211  0196                     	;# 
  3212  0199                     	;# 
  3213  0199                     	;# 
  3214  0199                     	;# 
  3215  019A                     	;# 
  3216  019A                     	;# 
  3217  019A                     	;# 
  3218  019B                     	;# 
  3219  019B                     	;# 
  3220  019B                     	;# 
  3221  019B                     	;# 
  3222  019B                     	;# 
  3223  019C                     	;# 
  3224  019C                     	;# 
  3225  019C                     	;# 
  3226  019D                     	;# 
  3227  019D                     	;# 
  3228  019D                     	;# 
  3229  019E                     	;# 
  3230  019E                     	;# 
  3231  019E                     	;# 
  3232  019F                     	;# 
  3233  019F                     	;# 
  3234  019F                     	;# 
  3235  019F                     	;# 
  3236  019F                     	;# 
  3237  020C                     	;# 
  3238  020D                     	;# 
  3239  020E                     	;# 
  3240  0211                     	;# 
  3241  0211                     	;# 
  3242  0212                     	;# 
  3243  0212                     	;# 
  3244  0213                     	;# 
  3245  0213                     	;# 
  3246  0214                     	;# 
  3247  0214                     	;# 
  3248  0215                     	;# 
  3249  0215                     	;# 
  3250  0215                     	;# 
  3251  0215                     	;# 
  3252  0216                     	;# 
  3253  0216                     	;# 
  3254  0217                     	;# 
  3255  0217                     	;# 
  3256  028C                     	;# 
  3257  028D                     	;# 
  3258  028E                     	;# 
  3259  0291                     	;# 
  3260  0291                     	;# 
  3261  0292                     	;# 
  3262  0293                     	;# 
  3263  0294                     	;# 
  3264  0298                     	;# 
  3265  0298                     	;# 
  3266  0299                     	;# 
  3267  029A                     	;# 
  3268  029B                     	;# 
  3269  029E                     	;# 
  3270  030C                     	;# 
  3271  030D                     	;# 
  3272  030E                     	;# 
  3273  038C                     	;# 
  3274  038D                     	;# 
  3275  038E                     	;# 
  3276  0391                     	;# 
  3277  0392                     	;# 
  3278  0393                     	;# 
  3279  0394                     	;# 
  3280  0395                     	;# 
  3281  0396                     	;# 
  3282  0397                     	;# 
  3283  0398                     	;# 
  3284  0399                     	;# 
  3285  040E                     	;# 
  3286  0413                     	;# 
  3287  0413                     	;# 
  3288  0414                     	;# 
  3289  0414                     	;# 
  3290  0415                     	;# 
  3291  0416                     	;# 
  3292  0417                     	;# 
  3293  0418                     	;# 
  3294  041A                     	;# 
  3295  041A                     	;# 
  3296  041B                     	;# 
  3297  041B                     	;# 
  3298  041C                     	;# 
  3299  041D                     	;# 
  3300  041E                     	;# 
  3301  041F                     	;# 
  3302  0493                     	;# 
  3303  0494                     	;# 
  3304  0495                     	;# 
  3305  0496                     	;# 
  3306  049A                     	;# 
  3307  049B                     	;# 
  3308  049C                     	;# 
  3309  049D                     	;# 
  3310  058C                     	;# 
  3311  058C                     	;# 
  3312  058D                     	;# 
  3313  058E                     	;# 
  3314  058E                     	;# 
  3315  058F                     	;# 
  3316  0590                     	;# 
  3317  0590                     	;# 
  3318  0591                     	;# 
  3319  0592                     	;# 
  3320  0592                     	;# 
  3321  0593                     	;# 
  3322  0594                     	;# 
  3323  0594                     	;# 
  3324  0595                     	;# 
  3325  0596                     	;# 
  3326  0596                     	;# 
  3327  0597                     	;# 
  3328  0598                     	;# 
  3329  0599                     	;# 
  3330  059A                     	;# 
  3331  059B                     	;# 
  3332  059B                     	;# 
  3333  059C                     	;# 
  3334  059D                     	;# 
  3335  060C                     	;# 
  3336  060C                     	;# 
  3337  060D                     	;# 
  3338  060E                     	;# 
  3339  060F                     	;# 
  3340  060F                     	;# 
  3341  0610                     	;# 
  3342  0611                     	;# 
  3343  0612                     	;# 
  3344  0613                     	;# 
  3345  0614                     	;# 
  3346  0617                     	;# 
  3347  0617                     	;# 
  3348  0618                     	;# 
  3349  0619                     	;# 
  3350  061A                     	;# 
  3351  061A                     	;# 
  3352  061B                     	;# 
  3353  061C                     	;# 
  3354  0691                     	;# 
  3355  0692                     	;# 
  3356  0693                     	;# 
  3357  0694                     	;# 
  3358  0695                     	;# 
  3359  0696                     	;# 
  3360  0697                     	;# 
  3361  0699                     	;# 
  3362  069A                     	;# 
  3363  0711                     	;# 
  3364  0712                     	;# 
  3365  0713                     	;# 
  3366  0714                     	;# 
  3367  0715                     	;# 
  3368  0718                     	;# 
  3369  0718                     	;# 
  3370  0719                     	;# 
  3371  071A                     	;# 
  3372  071A                     	;# 
  3373  071B                     	;# 
  3374  071C                     	;# 
  3375  071D                     	;# 
  3376  0791                     	;# 
  3377  0791                     	;# 
  3378  0792                     	;# 
  3379  0793                     	;# 
  3380  0793                     	;# 
  3381  0794                     	;# 
  3382  0795                     	;# 
  3383  0795                     	;# 
  3384  0796                     	;# 
  3385  0797                     	;# 
  3386  0797                     	;# 
  3387  0798                     	;# 
  3388  0799                     	;# 
  3389  079A                     	;# 
  3390  080C                     	;# 
  3391  080C                     	;# 
  3392  080D                     	;# 
  3393  080E                     	;# 
  3394  080E                     	;# 
  3395  080F                     	;# 
  3396  0810                     	;# 
  3397  0810                     	;# 
  3398  0811                     	;# 
  3399  0812                     	;# 
  3400  0812                     	;# 
  3401  0813                     	;# 
  3402  0814                     	;# 
  3403  0815                     	;# 
  3404  0816                     	;# 
  3405  0817                     	;# 
  3406  0818                     	;# 
  3407  0819                     	;# 
  3408  081A                     	;# 
  3409  081A                     	;# 
  3410  081B                     	;# 
  3411  081C                     	;# 
  3412  081C                     	;# 
  3413  081D                     	;# 
  3414  088C                     	;# 
  3415  088D                     	;# 
  3416  088E                     	;# 
  3417  088F                     	;# 
  3418  088F                     	;# 
  3419  0890                     	;# 
  3420  0891                     	;# 
  3421  0892                     	;# 
  3422  0893                     	;# 
  3423  0893                     	;# 
  3424  0894                     	;# 
  3425  0895                     	;# 
  3426  0896                     	;# 
  3427  0897                     	;# 
  3428  0897                     	;# 
  3429  0898                     	;# 
  3430  0899                     	;# 
  3431  0D8C                     	;# 
  3432  0D8C                     	;# 
  3433  0D8D                     	;# 
  3434  0D8E                     	;# 
  3435  0D8F                     	;# 
  3436  0D8F                     	;# 
  3437  0D90                     	;# 
  3438  0D91                     	;# 
  3439  0D92                     	;# 
  3440  0D92                     	;# 
  3441  0D93                     	;# 
  3442  0D94                     	;# 
  3443  0D95                     	;# 
  3444  0D95                     	;# 
  3445  0D96                     	;# 
  3446  0D97                     	;# 
  3447  0D98                     	;# 
  3448  0D99                     	;# 
  3449  0D9A                     	;# 
  3450  0D9B                     	;# 
  3451  0D9C                     	;# 
  3452  0D9D                     	;# 
  3453  0D9E                     	;# 
  3454  0D9E                     	;# 
  3455  0D9F                     	;# 
  3456  0DA0                     	;# 
  3457  0DA1                     	;# 
  3458  0DA1                     	;# 
  3459  0DA2                     	;# 
  3460  0DA3                     	;# 
  3461  0DA4                     	;# 
  3462  0DA4                     	;# 
  3463  0DA5                     	;# 
  3464  0DA6                     	;# 
  3465  0DA7                     	;# 
  3466  0DA7                     	;# 
  3467  0DA8                     	;# 
  3468  0DA9                     	;# 
  3469  0DAA                     	;# 
  3470  0DAB                     	;# 
  3471  0DAC                     	;# 
  3472  0DAD                     	;# 
  3473  0DAE                     	;# 
  3474  0DAF                     	;# 
  3475  0E0F                     	;# 
  3476  0E10                     	;# 
  3477  0E11                     	;# 
  3478  0E12                     	;# 
  3479  0E13                     	;# 
  3480  0E14                     	;# 
  3481  0E15                     	;# 
  3482  0E16                     	;# 
  3483  0E17                     	;# 
  3484  0E17                     	;# 
  3485  0E18                     	;# 
  3486  0E18                     	;# 
  3487  0E19                     	;# 
  3488  0E1A                     	;# 
  3489  0E1B                     	;# 
  3490  0E1B                     	;# 
  3491  0E1C                     	;# 
  3492  0E1D                     	;# 
  3493  0E1E                     	;# 
  3494  0E1E                     	;# 
  3495  0E1F                     	;# 
  3496  0E20                     	;# 
  3497  0E21                     	;# 
  3498  0E22                     	;# 
  3499  0E23                     	;# 
  3500  0E24                     	;# 
  3501  0E25                     	;# 
  3502  0E26                     	;# 
  3503  0E27                     	;# 
  3504  0E28                     	;# 
  3505  0E29                     	;# 
  3506  0E2A                     	;# 
  3507  0E2B                     	;# 
  3508  0E2C                     	;# 
  3509  0E2D                     	;# 
  3510  0E2E                     	;# 
  3511  0E90                     	;# 
  3512  0E91                     	;# 
  3513  0E92                     	;# 
  3514  0E94                     	;# 
  3515  0E95                     	;# 
  3516  0E9C                     	;# 
  3517  0E9D                     	;# 
  3518  0E9E                     	;# 
  3519  0E9F                     	;# 
  3520  0EA0                     	;# 
  3521  0EA1                     	;# 
  3522  0EA2                     	;# 
  3523  0EA3                     	;# 
  3524  0EA4                     	;# 
  3525  0EA5                     	;# 
  3526  0EA6                     	;# 
  3527  0EA7                     	;# 
  3528  0F0F                     	;# 
  3529  0F10                     	;# 
  3530  0F11                     	;# 
  3531  0F12                     	;# 
  3532  0F13                     	;# 
  3533  0F14                     	;# 
  3534  0F15                     	;# 
  3535  0F16                     	;# 
  3536  0F17                     	;# 
  3537  0F18                     	;# 
  3538  0F19                     	;# 
  3539  0F1A                     	;# 
  3540  0F1B                     	;# 
  3541  0F1C                     	;# 
  3542  0F1D                     	;# 
  3543  0F1E                     	;# 
  3544  0F1F                     	;# 
  3545  0F20                     	;# 
  3546  0F21                     	;# 
  3547  0F22                     	;# 
  3548  0F23                     	;# 
  3549  0FE4                     	;# 
  3550  0FE5                     	;# 
  3551  0FE6                     	;# 
  3552  0FE7                     	;# 
  3553  0FE8                     	;# 
  3554  0FE9                     	;# 
  3555  0FEA                     	;# 
  3556  0FEB                     	;# 
  3557  0FED                     	;# 
  3558  0FEE                     	;# 
  3559  0FEF                     	;# 
  3560                           
  3561 ;; Function _I2C1_Deinitialize is unused but had its address taken
  3562  0000                     
  3563 ;; Function _I2C1_Write is unused but had its address taken
  3564  0000                     
  3565 ;; Function _I2C1_Read is unused but had its address taken
  3566  0000                     
  3567 ;; Function _I2C1_WriteRead is unused but had its address taken
  3568  0000                     
  3569 ;; Function _I2C1_ErrorGet is unused but had its address taken
  3570  0000                     
  3571 ;; Function _I2C1_IsBusy is unused but had its address taken
  3572  0000                     
  3573 ;; Function _INT_DefaultInterruptHandler is unused but had its address taken
  3574  0000                     
  3575 ;; Function _EUSART_Deinitialize is unused but had its address taken
  3576  0000                     
  3577 ;; Function _EUSART_TransmitEnable is unused but had its address taken
  3578  0000                     
  3579 ;; Function _EUSART_TransmitDisable is unused but had its address taken
  3580  0000                     
  3581 ;; Function _EUSART_AutoBaudSet is unused but had its address taken
  3582  0000                     
  3583 ;; Function _EUSART_AutoBaudQuery is unused but had its address taken
  3584  0000                     
  3585 ;; Function _EUSART_IsTxReady is unused but had its address taken
  3586  0000                     
  3587 ;; Function _EUSART_IsTxDone is unused but had its address taken
  3588  0000                     
  3589 ;; Function _EUSART_ErrorGet is unused but had its address taken
  3590  0000                     
  3591                           	psect	idataBANK2
  3592  0000'                    __pidataBANK2:
  3593                           
  3594                           ;initializer for _sppas
  3595  0000' 3401               	retlw	1
  3596  0001' 3400               	retlw	0
  3597  0002' 3400               	retlw	0
  3598  0003' 3400               	retlw	0
  3599  0004' 3400               	retlw	0
  3600  0005' 3400               	retlw	0
  3601  0006' 3400               	retlw	0
  3602  0007' 3400               	retlw	0
  3603  0008' 3401               	retlw	1
  3604  0009' 3400               	retlw	0
  3605  000A' 3400               	retlw	0
  3606  000B' 3400               	retlw	0
  3607  000C' 3400               	retlw	0
  3608  000D' 3400               	retlw	0
  3609  000E' 3400               	retlw	0
  3610  000F' 3400               	retlw	0
  3611  0010' 3401               	retlw	1
  3612  0011' 3400               	retlw	0
  3613  0012' 3400               	retlw	0
  3614  0013' 3400               	retlw	0
  3615  0014' 3400               	retlw	0
  3616  0015' 3400               	retlw	0
  3617  0016' 3400               	retlw	0
  3618  0017' 3400               	retlw	0
  3619                           
  3620                           	psect	stringtext1
  3621  0000'                    __pstringtext1:
  3622  0000'                    _UART:
  3623  0000' 3400'              	retlw	low _EUSART_Initialize
  3624  0001' 3400'              	retlw	high _EUSART_Initialize
  3625  0002' 3400               	retlw	0
  3626  0003' 3400               	retlw	0
  3627  0004' 3400'              	retlw	low _EUSART_Read
  3628  0005' 3400'              	retlw	high _EUSART_Read
  3629  0006' 3400'              	retlw	low _EUSART_Write
  3630  0007' 3400'              	retlw	high _EUSART_Write
  3631  0008' 3400'              	retlw	low _EUSART_IsRxReady
  3632  0009' 3400'              	retlw	high _EUSART_IsRxReady
  3633  000A' 3400               	retlw	0
  3634  000B' 3400               	retlw	0
  3635  000C' 3400               	retlw	0
  3636  000D' 3400               	retlw	0
  3637  000E' 3400               	retlw	0
  3638  000F' 3400               	retlw	0
  3639  0010' 3400               	retlw	0
  3640  0011' 3400               	retlw	0
  3641  0012' 3400               	retlw	0
  3642  0013' 3400               	retlw	0
  3643  0014' 3400               	retlw	0
  3644  0015' 3400               	retlw	0
  3645  0016' 3400               	retlw	0
  3646  0017' 3400               	retlw	0
  3647  0018' 3400               	retlw	0
  3648  0019' 3400               	retlw	0
  3649  001A' 3400               	retlw	0
  3650  001B' 3400               	retlw	0
  3651  001C' 3400               	retlw	0
  3652  001D' 3400               	retlw	0
  3653  001E' 3400               	retlw	0
  3654  001F' 3400               	retlw	0
  3655  0020' 3400               	retlw	0
  3656  0021' 3400               	retlw	0
  3657  0022' 3400               	retlw	0
  3658  0023' 3400               	retlw	0
  3659  0024' 3400               	retlw	0
  3660  0025' 3400               	retlw	0
  3661  0026' 3400               	retlw	0
  3662  0027' 3400               	retlw	0
  3663  0028' 3400'              	retlw	low _EUSART_FramingErrorCallbackRegister
  3664  0029' 3400'              	retlw	high _EUSART_FramingErrorCallbackRegister
  3665  002A' 3400'              	retlw	low _EUSART_OverrunErrorCallbackRegister
  3666  002B' 3400'              	retlw	high _EUSART_OverrunErrorCallbackRegister
  3667  002C' 3400               	retlw	0
  3668  002D' 3400               	retlw	0
  3669  002E' 3400               	retlw	0
  3670  002F' 3400               	retlw	0
  3671  0030'                    __end_of_UART:
  3672                           
  3673                           	psect	stringtext2
  3674  0000'                    __pstringtext2:
  3675  0000'                    _I2C_Host:
  3676  0000' 3400'              	retlw	low _I2C1_Initialize
  3677  0001' 3400'              	retlw	high _I2C1_Initialize
  3678  0002' 3400               	retlw	0
  3679  0003' 3400               	retlw	0
  3680  0004' 3400               	retlw	0
  3681  0005' 3400               	retlw	0
  3682  0006' 3400               	retlw	0
  3683  0007' 3400               	retlw	0
  3684  0008' 3400               	retlw	0
  3685  0009' 3400               	retlw	0
  3686  000A' 3400               	retlw	0
  3687  000B' 3400               	retlw	0
  3688  000C' 3400               	retlw	0
  3689  000D' 3400               	retlw	0
  3690  000E' 3400               	retlw	0
  3691  000F' 3400               	retlw	0
  3692  0010' 3400'              	retlw	low _I2C1_CallbackRegister
  3693  0011' 3400'              	retlw	high _I2C1_CallbackRegister
  3694  0012' 3400               	retlw	0
  3695  0013' 3400               	retlw	0
  3696  0014'                    __end_of_I2C_Host:
  3697                           
  3698                           	psect	stringtext3
  3699  0000'                    __pstringtext3:
  3700  0000'                    _i2c1_eventTable:
  3701  0000' 3400'              	retlw	low _I2C1_EVENT_IDLE
  3702  0001' 3400'              	retlw	high _I2C1_EVENT_IDLE
  3703  0002' 3400'              	retlw	low _I2C1_EVENT_SEND_RD_ADDR
  3704  0003' 3400'              	retlw	high _I2C1_EVENT_SEND_RD_ADDR
  3705  0004' 3400'              	retlw	low _I2C1_EVENT_SEND_WR_ADDR
  3706  0005' 3400'              	retlw	high _I2C1_EVENT_SEND_WR_ADDR
  3707  0006' 3400'              	retlw	low _I2C1_EVENT_TX
  3708  0007' 3400'              	retlw	high _I2C1_EVENT_TX
  3709  0008' 3400'              	retlw	low _I2C1_EVENT_RX
  3710  0009' 3400'              	retlw	high _I2C1_EVENT_RX
  3711  000A' 3400'              	retlw	low _I2C1_EVENT_NACK
  3712  000B' 3400'              	retlw	high _I2C1_EVENT_NACK
  3713  000C' 3400'              	retlw	low _I2C1_EVENT_ERROR
  3714  000D' 3400'              	retlw	high _I2C1_EVENT_ERROR
  3715  000E' 3400'              	retlw	low _I2C1_EVENT_STOP
  3716  000F' 3400'              	retlw	high _I2C1_EVENT_STOP
  3717  0010' 3400'              	retlw	low _I2C1_EVENT_RESET
  3718  0011' 3400'              	retlw	high _I2C1_EVENT_RESET
  3719  0012'                    __end_of_i2c1_eventTable:
  3720                           
  3721                           	psect	nvBANK1
  3722  0000'                    __pnvBANK1:
  3723  0000'                    _ADC_InterruptHandler:
  3724  0000'                    	ds	2
  3725  000B                     _INTCONbits	set	11
  3726  0011                     _PIR2bits	set	17
  3727  0010                     _PIR1bits	set	16
  3728  0095                     _OPTION_REGbits	set	149
  3729  008E                     _TRISC	set	142
  3730  008D                     _TRISB	set	141
  3731  008C                     _TRISA	set	140
  3732  0098                     _OSCTUNE	set	152
  3733  0099                     _OSCCON	set	153
  3734  0091                     _PIE2bits	set	145
  3735  009D                     _ADCON0bits	set	157
  3736  0090                     _PIE1bits	set	144
  3737  009D                     _ADCON0	set	157
  3738  009F                     _ADCON2	set	159
  3739  009C                     _ADRESH	set	156
  3740  009B                     _ADRESL	set	155
  3741  009E                     _ADCON1	set	158
  3742  010E                     _LATCbits	set	270
  3743  010E                     _LATC	set	270
  3744  010D                     _LATB	set	269
  3745  010C                     _LATA	set	268
  3746  0116                     _BORCON	set	278
  3747  019A                     _TX1REG	set	410
  3748  0199                     _RC1REG	set	409
  3749  019F                     _BAUD1CONbits	set	415
  3750  019E                     _TX1STAbits	set	414
  3751  019D                     _RC1STAbits	set	413
  3752  019C                     _SPBRGH	set	412
  3753  019B                     _SPBRGL	set	411
  3754  019E                     _TX1STA	set	414
  3755  019D                     _RC1STA	set	413
  3756  019F                     _BAUD1CON	set	415
  3757  018E                     _ANSELC	set	398
  3758  018D                     _ANSELB	set	397
  3759  018C                     _ANSELA	set	396
  3760  020E                     _WPUC	set	526
  3761  020D                     _WPUB	set	525
  3762  020C                     _WPUA	set	524
  3763  0216                     _SSP1CON2bits	set	534
  3764  0211                     _SSP1BUF	set	529
  3765  0214                     _SSP1STATbits	set	532
  3766  0215                     _SSP1CON1bits	set	533
  3767  0212                     _SSP1ADD	set	530
  3768  0217                     _SSP1CON3	set	535
  3769  0216                     _SSP1CON2	set	534
  3770  0215                     _SSP1CON1	set	533
  3771  0214                     _SSP1STAT	set	532
  3772  028E                     _ODCONC	set	654
  3773  028D                     _ODCONB	set	653
  3774  028C                     _ODCONA	set	652
  3775  030E                     _SLRCONC	set	782
  3776  030D                     _SLRCONB	set	781
  3777  030C                     _SLRCONA	set	780
  3778  0399                     _IOCCF	set	921
  3779  0398                     _IOCCN	set	920
  3780  0397                     _IOCCP	set	919
  3781  0396                     _IOCBF	set	918
  3782  0395                     _IOCBN	set	917
  3783  0394                     _IOCBP	set	916
  3784  0393                     _IOCAF	set	915
  3785  0392                     _IOCAN	set	914
  3786  0391                     _IOCAP	set	913
  3787  038E                     _INLVLC	set	910
  3788  038D                     _INLVLB	set	909
  3789  038C                     _INLVLA	set	908
  3790  0E21                     _SSPDATPPS	set	3617
  3791  0E20                     _SSPCLKPPS	set	3616
  3792  0E24                     _RXPPS	set	3620
  3793  0E9D                     _RB5PPS	set	3741
  3794  0E9E                     _RB6PPS	set	3742
  3795  0EA2                     _RC2PPS	set	3746
  3796                           
  3797                           	psect	stringtext4
  3798  0000'                    __pstringtext4:
  3799  0000'                    STR_13:
  3800  0000' 3463               	retlw	99	;'c'
  3801  0001' 3468               	retlw	104	;'h'
  3802  0002' 3461               	retlw	97	;'a'
  3803  0003' 346E               	retlw	110	;'n'
  3804  0004' 346E               	retlw	110	;'n'
  3805  0005' 3465               	retlw	101	;'e'
  3806  0006' 346C               	retlw	108	;'l'
  3807  0007' 3420               	retlw	32	;' '
  3808  0008' 343D               	retlw	61	;'='
  3809  0009' 343D               	retlw	61	;'='
  3810  000A' 3420               	retlw	32	;' '
  3811  000B' 3450               	retlw	80	;'P'
  3812  000C' 3444               	retlw	68	;'D'
  3813  000D' 345F               	retlw	95	;'_'
  3814  000E' 3458               	retlw	88	;'X'
  3815  000F' 3420               	retlw	32	;' '
  3816  0010' 347C               	retlw	124	;'|'
  3817  0011' 347C               	retlw	124	;'|'
  3818  0012' 3420               	retlw	32	;' '
  3819  0013' 3463               	retlw	99	;'c'
  3820  0014' 3468               	retlw	104	;'h'
  3821  0015' 3461               	retlw	97	;'a'
  3822  0016' 346E               	retlw	110	;'n'
  3823  0017' 346E               	retlw	110	;'n'
  3824  0018' 3465               	retlw	101	;'e'
  3825  0019' 346C               	retlw	108	;'l'
  3826  001A' 3420               	retlw	32	;' '
  3827  001B' 343D               	retlw	61	;'='
  3828  001C' 343D               	retlw	61	;'='
  3829  001D' 3420               	retlw	32	;' '
  3830  001E' 3443               	retlw	67	;'C'
  3831  001F' 3453               	retlw	83	;'S'
  3832  0020' 345F               	retlw	95	;'_'
  3833  0021' 344B               	retlw	75	;'K'
  3834  0022' 3461               	retlw	97	;'a'
  3835  0023' 3420               	retlw	32	;' '
  3836  0024' 347C               	retlw	124	;'|'
  3837  0025' 347C               	retlw	124	;'|'
  3838  0026' 3420               	retlw	32	;' '
  3839  0027' 3463               	retlw	99	;'c'
  3840  0028' 3468               	retlw	104	;'h'
  3841  0029' 3461               	retlw	97	;'a'
  3842  002A' 346E               	retlw	110	;'n'
  3843  002B' 346E               	retlw	110	;'n'
  3844  002C' 3465               	retlw	101	;'e'
  3845  002D' 346C               	retlw	108	;'l'
  3846  002E' 3420               	retlw	32	;' '
  3847  002F' 343D               	retlw	61	;'='
  3848  0030' 343D               	retlw	61	;'='
  3849  0031' 3420               	retlw	32	;' '
  3850  0032' 3443               	retlw	67	;'C'
  3851  0033' 3453               	retlw	83	;'S'
  3852  0034' 345F               	retlw	95	;'_'
  3853  0035' 3458               	retlw	88	;'X'
  3854  0036' 3400               	retlw	0
  3855                           
  3856                           	psect	stringtext5
  3857  0000'                    __pstringtext5:
  3858  0000'                    STR_1:
  3859  0000' 3473               	retlw	115	;'s'
  3860  0001' 3469               	retlw	105	;'i'
  3861  0002' 347A               	retlw	122	;'z'
  3862  0003' 3465               	retlw	101	;'e'
  3863  0004' 346F               	retlw	111	;'o'
  3864  0005' 3466               	retlw	102	;'f'
  3865  0006' 3420               	retlw	32	;' '
  3866  0007' 3428               	retlw	40	;'('
  3867  0008' 3461               	retlw	97	;'a'
  3868  0009' 3464               	retlw	100	;'d'
  3869  000A' 3463               	retlw	99	;'c'
  3870  000B' 345F               	retlw	95	;'_'
  3871  000C' 3472               	retlw	114	;'r'
  3872  000D' 3465               	retlw	101	;'e'
  3873  000E' 3473               	retlw	115	;'s'
  3874  000F' 3475               	retlw	117	;'u'
  3875  0010' 346C               	retlw	108	;'l'
  3876  0011' 3474               	retlw	116	;'t'
  3877  0012' 345F               	retlw	95	;'_'
  3878  0013' 3474               	retlw	116	;'t'
  3879  0014' 3429               	retlw	41	;')'
  3880  0015' 3420               	retlw	32	;' '
  3881  0016' 343D               	retlw	61	;'='
  3882  0017' 343D               	retlw	61	;'='
  3883  0018' 3420               	retlw	32	;' '
  3884  0019' 3473               	retlw	115	;'s'
  3885  001A' 3469               	retlw	105	;'i'
  3886  001B' 347A               	retlw	122	;'z'
  3887  001C' 3465               	retlw	101	;'e'
  3888  001D' 346F               	retlw	111	;'o'
  3889  001E' 3466               	retlw	102	;'f'
  3890  001F' 3420               	retlw	32	;' '
  3891  0020' 3428               	retlw	40	;'('
  3892  0021' 3475               	retlw	117	;'u'
  3893  0022' 3469               	retlw	105	;'i'
  3894  0023' 346E               	retlw	110	;'n'
  3895  0024' 3474               	retlw	116	;'t'
  3896  0025' 3431               	retlw	49	;'1'
  3897  0026' 3436               	retlw	54	;'6'
  3898  0027' 345F               	retlw	95	;'_'
  3899  0028' 3474               	retlw	116	;'t'
  3900  0029' 3429               	retlw	41	;')'
  3901  002A' 3400               	retlw	0
  3902                           
  3903                           	psect	stringtext6
  3904  0000'                    __pstringtext6:
  3905  0000'                    STR_7:
  3906  0000' 3463               	retlw	99	;'c'
  3907  0001' 3468               	retlw	104	;'h'
  3908  0002' 3461               	retlw	97	;'a'
  3909  0003' 346E               	retlw	110	;'n'
  3910  0004' 346E               	retlw	110	;'n'
  3911  0005' 3465               	retlw	101	;'e'
  3912  0006' 346C               	retlw	108	;'l'
  3913  0007' 3420               	retlw	32	;' '
  3914  0008' 343D               	retlw	61	;'='
  3915  0009' 343D               	retlw	61	;'='
  3916  000A' 3420               	retlw	32	;' '
  3917  000B' 3454               	retlw	84	;'T'
  3918  000C' 344D               	retlw	77	;'M'
  3919  000D' 345F               	retlw	95	;'_'
  3920  000E' 344B               	retlw	75	;'K'
  3921  000F' 3461               	retlw	97	;'a'
  3922  0010' 3420               	retlw	32	;' '
  3923  0011' 347C               	retlw	124	;'|'
  3924  0012' 347C               	retlw	124	;'|'
  3925  0013' 3420               	retlw	32	;' '
  3926  0014' 3463               	retlw	99	;'c'
  3927  0015' 3468               	retlw	104	;'h'
  3928  0016' 3461               	retlw	97	;'a'
  3929  0017' 346E               	retlw	110	;'n'
  3930  0018' 346E               	retlw	110	;'n'
  3931  0019' 3465               	retlw	101	;'e'
  3932  001A' 346C               	retlw	108	;'l'
  3933  001B' 3420               	retlw	32	;' '
  3934  001C' 343D               	retlw	61	;'='
  3935  001D' 343D               	retlw	61	;'='
  3936  001E' 3420               	retlw	32	;' '
  3937  001F' 3454               	retlw	84	;'T'
  3938  0020' 344D               	retlw	77	;'M'
  3939  0021' 345F               	retlw	95	;'_'
  3940  0022' 3458               	retlw	88	;'X'
  3941  0023' 3400               	retlw	0
  3942                           
  3943                           	psect	stringtext7
  3944  0000'                    __pstringtext7:
  3945  0000'                    STR_19:
  3946  0000' 3441               	retlw	65	;'A'
  3947  0001' 3473               	retlw	115	;'s'
  3948  0002' 3473               	retlw	115	;'s'
  3949  0003' 3465               	retlw	101	;'e'
  3950  0004' 3472               	retlw	114	;'r'
  3951  0005' 3474               	retlw	116	;'t'
  3952  0006' 3469               	retlw	105	;'i'
  3953  0007' 346F               	retlw	111	;'o'
  3954  0008' 346E               	retlw	110	;'n'
  3955  0009' 3420               	retlw	32	;' '
  3956  000A' 3466               	retlw	102	;'f'
  3957  000B' 3461               	retlw	97	;'a'
  3958  000C' 3469               	retlw	105	;'i'
  3959  000D' 346C               	retlw	108	;'l'
  3960  000E' 3465               	retlw	101	;'e'
  3961  000F' 3464               	retlw	100	;'d'
  3962  0010' 343A               	retlw	58	;':'
  3963  0011' 3420               	retlw	32	;' '
  3964  0012' 3425               	retlw	37	;'%'
  3965  0013' 3473               	retlw	115	;'s'
  3966  0014' 3420               	retlw	32	;' '
  3967  0015' 3428               	retlw	40	;'('
  3968  0016' 3425               	retlw	37	;'%'
  3969  0017' 3473               	retlw	115	;'s'
  3970  0018' 343A               	retlw	58	;':'
  3971  0019' 3420               	retlw	32	;' '
  3972  001A' 3425               	retlw	37	;'%'
  3973  001B' 3473               	retlw	115	;'s'
  3974  001C' 343A               	retlw	58	;':'
  3975  001D' 3420               	retlw	32	;' '
  3976  001E' 3425               	retlw	37	;'%'
  3977  001F' 3464               	retlw	100	;'d'
  3978  0020' 3429               	retlw	41	;')'
  3979  0021' 340A               	retlw	10
  3980  0022' 3400               	retlw	0
  3981                           
  3982                           	psect	stringtext8
  3983  0000'                    __pstringtext8:
  3984  0000'                    STR_9:
  3985  0000' 3453               	retlw	83	;'S'
  3986  0001' 3453               	retlw	83	;'S'
  3987  0002' 3450               	retlw	80	;'P'
  3988  0003' 3441               	retlw	65	;'A'
  3989  0004' 345F               	retlw	95	;'_'
  3990  0005' 3467               	retlw	103	;'g'
  3991  0006' 3465               	retlw	101	;'e'
  3992  0007' 3474               	retlw	116	;'t'
  3993  0008' 3454               	retlw	84	;'T'
  3994  0009' 3465               	retlw	101	;'e'
  3995  000A' 346D               	retlw	109	;'m'
  3996  000B' 3470               	retlw	112	;'p'
  3997  000C' 3400               	retlw	0
  3998                           
  3999                           	psect	stringtext9
  4000  0000'                    __pstringtext9:
  4001  0000'                    STR_15:
  4002  0000' 3453               	retlw	83	;'S'
  4003  0001' 3453               	retlw	83	;'S'
  4004  0002' 3450               	retlw	80	;'P'
  4005  0003' 3441               	retlw	65	;'A'
  4006  0004' 345F               	retlw	95	;'_'
  4007  0005' 3467               	retlw	103	;'g'
  4008  0006' 3465               	retlw	101	;'e'
  4009  0007' 3474               	retlw	116	;'t'
  4010  0008' 3450               	retlw	80	;'P'
  4011  0009' 344F               	retlw	79	;'O'
  4012  000A' 3475               	retlw	117	;'u'
  4013  000B' 3474               	retlw	116	;'t'
  4014  000C' 3400               	retlw	0
  4015                           
  4016                           	psect	stringtext10
  4017  0000'                    __pstringtext10:
  4018  0000'                    STR_3:
  4019  0000' 3467               	retlw	103	;'g'
  4020  0001' 3465               	retlw	101	;'e'
  4021  0002' 3474               	retlw	116	;'t'
  4022  0003' 3441               	retlw	65	;'A'
  4023  0004' 3444               	retlw	68	;'D'
  4024  0005' 3443               	retlw	67	;'C'
  4025  0006' 3456               	retlw	86	;'V'
  4026  0007' 3461               	retlw	97	;'a'
  4027  0008' 346C               	retlw	108	;'l'
  4028  0009' 3475               	retlw	117	;'u'
  4029  000A' 3465               	retlw	101	;'e'
  4030  000B' 3400               	retlw	0
  4031                           
  4032                           	psect	stringtext11
  4033  0000'                    __pstringtext11:
  4034  0000'                    STR_2:
  4035  0000' 346D               	retlw	109	;'m'
  4036  0001' 3461               	retlw	97	;'a'
  4037  0002' 3469               	retlw	105	;'i'
  4038  0003' 346E               	retlw	110	;'n'
  4039  0004' 342E               	retlw	46	;'.'
  4040  0005' 3463               	retlw	99	;'c'
  4041  0006' 3400               	retlw	0
  4042                           
  4043                           	psect	stringtext12
  4044  0000'                    __pstringtext12:
  4045  0000'                    
  4046                           	psect	cinit
  4047  0000'                    start_initialization:	
  4048                           ; #config settings
  4049                           
  4050  0000'                    __initialization:
  4051                           
  4052                           ; Initialize objects allocated to BANK2
  4053  0000' 3000'              	movlw	low __pidataBANK2
  4054  0001' 0084               	movwf	4
  4055  0002' 3000'              	movlw	(high __pidataBANK2)| (0+128)
  4056  0003' 0085               	movwf	5
  4057  0004' 3000'              	movlw	low __pdataBANK2
  4058  0005' 0086               	movwf	6
  4059  0006' 3000'              	movlw	high __pdataBANK2
  4060  0007' 0087               	movwf	7
  4061  0008' 3018               	movlw	24
  4062  0009' 3180' 2000' 3180'  	fcall	init_ram
  4063                           
  4064                           ; Clear objects allocated to COMMON
  4065  000C' 0180'              	clrf	__pbssCOMMON& (0+127)
  4066  000D' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
  4067  000E' 0180'              	clrf	(__pbssCOMMON+2)& (0+127)
  4068  000F' 0180'              	clrf	(__pbssCOMMON+3)& (0+127)
  4069  0010' 0180'              	clrf	(__pbssCOMMON+4)& (0+127)
  4070  0011' 0180'              	clrf	(__pbssCOMMON+5)& (0+127)
  4071                           
  4072                           ; Clear objects allocated to BANK1
  4073  0012' 3000'              	movlw	low __pbssBANK1
  4074  0013' 0084               	movwf	4
  4075  0014' 3000'              	movlw	high __pbssBANK1
  4076  0015' 0085               	movwf	5
  4077  0016' 3025               	movlw	37
  4078  0017' 3180' 2000' 3180'  	fcall	clear_ram0
  4079                           
  4080                           ; Clear objects allocated to BANK2
  4081  001A' 3000'              	movlw	low __pbssBANK2
  4082  001B' 0084               	movwf	4
  4083  001C' 3000'              	movlw	high __pbssBANK2
  4084  001D' 0085               	movwf	5
  4085  001E' 3020               	movlw	32
  4086  001F' 3180' 2000'        	fcall	clear_ram0
  4087  0021'                    end_of_initialization:	
  4088                           ;End of C runtime variable initialization code
  4089                           
  4090  0021'                    __end_of__initialization:
  4091  0021' 107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4092  0022' 0020               	movlb	0
  4093  0023' 3180' 2800'        	ljmp	_main	;jump to C main() function
  4094                           
  4095                           	psect	bssCOMMON
  4096  0000'                    __pbssCOMMON:
  4097  0000'                    _EUSART_OverrunErrorHandler:
  4098  0000'                    	ds	2
  4099  0002'                    _EUSART_FramingErrorHandler:
  4100  0002'                    	ds	2
  4101  0004'                    _flags:
  4102  0004'                    	ds	1
  4103  0005'                    _count:
  4104  0005'                    	ds	1
  4105                           
  4106                           	psect	bssBANK1
  4107  0000'                    __pbssBANK1:
  4108  0000'                    _i2c1Status:
  4109  0000'                    	ds	14
  4110  000E'                    _funcs:
  4111  000E'                    	ds	6
  4112  0014'                    _width:
  4113  0014'                    	ds	2
  4114  0016'                    _prec:
  4115  0016'                    	ds	2
  4116  0018'                    _eusartRxLastError:
  4117  0018'                    	ds	2
  4118  001A'                    _INT_InterruptHandler:
  4119  001A'                    	ds	2
  4120  001C'                    _I2C1_Callback:
  4121  001C'                    	ds	2
  4122  001E'                    _kaps:
  4123  001E'                    	ds	7
  4124                           
  4125                           	psect	bssBANK2
  4126  0000'                    __pbssBANK2:
  4127  0000'                    _dbuf:
  4128  0000'                    	ds	32
  4129                           
  4130                           	psect	dataBANK2
  4131  0000'                    __pdataBANK2:
  4132  0000'                    _sppas:
  4133  0000'                    	ds	24
  4134                           
  4135                           	psect	inittext
  4136  0000'                    init_ram:
  4137  0000' 00FE               	movwf	126
  4138  0001'                    initloop:
  4139  0001' 0012               	moviw fsr0++
  4140  0002' 001E               	movwi fsr1++
  4141  0003' 0BFE               	decfsz	126,f
  4142  0004' 2800'              	goto	initloop
  4143  0005' 3400               	retlw	0
  4144                           
  4145                           	psect	clrtext
  4146  0000'                    clear_ram0:	
  4147                           ;	Called with FSR0 containing the base address, and
  4148                           ;	WREG with the size to clear
  4149                           
  4150  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
  4151  0001'                    clrloop0:
  4152  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
  4153  0002' 3101               	addfsr 0,1
  4154  0003' 0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4155  0004' 2800'              	goto	clrloop0	;have we reached the end yet?
  4156  0005' 3400               	retlw	0	;all done for this memory range, return
  4157                           
  4158                           	psect	cstackBANK1
  4159  0000'                    __pcstackBANK1:
  4160  0000'                    ??___fltol:
  4161                           
  4162                           ; 1 bytes @ 0x0
  4163  0000'                    	ds	4
  4164  0004'                    ?_SSPA_getTemp:
  4165  0004'                    ?_SSPA_getPOut:	
  4166                           ; 1 bytes @ 0x4
  4167                           
  4168  0004'                    SSPA_getTemp@band:	
  4169                           ; 1 bytes @ 0x4
  4170                           
  4171  0004'                    SSPA_getPOut@band:	
  4172                           ; 1 bytes @ 0x4
  4173                           
  4174                           
  4175                           ; 1 bytes @ 0x4
  4176  0004'                    	ds	1
  4177  0005'                    ??_SSPA_getTemp:
  4178  0005'                    ??_SSPA_getPOut:	
  4179                           ; 1 bytes @ 0x5
  4180                           
  4181                           
  4182                           ; 1 bytes @ 0x5
  4183  0005'                    	ds	2
  4184  0007'                    SSPA_getPOut@sspa:
  4185  0007'                    SSPA_getTemp@adc_value:	
  4186                           ; 1 bytes @ 0x7
  4187                           
  4188                           
  4189                           ; 2 bytes @ 0x7
  4190  0007'                    	ds	1
  4191  0008'                    SSPA_getPOut@adc_value:
  4192                           
  4193                           ; 2 bytes @ 0x8
  4194  0008'                    	ds	1
  4195  0009'                    SSPA_getTemp@sspa:
  4196                           
  4197                           ; 1 bytes @ 0x9
  4198  0009'                    	ds	1
  4199  000A'                    SSPA_getTemp@channel:
  4200  000A'                    SSPA_getPOut@channel:	
  4201                           ; 1 bytes @ 0xA
  4202                           
  4203                           
  4204                           ; 1 bytes @ 0xA
  4205  000A'                    	ds	1
  4206  000B'                    ?_ProcessMsg:
  4207  000B'                    ProcessMsg@data:	
  4208                           ; 1 bytes @ 0xB
  4209                           
  4210                           
  4211                           ; 1 bytes @ 0xB
  4212  000B'                    	ds	1
  4213  000C'                    ??_ProcessMsg:
  4214                           
  4215                           ; 1 bytes @ 0xC
  4216  000C'                    	ds	1
  4217  000D'                    ProcessMsg@msg_id:
  4218                           
  4219                           ; 1 bytes @ 0xD
  4220  000D'                    	ds	1
  4221  000E'                    ProcessMsg@payload:
  4222                           
  4223                           ; 6 bytes @ 0xE
  4224  000E'                    	ds	6
  4225  0014'                    ?_Parse:
  4226  0014'                    Parse@data:	
  4227                           ; 1 bytes @ 0x14
  4228                           
  4229                           
  4230                           ; 1 bytes @ 0x14
  4231  0014'                    	ds	1
  4232  0015'                    ??_Parse:
  4233                           
  4234                           ; 1 bytes @ 0x15
  4235  0015'                    	ds	2
  4236  0017'                    Parse@parser:
  4237                           
  4238                           ; 1 bytes @ 0x17
  4239  0017'                    	ds	1
  4240  0018'                    main@data:
  4241                           
  4242                           ; 1 bytes @ 0x18
  4243  0018'                    	ds	1
  4244  0019'                    main@parser:
  4245                           
  4246                           ; 12 bytes @ 0x19
  4247  0019'                    	ds	12
  4248                           
  4249                           	psect	cstackCOMMON
  4250  0000'                    __pcstackCOMMON:
  4251  0000'                    ?_ADC_DefaultInterruptHandler:
  4252  0000'                    ??_ADC_DefaultInterruptHandler:	
  4253                           ; 1 bytes @ 0x0
  4254                           
  4255  0000'                    ?_I2C1_Initialize:	
  4256                           ; 1 bytes @ 0x0
  4257                           
  4258  0000'                    ?_I2C1_EVENT_IDLE:	
  4259                           ; 1 bytes @ 0x0
  4260                           
  4261  0000'                    ??_I2C1_EVENT_IDLE:	
  4262                           ; 1 bytes @ 0x0
  4263                           
  4264  0000'                    ?_I2C1_EVENT_SEND_RD_ADDR:	
  4265                           ; 1 bytes @ 0x0
  4266                           
  4267  0000'                    ??_I2C1_EVENT_SEND_RD_ADDR:	
  4268                           ; 1 bytes @ 0x0
  4269                           
  4270  0000'                    ?_I2C1_EVENT_SEND_WR_ADDR:	
  4271                           ; 1 bytes @ 0x0
  4272                           
  4273  0000'                    ?_I2C1_EVENT_TX:	
  4274                           ; 1 bytes @ 0x0
  4275                           
  4276  0000'                    ?_I2C1_EVENT_RX:	
  4277                           ; 1 bytes @ 0x0
  4278                           
  4279  0000'                    ??_I2C1_EVENT_RX:	
  4280                           ; 1 bytes @ 0x0
  4281                           
  4282  0000'                    ?_I2C1_EVENT_NACK:	
  4283                           ; 1 bytes @ 0x0
  4284                           
  4285  0000'                    ??_I2C1_EVENT_NACK:	
  4286                           ; 1 bytes @ 0x0
  4287                           
  4288  0000'                    ?_I2C1_EVENT_ERROR:	
  4289                           ; 1 bytes @ 0x0
  4290                           
  4291  0000'                    ??_I2C1_EVENT_ERROR:	
  4292                           ; 1 bytes @ 0x0
  4293                           
  4294  0000'                    ?_I2C1_EVENT_STOP:	
  4295                           ; 1 bytes @ 0x0
  4296                           
  4297  0000'                    ??_I2C1_EVENT_STOP:	
  4298                           ; 1 bytes @ 0x0
  4299                           
  4300  0000'                    ?_I2C1_EVENT_RESET:	
  4301                           ; 1 bytes @ 0x0
  4302                           
  4303  0000'                    ??_I2C1_EVENT_RESET:	
  4304                           ; 1 bytes @ 0x0
  4305                           
  4306  0000'                    ?_I2C1_InterruptsEnable:	
  4307                           ; 1 bytes @ 0x0
  4308                           
  4309  0000'                    ?_I2C1_DefaultCallback:	
  4310                           ; 1 bytes @ 0x0
  4311                           
  4312  0000'                    ??_I2C1_DefaultCallback:	
  4313                           ; 1 bytes @ 0x0
  4314                           
  4315  0000'                    ?_I2C1_EventHandler:	
  4316                           ; 1 bytes @ 0x0
  4317                           
  4318  0000'                    ?_I2C1_ErrorEventHandler:	
  4319                           ; 1 bytes @ 0x0
  4320                           
  4321  0000'                    ?_I2C1_InterruptClear:	
  4322                           ; 1 bytes @ 0x0
  4323                           
  4324  0000'                    ??_I2C1_InterruptClear:	
  4325                           ; 1 bytes @ 0x0
  4326                           
  4327  0000'                    ?_I2C1_ErrorInterruptClear:	
  4328                           ; 1 bytes @ 0x0
  4329                           
  4330  0000'                    ??_I2C1_ErrorInterruptClear:	
  4331                           ; 1 bytes @ 0x0
  4332                           
  4333  0000'                    ?_I2C1_StatusFlagsClear:	
  4334                           ; 1 bytes @ 0x0
  4335                           
  4336  0000'                    ??_I2C1_StatusFlagsClear:	
  4337                           ; 1 bytes @ 0x0
  4338                           
  4339  0000'                    ?_I2C1_IsAddr:	
  4340                           ; 1 bytes @ 0x0
  4341                           
  4342  0000'                    ??_I2C1_IsAddr:	
  4343                           ; 1 bytes @ 0x0
  4344                           
  4345  0000'                    ?_I2C1_IsNack:	
  4346                           ; 1 bytes @ 0x0
  4347                           
  4348  0000'                    ??_I2C1_IsNack:	
  4349                           ; 1 bytes @ 0x0
  4350                           
  4351  0000'                    ?_I2C1_IsData:	
  4352                           ; 1 bytes @ 0x0
  4353                           
  4354  0000'                    ??_I2C1_IsData:	
  4355                           ; 1 bytes @ 0x0
  4356                           
  4357  0000'                    ?_I2C1_DataTransmit:	
  4358                           ; 1 bytes @ 0x0
  4359                           
  4360  0000'                    ??_I2C1_DataTransmit:	
  4361                           ; 1 bytes @ 0x0
  4362                           
  4363  0000'                    ?_I2C1_RestartEnable:	
  4364                           ; 1 bytes @ 0x0
  4365                           
  4366  0000'                    ??_I2C1_RestartEnable:	
  4367                           ; 1 bytes @ 0x0
  4368                           
  4369  0000'                    ?_I2C1_IsRxBufFull:	
  4370                           ; 1 bytes @ 0x0
  4371                           
  4372  0000'                    ??_I2C1_IsRxBufFull:	
  4373                           ; 1 bytes @ 0x0
  4374                           
  4375  0000'                    ?_I2C1_DataReceive:	
  4376                           ; 1 bytes @ 0x0
  4377                           
  4378  0000'                    ??_I2C1_DataReceive:	
  4379                           ; 1 bytes @ 0x0
  4380                           
  4381  0000'                    ?_I2C1_AckSend:	
  4382                           ; 1 bytes @ 0x0
  4383                           
  4384  0000'                    ??_I2C1_AckSend:	
  4385                           ; 1 bytes @ 0x0
  4386                           
  4387  0000'                    ?_I2C1_RestartDisable:	
  4388                           ; 1 bytes @ 0x0
  4389                           
  4390  0000'                    ??_I2C1_RestartDisable:	
  4391                           ; 1 bytes @ 0x0
  4392                           
  4393  0000'                    ?_I2C1_NackSend:	
  4394                           ; 1 bytes @ 0x0
  4395                           
  4396  0000'                    ??_I2C1_NackSend:	
  4397                           ; 1 bytes @ 0x0
  4398                           
  4399  0000'                    ?_I2C1_ReceiveEnable:	
  4400                           ; 1 bytes @ 0x0
  4401                           
  4402  0000'                    ??_I2C1_ReceiveEnable:	
  4403                           ; 1 bytes @ 0x0
  4404                           
  4405  0000'                    ?_I2C1_StopSend:	
  4406                           ; 1 bytes @ 0x0
  4407                           
  4408  0000'                    ??_I2C1_StopSend:	
  4409                           ; 1 bytes @ 0x0
  4410                           
  4411  0000'                    ?_I2C1_BusReset:	
  4412                           ; 1 bytes @ 0x0
  4413                           
  4414  0000'                    ??_I2C1_BusReset:	
  4415                           ; 1 bytes @ 0x0
  4416                           
  4417  0000'                    ?_EUSART_Initialize:	
  4418                           ; 1 bytes @ 0x0
  4419                           
  4420  0000'                    ?_EUSART_Read:	
  4421                           ; 1 bytes @ 0x0
  4422                           
  4423  0000'                    ?_EUSART_IsRxReady:	
  4424                           ; 1 bytes @ 0x0
  4425                           
  4426  0000'                    ?_EUSART_DefaultFramingErrorCallback:	
  4427                           ; 1 bytes @ 0x0
  4428                           
  4429  0000'                    ?_EUSART_DefaultOverrunErrorCallback:	
  4430                           ; 1 bytes @ 0x0
  4431                           
  4432  0000'                    ?_abort:	
  4433                           ; 1 bytes @ 0x0
  4434                           
  4435  0000'                    ?___funcs_on_exit:	
  4436                           ; 1 bytes @ 0x0
  4437                           
  4438  0000'                    ?_putch:	
  4439                           ; 1 bytes @ 0x0
  4440                           
  4441  0000'                    ?_ADC_Initialize:	
  4442                           ; 1 bytes @ 0x0
  4443                           
  4444  0000'                    ?_ADC_SelectChannel:	
  4445                           ; 1 bytes @ 0x0
  4446                           
  4447  0000'                    ?_ADC_StartConversion:	
  4448                           ; 1 bytes @ 0x0
  4449                           
  4450  0000'                    ?_ADC_IsConversionDone:	
  4451                           ; 1 bytes @ 0x0
  4452                           
  4453  0000'                    ?_ADC_ISR:	
  4454                           ; 1 bytes @ 0x0
  4455                           
  4456  0000'                    ??_ADC_ISR:	
  4457                           ; 1 bytes @ 0x0
  4458                           
  4459  0000'                    ?_I2C1_ISR:	
  4460                           ; 1 bytes @ 0x0
  4461                           
  4462  0000'                    ?_I2C1_ERROR_ISR:	
  4463                           ; 1 bytes @ 0x0
  4464                           
  4465  0000'                    ?_I2C1_Close:	
  4466                           ; 1 bytes @ 0x0
  4467                           
  4468  0000'                    ??_I2C1_Close:	
  4469                           ; 1 bytes @ 0x0
  4470                           
  4471  0000'                    ?_CLOCK_Initialize:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0000'                    ?_PIN_MANAGER_Initialize:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0000'                    ?_INTERRUPT_Initialize:	
  4478                           ; 1 bytes @ 0x0
  4479                           
  4480  0000'                    ?_INTERRUPT_InterruptManager:	
  4481                           ; 1 bytes @ 0x0
  4482                           
  4483  0000'                    ?_SYSTEM_Initialize:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0000'                    ?_KAPS_getStatus:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0000'                    ?_KAPS_getIndex:	
  4490                           ; 1 bytes @ 0x0
  4491                           
  4492  0000'                    ?_KAPS_getPos:	
  4493                           ; 1 bytes @ 0x0
  4494                           
  4495  0000'                    ?_SendNack:	
  4496                           ; 1 bytes @ 0x0
  4497                           
  4498  0000'                    ?_main:	
  4499                           ; 1 bytes @ 0x0
  4500                           
  4501  0000'                    I2C1_EVENT_NACK@retEventState:	
  4502                           ; 2 bytes @ 0x0
  4503                           
  4504  0000'                    I2C1_EVENT_ERROR@retEventState:	
  4505                           ; 1 bytes @ 0x0
  4506                           
  4507  0000'                    I2C1_DataTransmit@data:	
  4508                           ; 1 bytes @ 0x0
  4509                           
  4510  0000'                    putch@c:	
  4511                           ; 1 bytes @ 0x0
  4512                           
  4513                           
  4514                           ; 1 bytes @ 0x0
  4515  0000'                    	ds	1
  4516  0001'                    ??_I2C1_EVENT_SEND_WR_ADDR:
  4517  0001'                    ??_I2C1_EVENT_TX:	
  4518                           ; 1 bytes @ 0x1
  4519                           
  4520  0001'                    I2C1_EVENT_RX@retEventState:	
  4521                           ; 1 bytes @ 0x1
  4522                           
  4523                           
  4524                           ; 1 bytes @ 0x1
  4525  0001'                    	ds	2
  4526  0003'                    I2C1_EVENT_TX@retEventState:
  4527                           
  4528                           ; 1 bytes @ 0x3
  4529  0003'                    	ds	1
  4530  0004'                    ??_I2C1_EventHandler:
  4531  0004'                    ??_I2C1_ErrorEventHandler:	
  4532                           ; 1 bytes @ 0x4
  4533                           
  4534                           
  4535                           ; 1 bytes @ 0x4
  4536  0004'                    	ds	2
  4537  0006'                    ??_I2C1_ISR:
  4538  0006'                    ??_I2C1_ERROR_ISR:	
  4539                           ; 1 bytes @ 0x6
  4540                           
  4541  0006'                    ??_INTERRUPT_InterruptManager:	
  4542                           ; 1 bytes @ 0x6
  4543                           
  4544                           
  4545                           	psect	cstackBANK0
  4546  0000'                    __pcstackBANK0:	
  4547                           ; 1 bytes @ 0x6
  4548                           
  4549  0000'                    ?_ADC_SetInterruptHandler:
  4550  0000'                    ?_I2C1_CallbackRegister:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0000'                    ??_I2C1_InterruptsEnable:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0000'                    ?_INT_SetInterruptHandler:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0000'                    ??_EUSART_Read:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  0000'                    ?_EUSART_Write:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  0000'                    ??_EUSART_IsRxReady:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  0000'                    ?_EUSART_FramingErrorCallbackRegister:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0000'                    ?_EUSART_OverrunErrorCallbackRegister:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0000'                    ??_EUSART_DefaultFramingErrorCallback:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0000'                    ??_EUSART_DefaultOverrunErrorCallback:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0000'                    ??___funcs_on_exit:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0000'                    ?__Exit:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0000'                    ??_putch:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0000'                    ??_ADC_SelectChannel:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0000'                    ??_ADC_StartConversion:	
  4593                           ; 1 bytes @ 0x0
  4594                           
  4595  0000'                    ??_ADC_IsConversionDone:	
  4596                           ; 1 bytes @ 0x0
  4597                           
  4598  0000'                    ??_CLOCK_Initialize:	
  4599                           ; 1 bytes @ 0x0
  4600                           
  4601  0000'                    ??_PIN_MANAGER_Initialize:	
  4602                           ; 1 bytes @ 0x0
  4603                           
  4604  0000'                    ?_unpackLong:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  0000'                    ?_unpackWord:	
  4608                           ; 1 bytes @ 0x0
  4609                           
  4610  0000'                    ?_SSPA_setMute:	
  4611                           ; 1 bytes @ 0x0
  4612                           
  4613  0000'                    ?_KAPS_GoToIdx:	
  4614                           ; 1 bytes @ 0x0
  4615                           
  4616  0000'                    ??_KAPS_getStatus:	
  4617                           ; 1 bytes @ 0x0
  4618                           
  4619  0000'                    ??_KAPS_getIndex:	
  4620                           ; 1 bytes @ 0x0
  4621                           
  4622  0000'                    ??_KAPS_getPos:	
  4623                           ; 1 bytes @ 0x0
  4624                           
  4625  0000'                    ?__Umul8_16:	
  4626                           ; 1 bytes @ 0x0
  4627                           
  4628  0000'                    ?_fputc:	
  4629                           ; 2 bytes @ 0x0
  4630                           
  4631  0000'                    ?_ADC_GetConversionResult:	
  4632                           ; 2 bytes @ 0x0
  4633                           
  4634  0000'                    ?___awdiv:	
  4635                           ; 2 bytes @ 0x0
  4636                           
  4637  0000'                    ?___awmod:	
  4638                           ; 2 bytes @ 0x0
  4639                           
  4640  0000'                    ?_packLong:	
  4641                           ; 2 bytes @ 0x0
  4642                           
  4643  0000'                    ?___fladd:	
  4644                           ; 4 bytes @ 0x0
  4645                           
  4646  0000'                    ?___xxtofl:	
  4647                           ; 4 bytes @ 0x0
  4648                           
  4649  0000'                    EUSART_Write@txData:	
  4650                           ; 4 bytes @ 0x0
  4651                           
  4652  0000'                    SSPA_setMute@band:	
  4653                           ; 1 bytes @ 0x0
  4654                           
  4655  0000'                    KAPS_GoToIdx@idx:	
  4656                           ; 1 bytes @ 0x0
  4657                           
  4658  0000'                    KAPS_getStatus@kaps:	
  4659                           ; 1 bytes @ 0x0
  4660                           
  4661  0000'                    KAPS_getIndex@kaps:	
  4662                           ; 1 bytes @ 0x0
  4663                           
  4664  0000'                    KAPS_getPos@kaps:	
  4665                           ; 1 bytes @ 0x0
  4666                           
  4667  0000'                    __Umul8_16@multiplicand:	
  4668                           ; 1 bytes @ 0x0
  4669                           
  4670  0000'                    ADC_SetInterruptHandler@InterruptHandler:	
  4671                           ; 1 bytes @ 0x0
  4672                           
  4673  0000'                    I2C1_CallbackRegister@callbackHandler:	
  4674                           ; 2 bytes @ 0x0
  4675                           
  4676  0000'                    INT_SetInterruptHandler@InterruptHandler:	
  4677                           ; 2 bytes @ 0x0
  4678                           
  4679  0000'                    EUSART_FramingErrorCallbackRegister@callbackHandler:	
  4680                           ; 2 bytes @ 0x0
  4681                           
  4682  0000'                    EUSART_OverrunErrorCallbackRegister@callbackHandler:	
  4683                           ; 2 bytes @ 0x0
  4684                           
  4685  0000'                    unpackWord@value:	
  4686                           ; 2 bytes @ 0x0
  4687                           
  4688  0000'                    ___awdiv@divisor:	
  4689                           ; 2 bytes @ 0x0
  4690                           
  4691  0000'                    ___awmod@divisor:	
  4692                           ; 2 bytes @ 0x0
  4693                           
  4694  0000'                    __Exit@ec:	
  4695                           ; 2 bytes @ 0x0
  4696                           
  4697  0000'                    fputc@c:	
  4698                           ; 2 bytes @ 0x0
  4699                           
  4700  0000'                    unpackLong@value:	
  4701                           ; 2 bytes @ 0x0
  4702                           
  4703  0000'                    ___fladd@b:	
  4704                           ; 4 bytes @ 0x0
  4705                           
  4706  0000'                    ___xxtofl@val:	
  4707                           ; 4 bytes @ 0x0
  4708                           
  4709                           
  4710                           ; 4 bytes @ 0x0
  4711  0000'                    	ds	1
  4712  0001'                    ??_EUSART_Write:
  4713  0001'                    ??_KAPS_GoToIdx:	
  4714                           ; 1 bytes @ 0x1
  4715                           
  4716  0001'                    ?_SendMsg:	
  4717                           ; 1 bytes @ 0x1
  4718                           
  4719  0001'                    ADC_SelectChannel@channel:	
  4720                           ; 1 bytes @ 0x1
  4721                           
  4722  0001'                    SSPA_setMute@mute:	
  4723                           ; 1 bytes @ 0x1
  4724                           
  4725  0001'                    KAPS_GoToIdx@kaps:	
  4726                           ; 1 bytes @ 0x1
  4727                           
  4728  0001'                    SendMsg@data:	
  4729                           ; 1 bytes @ 0x1
  4730                           
  4731                           
  4732                           ; 1 bytes @ 0x1
  4733  0001'                    	ds	1
  4734  0002'                    ??_ADC_SetInterruptHandler:
  4735  0002'                    ??_I2C1_Initialize:	
  4736                           ; 1 bytes @ 0x2
  4737                           
  4738  0002'                    ??_I2C1_CallbackRegister:	
  4739                           ; 1 bytes @ 0x2
  4740                           
  4741  0002'                    ??_INT_SetInterruptHandler:	
  4742                           ; 1 bytes @ 0x2
  4743                           
  4744  0002'                    ??_EUSART_Initialize:	
  4745                           ; 1 bytes @ 0x2
  4746                           
  4747  0002'                    ??_EUSART_FramingErrorCallbackRegister:	
  4748                           ; 1 bytes @ 0x2
  4749                           
  4750  0002'                    ??_EUSART_OverrunErrorCallbackRegister:	
  4751                           ; 1 bytes @ 0x2
  4752                           
  4753  0002'                    ??__Umul8_16:	
  4754                           ; 1 bytes @ 0x2
  4755                           
  4756  0002'                    ?_exit:	
  4757                           ; 1 bytes @ 0x2
  4758                           
  4759  0002'                    ??__Exit:	
  4760                           ; 1 bytes @ 0x2
  4761                           
  4762  0002'                    ??_ADC_Initialize:	
  4763                           ; 1 bytes @ 0x2
  4764                           
  4765  0002'                    ??_ADC_GetConversionResult:	
  4766                           ; 1 bytes @ 0x2
  4767                           
  4768  0002'                    ??_INTERRUPT_Initialize:	
  4769                           ; 1 bytes @ 0x2
  4770                           
  4771  0002'                    ??_SYSTEM_Initialize:	
  4772                           ; 1 bytes @ 0x2
  4773                           
  4774  0002'                    ??_SSPA_setMute:	
  4775                           ; 1 bytes @ 0x2
  4776                           
  4777  0002'                    unpackWord@data:	
  4778                           ; 1 bytes @ 0x2
  4779                           
  4780  0002'                    SSPA_setMute@sspa:	
  4781                           ; 1 bytes @ 0x2
  4782                           
  4783  0002'                    SendMsg@data_len:	
  4784                           ; 1 bytes @ 0x2
  4785                           
  4786  0002'                    ___awdiv@dividend:	
  4787                           ; 1 bytes @ 0x2
  4788                           
  4789  0002'                    ___awmod@dividend:	
  4790                           ; 2 bytes @ 0x2
  4791                           
  4792  0002'                    exit@code:	
  4793                           ; 2 bytes @ 0x2
  4794                           
  4795  0002'                    fputc@fp:	
  4796                           ; 2 bytes @ 0x2
  4797                           
  4798                           
  4799                           ; 2 bytes @ 0x2
  4800  0002'                    	ds	1
  4801  0003'                    ??_unpackWord:
  4802  0003'                    ??_SendMsg:	
  4803                           ; 1 bytes @ 0x3
  4804                           
  4805                           
  4806                           ; 1 bytes @ 0x3
  4807  0003'                    	ds	1
  4808  0004'                    ??_abort:
  4809  0004'                    ??_exit:	
  4810                           ; 1 bytes @ 0x4
  4811                           
  4812  0004'                    ??_fputc:	
  4813                           ; 1 bytes @ 0x4
  4814                           
  4815  0004'                    ??_packLong:	
  4816                           ; 1 bytes @ 0x4
  4817                           
  4818  0004'                    ??___awdiv:	
  4819                           ; 1 bytes @ 0x4
  4820                           
  4821  0004'                    ??___awmod:	
  4822                           ; 1 bytes @ 0x4
  4823                           
  4824  0004'                    ??___xxtofl:	
  4825                           ; 1 bytes @ 0x4
  4826                           
  4827  0004'                    unpackLong@data:	
  4828                           ; 1 bytes @ 0x4
  4829                           
  4830  0004'                    SendMsg@sum:	
  4831                           ; 1 bytes @ 0x4
  4832                           
  4833  0004'                    __Umul8_16@product:	
  4834                           ; 1 bytes @ 0x4
  4835                           
  4836  0004'                    ___fladd@a:	
  4837                           ; 2 bytes @ 0x4
  4838                           
  4839                           
  4840                           ; 4 bytes @ 0x4
  4841  0004'                    	ds	1
  4842  0005'                    ??_unpackLong:
  4843  0005'                    SendMsg@msg_id:	
  4844                           ; 1 bytes @ 0x5
  4845                           
  4846  0005'                    ___awdiv@counter:	
  4847                           ; 1 bytes @ 0x5
  4848                           
  4849  0005'                    ___awmod@counter:	
  4850                           ; 1 bytes @ 0x5
  4851                           
  4852                           
  4853                           ; 1 bytes @ 0x5
  4854  0005'                    	ds	1
  4855  0006'                    ??_SendNack:
  4856  0006'                    SendNack@error:	
  4857                           ; 1 bytes @ 0x6
  4858                           
  4859  0006'                    ___awdiv@sign:	
  4860                           ; 1 bytes @ 0x6
  4861                           
  4862  0006'                    ___awmod@sign:	
  4863                           ; 1 bytes @ 0x6
  4864                           
  4865  0006'                    __Umul8_16@word_mpld:	
  4866                           ; 1 bytes @ 0x6
  4867                           
  4868                           
  4869                           ; 2 bytes @ 0x6
  4870  0006'                    	ds	1
  4871  0007'                    ?_abs:
  4872  0007'                    ___awdiv@quotient:	
  4873                           ; 2 bytes @ 0x7
  4874                           
  4875  0007'                    abs@a:	
  4876                           ; 2 bytes @ 0x7
  4877                           
  4878                           
  4879                           ; 2 bytes @ 0x7
  4880  0007'                    	ds	1
  4881  0008'                    ??___fladd:
  4882  0008'                    __Umul8_16@multiplier:	
  4883                           ; 1 bytes @ 0x8
  4884                           
  4885  0008'                    ___xxtofl@sign:	
  4886                           ; 1 bytes @ 0x8
  4887                           
  4888  0008'                    packLong@result:	
  4889                           ; 1 bytes @ 0x8
  4890                           
  4891                           
  4892                           ; 4 bytes @ 0x8
  4893  0008'                    	ds	1
  4894  0009'                    ??_abs:
  4895  0009'                    ___xxtofl@exp:	
  4896                           ; 1 bytes @ 0x9
  4897                           
  4898                           
  4899                           ; 1 bytes @ 0x9
  4900  0009'                    	ds	1
  4901  000A'                    ___xxtofl@arg:
  4902                           
  4903                           ; 4 bytes @ 0xA
  4904  000A'                    	ds	1
  4905  000B'                    ?_vfpfcnvrt:
  4906  000B'                    vfpfcnvrt@fp:	
  4907                           ; 1 bytes @ 0xB
  4908                           
  4909                           
  4910                           ; 2 bytes @ 0xB
  4911  000B'                    	ds	1
  4912  000C'                    packLong@data:
  4913                           
  4914                           ; 1 bytes @ 0xC
  4915  000C'                    	ds	1
  4916  000D'                    ?_KAPS_setAbsPos:
  4917  000D'                    ?_KAPS_setRelPos:	
  4918                           ; 1 bytes @ 0xD
  4919                           
  4920  000D'                    ?_KAPS_StorePos:	
  4921                           ; 1 bytes @ 0xD
  4922                           
  4923  000D'                    KAPS_StorePos@idx:	
  4924                           ; 1 bytes @ 0xD
  4925                           
  4926  000D'                    vfpfcnvrt@fmt:	
  4927                           ; 1 bytes @ 0xD
  4928                           
  4929  000D'                    KAPS_setAbsPos@pos:	
  4930                           ; 1 bytes @ 0xD
  4931                           
  4932  000D'                    KAPS_setRelPos@offset:	
  4933                           ; 4 bytes @ 0xD
  4934                           
  4935                           
  4936                           ; 4 bytes @ 0xD
  4937  000D'                    	ds	1
  4938  000E'                    ?___flmul:
  4939  000E'                    vfpfcnvrt@ap:	
  4940                           ; 4 bytes @ 0xE
  4941                           
  4942  000E'                    KAPS_StorePos@pos:	
  4943                           ; 1 bytes @ 0xE
  4944                           
  4945  000E'                    ___flmul@b:	
  4946                           ; 4 bytes @ 0xE
  4947                           
  4948                           
  4949                           ; 4 bytes @ 0xE
  4950  000E'                    	ds	1
  4951  000F'                    ??_vfpfcnvrt:
  4952                           
  4953                           ; 1 bytes @ 0xF
  4954  000F'                    	ds	1
  4955  0010'                    ___fladd@signs:
  4956                           
  4957                           ; 1 bytes @ 0x10
  4958  0010'                    	ds	1
  4959  0011'                    ??_KAPS_setAbsPos:
  4960  0011'                    ??_KAPS_setRelPos:	
  4961                           ; 1 bytes @ 0x11
  4962                           
  4963  0011'                    KAPS_setAbsPos@kaps:	
  4964                           ; 1 bytes @ 0x11
  4965                           
  4966  0011'                    KAPS_setRelPos@kaps:	
  4967                           ; 1 bytes @ 0x11
  4968                           
  4969  0011'                    ___fladd@aexp:	
  4970                           ; 1 bytes @ 0x11
  4971                           
  4972                           
  4973                           ; 1 bytes @ 0x11
  4974  0011'                    	ds	1
  4975  0012'                    ??_KAPS_StorePos:
  4976  0012'                    KAPS_StorePos@kaps:	
  4977                           ; 1 bytes @ 0x12
  4978                           
  4979  0012'                    ___fladd@bexp:	
  4980                           ; 1 bytes @ 0x12
  4981                           
  4982  0012'                    ___flmul@a:	
  4983                           ; 1 bytes @ 0x12
  4984                           
  4985                           
  4986                           ; 4 bytes @ 0x12
  4987  0012'                    	ds	1
  4988  0013'                    ___fladd@grs:
  4989  0013'                    vfpfcnvrt@cp_2048:	
  4990                           ; 1 bytes @ 0x13
  4991                           
  4992                           
  4993                           ; 2 bytes @ 0x13
  4994  0013'                    	ds	2
  4995  0015'                    vfpfcnvrt@cp:
  4996                           
  4997                           ; 2 bytes @ 0x15
  4998  0015'                    	ds	1
  4999  0016'                    ??___flmul:
  5000                           
  5001                           ; 1 bytes @ 0x16
  5002  0016'                    	ds	1
  5003  0017'                    vfpfcnvrt@done:
  5004                           
  5005                           ; 1 bytes @ 0x17
  5006  0017'                    	ds	1
  5007  0018'                    vfpfcnvrt@convarg:
  5008                           
  5009                           ; 4 bytes @ 0x18
  5010  0018'                    	ds	3
  5011  001B'                    ___flmul@sign:
  5012                           
  5013                           ; 1 bytes @ 0x1B
  5014  001B'                    	ds	1
  5015  001C'                    ___flmul@aexp:
  5016  001C'                    vfpfcnvrt@c:	
  5017                           ; 1 bytes @ 0x1C
  5018                           
  5019                           
  5020                           ; 1 bytes @ 0x1C
  5021  001C'                    	ds	1
  5022  001D'                    ?_vfprintf:
  5023  001D'                    ___flmul@bexp:	
  5024                           ; 2 bytes @ 0x1D
  5025                           
  5026  001D'                    vfprintf@fp:	
  5027                           ; 1 bytes @ 0x1D
  5028                           
  5029                           
  5030                           ; 2 bytes @ 0x1D
  5031  001D'                    	ds	1
  5032  001E'                    ___flmul@grs:
  5033                           
  5034                           ; 4 bytes @ 0x1E
  5035  001E'                    	ds	1
  5036  001F'                    vfprintf@fmt:
  5037                           
  5038                           ; 2 bytes @ 0x1F
  5039  001F'                    	ds	2
  5040  0021'                    vfprintf@ap:
  5041                           
  5042                           ; 1 bytes @ 0x21
  5043  0021'                    	ds	1
  5044  0022'                    ??_vfprintf:
  5045  0022'                    ___flmul@prod:	
  5046                           ; 1 bytes @ 0x22
  5047                           
  5048                           
  5049                           ; 4 bytes @ 0x22
  5050  0022'                    	ds	1
  5051  0023'                    vfprintf@cfmt:
  5052                           
  5053                           ; 2 bytes @ 0x23
  5054  0023'                    	ds	2
  5055  0025'                    ?_printf:
  5056  0025'                    printf@fmt:	
  5057                           ; 2 bytes @ 0x25
  5058                           
  5059                           
  5060                           ; 2 bytes @ 0x25
  5061  0025'                    	ds	1
  5062  0026'                    ___flmul@temp:
  5063                           
  5064                           ; 2 bytes @ 0x26
  5065  0026'                    	ds	2
  5066  0028'                    ?___flsub:
  5067  0028'                    ___flsub@a:	
  5068                           ; 4 bytes @ 0x28
  5069                           
  5070                           
  5071                           ; 4 bytes @ 0x28
  5072  0028'                    	ds	4
  5073  002C'                    ___flsub@b:
  5074                           
  5075                           ; 4 bytes @ 0x2C
  5076  002C'                    	ds	3
  5077  002F'                    ??_printf:
  5078  002F'                    printf@ap:	
  5079                           ; 1 bytes @ 0x2F
  5080                           
  5081                           
  5082                           ; 1 bytes @ 0x2F
  5083  002F'                    	ds	1
  5084  0030'                    ?___assert_fail:
  5085  0030'                    ??___flsub:	
  5086                           ; 1 bytes @ 0x30
  5087                           
  5088  0030'                    ?___fldiv:	
  5089                           ; 1 bytes @ 0x30
  5090                           
  5091  0030'                    ___assert_fail@expr:	
  5092                           ; 4 bytes @ 0x30
  5093                           
  5094  0030'                    ___fldiv@a:	
  5095                           ; 2 bytes @ 0x30
  5096                           
  5097                           
  5098                           ; 4 bytes @ 0x30
  5099  0030'                    	ds	2
  5100  0032'                    ___assert_fail@file:
  5101                           
  5102                           ; 2 bytes @ 0x32
  5103  0032'                    	ds	2
  5104  0034'                    ___assert_fail@line:
  5105  0034'                    ___fldiv@b:	
  5106                           ; 2 bytes @ 0x34
  5107                           
  5108                           
  5109                           ; 4 bytes @ 0x34
  5110  0034'                    	ds	2
  5111  0036'                    ___assert_fail@func:
  5112                           
  5113                           ; 2 bytes @ 0x36
  5114  0036'                    	ds	2
  5115  0038'                    ??___assert_fail:
  5116  0038'                    ??___fldiv:	
  5117                           ; 1 bytes @ 0x38
  5118                           
  5119  0038'                    ?_getADCValue:	
  5120                           ; 1 bytes @ 0x38
  5121                           
  5122                           
  5123                           ; 2 bytes @ 0x38
  5124  0038'                    	ds	2
  5125  003A'                    ??_getADCValue:
  5126                           
  5127                           ; 1 bytes @ 0x3A
  5128  003A'                    	ds	2
  5129  003C'                    getADCValue@channel:
  5130                           
  5131                           ; 1 bytes @ 0x3C
  5132  003C'                    	ds	1
  5133  003D'                    getADCValue@avg:
  5134  003D'                    ___fldiv@rem:	
  5135                           ; 2 bytes @ 0x3D
  5136                           
  5137                           
  5138                           ; 4 bytes @ 0x3D
  5139  003D'                    	ds	2
  5140  003F'                    getADCValue@i:
  5141                           
  5142                           ; 1 bytes @ 0x3F
  5143  003F'                    	ds	2
  5144  0041'                    ___fldiv@sign:
  5145                           
  5146                           ; 1 bytes @ 0x41
  5147  0041'                    	ds	1
  5148  0042'                    ___fldiv@new_exp:
  5149                           
  5150                           ; 2 bytes @ 0x42
  5151  0042'                    	ds	2
  5152  0044'                    ___fldiv@grs:
  5153                           
  5154                           ; 4 bytes @ 0x44
  5155  0044'                    	ds	4
  5156  0048'                    ___fldiv@bexp:
  5157                           
  5158                           ; 1 bytes @ 0x48
  5159  0048'                    	ds	1
  5160  0049'                    ___fldiv@aexp:
  5161                           
  5162                           ; 1 bytes @ 0x49
  5163  0049'                    	ds	1
  5164  004A'                    ?___fltol:
  5165  004A'                    ___fltol@f1:	
  5166                           ; 4 bytes @ 0x4A
  5167                           
  5168                           
  5169                           ; 4 bytes @ 0x4A
  5170  004A'                    	ds	4
  5171  004E'                    ___fltol@sign1:
  5172                           
  5173                           ; 1 bytes @ 0x4E
  5174  004E'                    	ds	1
  5175  004F'                    ___fltol@exp1:
  5176                           
  5177                           ; 1 bytes @ 0x4F
  5178  004F'                    	ds	1
  5179  0050'                    ??_main:
  5180                           
  5181                           	psect	maintext
  5182  0000'                    __pmaintext:	
  5183                           ; 1 bytes @ 0x50
  5184 ;;
  5185 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  5186 ;;
  5187 ;; *************** function _main *****************
  5188 ;; Defined at:
  5189 ;;		line 608 in file "main.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;		None
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  parser         12   25[BANK1 ] struct .
  5194 ;;  data            1   24[BANK1 ] unsigned char 
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  2  795[None  ] int 
  5197 ;; Registers used:
  5198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : B1F/0
  5201 ;;		On exit  : 1C/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5204 ;;      Params:         0       0       0       0       0       0       0       0
  5205 ;;      Locals:         0       0      13       0       0       0       0       0
  5206 ;;      Temps:          0       0       0       0       0       0       0       0
  5207 ;;      Totals:         0       0      13       0       0       0       0       0
  5208 ;;Total ram usage:       13 bytes
  5209 ;; Hardware stack levels required when called: 17
  5210 ;; This function calls:
  5211 ;;		_EUSART_IsRxReady
  5212 ;;		_EUSART_Read
  5213 ;;		_Parse
  5214 ;;		_SYSTEM_Initialize
  5215 ;; This function is called by:
  5216 ;;		Startup code after reset
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220  0000'                    _main:	
  5221                           ;psect for function _main
  5222                           
  5223                           
  5224                           ;main.c: 610:     Parser parser;;main.c: 612:     parser.m_State = IDLE;
  5225                           
  5226                           ;incstack = 0
  5227 ;; hardware stack exceeded
  5228                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5229  0000' 0021               	movlb	1	; select bank1
  5230  0001' 0180'              	clrf	main@parser^(0+128)
  5231                           
  5232                           ;main.c: 614:     SYSTEM_Initialize();
  5233  0002' 3180' 2000' 3180'  	fcall	_SYSTEM_Initialize
  5234                           
  5235                           ;main.c: 621:     (INTCONbits.GIE = 1);
  5236  0005' 178B               	bsf	11,7	;volatile
  5237                           
  5238                           ;main.c: 627:     (INTCONbits.PEIE = 1);
  5239  0006' 170B               	bsf	11,6	;volatile
  5240  0007'                    l5379:
  5241                           
  5242                           ;main.c: 633:         if (EUSART_IsRxReady()) {
  5243  0007' 3180' 2000' 3180'  	fcall	_EUSART_IsRxReady
  5244  000A' 3A00               	xorlw	0
  5245  000B' 1903               	skipnz
  5246  000C' 2800'              	goto	l5379
  5247                           
  5248                           ;main.c: 634:             data = EUSART_Read();
  5249  000D' 3180' 2000' 3180'  	fcall	_EUSART_Read
  5250  0010' 0021               	movlb	1	; select bank1
  5251  0011' 0080'              	movwf	main@data^(0+128)
  5252                           
  5253                           ;main.c: 636:             Parse(&parser, data);
  5254  0012' 0800'              	movf	main@data^(0+128),w
  5255  0013' 0080'              	movwf	Parse@data^(0+128)
  5256  0014' 3000'              	movlw	(low (main@parser| 0))& (0+255)
  5257  0015' 3180' 2000' 3180'  	fcall	_Parse
  5258  0018' 2800'              	goto	l5379
  5259  0019'                    __end_of_main:
  5260                           
  5261                           	psect	text1
  5262  0000'                    __ptext1:	
  5263 ;; *************** function _SYSTEM_Initialize *****************
  5264 ;; Defined at:
  5265 ;;		line 40 in file "mcc_generated_files/system/src/system.c"
  5266 ;; Parameters:    Size  Location     Type
  5267 ;;		None
  5268 ;; Auto vars:     Size  Location     Type
  5269 ;;		None
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      void 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, pclath, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : B1F/1
  5276 ;;		On exit  : 1F/1
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5279 ;;      Params:         0       0       0       0       0       0       0       0
  5280 ;;      Locals:         0       0       0       0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0
  5282 ;;      Totals:         0       0       0       0       0       0       0       0
  5283 ;;Total ram usage:        0 bytes
  5284 ;; Hardware stack levels used: 1
  5285 ;; Hardware stack levels required when called: 9
  5286 ;; This function calls:
  5287 ;;		_ADC_Initialize
  5288 ;;		_CLOCK_Initialize
  5289 ;;		_EUSART_Initialize
  5290 ;;		_I2C1_Initialize
  5291 ;;		_INTERRUPT_Initialize
  5292 ;;		_PIN_MANAGER_Initialize
  5293 ;; This function is called by:
  5294 ;;		_main
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298  0000'                    _SYSTEM_Initialize:	
  5299                           ;psect for function _SYSTEM_Initialize
  5300                           
  5301                           
  5302                           ;mcc_generated_files/system/src/system.c: 42:     CLOCK_Initialize();
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5306  0000' 3180' 2000' 3180'  	fcall	_CLOCK_Initialize
  5307                           
  5308                           ;mcc_generated_files/system/src/system.c: 43:     PIN_MANAGER_Initialize();
  5309  0003' 3180' 2000' 3180'  	fcall	_PIN_MANAGER_Initialize
  5310                           
  5311                           ;mcc_generated_files/system/src/system.c: 44:     ADC_Initialize();
  5312  0006' 3180' 2000' 3180'  	fcall	_ADC_Initialize
  5313                           
  5314                           ;mcc_generated_files/system/src/system.c: 45:     EUSART_Initialize();
  5315  0009' 3180' 2000' 3180'  	fcall	_EUSART_Initialize
  5316                           
  5317                           ;mcc_generated_files/system/src/system.c: 46:     I2C1_Initialize();
  5318  000C' 3180' 2000' 3180'  	fcall	_I2C1_Initialize
  5319                           
  5320                           ;mcc_generated_files/system/src/system.c: 47:     INTERRUPT_Initialize();
  5321  000F' 3180' 2000'        	fcall	_INTERRUPT_Initialize
  5322  0011' 0008               	return
  5323  0012'                    __end_of_SYSTEM_Initialize:
  5324                           
  5325                           	psect	text2
  5326  0000'                    __ptext2:	
  5327 ;; *************** function _PIN_MANAGER_Initialize *****************
  5328 ;; Defined at:
  5329 ;;		line 38 in file "mcc_generated_files/system/src/pins.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;		None
  5334 ;; Return value:  Size  Location     Type
  5335 ;;                  1    wreg      void 
  5336 ;; Registers used:
  5337 ;;		wreg, status,2
  5338 ;; Tracked objects:
  5339 ;;		On entry : B1F/1
  5340 ;;		On exit  : B1F/7
  5341 ;;		Unchanged: B00/0
  5342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5343 ;;      Params:         0       0       0       0       0       0       0       0
  5344 ;;      Locals:         0       0       0       0       0       0       0       0
  5345 ;;      Temps:          0       0       0       0       0       0       0       0
  5346 ;;      Totals:         0       0       0       0       0       0       0       0
  5347 ;;Total ram usage:        0 bytes
  5348 ;; Hardware stack levels used: 1
  5349 ;; Hardware stack levels required when called: 7
  5350 ;; This function calls:
  5351 ;;		Nothing
  5352 ;; This function is called by:
  5353 ;;		_SYSTEM_Initialize
  5354 ;; This function uses a non-reentrant model
  5355 ;;
  5356                           
  5357  0000'                    _PIN_MANAGER_Initialize:	
  5358                           ;psect for function _PIN_MANAGER_Initialize
  5359                           
  5360                           
  5361                           ;mcc_generated_files/system/src/pins.c: 43:     LATA = 0x0;
  5362                           
  5363                           ;incstack = 0
  5364                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5365  0000' 0022               	movlb	2	; select bank2
  5366  0001' 018C               	clrf	12	;volatile
  5367                           
  5368                           ;mcc_generated_files/system/src/pins.c: 44:     LATB = 0x60;
  5369  0002' 3060               	movlw	96
  5370  0003' 008D               	movwf	13	;volatile
  5371                           
  5372                           ;mcc_generated_files/system/src/pins.c: 45:     LATC = 0x0;
  5373  0004' 018E               	clrf	14	;volatile
  5374                           
  5375                           ;mcc_generated_files/system/src/pins.c: 50:     TRISA = 0x3F;
  5376  0005' 303F               	movlw	63
  5377  0006' 0021               	movlb	1	; select bank1
  5378  0007' 008C               	movwf	12	;volatile
  5379                           
  5380                           ;mcc_generated_files/system/src/pins.c: 51:     TRISB = 0xF0;
  5381  0008' 30F0               	movlw	240
  5382  0009' 008D               	movwf	13	;volatile
  5383                           
  5384                           ;mcc_generated_files/system/src/pins.c: 52:     TRISC = 0x3B;
  5385  000A' 303B               	movlw	59
  5386  000B' 008E               	movwf	14	;volatile
  5387                           
  5388                           ;mcc_generated_files/system/src/pins.c: 57:     ANSELA = 0x17;
  5389  000C' 3017               	movlw	23
  5390  000D' 0023               	movlb	3	; select bank3
  5391  000E' 008C               	movwf	12	;volatile
  5392                           
  5393                           ;mcc_generated_files/system/src/pins.c: 58:     ANSELB = 0x10;
  5394  000F' 3010               	movlw	16
  5395  0010' 008D               	movwf	13	;volatile
  5396                           
  5397                           ;mcc_generated_files/system/src/pins.c: 59:     ANSELC = 0xD;
  5398  0011' 300D               	movlw	13
  5399  0012' 008E               	movwf	14	;volatile
  5400                           
  5401                           ;mcc_generated_files/system/src/pins.c: 64:     WPUA = 0x2C;
  5402  0013' 302C               	movlw	44
  5403  0014' 0024               	movlb	4	; select bank4
  5404  0015' 008C               	movwf	12	;volatile
  5405                           
  5406                           ;mcc_generated_files/system/src/pins.c: 65:     WPUB = 0xE0;
  5407  0016' 30E0               	movlw	224
  5408  0017' 008D               	movwf	13	;volatile
  5409                           
  5410                           ;mcc_generated_files/system/src/pins.c: 66:     WPUC = 0xF7;
  5411  0018' 30F7               	movlw	247
  5412  0019' 008E               	movwf	14	;volatile
  5413                           
  5414                           ;mcc_generated_files/system/src/pins.c: 67:     OPTION_REGbits.nWPUEN = 0x0;
  5415  001A' 0021               	movlb	1	; select bank1
  5416  001B' 1395               	bcf	21,7	;volatile
  5417                           
  5418                           ;mcc_generated_files/system/src/pins.c: 73:     ODCONA = 0x0;
  5419  001C' 0025               	movlb	5	; select bank5
  5420  001D' 018C               	clrf	12	;volatile
  5421                           
  5422                           ;mcc_generated_files/system/src/pins.c: 74:     ODCONB = 0x0;
  5423  001E' 018D               	clrf	13	;volatile
  5424                           
  5425                           ;mcc_generated_files/system/src/pins.c: 75:     ODCONC = 0x0;
  5426  001F' 018E               	clrf	14	;volatile
  5427                           
  5428                           ;mcc_generated_files/system/src/pins.c: 79:     SLRCONA = 0x37;
  5429  0020' 3037               	movlw	55
  5430  0021' 0026               	movlb	6	; select bank6
  5431  0022' 008C               	movwf	12	;volatile
  5432                           
  5433                           ;mcc_generated_files/system/src/pins.c: 80:     SLRCONB = 0xF0;
  5434  0023' 30F0               	movlw	240
  5435  0024' 008D               	movwf	13	;volatile
  5436                           
  5437                           ;mcc_generated_files/system/src/pins.c: 81:     SLRCONC = 0xFF;
  5438  0025' 30FF               	movlw	255
  5439  0026' 008E               	movwf	14	;volatile
  5440                           
  5441                           ;mcc_generated_files/system/src/pins.c: 85:     INLVLA = 0x3F;
  5442  0027' 303F               	movlw	63
  5443  0028' 0027               	movlb	7	; select bank7
  5444  0029' 008C               	movwf	12	;volatile
  5445                           
  5446                           ;mcc_generated_files/system/src/pins.c: 86:     INLVLB = 0xF0;
  5447  002A' 30F0               	movlw	240
  5448  002B' 008D               	movwf	13	;volatile
  5449                           
  5450                           ;mcc_generated_files/system/src/pins.c: 87:     INLVLC = 0xFF;
  5451  002C' 30FF               	movlw	255
  5452  002D' 008E               	movwf	14	;volatile
  5453                           
  5454                           ;mcc_generated_files/system/src/pins.c: 92:     RXPPS = 0x11;
  5455  002E' 3011               	movlw	17
  5456  002F' 003C               	movlb	28	; select bank28
  5457  0030' 00A4               	movwf	36	;volatile
  5458                           
  5459                           ;mcc_generated_files/system/src/pins.c: 93:     RC2PPS = 6;
  5460  0031' 3006               	movlw	6
  5461  0032' 003D               	movlb	29	; select bank29
  5462  0033' 00A2               	movwf	34	;volatile
  5463                           
  5464                           ;mcc_generated_files/system/src/pins.c: 94:     SSPCLKPPS = 0xE;
  5465  0034' 300E               	movlw	14
  5466  0035' 003C               	movlb	28	; select bank28
  5467  0036' 00A0               	movwf	32	;volatile
  5468                           
  5469                           ;mcc_generated_files/system/src/pins.c: 95:     RB6PPS = 16;
  5470  0037' 3010               	movlw	16
  5471  0038' 003D               	movlb	29	; select bank29
  5472  0039' 009E               	movwf	30	;volatile
  5473                           
  5474                           ;mcc_generated_files/system/src/pins.c: 96:     SSPDATPPS = 0xD;
  5475  003A' 300D               	movlw	13
  5476  003B' 003C               	movlb	28	; select bank28
  5477  003C' 00A1               	movwf	33	;volatile
  5478                           
  5479                           ;mcc_generated_files/system/src/pins.c: 97:     RB5PPS = 17;
  5480  003D' 3011               	movlw	17
  5481  003E' 003D               	movlb	29	; select bank29
  5482  003F' 009D               	movwf	29	;volatile
  5483                           
  5484                           ;mcc_generated_files/system/src/pins.c: 106:     IOCAP = 0x0;
  5485  0040' 0027               	movlb	7	; select bank7
  5486  0041' 0191               	clrf	17	;volatile
  5487                           
  5488                           ;mcc_generated_files/system/src/pins.c: 107:     IOCAN = 0x0;
  5489  0042' 0192               	clrf	18	;volatile
  5490                           
  5491                           ;mcc_generated_files/system/src/pins.c: 108:     IOCAF = 0x0;
  5492  0043' 0193               	clrf	19	;volatile
  5493                           
  5494                           ;mcc_generated_files/system/src/pins.c: 109:     IOCBP = 0x0;
  5495  0044' 0194               	clrf	20	;volatile
  5496                           
  5497                           ;mcc_generated_files/system/src/pins.c: 110:     IOCBN = 0x0;
  5498  0045' 0195               	clrf	21	;volatile
  5499                           
  5500                           ;mcc_generated_files/system/src/pins.c: 111:     IOCBF = 0x0;
  5501  0046' 0196               	clrf	22	;volatile
  5502                           
  5503                           ;mcc_generated_files/system/src/pins.c: 112:     IOCCP = 0x0;
  5504  0047' 0197               	clrf	23	;volatile
  5505                           
  5506                           ;mcc_generated_files/system/src/pins.c: 113:     IOCCN = 0x0;
  5507  0048' 0198               	clrf	24	;volatile
  5508                           
  5509                           ;mcc_generated_files/system/src/pins.c: 114:     IOCCF = 0x0;
  5510  0049' 0199               	clrf	25	;volatile
  5511  004A' 0008               	return
  5512  004B'                    __end_of_PIN_MANAGER_Initialize:
  5513                           
  5514                           	psect	text3
  5515  0000'                    __ptext3:	
  5516 ;; *************** function _INTERRUPT_Initialize *****************
  5517 ;; Defined at:
  5518 ;;		line 40 in file "mcc_generated_files/system/src/interrupt.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;		None
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;		None
  5523 ;; Return value:  Size  Location     Type
  5524 ;;                  1    wreg      void 
  5525 ;; Registers used:
  5526 ;;		wreg, status,2, status,0, pclath, cstack
  5527 ;; Tracked objects:
  5528 ;;		On entry : B1F/4
  5529 ;;		On exit  : 1F/1
  5530 ;;		Unchanged: 0/0
  5531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5532 ;;      Params:         0       0       0       0       0       0       0       0
  5533 ;;      Locals:         0       0       0       0       0       0       0       0
  5534 ;;      Temps:          0       0       0       0       0       0       0       0
  5535 ;;      Totals:         0       0       0       0       0       0       0       0
  5536 ;;Total ram usage:        0 bytes
  5537 ;; Hardware stack levels used: 1
  5538 ;; Hardware stack levels required when called: 8
  5539 ;; This function calls:
  5540 ;;		_INT_SetInterruptHandler
  5541 ;; This function is called by:
  5542 ;;		_SYSTEM_Initialize
  5543 ;; This function uses a non-reentrant model
  5544 ;;
  5545                           
  5546  0000'                    _INTERRUPT_Initialize:	
  5547                           ;psect for function _INTERRUPT_Initialize
  5548                           
  5549                           
  5550                           ;mcc_generated_files/system/src/interrupt.c: 44:     (INTCONbits.INTF = 0);
  5551                           
  5552                           ;incstack = 0
  5553                           ; Regs used in _INTERRUPT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5554  0000' 108B               	bcf	11,1	;volatile
  5555                           
  5556                           ;mcc_generated_files/system/src/interrupt.c: 45:     (OPTION_REGbits.INTEDG = 1);
  5557  0001' 0021               	movlb	1	; select bank1
  5558  0002' 1715               	bsf	21,6	;volatile
  5559                           
  5560                           ;mcc_generated_files/system/src/interrupt.c: 47:     INT_SetInterruptHandler(INT_Default
      +                          InterruptHandler);
  5561  0003' 3000               	movlw	0
  5562  0004' 0020               	movlb	0	; select bank0
  5563  0005' 0080'              	movwf	INT_SetInterruptHandler@InterruptHandler
  5564  0006' 3000               	movlw	0
  5565  0007' 0081'              	movwf	INT_SetInterruptHandler@InterruptHandler+1
  5566  0008' 3180' 2000'        	fcall	_INT_SetInterruptHandler
  5567  000A' 0008               	return
  5568  000B'                    __end_of_INTERRUPT_Initialize:
  5569                           
  5570                           	psect	text4
  5571  0000'                    __ptext4:	
  5572 ;; *************** function _INT_SetInterruptHandler *****************
  5573 ;; Defined at:
  5574 ;;		line 105 in file "mcc_generated_files/system/src/interrupt.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5577 ;;		 -> INT_DefaultInterruptHandler(1), 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;		None
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  1    wreg      void 
  5582 ;; Registers used:
  5583 ;;		wreg
  5584 ;; Tracked objects:
  5585 ;;		On entry : 1F/0
  5586 ;;		On exit  : 1F/1
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5589 ;;      Params:         0       2       0       0       0       0       0       0
  5590 ;;      Locals:         0       0       0       0       0       0       0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0       0
  5592 ;;      Totals:         0       2       0       0       0       0       0       0
  5593 ;;Total ram usage:        2 bytes
  5594 ;; Hardware stack levels used: 1
  5595 ;; Hardware stack levels required when called: 7
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_INTERRUPT_Initialize
  5600 ;; This function uses a non-reentrant model
  5601 ;;
  5602                           
  5603  0000'                    _INT_SetInterruptHandler:	
  5604                           ;psect for function _INT_SetInterruptHandler
  5605                           
  5606                           
  5607                           ;mcc_generated_files/system/src/interrupt.c: 106:     INT_InterruptHandler = InterruptHa
      +                          ndler;
  5608                           
  5609                           ;incstack = 0
  5610                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  5611  0000' 0801'              	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  5612  0001' 0021               	movlb	1	; select bank1
  5613  0002' 0080'              	movwf	(_INT_InterruptHandler+1)^(0+128)
  5614  0003' 0020               	movlb	0	; select bank0
  5615  0004' 0800'              	movf	INT_SetInterruptHandler@InterruptHandler,w
  5616  0005' 0021               	movlb	1	; select bank1
  5617  0006' 0080'              	movwf	_INT_InterruptHandler^(0+128)
  5618  0007' 0008               	return
  5619  0008'                    __end_of_INT_SetInterruptHandler:
  5620                           
  5621                           	psect	text5
  5622  0000'                    __ptext5:	
  5623 ;; *************** function _I2C1_Initialize *****************
  5624 ;; Defined at:
  5625 ;;		line 114 in file "mcc_generated_files/i2c_host/src/mssp.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;		None
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;		None
  5630 ;; Return value:  Size  Location     Type
  5631 ;;                  1    wreg      void 
  5632 ;; Registers used:
  5633 ;;		wreg, status,2, status,0, pclath, cstack
  5634 ;; Tracked objects:
  5635 ;;		On entry : B1F/1
  5636 ;;		On exit  : B1F/4
  5637 ;;		Unchanged: B00/0
  5638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5639 ;;      Params:         0       0       0       0       0       0       0       0
  5640 ;;      Locals:         0       0       0       0       0       0       0       0
  5641 ;;      Temps:          0       0       0       0       0       0       0       0
  5642 ;;      Totals:         0       0       0       0       0       0       0       0
  5643 ;;Total ram usage:        0 bytes
  5644 ;; Hardware stack levels used: 1
  5645 ;; Hardware stack levels required when called: 8
  5646 ;; This function calls:
  5647 ;;		_I2C1_CallbackRegister
  5648 ;;		_I2C1_InterruptsEnable
  5649 ;; This function is called by:
  5650 ;;		_SYSTEM_Initialize
  5651 ;; This function uses a non-reentrant model
  5652 ;;
  5653                           
  5654  0000'                    _I2C1_Initialize:	
  5655                           ;psect for function _I2C1_Initialize
  5656                           
  5657                           
  5658                           ;mcc_generated_files/i2c_host/src/mssp.c: 117:     SSP1STAT = 0x80;
  5659                           
  5660                           ;incstack = 0
  5661                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5662  0000' 3080               	movlw	128
  5663  0001' 0024               	movlb	4	; select bank4
  5664  0002' 0094               	movwf	20	;volatile
  5665                           
  5666                           ;mcc_generated_files/i2c_host/src/mssp.c: 119:     SSP1CON1 = 0x8;
  5667  0003' 3008               	movlw	8
  5668  0004' 0095               	movwf	21	;volatile
  5669                           
  5670                           ;mcc_generated_files/i2c_host/src/mssp.c: 121:     SSP1CON2 = 0x0;
  5671  0005' 0196               	clrf	22	;volatile
  5672                           
  5673                           ;mcc_generated_files/i2c_host/src/mssp.c: 123:     SSP1CON3 = 0x0;
  5674  0006' 0197               	clrf	23	;volatile
  5675                           
  5676                           ;mcc_generated_files/i2c_host/src/mssp.c: 125:     SSP1ADD = 0x27;
  5677  0007' 3027               	movlw	39
  5678  0008' 0092               	movwf	18	;volatile
  5679                           
  5680                           ;mcc_generated_files/i2c_host/src/mssp.c: 126:     I2C1_InterruptsEnable();
  5681  0009' 3180' 2000' 3180'  	fcall	_I2C1_InterruptsEnable
  5682                           
  5683                           ;mcc_generated_files/i2c_host/src/mssp.c: 127:     I2C1_CallbackRegister(I2C1_DefaultCal
      +                          lback);
  5684  000C' 3000'              	movlw	low _I2C1_DefaultCallback
  5685  000D' 0020               	movlb	0	; select bank0
  5686  000E' 0080'              	movwf	I2C1_CallbackRegister@callbackHandler
  5687  000F' 3000'              	movlw	high _I2C1_DefaultCallback
  5688  0010' 0081'              	movwf	I2C1_CallbackRegister@callbackHandler+1
  5689  0011' 3180' 2000'        	fcall	_I2C1_CallbackRegister
  5690                           
  5691                           ;mcc_generated_files/i2c_host/src/mssp.c: 128:     SSP1CON1bits.SSPEN = 1;
  5692  0013' 0024               	movlb	4	; select bank4
  5693  0014' 1695               	bsf	21,5	;volatile
  5694  0015' 0008               	return
  5695  0016'                    __end_of_I2C1_Initialize:
  5696                           
  5697                           	psect	text6
  5698  0000'                    __ptext6:	
  5699 ;; *************** function _I2C1_InterruptsEnable *****************
  5700 ;; Defined at:
  5701 ;;		line 467 in file "mcc_generated_files/i2c_host/src/mssp.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;		None
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;		None
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      void 
  5708 ;; Registers used:
  5709 ;;		None
  5710 ;; Tracked objects:
  5711 ;;		On entry : B1F/4
  5712 ;;		On exit  : B1F/1
  5713 ;;		Unchanged: B00/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5715 ;;      Params:         0       0       0       0       0       0       0       0
  5716 ;;      Locals:         0       0       0       0       0       0       0       0
  5717 ;;      Temps:          0       0       0       0       0       0       0       0
  5718 ;;      Totals:         0       0       0       0       0       0       0       0
  5719 ;;Total ram usage:        0 bytes
  5720 ;; Hardware stack levels used: 1
  5721 ;; Hardware stack levels required when called: 7
  5722 ;; This function calls:
  5723 ;;		Nothing
  5724 ;; This function is called by:
  5725 ;;		_I2C1_Initialize
  5726 ;; This function uses a non-reentrant model
  5727 ;;
  5728                           
  5729  0000'                    _I2C1_InterruptsEnable:	
  5730                           ;psect for function _I2C1_InterruptsEnable
  5731                           
  5732                           
  5733                           ;mcc_generated_files/i2c_host/src/mssp.c: 469:     PIE1bits.SSP1IE = 1;
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in _I2C1_InterruptsEnable: []
  5737  0000' 0021               	movlb	1	; select bank1
  5738  0001' 1590               	bsf	16,3	;volatile
  5739                           
  5740                           ;mcc_generated_files/i2c_host/src/mssp.c: 470:     PIE2bits.BCL1IE = 1;
  5741  0002' 1591               	bsf	17,3	;volatile
  5742  0003' 0008               	return
  5743  0004'                    __end_of_I2C1_InterruptsEnable:
  5744                           
  5745                           	psect	text7
  5746  0000'                    __ptext7:	
  5747 ;; *************** function _I2C1_CallbackRegister *****************
  5748 ;; Defined at:
  5749 ;;		line 211 in file "mcc_generated_files/i2c_host/src/mssp.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;  callbackHand    2    0[BANK0 ] PTR FTN()void 
  5752 ;;		 -> I2C1_DefaultCallback(1), 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;		None
  5755 ;; Return value:  Size  Location     Type
  5756 ;;                  1    wreg      void 
  5757 ;; Registers used:
  5758 ;;		wreg, status,2, status,0
  5759 ;; Tracked objects:
  5760 ;;		On entry : B1F/0
  5761 ;;		On exit  : B1E/0
  5762 ;;		Unchanged: B00/0
  5763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5764 ;;      Params:         0       2       0       0       0       0       0       0
  5765 ;;      Locals:         0       0       0       0       0       0       0       0
  5766 ;;      Temps:          0       0       0       0       0       0       0       0
  5767 ;;      Totals:         0       2       0       0       0       0       0       0
  5768 ;;Total ram usage:        2 bytes
  5769 ;; Hardware stack levels used: 1
  5770 ;; Hardware stack levels required when called: 7
  5771 ;; This function calls:
  5772 ;;		Nothing
  5773 ;; This function is called by:
  5774 ;;		_I2C1_Initialize
  5775 ;;		_I2C1_Deinitialize
  5776 ;; This function uses a non-reentrant model
  5777 ;;
  5778                           
  5779  0000'                    _I2C1_CallbackRegister:	
  5780                           ;psect for function _I2C1_CallbackRegister
  5781                           
  5782                           
  5783                           ;mcc_generated_files/i2c_host/src/mssp.c: 211: void I2C1_CallbackRegister(void (*callbac
      +                          kHandler)(void));mcc_generated_files/i2c_host/src/mssp.c: 212: {;mcc_generated_files/i2c
      +                          _host/src/mssp.c: 213:     if (callbackHandler != ((void*)0))
  5784                           
  5785                           ;incstack = 0
  5786                           ; Regs used in _I2C1_CallbackRegister: [wreg+status,2+status,0]
  5787  0000' 0800'              	movf	I2C1_CallbackRegister@callbackHandler,w
  5788  0001' 0401'              	iorwf	I2C1_CallbackRegister@callbackHandler+1,w
  5789  0002' 1903               	btfsc	3,2
  5790  0003' 0008               	return
  5791                           
  5792                           ;mcc_generated_files/i2c_host/src/mssp.c: 214:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 215:         I2C1_Callback = callbackHandler;
  5793  0004' 0801'              	movf	I2C1_CallbackRegister@callbackHandler+1,w
  5794  0005' 0021               	movlb	1	; select bank1
  5795  0006' 0080'              	movwf	(_I2C1_Callback+1)^(0+128)
  5796  0007' 0020               	movlb	0	; select bank0
  5797  0008' 0800'              	movf	I2C1_CallbackRegister@callbackHandler,w
  5798  0009' 0021               	movlb	1	; select bank1
  5799  000A' 0080'              	movwf	_I2C1_Callback^(0+128)
  5800  000B' 0008               	return
  5801  000C'                    __end_of_I2C1_CallbackRegister:
  5802                           
  5803                           	psect	text8
  5804  0000'                    __ptext8:	
  5805 ;; *************** function _EUSART_Initialize *****************
  5806 ;; Defined at:
  5807 ;;		line 94 in file "mcc_generated_files/uart/src/eusart.c"
  5808 ;; Parameters:    Size  Location     Type
  5809 ;;		None
  5810 ;; Auto vars:     Size  Location     Type
  5811 ;;		None
  5812 ;; Return value:  Size  Location     Type
  5813 ;;                  1    wreg      void 
  5814 ;; Registers used:
  5815 ;;		wreg, status,2, status,0, pclath, cstack
  5816 ;; Tracked objects:
  5817 ;;		On entry : B1F/1
  5818 ;;		On exit  : B1F/1
  5819 ;;		Unchanged: B00/0
  5820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5821 ;;      Params:         0       0       0       0       0       0       0       0
  5822 ;;      Locals:         0       0       0       0       0       0       0       0
  5823 ;;      Temps:          0       0       0       0       0       0       0       0
  5824 ;;      Totals:         0       0       0       0       0       0       0       0
  5825 ;;Total ram usage:        0 bytes
  5826 ;; Hardware stack levels used: 1
  5827 ;; Hardware stack levels required when called: 8
  5828 ;; This function calls:
  5829 ;;		_EUSART_FramingErrorCallbackRegister
  5830 ;;		_EUSART_OverrunErrorCallbackRegister
  5831 ;; This function is called by:
  5832 ;;		_SYSTEM_Initialize
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836  0000'                    _EUSART_Initialize:	
  5837                           ;psect for function _EUSART_Initialize
  5838                           
  5839                           
  5840                           ;mcc_generated_files/uart/src/eusart.c: 99:     BAUD1CON = 0x48;
  5841                           
  5842                           ;incstack = 0
  5843                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5844  0000' 3048               	movlw	72
  5845  0001' 0023               	movlb	3	; select bank3
  5846  0002' 009F               	movwf	31	;volatile
  5847                           
  5848                           ;mcc_generated_files/uart/src/eusart.c: 101:     RC1STA = 0x90;
  5849  0003' 3090               	movlw	144
  5850  0004' 009D               	movwf	29	;volatile
  5851                           
  5852                           ;mcc_generated_files/uart/src/eusart.c: 103:     TX1STA = 0x26;
  5853  0005' 3026               	movlw	38
  5854  0006' 009E               	movwf	30	;volatile
  5855                           
  5856                           ;mcc_generated_files/uart/src/eusart.c: 105:     SPBRGL = 0xA0;
  5857  0007' 30A0               	movlw	160
  5858  0008' 009B               	movwf	27	;volatile
  5859                           
  5860                           ;mcc_generated_files/uart/src/eusart.c: 107:     SPBRGH = 0x1;
  5861  0009' 3001               	movlw	1
  5862  000A' 009C               	movwf	28	;volatile
  5863                           
  5864                           ;mcc_generated_files/uart/src/eusart.c: 109:     EUSART_FramingErrorCallbackRegister(EUS
      +                          ART_DefaultFramingErrorCallback);
  5865  000B' 3000'              	movlw	low _EUSART_DefaultFramingErrorCallback
  5866  000C' 0020               	movlb	0	; select bank0
  5867  000D' 0080'              	movwf	EUSART_FramingErrorCallbackRegister@callbackHandler
  5868  000E' 3000'              	movlw	high _EUSART_DefaultFramingErrorCallback
  5869  000F' 0081'              	movwf	EUSART_FramingErrorCallbackRegister@callbackHandler+1
  5870  0010' 3180' 2000' 3180'  	fcall	_EUSART_FramingErrorCallbackRegister
  5871                           
  5872                           ;mcc_generated_files/uart/src/eusart.c: 110:     EUSART_OverrunErrorCallbackRegister(EUS
      +                          ART_DefaultOverrunErrorCallback);
  5873  0013' 3000'              	movlw	low _EUSART_DefaultOverrunErrorCallback
  5874  0014' 0080'              	movwf	EUSART_OverrunErrorCallbackRegister@callbackHandler
  5875  0015' 3000'              	movlw	high _EUSART_DefaultOverrunErrorCallback
  5876  0016' 0081'              	movwf	EUSART_OverrunErrorCallbackRegister@callbackHandler+1
  5877  0017' 3180' 2000'        	fcall	_EUSART_OverrunErrorCallbackRegister
  5878                           
  5879                           ;mcc_generated_files/uart/src/eusart.c: 111:     eusartRxLastError.status = 0;
  5880  0019' 0021               	movlb	1	; select bank1
  5881  001A' 0180'              	clrf	_eusartRxLastError^(0+128)	;volatile
  5882  001B' 0180'              	clrf	(_eusartRxLastError+1)^(0+128)	;volatile
  5883  001C' 0008               	return
  5884  001D'                    __end_of_EUSART_Initialize:
  5885                           
  5886                           	psect	text9
  5887  0000'                    __ptext9:	
  5888 ;; *************** function _EUSART_OverrunErrorCallbackRegister *****************
  5889 ;; Defined at:
  5890 ;;		line 260 in file "mcc_generated_files/uart/src/eusart.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  callbackHand    2    0[BANK0 ] PTR FTN()void 
  5893 ;;		 -> EUSART_DefaultOverrunErrorCallback(1), 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;		None
  5896 ;; Return value:  Size  Location     Type
  5897 ;;                  1    wreg      void 
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, status,0
  5900 ;; Tracked objects:
  5901 ;;		On entry : B1F/0
  5902 ;;		On exit  : B1F/0
  5903 ;;		Unchanged: B00/0
  5904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5905 ;;      Params:         0       2       0       0       0       0       0       0
  5906 ;;      Locals:         0       0       0       0       0       0       0       0
  5907 ;;      Temps:          0       0       0       0       0       0       0       0
  5908 ;;      Totals:         0       2       0       0       0       0       0       0
  5909 ;;Total ram usage:        2 bytes
  5910 ;; Hardware stack levels used: 1
  5911 ;; Hardware stack levels required when called: 7
  5912 ;; This function calls:
  5913 ;;		Nothing
  5914 ;; This function is called by:
  5915 ;;		_EUSART_Initialize
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919  0000'                    _EUSART_OverrunErrorCallbackRegister:	
  5920                           ;psect for function _EUSART_OverrunErrorCallbackRegister
  5921                           
  5922                           
  5923                           ;mcc_generated_files/uart/src/eusart.c: 260: void EUSART_OverrunErrorCallbackRegister(vo
      +                          id (* callbackHandler)(void));mcc_generated_files/uart/src/eusart.c: 261: {;mcc_generate
      +                          d_files/uart/src/eusart.c: 262:     if(((void*)0) != callbackHandler)
  5924                           
  5925                           ;incstack = 0
  5926                           ; Regs used in _EUSART_OverrunErrorCallbackRegister: [wreg+status,2+status,0]
  5927  0000' 0800'              	movf	EUSART_OverrunErrorCallbackRegister@callbackHandler,w
  5928  0001' 0401'              	iorwf	EUSART_OverrunErrorCallbackRegister@callbackHandler+1,w
  5929  0002' 1903               	btfsc	3,2
  5930  0003' 0008               	return
  5931                           
  5932                           ;mcc_generated_files/uart/src/eusart.c: 263:     {;mcc_generated_files/uart/src/eusart.c
      +                          : 264:         EUSART_OverrunErrorHandler = callbackHandler;
  5933  0004' 0801'              	movf	EUSART_OverrunErrorCallbackRegister@callbackHandler+1,w
  5934  0005' 0081'              	movwf	_EUSART_OverrunErrorHandler+1
  5935  0006' 0800'              	movf	EUSART_OverrunErrorCallbackRegister@callbackHandler,w
  5936  0007' 0080'              	movwf	_EUSART_OverrunErrorHandler
  5937  0008' 0008               	return
  5938  0009'                    __end_of_EUSART_OverrunErrorCallbackRegister:
  5939                           
  5940                           	psect	text10
  5941  0000'                    __ptext10:	
  5942 ;; *************** function _EUSART_FramingErrorCallbackRegister *****************
  5943 ;; Defined at:
  5944 ;;		line 252 in file "mcc_generated_files/uart/src/eusart.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  callbackHand    2    0[BANK0 ] PTR FTN()void 
  5947 ;;		 -> EUSART_DefaultFramingErrorCallback(1), 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;		None
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  1    wreg      void 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0
  5954 ;; Tracked objects:
  5955 ;;		On entry : B1F/0
  5956 ;;		On exit  : B1F/0
  5957 ;;		Unchanged: B00/0
  5958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5959 ;;      Params:         0       2       0       0       0       0       0       0
  5960 ;;      Locals:         0       0       0       0       0       0       0       0
  5961 ;;      Temps:          0       0       0       0       0       0       0       0
  5962 ;;      Totals:         0       2       0       0       0       0       0       0
  5963 ;;Total ram usage:        2 bytes
  5964 ;; Hardware stack levels used: 1
  5965 ;; Hardware stack levels required when called: 7
  5966 ;; This function calls:
  5967 ;;		Nothing
  5968 ;; This function is called by:
  5969 ;;		_EUSART_Initialize
  5970 ;; This function uses a non-reentrant model
  5971 ;;
  5972                           
  5973  0000'                    _EUSART_FramingErrorCallbackRegister:	
  5974                           ;psect for function _EUSART_FramingErrorCallbackRegister
  5975                           
  5976                           
  5977                           ;mcc_generated_files/uart/src/eusart.c: 252: void EUSART_FramingErrorCallbackRegister(vo
      +                          id (* callbackHandler)(void));mcc_generated_files/uart/src/eusart.c: 253: {;mcc_generate
      +                          d_files/uart/src/eusart.c: 254:     if(((void*)0) != callbackHandler)
  5978                           
  5979                           ;incstack = 0
  5980                           ; Regs used in _EUSART_FramingErrorCallbackRegister: [wreg+status,2+status,0]
  5981  0000' 0800'              	movf	EUSART_FramingErrorCallbackRegister@callbackHandler,w
  5982  0001' 0401'              	iorwf	EUSART_FramingErrorCallbackRegister@callbackHandler+1,w
  5983  0002' 1903               	btfsc	3,2
  5984  0003' 0008               	return
  5985                           
  5986                           ;mcc_generated_files/uart/src/eusart.c: 255:     {;mcc_generated_files/uart/src/eusart.c
      +                          : 256:         EUSART_FramingErrorHandler = callbackHandler;
  5987  0004' 0801'              	movf	EUSART_FramingErrorCallbackRegister@callbackHandler+1,w
  5988  0005' 0083'              	movwf	_EUSART_FramingErrorHandler+1
  5989  0006' 0800'              	movf	EUSART_FramingErrorCallbackRegister@callbackHandler,w
  5990  0007' 0082'              	movwf	_EUSART_FramingErrorHandler
  5991  0008' 0008               	return
  5992  0009'                    __end_of_EUSART_FramingErrorCallbackRegister:
  5993                           
  5994                           	psect	text11
  5995  0000'                    __ptext11:	
  5996 ;; *************** function _CLOCK_Initialize *****************
  5997 ;; Defined at:
  5998 ;;		line 39 in file "mcc_generated_files/system/src/clock.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;		None
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;		None
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  1    wreg      void 
  6005 ;; Registers used:
  6006 ;;		wreg, status,2
  6007 ;; Tracked objects:
  6008 ;;		On entry : B1F/1
  6009 ;;		On exit  : B1F/1
  6010 ;;		Unchanged: B00/0
  6011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6012 ;;      Params:         0       0       0       0       0       0       0       0
  6013 ;;      Locals:         0       0       0       0       0       0       0       0
  6014 ;;      Temps:          0       0       0       0       0       0       0       0
  6015 ;;      Totals:         0       0       0       0       0       0       0       0
  6016 ;;Total ram usage:        0 bytes
  6017 ;; Hardware stack levels used: 1
  6018 ;; Hardware stack levels required when called: 7
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		_SYSTEM_Initialize
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026  0000'                    _CLOCK_Initialize:	
  6027                           ;psect for function _CLOCK_Initialize
  6028                           
  6029                           
  6030                           ;mcc_generated_files/system/src/clock.c: 41:     OSCCON = (15 << 0x3)
  6031                           
  6032                           ;incstack = 0
  6033                           ; Regs used in _CLOCK_Initialize: [wreg+status,2]
  6034  0000' 307A               	movlw	122
  6035  0001' 0099               	movwf	25	;volatile
  6036                           
  6037                           ;mcc_generated_files/system/src/clock.c: 44:     BORCON = (0 << 0x7)
  6038  0002' 0022               	movlb	2	; select bank2
  6039  0003' 0196               	clrf	22	;volatile
  6040                           
  6041                           ;mcc_generated_files/system/src/clock.c: 46:     OSCTUNE = (0 << 0x0);
  6042  0004' 0021               	movlb	1	; select bank1
  6043  0005' 0198               	clrf	24	;volatile
  6044  0006' 0008               	return
  6045  0007'                    __end_of_CLOCK_Initialize:
  6046                           
  6047                           	psect	text12
  6048  0000'                    __ptext12:	
  6049 ;; *************** function _ADC_Initialize *****************
  6050 ;; Defined at:
  6051 ;;		line 55 in file "mcc_generated_files/adc/src/adc.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;		None
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;		None
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, status,2, status,0, pclath, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : B1F/7
  6062 ;;		On exit  : B1F/1
  6063 ;;		Unchanged: B00/0
  6064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6065 ;;      Params:         0       0       0       0       0       0       0       0
  6066 ;;      Locals:         0       0       0       0       0       0       0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0       0
  6068 ;;      Totals:         0       0       0       0       0       0       0       0
  6069 ;;Total ram usage:        0 bytes
  6070 ;; Hardware stack levels used: 1
  6071 ;; Hardware stack levels required when called: 8
  6072 ;; This function calls:
  6073 ;;		_ADC_SetInterruptHandler
  6074 ;; This function is called by:
  6075 ;;		_SYSTEM_Initialize
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079  0000'                    _ADC_Initialize:	
  6080                           ;psect for function _ADC_Initialize
  6081                           
  6082                           
  6083                           ;mcc_generated_files/adc/src/adc.c: 58:     ADCON1 = 0x60;
  6084                           
  6085                           ;incstack = 0
  6086                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6087  0000' 3060               	movlw	96
  6088  0001' 0021               	movlb	1	; select bank1
  6089  0002' 009E               	movwf	30	;volatile
  6090                           
  6091                           ;mcc_generated_files/adc/src/adc.c: 61:     ADRESL = 0x0;
  6092  0003' 019B               	clrf	27	;volatile
  6093                           
  6094                           ;mcc_generated_files/adc/src/adc.c: 64:     ADRESH = 0x0;
  6095  0004' 019C               	clrf	28	;volatile
  6096                           
  6097                           ;mcc_generated_files/adc/src/adc.c: 67:     ADCON2 = 0x0;
  6098  0005' 019F               	clrf	31	;volatile
  6099                           
  6100                           ;mcc_generated_files/adc/src/adc.c: 70:     ADCON0 = 0x1;
  6101  0006' 3001               	movlw	1
  6102  0007' 009D               	movwf	29	;volatile
  6103                           
  6104                           ;mcc_generated_files/adc/src/adc.c: 73:     PIR1bits.ADIF = 0;
  6105  0008' 0020               	movlb	0	; select bank0
  6106  0009' 1310               	bcf	16,6	;volatile
  6107                           
  6108                           ;mcc_generated_files/adc/src/adc.c: 76:     ADC_SetInterruptHandler(ADC_DefaultInterrupt
      +                          Handler);
  6109  000A' 3000'              	movlw	low _ADC_DefaultInterruptHandler
  6110  000B' 0080'              	movwf	ADC_SetInterruptHandler@InterruptHandler
  6111  000C' 3000'              	movlw	high _ADC_DefaultInterruptHandler
  6112  000D' 0081'              	movwf	ADC_SetInterruptHandler@InterruptHandler+1
  6113  000E' 3180' 2000'        	fcall	_ADC_SetInterruptHandler
  6114                           
  6115                           ;mcc_generated_files/adc/src/adc.c: 79:     PIE1bits.ADIE = 1;
  6116  0010' 1710               	bsf	16,6	;volatile
  6117  0011' 0008               	return
  6118  0012'                    __end_of_ADC_Initialize:
  6119                           
  6120                           	psect	text13
  6121  0000'                    __ptext13:	
  6122 ;; *************** function _ADC_SetInterruptHandler *****************
  6123 ;; Defined at:
  6124 ;;		line 145 in file "mcc_generated_files/adc/src/adc.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6127 ;;		 -> ADC_DefaultInterruptHandler(1), 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;		None
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      void 
  6132 ;; Registers used:
  6133 ;;		wreg
  6134 ;; Tracked objects:
  6135 ;;		On entry : B1F/0
  6136 ;;		On exit  : B1F/1
  6137 ;;		Unchanged: B00/0
  6138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6139 ;;      Params:         0       2       0       0       0       0       0       0
  6140 ;;      Locals:         0       0       0       0       0       0       0       0
  6141 ;;      Temps:          0       0       0       0       0       0       0       0
  6142 ;;      Totals:         0       2       0       0       0       0       0       0
  6143 ;;Total ram usage:        2 bytes
  6144 ;; Hardware stack levels used: 1
  6145 ;; Hardware stack levels required when called: 7
  6146 ;; This function calls:
  6147 ;;		Nothing
  6148 ;; This function is called by:
  6149 ;;		_ADC_Initialize
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153  0000'                    _ADC_SetInterruptHandler:	
  6154                           ;psect for function _ADC_SetInterruptHandler
  6155                           
  6156                           
  6157                           ;mcc_generated_files/adc/src/adc.c: 145: void ADC_SetInterruptHandler(void (* InterruptH
      +                          andler)(void));mcc_generated_files/adc/src/adc.c: 146: {;mcc_generated_files/adc/src/adc
      +                          .c: 147:     ADC_InterruptHandler = InterruptHandler;
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _ADC_SetInterruptHandler: [wreg]
  6161  0000' 0801'              	movf	ADC_SetInterruptHandler@InterruptHandler+1,w
  6162  0001' 0021               	movlb	1	; select bank1
  6163  0002' 0080'              	movwf	(_ADC_InterruptHandler+1)^(0+128)
  6164  0003' 0020               	movlb	0	; select bank0
  6165  0004' 0800'              	movf	ADC_SetInterruptHandler@InterruptHandler,w
  6166  0005' 0021               	movlb	1	; select bank1
  6167  0006' 0080'              	movwf	_ADC_InterruptHandler^(0+128)
  6168  0007' 0008               	return
  6169  0008'                    __end_of_ADC_SetInterruptHandler:
  6170                           
  6171                           	psect	text14
  6172  0000'                    __ptext14:	
  6173 ;; *************** function _Parse *****************
  6174 ;; Defined at:
  6175 ;;		line 522 in file "main.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;  parser          1    wreg     PTR struct .
  6178 ;;		 -> main@parser(12), 
  6179 ;;  data            1   20[BANK1 ] unsigned char 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  parser          1   23[BANK1 ] PTR struct .
  6182 ;;		 -> main@parser(12), 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      void 
  6185 ;; Registers used:
  6186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 1F/1
  6189 ;;		On exit  : 1C/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6192 ;;      Params:         0       0       1       0       0       0       0       0
  6193 ;;      Locals:         0       0       1       0       0       0       0       0
  6194 ;;      Temps:          0       0       2       0       0       0       0       0
  6195 ;;      Totals:         0       0       4       0       0       0       0       0
  6196 ;;Total ram usage:        4 bytes
  6197 ;; Hardware stack levels used: 1
  6198 ;; Hardware stack levels required when called: 16
  6199 ;; This function calls:
  6200 ;;		_ProcessMsg
  6201 ;;		_SendMsg
  6202 ;;		_SendNack
  6203 ;; This function is called by:
  6204 ;;		_main
  6205 ;; This function uses a non-reentrant model
  6206 ;;
  6207                           
  6208  0000'                    _Parse:	
  6209                           ;psect for function _Parse
  6210                           
  6211                           
  6212                           ;incstack = 0
  6213 ;; hardware stack exceeded
  6214                           ; Regs used in _Parse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6215                           ;Parse@parser stored from wreg
  6216  0000' 0080'              	movwf	Parse@parser^(0+128)
  6217                           
  6218                           ;main.c: 523:     switch (parser->m_State) {
  6219  0001' 2800'              	goto	l5359
  6220  0002'                    l5295:
  6221                           
  6222                           ;main.c: 525:             if (data == 0x01) {
  6223  0002' 0300'              	decf	Parse@data^(0+128),w
  6224  0003' 1D03               	btfss	3,2
  6225  0004' 2800'              	goto	l5301
  6226                           
  6227                           ;main.c: 526:                 parser->m_State = WAIT_ID;
  6228  0005' 0800'              	movf	Parse@parser^(0+128),w
  6229  0006' 0086               	movwf	6
  6230  0007' 0187               	clrf	7
  6231  0008' 0181               	clrf	1
  6232  0009' 0A81               	incf	1,f
  6233                           
  6234                           ;main.c: 527:                 parser->m_bSum = 0x00;
  6235  000A' 0800'              	movf	Parse@parser^(0+128),w
  6236  000B' 3E05               	addlw	5
  6237  000C' 0086               	movwf	6
  6238  000D' 0187               	clrf	7
  6239  000E' 0181               	clrf	1
  6240                           
  6241                           ;main.c: 528:             } else
  6242  000F' 0008               	return
  6243  0010'                    l5301:
  6244                           
  6245                           ;main.c: 529:                 SendNack(WRONG_MESSAGE);
  6246  0010' 3002               	movlw	2
  6247  0011' 3180' 2000'        	fcall	_SendNack
  6248  0013' 0008               	return
  6249  0014'                    l5303:
  6250                           
  6251                           ;main.c: 533:             parser->m_MsgID = data;
  6252  0014' 0A00'              	incf	Parse@parser^(0+128),w
  6253  0015' 0086               	movwf	6
  6254  0016' 0187               	clrf	7
  6255  0017' 0800'              	movf	Parse@data^(0+128),w
  6256  0018' 0081               	movwf	1
  6257                           
  6258                           ;main.c: 534:             parser->m_bEcho = 1;
  6259  0019' 0800'              	movf	Parse@parser^(0+128),w
  6260  001A' 3E0B               	addlw	11
  6261  001B' 0086               	movwf	6
  6262  001C' 0187               	clrf	7
  6263  001D' 0181               	clrf	1
  6264  001E' 0A81               	incf	1,f
  6265                           
  6266                           ;main.c: 536:             switch ((uint8_t) parser->m_MsgID) {
  6267  001F' 2800'              	goto	l5335
  6268  0020'                    l5307:
  6269                           
  6270                           ;main.c: 540:                     parser->m_bEcho = 0;
  6271  0020' 0800'              	movf	Parse@parser^(0+128),w
  6272  0021' 3E0B               	addlw	11
  6273  0022' 0086               	movwf	6
  6274  0023' 0187               	clrf	7
  6275  0024' 0181               	clrf	1
  6276                           
  6277                           ;main.c: 541:                     parser->m_bReplySize = parser->m_bDataSize = 0;
  6278  0025' 0800'              	movf	Parse@parser^(0+128),w
  6279  0026' 3E02               	addlw	2
  6280  0027' 0086               	movwf	6
  6281  0028' 0187               	clrf	7
  6282  0029' 0181               	clrf	1
  6283  002A' 0800'              	movf	Parse@parser^(0+128),w
  6284  002B' 3E03               	addlw	3
  6285  002C' 0086               	movwf	6
  6286  002D' 0187               	clrf	7
  6287  002E' 0181               	clrf	1
  6288                           
  6289                           ;main.c: 542:                     parser->m_State = WAIT_CKSUM;
  6290  002F' 0800'              	movf	Parse@parser^(0+128),w
  6291  0030' 0086               	movwf	6
  6292  0031' 0187               	clrf	7
  6293  0032' 3003               	movlw	3
  6294  0033' 0081               	movwf	1
  6295                           
  6296                           ;main.c: 543:                     break;
  6297  0034' 0008               	return
  6298  0035'                    l5311:
  6299                           
  6300                           ;main.c: 546:                     parser->m_bReplySize = parser->m_bDataSize = 1;
  6301  0035' 0800'              	movf	Parse@parser^(0+128),w
  6302  0036' 3E03               	addlw	3
  6303  0037' 0086               	movwf	6
  6304  0038' 0187               	clrf	7
  6305  0039' 0800'              	movf	Parse@parser^(0+128),w
  6306  003A' 3E02               	addlw	2
  6307  003B' 0084               	movwf	4
  6308  003C' 0185               	clrf	5
  6309  003D' 3001               	movlw	1
  6310  003E' 3F80               	movwi [0]fsr0
  6311  003F' 0081               	movwf	1
  6312                           
  6313                           ;main.c: 547:                     parser->m_State = WAIT_VALUE;
  6314  0040' 0800'              	movf	Parse@parser^(0+128),w
  6315  0041' 0086               	movwf	6
  6316  0042' 0187               	clrf	7
  6317  0043' 3002               	movlw	2
  6318  0044' 0081               	movwf	1
  6319                           
  6320                           ;main.c: 548:                     break;
  6321  0045' 0008               	return
  6322  0046'                    l5315:
  6323                           
  6324                           ;main.c: 553:                     parser->m_bEcho = 0;
  6325  0046' 0800'              	movf	Parse@parser^(0+128),w
  6326  0047' 3E0B               	addlw	11
  6327  0048' 0086               	movwf	6
  6328  0049' 0187               	clrf	7
  6329  004A' 0181               	clrf	1
  6330                           
  6331                           ;main.c: 554:                     parser->m_bReplySize = parser->m_bDataSize = 1;
  6332  004B' 0800'              	movf	Parse@parser^(0+128),w
  6333  004C' 3E03               	addlw	3
  6334  004D' 0086               	movwf	6
  6335  004E' 0187               	clrf	7
  6336  004F' 0800'              	movf	Parse@parser^(0+128),w
  6337  0050' 3E02               	addlw	2
  6338  0051' 0084               	movwf	4
  6339  0052' 0185               	clrf	5
  6340  0053' 3001               	movlw	1
  6341  0054' 3F80               	movwi [0]fsr0
  6342  0055' 0081               	movwf	1
  6343                           
  6344                           ;main.c: 555:                     parser->m_State = WAIT_VALUE;
  6345  0056' 0800'              	movf	Parse@parser^(0+128),w
  6346  0057' 0086               	movwf	6
  6347  0058' 0187               	clrf	7
  6348  0059' 3002               	movlw	2
  6349  005A' 0081               	movwf	1
  6350                           
  6351                           ;main.c: 556:                     break;
  6352  005B' 0008               	return
  6353  005C'                    l5321:
  6354                           
  6355                           ;main.c: 559:                     parser->m_bReplySize = parser->m_bDataSize = 2;
  6356  005C' 0800'              	movf	Parse@parser^(0+128),w
  6357  005D' 3E03               	addlw	3
  6358  005E' 0086               	movwf	6
  6359  005F' 0187               	clrf	7
  6360  0060' 0800'              	movf	Parse@parser^(0+128),w
  6361  0061' 3E02               	addlw	2
  6362  0062' 0084               	movwf	4
  6363  0063' 0185               	clrf	5
  6364  0064' 3002               	movlw	2
  6365  0065' 3F80               	movwi [0]fsr0
  6366  0066' 0081               	movwf	1
  6367                           
  6368                           ;main.c: 560:                     parser->m_State = WAIT_VALUE;
  6369  0067' 0800'              	movf	Parse@parser^(0+128),w
  6370  0068' 0086               	movwf	6
  6371  0069' 0187               	clrf	7
  6372  006A' 3002               	movlw	2
  6373  006B' 0081               	movwf	1
  6374                           
  6375                           ;main.c: 561:                     break;
  6376  006C' 0008               	return
  6377  006D'                    l5325:
  6378                           
  6379                           ;main.c: 565:                     parser->m_bReplySize = parser->m_bDataSize = 4;
  6380  006D' 0800'              	movf	Parse@parser^(0+128),w
  6381  006E' 3E03               	addlw	3
  6382  006F' 0086               	movwf	6
  6383  0070' 0187               	clrf	7
  6384  0071' 0800'              	movf	Parse@parser^(0+128),w
  6385  0072' 3E02               	addlw	2
  6386  0073' 0084               	movwf	4
  6387  0074' 0185               	clrf	5
  6388  0075' 3004               	movlw	4
  6389  0076' 3F80               	movwi [0]fsr0
  6390  0077' 0081               	movwf	1
  6391                           
  6392                           ;main.c: 566:                     parser->m_State = WAIT_VALUE;
  6393  0078' 0800'              	movf	Parse@parser^(0+128),w
  6394  0079' 0086               	movwf	6
  6395  007A' 0187               	clrf	7
  6396  007B' 3002               	movlw	2
  6397  007C' 0081               	movwf	1
  6398                           
  6399                           ;main.c: 567:                     break;
  6400  007D' 0008               	return
  6401  007E'                    l5329:
  6402                           
  6403                           ;main.c: 570:                     parser->m_bReplySize = parser->m_bDataSize = 5;
  6404  007E' 0800'              	movf	Parse@parser^(0+128),w
  6405  007F' 3E03               	addlw	3
  6406  0080' 0086               	movwf	6
  6407  0081' 0187               	clrf	7
  6408  0082' 0800'              	movf	Parse@parser^(0+128),w
  6409  0083' 3E02               	addlw	2
  6410  0084' 0084               	movwf	4
  6411  0085' 0185               	clrf	5
  6412  0086' 3005               	movlw	5
  6413  0087' 3F80               	movwi [0]fsr0
  6414  0088' 0081               	movwf	1
  6415                           
  6416                           ;main.c: 571:                     parser->m_State = WAIT_VALUE;
  6417  0089' 0800'              	movf	Parse@parser^(0+128),w
  6418  008A' 0086               	movwf	6
  6419  008B' 0187               	clrf	7
  6420  008C' 3002               	movlw	2
  6421  008D' 0081               	movwf	1
  6422                           
  6423                           ;main.c: 572:                     break;
  6424  008E' 0008               	return
  6425  008F'                    l5335:
  6426  008F' 0A00'              	incf	Parse@parser^(0+128),w
  6427  0090' 0086               	movwf	6
  6428  0091' 0187               	clrf	7
  6429  0092' 0801               	movf	1,w
  6430                           
  6431                           ; Switch size 1, requested type "simple"
  6432                           ; Number of cases is 11, Range of values is 1 to 17
  6433                           ; switch strategies available:
  6434                           ; Name         Instructions Cycles
  6435                           ; simple_byte           34    18 (average)
  6436                           ; direct_byte           43     9 (fixed)
  6437                           ; jumptable            263     9 (fixed)
  6438                           ;	Chosen strategy is simple_byte
  6439  0093' 3A01               	xorlw	1	; case 1
  6440  0094' 1903               	skipnz
  6441  0095' 2800'              	goto	l5321
  6442  0096' 3A03               	xorlw	3	; case 2
  6443  0097' 1903               	skipnz
  6444  0098' 2800'              	goto	l5315
  6445  0099' 3A01               	xorlw	1	; case 3
  6446  009A' 1903               	skipnz
  6447  009B' 2800'              	goto	l5315
  6448  009C' 3A07               	xorlw	7	; case 4
  6449  009D' 1903               	skipnz
  6450  009E' 2800'              	goto	l5315
  6451  009F' 3A01               	xorlw	1	; case 5
  6452  00A0' 1903               	skipnz
  6453  00A1' 2800'              	goto	l5307
  6454  00A2' 3A03               	xorlw	3	; case 6
  6455  00A3' 1903               	skipnz
  6456  00A4' 2800'              	goto	l5307
  6457  00A5' 3A01               	xorlw	1	; case 7
  6458  00A6' 1903               	skipnz
  6459  00A7' 2800'              	goto	l5311
  6460  00A8' 3A0F               	xorlw	15	; case 8
  6461  00A9' 1903               	skipnz
  6462  00AA' 2800'              	goto	l5325
  6463  00AB' 3A01               	xorlw	1	; case 9
  6464  00AC' 1903               	skipnz
  6465  00AD' 2800'              	goto	l5325
  6466  00AE' 3A03               	xorlw	3	; case 10
  6467  00AF' 1903               	skipnz
  6468  00B0' 2800'              	goto	l5329
  6469  00B1' 3A1B               	xorlw	27	; case 17
  6470  00B2' 1903               	skipnz
  6471  00B3' 2800'              	goto	l5307
  6472  00B4' 2800'              	goto	l791
  6473  00B5'                    l5337:
  6474                           
  6475                           ;main.c: 577:             parser->m_bDataBuffer[5 - parser->m_bDataSize] = data;
  6476  00B5' 0800'              	movf	Parse@parser^(0+128),w
  6477  00B6' 3E02               	addlw	2
  6478  00B7' 0086               	movwf	6
  6479  00B8' 0187               	clrf	7
  6480  00B9' 0800'              	movf	Parse@parser^(0+128),w
  6481  00BA' 0080'              	movwf	??_Parse^(0+128)
  6482  00BB' 0801               	movf	1,w
  6483  00BC' 0280'              	subwf	??_Parse^(0+128),f
  6484  00BD' 0800'              	movf	??_Parse^(0+128),w
  6485  00BE' 3E0B               	addlw	11
  6486  00BF' 0086               	movwf	6
  6487  00C0' 0187               	clrf	7
  6488  00C1' 0800'              	movf	Parse@data^(0+128),w
  6489  00C2' 0081               	movwf	1
  6490                           
  6491                           ;main.c: 578:             parser->m_bSum += data;
  6492  00C3' 0800'              	movf	Parse@data^(0+128),w
  6493  00C4' 0080'              	movwf	??_Parse^(0+128)
  6494  00C5' 0800'              	movf	Parse@parser^(0+128),w
  6495  00C6' 3E05               	addlw	5
  6496  00C7' 0086               	movwf	6
  6497  00C8' 0187               	clrf	7
  6498  00C9' 0800'              	movf	??_Parse^(0+128),w
  6499  00CA' 0781               	addwf	1,f
  6500                           
  6501                           ;main.c: 579:             parser->m_bDataSize--;
  6502  00CB' 0800'              	movf	Parse@parser^(0+128),w
  6503  00CC' 3E02               	addlw	2
  6504  00CD' 0086               	movwf	6
  6505  00CE' 0187               	clrf	7
  6506  00CF' 3001               	movlw	1
  6507  00D0' 0281               	subwf	1,f
  6508                           
  6509                           ;main.c: 580:             if (parser->m_bDataSize == 0)
  6510  00D1' 0800'              	movf	Parse@parser^(0+128),w
  6511  00D2' 3E02               	addlw	2
  6512  00D3' 0086               	movwf	6
  6513  00D4' 0187               	clrf	7
  6514  00D5' 0801               	movf	1,w
  6515  00D6' 1D03               	btfss	3,2
  6516  00D7' 0008               	return
  6517                           
  6518                           ;main.c: 581:                 parser->m_State = WAIT_CKSUM;
  6519  00D8' 0800'              	movf	Parse@parser^(0+128),w
  6520  00D9' 0086               	movwf	6
  6521  00DA' 0187               	clrf	7
  6522  00DB' 3003               	movlw	3
  6523  00DC' 0081               	movwf	1
  6524  00DD' 0008               	return
  6525  00DE'                    l5341:
  6526                           
  6527                           ;main.c: 585:             parser->m_bCkSum = data;
  6528  00DE' 0800'              	movf	Parse@parser^(0+128),w
  6529  00DF' 3E04               	addlw	4
  6530  00E0' 0086               	movwf	6
  6531  00E1' 0187               	clrf	7
  6532  00E2' 0800'              	movf	Parse@data^(0+128),w
  6533  00E3' 0081               	movwf	1
  6534                           
  6535                           ;main.c: 587:             if (parser->m_bSum == parser->m_bCkSum) {
  6536  00E4' 0800'              	movf	Parse@parser^(0+128),w
  6537  00E5' 3E04               	addlw	4
  6538  00E6' 0086               	movwf	6
  6539  00E7' 0187               	clrf	7
  6540  00E8' 0800'              	movf	Parse@parser^(0+128),w
  6541  00E9' 3E05               	addlw	5
  6542  00EA' 0084               	movwf	4
  6543  00EB' 0185               	clrf	5
  6544  00EC' 0800               	movf	0,w
  6545  00ED' 0601               	xorwf	1,w
  6546  00EE' 1D03               	skipz
  6547  00EF' 2800'              	goto	l5351
  6548                           
  6549                           ;main.c: 588:                 if (parser->m_bEcho)
  6550  00F0' 0800'              	movf	Parse@parser^(0+128),w
  6551  00F1' 3E0B               	addlw	11
  6552  00F2' 0086               	movwf	6
  6553  00F3' 0187               	clrf	7
  6554  00F4' 0801               	movf	1,w
  6555  00F5' 1903               	btfsc	3,2
  6556  00F6' 2800'              	goto	l5349
  6557                           
  6558                           ;main.c: 589:                     SendMsg(parser->m_MsgID, parser->m_bDataBuffer, parser
      +                          ->m_bReplySize);
  6559  00F7' 0800'              	movf	Parse@parser^(0+128),w
  6560  00F8' 3E06               	addlw	6
  6561  00F9' 0020               	movlb	0	; select bank0
  6562  00FA' 0081'              	movwf	SendMsg@data
  6563  00FB' 0021               	movlb	1	; select bank1
  6564  00FC' 0800'              	movf	Parse@parser^(0+128),w
  6565  00FD' 0086               	movwf	6
  6566  00FE' 0187               	clrf	7
  6567  00FF' 3F43               	moviw [3]fsr1
  6568  0100' 0020               	movlb	0	; select bank0
  6569  0101' 0082'              	movwf	SendMsg@data_len
  6570  0102' 0021               	movlb	1	; select bank1
  6571  0103' 0A00'              	incf	Parse@parser^(0+128),w
  6572  0104' 0086               	movwf	6
  6573  0105' 0187               	clrf	7
  6574  0106' 0801               	movf	1,w
  6575  0107' 3180' 2000' 3180'  	fcall	_SendMsg
  6576  010A'                    l5349:
  6577                           
  6578                           ;main.c: 591:                 ProcessMsg(parser->m_MsgID, parser->m_bDataBuffer);
  6579  010A' 0021               	movlb	1	; select bank1
  6580  010B' 0800'              	movf	Parse@parser^(0+128),w
  6581  010C' 3E06               	addlw	6
  6582  010D' 0080'              	movwf	ProcessMsg@data^(0+128)
  6583  010E' 0A00'              	incf	Parse@parser^(0+128),w
  6584  010F' 0086               	movwf	6
  6585  0110' 0187               	clrf	7
  6586  0111' 0801               	movf	1,w
  6587  0112' 3180' 2000' 3180'  	fcall	_ProcessMsg
  6588                           
  6589                           ;main.c: 592:             } else
  6590  0115' 2800'              	goto	l5353
  6591  0116'                    l5351:
  6592                           
  6593                           ;main.c: 593:                 SendNack(CKSUM_ERR);
  6594  0116' 3001               	movlw	1
  6595  0117' 3180' 2000'        	fcall	_SendNack
  6596  0119'                    l5353:
  6597                           
  6598                           ;main.c: 595:             parser->m_State = IDLE;
  6599  0119' 0021               	movlb	1	; select bank1
  6600  011A' 0800'              	movf	Parse@parser^(0+128),w
  6601  011B' 0086               	movwf	6
  6602  011C' 0187               	clrf	7
  6603  011D' 0181               	clrf	1
  6604                           
  6605                           ;main.c: 596:             break;
  6606  011E' 0008               	return
  6607  011F'                    l5355:
  6608                           
  6609                           ;main.c: 599:             SendNack(WRONG_MESSAGE);
  6610  011F' 3002               	movlw	2
  6611  0120' 3180' 2000'        	fcall	_SendNack
  6612                           
  6613                           ;main.c: 600:             parser->m_State = IDLE;
  6614  0122' 0021               	movlb	1	; select bank1
  6615  0123' 0800'              	movf	Parse@parser^(0+128),w
  6616  0124' 0086               	movwf	6
  6617  0125' 0187               	clrf	7
  6618  0126' 0181               	clrf	1
  6619                           
  6620                           ;main.c: 601:     }
  6621  0127' 0008               	return
  6622  0128'                    l5359:
  6623  0128' 0800'              	movf	Parse@parser^(0+128),w
  6624  0129' 0086               	movwf	6
  6625  012A' 0187               	clrf	7
  6626  012B' 0801               	movf	1,w
  6627  012C' 0080'              	movwf	??_Parse^(0+128)
  6628  012D' 0181'              	clrf	(??_Parse^(0+128)+1)
  6629                           
  6630                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6631                           ; Switch size 1, requested type "simple"
  6632                           ; Number of cases is 1, Range of values is 0 to 0
  6633                           ; switch strategies available:
  6634                           ; Name         Instructions Cycles
  6635                           ; simple_byte            4     3 (average)
  6636                           ; direct_byte            8     6 (fixed)
  6637                           ; jumptable            260     6 (fixed)
  6638                           ;	Chosen strategy is simple_byte
  6639  012E' 0800'              	movf	(??_Parse+1)^(0+128),w
  6640  012F' 3A00               	xorlw	0	; case 0
  6641  0130' 1903               	skipnz
  6642  0131' 2800'              	goto	l5405
  6643  0132' 2800'              	goto	l5355
  6644  0133'                    l5405:
  6645                           
  6646                           ; Switch size 1, requested type "simple"
  6647                           ; Number of cases is 4, Range of values is 0 to 3
  6648                           ; switch strategies available:
  6649                           ; Name         Instructions Cycles
  6650                           ; simple_byte           13     7 (average)
  6651                           ; direct_byte           14     6 (fixed)
  6652                           ; jumptable            260     6 (fixed)
  6653                           ;	Chosen strategy is simple_byte
  6654  0133' 0800'              	movf	??_Parse^(0+128),w
  6655  0134' 3A00               	xorlw	0	; case 0
  6656  0135' 1903               	skipnz
  6657  0136' 2800'              	goto	l5295
  6658  0137' 3A01               	xorlw	1	; case 1
  6659  0138' 1903               	skipnz
  6660  0139' 2800'              	goto	l5303
  6661  013A' 3A03               	xorlw	3	; case 2
  6662  013B' 1903               	skipnz
  6663  013C' 2800'              	goto	l5337
  6664  013D' 3A01               	xorlw	1	; case 3
  6665  013E' 1903               	skipnz
  6666  013F' 2800'              	goto	l5341
  6667  0140' 2800'              	goto	l5355
  6668  0141'                    l791:
  6669  0141' 0008               	return
  6670  0142'                    __end_of_Parse:
  6671                           
  6672                           	psect	text15
  6673  0000'                    __ptext15:	
  6674 ;; *************** function _SendNack *****************
  6675 ;; Defined at:
  6676 ;;		line 440 in file "main.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;  error           1    wreg     unsigned char 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  error           1    6[BANK0 ] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      void 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 1F/1
  6687 ;;		On exit  : 1C/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6690 ;;      Params:         0       0       0       0       0       0       0       0
  6691 ;;      Locals:         0       1       0       0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0
  6693 ;;      Totals:         0       1       0       0       0       0       0       0
  6694 ;;Total ram usage:        1 bytes
  6695 ;; Hardware stack levels used: 1
  6696 ;; Hardware stack levels required when called: 9
  6697 ;; This function calls:
  6698 ;;		_SendMsg
  6699 ;; This function is called by:
  6700 ;;		_Parse
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704  0000'                    _SendNack:	
  6705                           ;psect for function _SendNack
  6706                           
  6707                           
  6708                           ;incstack = 0
  6709                           ; Regs used in _SendNack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6710                           ;SendNack@error stored from wreg
  6711  0000' 0020               	movlb	0	; select bank0
  6712  0001' 0086'              	movwf	SendNack@error
  6713                           
  6714                           ;main.c: 441:     SendMsg(RFDU_NVT_NACK, &error, 1);
  6715  0002' 3000'              	movlw	(low (SendNack@error| 0))& (0+255)
  6716  0003' 0081'              	movwf	SendMsg@data
  6717  0004' 0182'              	clrf	SendMsg@data_len
  6718  0005' 0A82'              	incf	SendMsg@data_len,f
  6719  0006' 300B               	movlw	11
  6720  0007' 3180' 2000'        	fcall	_SendMsg
  6721  0009' 0008               	return
  6722  000A'                    __end_of_SendNack:
  6723                           
  6724                           	psect	text16
  6725  0000'                    __ptext16:	
  6726 ;; *************** function _ProcessMsg *****************
  6727 ;; Defined at:
  6728 ;;		line 449 in file "main.c"
  6729 ;; Parameters:    Size  Location     Type
  6730 ;;  msg_id          1    wreg     unsigned char 
  6731 ;;  data            1   11[BANK1 ] PTR unsigned char 
  6732 ;;		 -> main@parser(12), 
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;  msg_id          1   13[BANK1 ] unsigned char 
  6735 ;;  payload         6   14[BANK1 ] unsigned char [6]
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      void 
  6738 ;; Registers used:
  6739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6740 ;; Tracked objects:
  6741 ;;		On entry : 1F/1
  6742 ;;		On exit  : 1C/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6745 ;;      Params:         0       0       1       0       0       0       0       0
  6746 ;;      Locals:         0       0       7       0       0       0       0       0
  6747 ;;      Temps:          0       0       1       0       0       0       0       0
  6748 ;;      Totals:         0       0       9       0       0       0       0       0
  6749 ;;Total ram usage:        9 bytes
  6750 ;; Hardware stack levels used: 1
  6751 ;; Hardware stack levels required when called: 15
  6752 ;; This function calls:
  6753 ;;		_KAPS_GoToIdx
  6754 ;;		_KAPS_StorePos
  6755 ;;		_KAPS_getIndex
  6756 ;;		_KAPS_getPos
  6757 ;;		_KAPS_getStatus
  6758 ;;		_KAPS_setAbsPos
  6759 ;;		_KAPS_setRelPos
  6760 ;;		_SSPA_getPOut
  6761 ;;		_SSPA_getTemp
  6762 ;;		_SSPA_setMute
  6763 ;;		_SendMsg
  6764 ;;		_packLong
  6765 ;;		_unpackLong
  6766 ;;		_unpackWord
  6767 ;; This function is called by:
  6768 ;;		_Parse
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772  0000'                    _ProcessMsg:	
  6773                           ;psect for function _ProcessMsg
  6774                           
  6775                           
  6776                           ;incstack = 0
  6777 ;; hardware stack exceeded
  6778                           ; Regs used in _ProcessMsg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6779                           ;ProcessMsg@msg_id stored from wreg
  6780  0000' 0080'              	movwf	ProcessMsg@msg_id^(0+128)
  6781                           
  6782                           ;main.c: 450:     uint8_t payload[6];;main.c: 452:     switch (msg_id) {
  6783  0001' 2800'              	goto	l5263
  6784  0002'                    l5209:
  6785                           
  6786                           ;main.c: 454:             payload[0] = data[0];
  6787  0002' 0800'              	movf	ProcessMsg@data^(0+128),w
  6788  0003' 0086               	movwf	6
  6789  0004' 0187               	clrf	7
  6790  0005' 0801               	movf	1,w
  6791  0006' 0080'              	movwf	ProcessMsg@payload^(0+128)
  6792                           
  6793                           ;main.c: 455:             payload[1] = (uint8_t) sppas[data[0]].m_Mute;
  6794  0007' 0800'              	movf	ProcessMsg@data^(0+128),w
  6795  0008' 0086               	movwf	6
  6796  0009' 0187               	clrf	7
  6797  000A' 0801               	movf	1,w
  6798  000B' 0080'              	movwf	??_ProcessMsg^(0+128)
  6799  000C' 3002               	movlw	2
  6800  000D'                    u5325:
  6801  000D' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6802  000E' 3EFF               	addlw	-1
  6803  000F' 1D03               	skipz
  6804  0010' 2800'              	goto	u5325
  6805  0011' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6806  0012' 3E00'              	addlw	(low (_sppas| (0+256)))& (0+255)
  6807  0013' 0086               	movwf	6
  6808  0014' 3001               	movlw	1	; select bank2/3
  6809  0015' 0087               	movwf	7
  6810  0016' 0801               	movf	1,w
  6811  0017' 0081'              	movwf	(ProcessMsg@payload^(0+128)+1)
  6812                           
  6813                           ;main.c: 456:             SendMsg(RFDU_NVT_MuteStatus, payload, 2);
  6814  0018' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  6815  0019' 0020               	movlb	0	; select bank0
  6816  001A' 0081'              	movwf	SendMsg@data
  6817  001B' 3002               	movlw	2
  6818  001C' 0082'              	movwf	SendMsg@data_len
  6819  001D' 300C               	movlw	12
  6820  001E' 3180' 2000'        	fcall	_SendMsg
  6821                           
  6822                           ;main.c: 457:             break;
  6823  0020' 0008               	return
  6824  0021'                    l5215:
  6825                           
  6826                           ;main.c: 460:             SSPA_getTemp(&sppas[data[0]], data[0]);
  6827  0021' 0800'              	movf	ProcessMsg@data^(0+128),w
  6828  0022' 0086               	movwf	6
  6829  0023' 0187               	clrf	7
  6830  0024' 0801               	movf	1,w
  6831  0025' 0080'              	movwf	SSPA_getTemp@band^(0+128)
  6832  0026' 0800'              	movf	ProcessMsg@data^(0+128),w
  6833  0027' 0086               	movwf	6
  6834  0028' 0187               	clrf	7
  6835  0029' 0801               	movf	1,w
  6836  002A' 0080'              	movwf	??_ProcessMsg^(0+128)
  6837  002B' 3002               	movlw	2
  6838  002C'                    u5335:
  6839  002C' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6840  002D' 3EFF               	addlw	-1
  6841  002E' 1D03               	skipz
  6842  002F' 2800'              	goto	u5335
  6843  0030' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6844  0031' 3E00'              	addlw	(low (_sppas| (0+256)))& (0+255)
  6845  0032' 3180' 2000' 3180'  	fcall	_SSPA_getTemp
  6846                           
  6847                           ;main.c: 461:             payload[0] = data[0];
  6848  0035' 0021               	movlb	1	; select bank1
  6849  0036' 0800'              	movf	ProcessMsg@data^(0+128),w
  6850  0037' 0086               	movwf	6
  6851  0038' 0187               	clrf	7
  6852  0039' 0801               	movf	1,w
  6853  003A' 0080'              	movwf	ProcessMsg@payload^(0+128)
  6854                           
  6855                           ;main.c: 462:             unpackWord(sppas[data[0]].m_wTemp, &payload[1]);
  6856  003B' 0800'              	movf	ProcessMsg@data^(0+128),w
  6857  003C' 0086               	movwf	6
  6858  003D' 0187               	clrf	7
  6859  003E' 0801               	movf	1,w
  6860  003F' 0080'              	movwf	??_ProcessMsg^(0+128)
  6861  0040' 3002               	movlw	2
  6862  0041'                    u5345:
  6863  0041' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6864  0042' 3EFF               	addlw	-1
  6865  0043' 1D03               	skipz
  6866  0044' 2800'              	goto	u5345
  6867  0045' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6868  0046' 3E00'              	addlw	(low ((_sppas| (0+256)+1)))& (0+255)
  6869  0047' 0086               	movwf	6
  6870  0048' 3001               	movlw	1	; select bank2/3
  6871  0049' 0087               	movwf	7
  6872  004A' 3F40               	moviw [0]fsr1
  6873  004B' 0020               	movlb	0	; select bank0
  6874  004C' 0080'              	movwf	unpackWord@value
  6875  004D' 3F41               	moviw [1]fsr1
  6876  004E' 0081'              	movwf	unpackWord@value+1
  6877  004F' 3000'              	movlw	(low ((ProcessMsg@payload| 0+1)))& (0+255)
  6878  0050' 0082'              	movwf	unpackWord@data
  6879  0051' 3180' 2000' 3180'  	fcall	_unpackWord
  6880                           
  6881                           ;main.c: 463:             SendMsg(RFDU_NVT_SSPATemp, payload, 3);
  6882  0054' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  6883  0055' 0081'              	movwf	SendMsg@data
  6884  0056' 3003               	movlw	3
  6885  0057' 0082'              	movwf	SendMsg@data_len
  6886  0058' 300D               	movlw	13
  6887  0059' 3180' 2000'        	fcall	_SendMsg
  6888                           
  6889                           ;main.c: 464:             break;
  6890  005B' 0008               	return
  6891  005C'                    l5223:
  6892                           
  6893                           ;main.c: 467:             SSPA_getPOut(&sppas[data[0]], data[0]);
  6894  005C' 0800'              	movf	ProcessMsg@data^(0+128),w
  6895  005D' 0086               	movwf	6
  6896  005E' 0187               	clrf	7
  6897  005F' 0801               	movf	1,w
  6898  0060' 0080'              	movwf	SSPA_getPOut@band^(0+128)
  6899  0061' 0800'              	movf	ProcessMsg@data^(0+128),w
  6900  0062' 0086               	movwf	6
  6901  0063' 0187               	clrf	7
  6902  0064' 0801               	movf	1,w
  6903  0065' 0080'              	movwf	??_ProcessMsg^(0+128)
  6904  0066' 3002               	movlw	2
  6905  0067'                    u5355:
  6906  0067' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6907  0068' 3EFF               	addlw	-1
  6908  0069' 1D03               	skipz
  6909  006A' 2800'              	goto	u5355
  6910  006B' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6911  006C' 3E00'              	addlw	(low (_sppas| (0+256)))& (0+255)
  6912  006D' 3180' 2000' 3180'  	fcall	_SSPA_getPOut
  6913                           
  6914                           ;main.c: 468:             payload[0] = data[0];
  6915  0070' 0021               	movlb	1	; select bank1
  6916  0071' 0800'              	movf	ProcessMsg@data^(0+128),w
  6917  0072' 0086               	movwf	6
  6918  0073' 0187               	clrf	7
  6919  0074' 0801               	movf	1,w
  6920  0075' 0080'              	movwf	ProcessMsg@payload^(0+128)
  6921                           
  6922                           ;main.c: 469:             payload[1] = sppas[data[0]].m_bPOut;
  6923  0076' 0800'              	movf	ProcessMsg@data^(0+128),w
  6924  0077' 0086               	movwf	6
  6925  0078' 0187               	clrf	7
  6926  0079' 0801               	movf	1,w
  6927  007A' 0080'              	movwf	??_ProcessMsg^(0+128)
  6928  007B' 3002               	movlw	2
  6929  007C'                    u5365:
  6930  007C' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6931  007D' 3EFF               	addlw	-1
  6932  007E' 1D03               	skipz
  6933  007F' 2800'              	goto	u5365
  6934  0080' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6935  0081' 3E00'              	addlw	(low ((_sppas| (0+256)+3)))& (0+255)
  6936  0082' 0086               	movwf	6
  6937  0083' 3001               	movlw	1	; select bank2/3
  6938  0084' 0087               	movwf	7
  6939  0085' 0801               	movf	1,w
  6940  0086' 0081'              	movwf	(ProcessMsg@payload^(0+128)+1)
  6941                           
  6942                           ;main.c: 470:             unpackLong(sppas[data[0]].m_lCurrent, &payload[2]);
  6943  0087' 0800'              	movf	ProcessMsg@data^(0+128),w
  6944  0088' 0086               	movwf	6
  6945  0089' 0187               	clrf	7
  6946  008A' 0801               	movf	1,w
  6947  008B' 0080'              	movwf	??_ProcessMsg^(0+128)
  6948  008C' 3002               	movlw	2
  6949  008D'                    u5375:
  6950  008D' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6951  008E' 3EFF               	addlw	-1
  6952  008F' 1D03               	skipz
  6953  0090' 2800'              	goto	u5375
  6954  0091' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6955  0092' 3E00'              	addlw	(low ((_sppas| (0+256)+4)))& (0+255)
  6956  0093' 0086               	movwf	6
  6957  0094' 3001               	movlw	1	; select bank2/3
  6958  0095' 0087               	movwf	7
  6959  0096' 3F40               	moviw [0]fsr1
  6960  0097' 0020               	movlb	0	; select bank0
  6961  0098' 0080'              	movwf	unpackLong@value
  6962  0099' 3F41               	moviw [1]fsr1
  6963  009A' 0081'              	movwf	unpackLong@value+1
  6964  009B' 3F42               	moviw [2]fsr1
  6965  009C' 0082'              	movwf	unpackLong@value+2
  6966  009D' 3F43               	moviw [3]fsr1
  6967  009E' 0083'              	movwf	unpackLong@value+3
  6968  009F' 3000'              	movlw	(low ((ProcessMsg@payload| 0+2)))& (0+255)
  6969  00A0' 0084'              	movwf	unpackLong@data
  6970  00A1' 3180' 2000' 3180'  	fcall	_unpackLong
  6971                           
  6972                           ;main.c: 471:             SendMsg(RFDU_NVT_SSPAPout, payload, 6);
  6973  00A4' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  6974  00A5' 0081'              	movwf	SendMsg@data
  6975  00A6' 3006               	movlw	6
  6976  00A7' 0082'              	movwf	SendMsg@data_len
  6977  00A8' 300E               	movlw	14
  6978  00A9' 3180' 2000'        	fcall	_SendMsg
  6979                           
  6980                           ;main.c: 472:             break;
  6981  00AB' 0008               	return
  6982  00AC'                    l5233:
  6983                           
  6984                           ;main.c: 475:             KAPS_getStatus(&kaps);
  6985  00AC' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  6986  00AD' 3180' 2000' 3180'  	fcall	_KAPS_getStatus
  6987                           
  6988                           ;main.c: 476:             payload[0] = (uint8_t) kaps.m_Status;
  6989  00B0' 0801'              	movf	(_kaps^(0+128)+1),w
  6990  00B1' 0080'              	movwf	ProcessMsg@payload^(0+128)
  6991                           
  6992                           ;main.c: 477:             SendMsg(RFDU_NVT_KapsStatus, payload, 1);
  6993  00B2' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  6994  00B3' 0020               	movlb	0	; select bank0
  6995  00B4' 0081'              	movwf	SendMsg@data
  6996  00B5' 0182'              	clrf	SendMsg@data_len
  6997  00B6' 0A82'              	incf	SendMsg@data_len,f
  6998  00B7' 300F               	movlw	15
  6999  00B8' 3180' 2000'        	fcall	_SendMsg
  7000                           
  7001                           ;main.c: 478:             break;
  7002  00BA' 0008               	return
  7003  00BB'                    l5239:
  7004                           
  7005                           ;main.c: 481:             KAPS_getPos(&kaps);
  7006  00BB' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7007  00BC' 3180' 2000' 3180'  	fcall	_KAPS_getPos
  7008                           
  7009                           ;main.c: 482:             unpackLong(kaps.m_lAbsPos, payload);
  7010  00BF' 3002               	movlw	2
  7011  00C0' 3E00'              	addlw	(low (_kaps| 0))& (0+255)
  7012  00C1' 0086               	movwf	6
  7013  00C2' 0187               	clrf	7
  7014  00C3' 3F40               	moviw [0]fsr1
  7015  00C4' 0020               	movlb	0	; select bank0
  7016  00C5' 0080'              	movwf	unpackLong@value
  7017  00C6' 3F41               	moviw [1]fsr1
  7018  00C7' 0081'              	movwf	unpackLong@value+1
  7019  00C8' 3F42               	moviw [2]fsr1
  7020  00C9' 0082'              	movwf	unpackLong@value+2
  7021  00CA' 3F43               	moviw [3]fsr1
  7022  00CB' 0083'              	movwf	unpackLong@value+3
  7023  00CC' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  7024  00CD' 0084'              	movwf	unpackLong@data
  7025  00CE' 3180' 2000' 3180'  	fcall	_unpackLong
  7026                           
  7027                           ;main.c: 483:             SendMsg(RFDU_NVT_KapsAbsPos, payload, 4);
  7028  00D1' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  7029  00D2' 0081'              	movwf	SendMsg@data
  7030  00D3' 3004               	movlw	4
  7031  00D4' 0082'              	movwf	SendMsg@data_len
  7032  00D5' 3010               	movlw	16
  7033  00D6' 3180' 2000'        	fcall	_SendMsg
  7034                           
  7035                           ;main.c: 484:             break;
  7036  00D8' 0008               	return
  7037  00D9'                    l5245:
  7038                           
  7039                           ;main.c: 487:             KAPS_getIndex(&kaps);
  7040  00D9' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7041  00DA' 3180' 2000' 3180'  	fcall	_KAPS_getIndex
  7042                           
  7043                           ;main.c: 488:             payload[0] = kaps.m_bIdxPos;
  7044  00DD' 0806'              	movf	(_kaps^(0+128)+6),w
  7045  00DE' 0080'              	movwf	ProcessMsg@payload^(0+128)
  7046                           
  7047                           ;main.c: 489:             SendMsg(RFDU_NVT_KapsIdxPos, payload, 1);
  7048  00DF' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  7049  00E0' 0020               	movlb	0	; select bank0
  7050  00E1' 0081'              	movwf	SendMsg@data
  7051  00E2' 0182'              	clrf	SendMsg@data_len
  7052  00E3' 0A82'              	incf	SendMsg@data_len,f
  7053  00E4' 3012               	movlw	18
  7054  00E5' 3180' 2000'        	fcall	_SendMsg
  7055                           
  7056                           ;main.c: 490:             break;
  7057  00E7' 0008               	return
  7058  00E8'                    l5251:
  7059                           
  7060                           ;main.c: 493:             SSPA_setMute(&sppas[data[0]], data[0], (mute_t) data[1]);
  7061  00E8' 0800'              	movf	ProcessMsg@data^(0+128),w
  7062  00E9' 0086               	movwf	6
  7063  00EA' 0187               	clrf	7
  7064  00EB' 0801               	movf	1,w
  7065  00EC' 0020               	movlb	0	; select bank0
  7066  00ED' 0080'              	movwf	SSPA_setMute@band
  7067  00EE' 0021               	movlb	1	; select bank1
  7068  00EF' 0800'              	movf	ProcessMsg@data^(0+128),w
  7069  00F0' 0086               	movwf	6
  7070  00F1' 0187               	clrf	7
  7071  00F2' 3F41               	moviw [1]fsr1
  7072  00F3' 0020               	movlb	0	; select bank0
  7073  00F4' 0081'              	movwf	SSPA_setMute@mute
  7074  00F5' 0021               	movlb	1	; select bank1
  7075  00F6' 0800'              	movf	ProcessMsg@data^(0+128),w
  7076  00F7' 0086               	movwf	6
  7077  00F8' 0187               	clrf	7
  7078  00F9' 0801               	movf	1,w
  7079  00FA' 0080'              	movwf	??_ProcessMsg^(0+128)
  7080  00FB' 3002               	movlw	2
  7081  00FC'                    u5385:
  7082  00FC' 3580'              	lslf	??_ProcessMsg^(0+128),f
  7083  00FD' 3EFF               	addlw	-1
  7084  00FE' 1D03               	skipz
  7085  00FF' 2800'              	goto	u5385
  7086  0100' 3500'              	lslf	??_ProcessMsg^(0+128),w
  7087  0101' 3E00'              	addlw	(low (_sppas| (0+256)))& (0+255)
  7088  0102' 3180' 2000'        	fcall	_SSPA_setMute
  7089                           
  7090                           ;main.c: 494:             break;
  7091  0104' 0008               	return
  7092  0105'                    l5253:
  7093                           
  7094                           ;main.c: 497:             KAPS_GoToIdx(&kaps, data[0]);
  7095  0105' 0800'              	movf	ProcessMsg@data^(0+128),w
  7096  0106' 0086               	movwf	6
  7097  0107' 0187               	clrf	7
  7098  0108' 0801               	movf	1,w
  7099  0109' 0020               	movlb	0	; select bank0
  7100  010A' 0080'              	movwf	KAPS_GoToIdx@idx
  7101  010B' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7102  010C' 3180' 2000'        	fcall	_KAPS_GoToIdx
  7103                           
  7104                           ;main.c: 498:             break;
  7105  010E' 0008               	return
  7106  010F'                    l5255:
  7107                           
  7108                           ;main.c: 501:             KAPS_setAbsPos(&kaps, packLong(data));
  7109  010F' 0800'              	movf	ProcessMsg@data^(0+128),w
  7110  0110' 3180' 2000' 3180'  	fcall	_packLong
  7111  0113' 0803'              	movf	?_packLong+3,w
  7112  0114' 0090'              	movwf	KAPS_setAbsPos@pos+3
  7113  0115' 0802'              	movf	?_packLong+2,w
  7114  0116' 008F'              	movwf	KAPS_setAbsPos@pos+2
  7115  0117' 0801'              	movf	?_packLong+1,w
  7116  0118' 008E'              	movwf	KAPS_setAbsPos@pos+1
  7117  0119' 0800'              	movf	?_packLong,w
  7118  011A' 008D'              	movwf	KAPS_setAbsPos@pos
  7119  011B' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7120  011C' 3180' 2000'        	fcall	_KAPS_setAbsPos
  7121                           
  7122                           ;main.c: 502:             break;
  7123  011E' 0008               	return
  7124  011F'                    l5257:
  7125                           
  7126                           ;main.c: 505:             KAPS_setRelPos(&kaps, packLong(data));
  7127  011F' 0800'              	movf	ProcessMsg@data^(0+128),w
  7128  0120' 3180' 2000' 3180'  	fcall	_packLong
  7129  0123' 0803'              	movf	?_packLong+3,w
  7130  0124' 0090'              	movwf	KAPS_setRelPos@offset+3
  7131  0125' 0802'              	movf	?_packLong+2,w
  7132  0126' 008F'              	movwf	KAPS_setRelPos@offset+2
  7133  0127' 0801'              	movf	?_packLong+1,w
  7134  0128' 008E'              	movwf	KAPS_setRelPos@offset+1
  7135  0129' 0800'              	movf	?_packLong,w
  7136  012A' 008D'              	movwf	KAPS_setRelPos@offset
  7137  012B' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7138  012C' 3180' 2000'        	fcall	_KAPS_setRelPos
  7139                           
  7140                           ;main.c: 506:             break;
  7141  012E' 0008               	return
  7142  012F'                    l5259:
  7143                           
  7144                           ;main.c: 509:             KAPS_StorePos(&kaps, data[4], packLong(data));
  7145  012F' 0800'              	movf	ProcessMsg@data^(0+128),w
  7146  0130' 0086               	movwf	6
  7147  0131' 0187               	clrf	7
  7148  0132' 3F44               	moviw [4]fsr1
  7149  0133' 0020               	movlb	0	; select bank0
  7150  0134' 008D'              	movwf	KAPS_StorePos@idx
  7151  0135' 0021               	movlb	1	; select bank1
  7152  0136' 0800'              	movf	ProcessMsg@data^(0+128),w
  7153  0137' 3180' 2000' 3180'  	fcall	_packLong
  7154  013A' 0803'              	movf	?_packLong+3,w
  7155  013B' 0091'              	movwf	KAPS_StorePos@pos+3
  7156  013C' 0802'              	movf	?_packLong+2,w
  7157  013D' 0090'              	movwf	KAPS_StorePos@pos+2
  7158  013E' 0801'              	movf	?_packLong+1,w
  7159  013F' 008F'              	movwf	KAPS_StorePos@pos+1
  7160  0140' 0800'              	movf	?_packLong,w
  7161  0141' 008E'              	movwf	KAPS_StorePos@pos
  7162  0142' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7163  0143' 3180' 2000'        	fcall	_KAPS_StorePos
  7164                           
  7165                           ;main.c: 510:             break;
  7166  0145' 0008               	return
  7167  0146'                    l5263:
  7168  0146' 0800'              	movf	ProcessMsg@msg_id^(0+128),w
  7169                           
  7170                           ; Switch size 1, requested type "simple"
  7171                           ; Number of cases is 11, Range of values is 1 to 17
  7172                           ; switch strategies available:
  7173                           ; Name         Instructions Cycles
  7174                           ; simple_byte           34    18 (average)
  7175                           ; direct_byte           43     9 (fixed)
  7176                           ; jumptable            263     9 (fixed)
  7177                           ;	Chosen strategy is simple_byte
  7178  0147' 3A01               	xorlw	1	; case 1
  7179  0148' 1903               	skipnz
  7180  0149' 2800'              	goto	l5251
  7181  014A' 3A03               	xorlw	3	; case 2
  7182  014B' 1903               	skipnz
  7183  014C' 2800'              	goto	l5209
  7184  014D' 3A01               	xorlw	1	; case 3
  7185  014E' 1903               	skipnz
  7186  014F' 2800'              	goto	l5215
  7187  0150' 3A07               	xorlw	7	; case 4
  7188  0151' 1903               	skipnz
  7189  0152' 2800'              	goto	l5223
  7190  0153' 3A01               	xorlw	1	; case 5
  7191  0154' 1903               	skipnz
  7192  0155' 2800'              	goto	l5233
  7193  0156' 3A03               	xorlw	3	; case 6
  7194  0157' 1903               	skipnz
  7195  0158' 2800'              	goto	l5239
  7196  0159' 3A01               	xorlw	1	; case 7
  7197  015A' 1903               	skipnz
  7198  015B' 2800'              	goto	l5253
  7199  015C' 3A0F               	xorlw	15	; case 8
  7200  015D' 1903               	skipnz
  7201  015E' 2800'              	goto	l5255
  7202  015F' 3A01               	xorlw	1	; case 9
  7203  0160' 1903               	skipnz
  7204  0161' 2800'              	goto	l5257
  7205  0162' 3A03               	xorlw	3	; case 10
  7206  0163' 1903               	skipnz
  7207  0164' 2800'              	goto	l5259
  7208  0165' 3A1B               	xorlw	27	; case 17
  7209  0166' 1903               	skipnz
  7210  0167' 2800'              	goto	l5245
  7211  0168' 2800'              	goto	l762
  7212  0169'                    l762:
  7213  0169' 0008               	return
  7214  016A'                    __end_of_ProcessMsg:
  7215                           
  7216                           	psect	text17
  7217  0000'                    __ptext17:	
  7218 ;; *************** function _unpackWord *****************
  7219 ;; Defined at:
  7220 ;;		line 214 in file "main.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  value           2    0[BANK0 ] unsigned short 
  7223 ;;  data            1    2[BANK0 ] PTR unsigned char 
  7224 ;;		 -> ProcessMsg@payload(6), 
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		wreg, fsr1l, fsr1h
  7231 ;; Tracked objects:
  7232 ;;		On entry : 1F/0
  7233 ;;		On exit  : 1F/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7236 ;;      Params:         0       3       0       0       0       0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0
  7239 ;;      Totals:         0       3       0       0       0       0       0       0
  7240 ;;Total ram usage:        3 bytes
  7241 ;; Hardware stack levels used: 1
  7242 ;; Hardware stack levels required when called: 7
  7243 ;; This function calls:
  7244 ;;		Nothing
  7245 ;; This function is called by:
  7246 ;;		_ProcessMsg
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250  0000'                    _unpackWord:	
  7251                           ;psect for function _unpackWord
  7252                           
  7253                           
  7254                           ;main.c: 216:     data[0] = value & 0xFF;
  7255                           
  7256                           ;incstack = 0
  7257                           ; Regs used in _unpackWord: [wregfsr1]
  7258  0000' 0802'              	movf	unpackWord@data,w
  7259  0001' 0086               	movwf	6
  7260  0002' 0187               	clrf	7
  7261  0003' 0800'              	movf	unpackWord@value,w
  7262  0004' 0081               	movwf	1
  7263                           
  7264                           ;main.c: 217:     data[1] = (value >> 8) & 0xFF;
  7265  0005' 0A02'              	incf	unpackWord@data,w
  7266  0006' 0086               	movwf	6
  7267  0007' 0187               	clrf	7
  7268  0008' 0801'              	movf	unpackWord@value+1,w
  7269  0009' 0081               	movwf	1
  7270  000A' 0008               	return
  7271  000B'                    __end_of_unpackWord:
  7272                           
  7273                           	psect	text18
  7274  0000'                    __ptext18:	
  7275 ;; *************** function _unpackLong *****************
  7276 ;; Defined at:
  7277 ;;		line 200 in file "main.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  value           4    0[BANK0 ] unsigned long 
  7280 ;;  data            1    4[BANK0 ] PTR unsigned char 
  7281 ;;		 -> ProcessMsg@payload(6), 
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;		None
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      void 
  7286 ;; Registers used:
  7287 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7288 ;; Tracked objects:
  7289 ;;		On entry : 1F/0
  7290 ;;		On exit  : 1F/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7293 ;;      Params:         0       5       0       0       0       0       0       0
  7294 ;;      Locals:         0       0       0       0       0       0       0       0
  7295 ;;      Temps:          0       0       0       0       0       0       0       0
  7296 ;;      Totals:         0       5       0       0       0       0       0       0
  7297 ;;Total ram usage:        5 bytes
  7298 ;; Hardware stack levels used: 1
  7299 ;; Hardware stack levels required when called: 7
  7300 ;; This function calls:
  7301 ;;		Nothing
  7302 ;; This function is called by:
  7303 ;;		_ProcessMsg
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307  0000'                    _unpackLong:	
  7308                           ;psect for function _unpackLong
  7309                           
  7310                           
  7311                           ;main.c: 202:     data[0] = (value & 0XFF);
  7312                           
  7313                           ;incstack = 0
  7314                           ; Regs used in _unpackLong: [wreg+fsr1l+fsr1h+status,2+status,0]
  7315  0000' 0804'              	movf	unpackLong@data,w
  7316  0001' 0086               	movwf	6
  7317  0002' 0187               	clrf	7
  7318  0003' 0800'              	movf	unpackLong@value,w
  7319  0004' 0081               	movwf	1
  7320                           
  7321                           ;main.c: 203:     data[1] = (value >> 8) & 0xFF;
  7322  0005' 0A04'              	incf	unpackLong@data,w
  7323  0006' 0086               	movwf	6
  7324  0007' 0187               	clrf	7
  7325  0008' 0801'              	movf	unpackLong@value+1,w
  7326  0009' 0081               	movwf	1
  7327                           
  7328                           ;main.c: 204:     data[2] = (value >> 16) & 0xFF;
  7329  000A' 0804'              	movf	unpackLong@data,w
  7330  000B' 3E02               	addlw	2
  7331  000C' 0086               	movwf	6
  7332  000D' 0187               	clrf	7
  7333  000E' 0802'              	movf	unpackLong@value+2,w
  7334  000F' 0081               	movwf	1
  7335                           
  7336                           ;main.c: 205:     data[3] = (value >> 24) & 0xFF;
  7337  0010' 0804'              	movf	unpackLong@data,w
  7338  0011' 3E03               	addlw	3
  7339  0012' 0086               	movwf	6
  7340  0013' 0187               	clrf	7
  7341  0014' 0803'              	movf	unpackLong@value+3,w
  7342  0015' 0081               	movwf	1
  7343  0016' 0008               	return
  7344  0017'                    __end_of_unpackLong:
  7345                           
  7346                           	psect	text19
  7347  0000'                    __ptext19:	
  7348 ;; *************** function _packLong *****************
  7349 ;; Defined at:
  7350 ;;		line 167 in file "main.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;  data            1    wreg     PTR unsigned char 
  7353 ;;		 -> main@parser(12), 
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  data            1   12[BANK0 ] PTR unsigned char 
  7356 ;;		 -> main@parser(12), 
  7357 ;;  result          4    8[BANK0 ] unsigned long 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  4    0[BANK0 ] unsigned long 
  7360 ;; Registers used:
  7361 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7362 ;; Tracked objects:
  7363 ;;		On entry : 1F/1
  7364 ;;		On exit  : 1F/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7367 ;;      Params:         0       4       0       0       0       0       0       0
  7368 ;;      Locals:         0       5       0       0       0       0       0       0
  7369 ;;      Temps:          0       4       0       0       0       0       0       0
  7370 ;;      Totals:         0      13       0       0       0       0       0       0
  7371 ;;Total ram usage:       13 bytes
  7372 ;; Hardware stack levels used: 1
  7373 ;; Hardware stack levels required when called: 7
  7374 ;; This function calls:
  7375 ;;		Nothing
  7376 ;; This function is called by:
  7377 ;;		_ProcessMsg
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381  0000'                    _packLong:	
  7382                           ;psect for function _packLong
  7383                           
  7384                           
  7385                           ;incstack = 0
  7386                           ; Regs used in _packLong: [wreg+fsr1l+fsr1h+status,2+status,0]
  7387                           ;packLong@data stored from wreg
  7388  0000' 0020               	movlb	0	; select bank0
  7389  0001' 008C'              	movwf	packLong@data
  7390                           
  7391                           ;main.c: 171:     result = (uint32_t) data[0] << 24;
  7392  0002' 080C'              	movf	packLong@data,w
  7393  0003' 0086               	movwf	6
  7394  0004' 0187               	clrf	7
  7395  0005' 0801               	movf	1,w
  7396  0006' 0084'              	movwf	??_packLong
  7397  0007' 0185'              	clrf	??_packLong+1
  7398  0008' 0186'              	clrf	??_packLong+2
  7399  0009' 0187'              	clrf	??_packLong+3
  7400  000A' 3018               	movlw	24
  7401  000B'                    u4035:
  7402  000B' 3584'              	lslf	??_packLong,f
  7403  000C' 0D85'              	rlf	??_packLong+1,f
  7404  000D' 0D86'              	rlf	??_packLong+2,f
  7405  000E' 0D87'              	rlf	??_packLong+3,f
  7406  000F' 0B89               	decfsz	9,f
  7407  0010' 2800'              	goto	u4035
  7408  0011' 0807'              	movf	??_packLong+3,w
  7409  0012' 008B'              	movwf	packLong@result+3
  7410  0013' 0806'              	movf	??_packLong+2,w
  7411  0014' 008A'              	movwf	packLong@result+2
  7412  0015' 0805'              	movf	??_packLong+1,w
  7413  0016' 0089'              	movwf	packLong@result+1
  7414  0017' 0804'              	movf	??_packLong,w
  7415  0018' 0088'              	movwf	packLong@result
  7416                           
  7417                           ;main.c: 172:     result |= (uint32_t) data[1] << 16;
  7418  0019' 0A0C'              	incf	packLong@data,w
  7419  001A' 0086               	movwf	6
  7420  001B' 0187               	clrf	7
  7421  001C' 0801               	movf	1,w
  7422  001D' 0084'              	movwf	??_packLong
  7423  001E' 0185'              	clrf	??_packLong+1
  7424  001F' 0186'              	clrf	??_packLong+2
  7425  0020' 0187'              	clrf	??_packLong+3
  7426  0021' 3010               	movlw	16
  7427  0022'                    u4045:
  7428  0022' 3584'              	lslf	??_packLong,f
  7429  0023' 0D85'              	rlf	??_packLong+1,f
  7430  0024' 0D86'              	rlf	??_packLong+2,f
  7431  0025' 0D87'              	rlf	??_packLong+3,f
  7432  0026' 0B89               	decfsz	9,f
  7433  0027' 2800'              	goto	u4045
  7434  0028' 0804'              	movf	??_packLong,w
  7435  0029' 0488'              	iorwf	packLong@result,f
  7436  002A' 0805'              	movf	??_packLong+1,w
  7437  002B' 0489'              	iorwf	packLong@result+1,f
  7438  002C' 0806'              	movf	??_packLong+2,w
  7439  002D' 048A'              	iorwf	packLong@result+2,f
  7440  002E' 0807'              	movf	??_packLong+3,w
  7441  002F' 048B'              	iorwf	packLong@result+3,f
  7442                           
  7443                           ;main.c: 173:     result |= (uint32_t) data[2] << 8;
  7444  0030' 080C'              	movf	packLong@data,w
  7445  0031' 3E02               	addlw	2
  7446  0032' 0086               	movwf	6
  7447  0033' 0187               	clrf	7
  7448  0034' 0801               	movf	1,w
  7449  0035' 0084'              	movwf	??_packLong
  7450  0036' 0185'              	clrf	??_packLong+1
  7451  0037' 0186'              	clrf	??_packLong+2
  7452  0038' 0187'              	clrf	??_packLong+3
  7453  0039' 3008               	movlw	8
  7454  003A'                    u4055:
  7455  003A' 3584'              	lslf	??_packLong,f
  7456  003B' 0D85'              	rlf	??_packLong+1,f
  7457  003C' 0D86'              	rlf	??_packLong+2,f
  7458  003D' 0D87'              	rlf	??_packLong+3,f
  7459  003E' 0B89               	decfsz	9,f
  7460  003F' 2800'              	goto	u4055
  7461  0040' 0804'              	movf	??_packLong,w
  7462  0041' 0488'              	iorwf	packLong@result,f
  7463  0042' 0805'              	movf	??_packLong+1,w
  7464  0043' 0489'              	iorwf	packLong@result+1,f
  7465  0044' 0806'              	movf	??_packLong+2,w
  7466  0045' 048A'              	iorwf	packLong@result+2,f
  7467  0046' 0807'              	movf	??_packLong+3,w
  7468  0047' 048B'              	iorwf	packLong@result+3,f
  7469                           
  7470                           ;main.c: 174:     result |= (uint32_t) data[3];
  7471  0048' 080C'              	movf	packLong@data,w
  7472  0049' 3E03               	addlw	3
  7473  004A' 0086               	movwf	6
  7474  004B' 0187               	clrf	7
  7475  004C' 0801               	movf	1,w
  7476  004D' 0488'              	iorwf	packLong@result,f
  7477                           
  7478                           ;main.c: 176:     return result;
  7479  004E' 080B'              	movf	packLong@result+3,w
  7480  004F' 0083'              	movwf	?_packLong+3
  7481  0050' 080A'              	movf	packLong@result+2,w
  7482  0051' 0082'              	movwf	?_packLong+2
  7483  0052' 0809'              	movf	packLong@result+1,w
  7484  0053' 0081'              	movwf	?_packLong+1
  7485  0054' 0808'              	movf	packLong@result,w
  7486  0055' 0080'              	movwf	?_packLong
  7487  0056' 0008               	return
  7488  0057'                    __end_of_packLong:
  7489                           
  7490                           	psect	text20
  7491  0000'                    __ptext20:	
  7492 ;; *************** function _SendMsg *****************
  7493 ;; Defined at:
  7494 ;;		line 418 in file "main.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  msg_id          1    wreg     unsigned char 
  7497 ;;  data            1    1[BANK0 ] PTR unsigned char 
  7498 ;;		 -> main@parser(12), ProcessMsg@payload(6), SendNack@error(1), 
  7499 ;;  data_len        1    2[BANK0 ] unsigned char 
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  msg_id          1    5[BANK0 ] unsigned char 
  7502 ;;  sum             1    4[BANK0 ] unsigned char 
  7503 ;; Return value:  Size  Location     Type
  7504 ;;                  1    wreg      void 
  7505 ;; Registers used:
  7506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 1E/1
  7509 ;;		On exit  : 1C/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7512 ;;      Params:         0       2       0       0       0       0       0       0
  7513 ;;      Locals:         0       2       0       0       0       0       0       0
  7514 ;;      Temps:          0       1       0       0       0       0       0       0
  7515 ;;      Totals:         0       5       0       0       0       0       0       0
  7516 ;;Total ram usage:        5 bytes
  7517 ;; Hardware stack levels used: 1
  7518 ;; Hardware stack levels required when called: 8
  7519 ;; This function calls:
  7520 ;;		_EUSART_Write
  7521 ;; This function is called by:
  7522 ;;		_SendNack
  7523 ;;		_ProcessMsg
  7524 ;;		_Parse
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528  0000'                    _SendMsg:	
  7529                           ;psect for function _SendMsg
  7530                           
  7531                           
  7532                           ;incstack = 0
  7533                           ; Regs used in _SendMsg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7534                           ;SendMsg@msg_id stored from wreg
  7535  0000' 0020               	movlb	0	; select bank0
  7536  0001' 0085'              	movwf	SendMsg@msg_id
  7537                           
  7538                           ;main.c: 419:     uint8_t sum = 0x00;
  7539  0002' 0184'              	clrf	SendMsg@sum
  7540                           
  7541                           ;main.c: 421:     EUSART_Write(0x01);
  7542  0003' 0180'              	clrf	EUSART_Write@txData
  7543  0004' 0A80'              	incf	EUSART_Write@txData,f
  7544  0005' 3180' 2000' 3180'  	fcall	_EUSART_Write
  7545                           
  7546                           ;main.c: 422:     EUSART_Write(msg_id);
  7547  0008' 0020               	movlb	0	; select bank0
  7548  0009' 0805'              	movf	SendMsg@msg_id,w
  7549  000A' 0080'              	movwf	EUSART_Write@txData
  7550  000B' 3180' 2000' 3180'  	fcall	_EUSART_Write
  7551                           
  7552                           ;main.c: 424:     if (msg_id == RFDU_NVT_NACK)
  7553  000E' 300B               	movlw	11
  7554  000F' 0020               	movlb	0	; select bank0
  7555  0010' 0605'              	xorwf	SendMsg@msg_id,w
  7556  0011' 1903               	btfsc	3,2
  7557  0012' 0008               	return
  7558  0013'                    l5087:
  7559                           
  7560                           ;main.c: 427:     for (; data_len > 0; data_len--) {
  7561  0013' 0802'              	movf	SendMsg@data_len,w
  7562  0014' 1903               	btfsc	3,2
  7563  0015' 2800'              	goto	l5101
  7564                           
  7565                           ;main.c: 428:         EUSART_Write(*data);
  7566  0016' 0801'              	movf	SendMsg@data,w
  7567  0017' 0086               	movwf	6
  7568  0018' 0187               	clrf	7
  7569  0019' 0801               	movf	1,w
  7570  001A' 0080'              	movwf	EUSART_Write@txData
  7571  001B' 3180' 2000' 3180'  	fcall	_EUSART_Write
  7572                           
  7573                           ;main.c: 429:         sum += *data;
  7574  001E' 0020               	movlb	0	; select bank0
  7575  001F' 0801'              	movf	SendMsg@data,w
  7576  0020' 0086               	movwf	6
  7577  0021' 0187               	clrf	7
  7578  0022' 0801               	movf	1,w
  7579  0023' 0083'              	movwf	??_SendMsg
  7580  0024' 0803'              	movf	??_SendMsg,w
  7581  0025' 0784'              	addwf	SendMsg@sum,f
  7582                           
  7583                           ;main.c: 430:         data++;
  7584  0026' 3001               	movlw	1
  7585  0027' 0083'              	movwf	??_SendMsg
  7586  0028' 0803'              	movf	??_SendMsg,w
  7587  0029' 0781'              	addwf	SendMsg@data,f
  7588                           
  7589                           ;main.c: 431:     }
  7590  002A' 3001               	movlw	1
  7591  002B' 0282'              	subwf	SendMsg@data_len,f
  7592  002C' 2800'              	goto	l5087
  7593  002D'                    l5101:
  7594                           
  7595                           ;main.c: 433:     EUSART_Write(sum);
  7596  002D' 0804'              	movf	SendMsg@sum,w
  7597  002E' 0080'              	movwf	EUSART_Write@txData
  7598  002F' 3180' 2000'        	fcall	_EUSART_Write
  7599  0031' 0008               	return
  7600  0032'                    __end_of_SendMsg:
  7601                           
  7602                           	psect	text21
  7603  0000'                    __ptext21:	
  7604 ;; *************** function _EUSART_Write *****************
  7605 ;; Defined at:
  7606 ;;		line 235 in file "mcc_generated_files/uart/src/eusart.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  txData          1    0[BANK0 ] unsigned char 
  7609 ;; Auto vars:     Size  Location     Type
  7610 ;;		None
  7611 ;; Return value:  Size  Location     Type
  7612 ;;                  1    wreg      void 
  7613 ;; Registers used:
  7614 ;;		wreg
  7615 ;; Tracked objects:
  7616 ;;		On entry : 1F/0
  7617 ;;		On exit  : 1F/3
  7618 ;;		Unchanged: 0/0
  7619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7620 ;;      Params:         0       1       0       0       0       0       0       0
  7621 ;;      Locals:         0       0       0       0       0       0       0       0
  7622 ;;      Temps:          0       0       0       0       0       0       0       0
  7623 ;;      Totals:         0       1       0       0       0       0       0       0
  7624 ;;Total ram usage:        1 bytes
  7625 ;; Hardware stack levels used: 1
  7626 ;; Hardware stack levels required when called: 7
  7627 ;; This function calls:
  7628 ;;		Nothing
  7629 ;; This function is called by:
  7630 ;;		_SendMsg
  7631 ;; This function uses a non-reentrant model
  7632 ;;
  7633                           
  7634  0000'                    _EUSART_Write:	
  7635                           ;psect for function _EUSART_Write
  7636                           
  7637                           
  7638                           ;mcc_generated_files/uart/src/eusart.c: 235: void EUSART_Write(uint8_t txData);mcc_gener
      +                          ated_files/uart/src/eusart.c: 236: {;mcc_generated_files/uart/src/eusart.c: 237:     TX1
      +                          REG = txData;
  7639                           
  7640                           ;incstack = 0
  7641                           ; Regs used in _EUSART_Write: [wreg]
  7642  0000' 0800'              	movf	EUSART_Write@txData,w
  7643  0001' 0023               	movlb	3	; select bank3
  7644  0002' 009A               	movwf	26	;volatile
  7645  0003' 0008               	return
  7646  0004'                    __end_of_EUSART_Write:
  7647                           
  7648                           	psect	text22
  7649  0000'                    __ptext22:	
  7650 ;; *************** function _SSPA_setMute *****************
  7651 ;; Defined at:
  7652 ;;		line 254 in file "main.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;  sspa            1    wreg     PTR struct .
  7655 ;;		 -> sppas(24), 
  7656 ;;  band            1    0[BANK0 ] unsigned char 
  7657 ;;  mute            1    1[BANK0 ] enum E9987
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;  sspa            1    2[BANK0 ] PTR struct .
  7660 ;;		 -> sppas(24), 
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  1    wreg      void 
  7663 ;; Registers used:
  7664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7665 ;; Tracked objects:
  7666 ;;		On entry : 1F/1
  7667 ;;		On exit  : 1F/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7670 ;;      Params:         0       2       0       0       0       0       0       0
  7671 ;;      Locals:         0       1       0       0       0       0       0       0
  7672 ;;      Temps:          0       0       0       0       0       0       0       0
  7673 ;;      Totals:         0       3       0       0       0       0       0       0
  7674 ;;Total ram usage:        3 bytes
  7675 ;; Hardware stack levels used: 1
  7676 ;; Hardware stack levels required when called: 7
  7677 ;; This function calls:
  7678 ;;		Nothing
  7679 ;; This function is called by:
  7680 ;;		_ProcessMsg
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684  0000'                    _SSPA_setMute:	
  7685                           ;psect for function _SSPA_setMute
  7686                           
  7687                           
  7688                           ;incstack = 0
  7689                           ; Regs used in _SSPA_setMute: [wreg-fsr1h+status,2+status,0]
  7690                           ;SSPA_setMute@sspa stored from wreg
  7691  0000' 0020               	movlb	0	; select bank0
  7692  0001' 0082'              	movwf	SSPA_setMute@sspa
  7693                           
  7694                           ;main.c: 256:     switch (band) {
  7695  0002' 2800'              	goto	l5021
  7696  0003'                    l5015:
  7697                           
  7698                           ;main.c: 258:             if (mute == UNMUTE)
  7699  0003' 0801'              	movf	SSPA_setMute@mute,w
  7700  0004' 1D03               	btfss	3,2
  7701  0005' 2800'              	goto	l682
  7702                           
  7703                           ;main.c: 259:                 do { LATCbits.LATC7 = 1; } while(0);
  7704  0006' 0022               	movlb	2	; select bank2
  7705  0007' 178E               	bsf	14,7	;volatile
  7706  0008' 2800'              	goto	l5023
  7707  0009'                    l682:	
  7708                           ;main.c: 261:                 do { LATCbits.LATC7 = 0; } while(0);
  7709                           
  7710  0009' 0022               	movlb	2	; select bank2
  7711  000A' 138E               	bcf	14,7	;volatile
  7712  000B' 2800'              	goto	l5023
  7713  000C'                    l5017:
  7714                           
  7715                           ;main.c: 265:             if (mute == UNMUTE)
  7716  000C' 0801'              	movf	SSPA_setMute@mute,w
  7717  000D' 1D03               	btfss	3,2
  7718  000E' 2800'              	goto	l690
  7719                           
  7720                           ;main.c: 266:                 do { LATCbits.LATC6 = 1; } while(0);
  7721  000F' 0022               	movlb	2	; select bank2
  7722  0010' 170E               	bsf	14,6	;volatile
  7723  0011' 2800'              	goto	l5023
  7724  0012'                    l690:	
  7725                           ;main.c: 268:                 do { LATCbits.LATC6 = 0; } while(0);
  7726                           
  7727  0012' 0022               	movlb	2	; select bank2
  7728  0013' 130E               	bcf	14,6	;volatile
  7729  0014' 2800'              	goto	l5023
  7730  0015'                    l5021:
  7731  0015' 0800'              	movf	SSPA_setMute@band,w
  7732                           
  7733                           ; Switch size 1, requested type "simple"
  7734                           ; Number of cases is 3, Range of values is 0 to 2
  7735                           ; switch strategies available:
  7736                           ; Name         Instructions Cycles
  7737                           ; simple_byte           10     6 (average)
  7738                           ; direct_byte           12     6 (fixed)
  7739                           ; jumptable            260     6 (fixed)
  7740                           ;	Chosen strategy is simple_byte
  7741  0016' 3A00               	xorlw	0	; case 0
  7742  0017' 1903               	skipnz
  7743  0018' 2800'              	goto	l5023
  7744  0019' 3A01               	xorlw	1	; case 1
  7745  001A' 1903               	skipnz
  7746  001B' 2800'              	goto	l5015
  7747  001C' 3A03               	xorlw	3	; case 2
  7748  001D' 1903               	skipnz
  7749  001E' 2800'              	goto	l5017
  7750  001F' 2800'              	goto	l5023
  7751  0020'                    l5023:
  7752                           
  7753                           ;main.c: 276:     sspa->m_Mute = mute;
  7754  0020' 0020               	movlb	0	; select bank0
  7755  0021' 0802'              	movf	SSPA_setMute@sspa,w
  7756  0022' 0086               	movwf	6
  7757  0023' 3001               	movlw	1	; select bank2/3
  7758  0024' 0087               	movwf	7
  7759  0025' 0801'              	movf	SSPA_setMute@mute,w
  7760  0026' 0081               	movwf	1
  7761  0027' 0008               	return
  7762  0028'                    __end_of_SSPA_setMute:
  7763                           
  7764                           	psect	text23
  7765  0000'                    __ptext23:	
  7766 ;; *************** function _SSPA_getTemp *****************
  7767 ;; Defined at:
  7768 ;;		line 284 in file "main.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;  sspa            1    wreg     PTR struct .
  7771 ;;		 -> sppas(24), 
  7772 ;;  band            1    4[BANK1 ] unsigned char 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  sspa            1    9[BANK1 ] PTR struct .
  7775 ;;		 -> sppas(24), 
  7776 ;;  adc_value       2    7[BANK1 ] unsigned short 
  7777 ;;  channel         1   10[BANK1 ] enum E9222
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      void 
  7780 ;; Registers used:
  7781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7782 ;; Tracked objects:
  7783 ;;		On entry : 1F/1
  7784 ;;		On exit  : 1F/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7787 ;;      Params:         0       0       1       0       0       0       0       0
  7788 ;;      Locals:         0       0       4       0       0       0       0       0
  7789 ;;      Temps:          0       0       2       0       0       0       0       0
  7790 ;;      Totals:         0       0       7       0       0       0       0       0
  7791 ;;Total ram usage:        7 bytes
  7792 ;; Hardware stack levels used: 1
  7793 ;; Hardware stack levels required when called: 14
  7794 ;; This function calls:
  7795 ;;		___assert_fail
  7796 ;;		___fldiv
  7797 ;;		___flmul
  7798 ;;		___flsub
  7799 ;;		___fltol
  7800 ;;		___xxtofl
  7801 ;;		_getADCValue
  7802 ;; This function is called by:
  7803 ;;		_ProcessMsg
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807  0000'                    _SSPA_getTemp:	
  7808                           ;psect for function _SSPA_getTemp
  7809                           
  7810                           
  7811                           ;incstack = 0
  7812 ;; hardware stack exceeded
  7813                           ; Regs used in _SSPA_getTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7814                           ;SSPA_getTemp@sspa stored from wreg
  7815  0000' 0080'              	movwf	SSPA_getTemp@sspa^(0+128)
  7816                           
  7817                           ;main.c: 285:     adc_channel_t channel;;main.c: 286:     adc_result_t adc_value;;main.c
      +                          : 288:     switch (band) {
  7818  0001' 2800'              	goto	l5033
  7819  0002'                    l5027:
  7820                           
  7821                           ;main.c: 290:             channel = TM_Ka;
  7822  0002' 3003               	movlw	3
  7823  0003' 2800'              	goto	L1
  7824  0004'                    l5029:	
  7825                           ;main.c: 292:             break;
  7826                           
  7827                           
  7828                           ;main.c: 294:             channel = TM_X;
  7829  0004' 3007               	movlw	7
  7830  0005'                    L1:
  7831  0005' 0080'              	movwf	SSPA_getTemp@channel^(0+128)
  7832                           
  7833                           ;main.c: 295:             break;
  7834  0006' 2800'              	goto	l5035
  7835  0007'                    l5033:
  7836  0007' 0800'              	movf	SSPA_getTemp@band^(0+128),w
  7837                           
  7838                           ; Switch size 1, requested type "simple"
  7839                           ; Number of cases is 3, Range of values is 0 to 2
  7840                           ; switch strategies available:
  7841                           ; Name         Instructions Cycles
  7842                           ; simple_byte           10     6 (average)
  7843                           ; direct_byte           12     6 (fixed)
  7844                           ; jumptable            260     6 (fixed)
  7845                           ;	Chosen strategy is simple_byte
  7846  0008' 3A00               	xorlw	0	; case 0
  7847  0009' 1903               	skipnz
  7848  000A' 2800'              	goto	l5035
  7849  000B' 3A01               	xorlw	1	; case 1
  7850  000C' 1903               	skipnz
  7851  000D' 2800'              	goto	l5027
  7852  000E' 3A03               	xorlw	3	; case 2
  7853  000F' 1903               	skipnz
  7854  0010' 2800'              	goto	l5029
  7855  0011' 2800'              	goto	l5035
  7856  0012'                    l5035:
  7857                           
  7858                           ;main.c: 302:     ((void)((channel == TM_Ka || channel == TM_X) || (__assert_fail("chann
      +                          el == TM_Ka || channel == TM_X", "main.c", 302, __func__),0)));
  7859  0012' 3003               	movlw	3
  7860  0013' 0600'              	xorwf	SSPA_getTemp@channel^(0+128),w
  7861  0014' 1903               	btfsc	3,2
  7862  0015' 2800'              	goto	l5041
  7863  0016' 3007               	movlw	7
  7864  0017' 0600'              	xorwf	SSPA_getTemp@channel^(0+128),w
  7865  0018' 1903               	btfsc	3,2
  7866  0019' 2800'              	goto	l5041
  7867  001A' 3000'              	movlw	low (STR_7| (0+32768))
  7868  001B' 0020               	movlb	0	; select bank0
  7869  001C' 00B0'              	movwf	___assert_fail@expr
  7870  001D' 3000'              	movlw	high (STR_7| (0+32768))
  7871  001E' 00B1'              	movwf	___assert_fail@expr+1
  7872  001F' 3000'              	movlw	low (STR_2| (0+32768))
  7873  0020' 00B2'              	movwf	___assert_fail@file
  7874  0021' 3000'              	movlw	high (STR_2| (0+32768))
  7875  0022' 00B3'              	movwf	___assert_fail@file+1
  7876  0023' 302E               	movlw	46
  7877  0024' 00B4'              	movwf	___assert_fail@line
  7878  0025' 3001               	movlw	1
  7879  0026' 00B5'              	movwf	___assert_fail@line+1
  7880  0027' 3000'              	movlw	low (STR_9| (0+32768))
  7881  0028' 00B6'              	movwf	___assert_fail@func
  7882  0029' 3000'              	movlw	high (STR_9| (0+32768))
  7883  002A' 00B7'              	movwf	___assert_fail@func+1
  7884  002B' 3180' 2000' 3180'  	fcall	___assert_fail
  7885  002E'                    l5041:
  7886                           
  7887                           ;main.c: 303:     adc_value = getADCValue(channel);
  7888  002E' 0021               	movlb	1	; select bank1
  7889  002F' 0800'              	movf	SSPA_getTemp@channel^(0+128),w
  7890  0030' 3180' 2000' 3180'  	fcall	_getADCValue
  7891  0033' 0839'              	movf	?_getADCValue+1,w
  7892  0034' 0021               	movlb	1	; select bank1
  7893  0035' 0080'              	movwf	(SSPA_getTemp@adc_value+1)^(0+128)
  7894  0036' 0020               	movlb	0	; select bank0
  7895  0037' 0838'              	movf	?_getADCValue,w
  7896  0038' 0021               	movlb	1	; select bank1
  7897  0039' 0080'              	movwf	SSPA_getTemp@adc_value^(0+128)
  7898                           
  7899                           ;main.c: 305:     sspa->m_wTemp = (uint16_t)(int16_t) ((0 - 4.3 * (1024 - (adc_value))) 
      +                          / 1);
  7900  003A' 3000               	movlw	0
  7901  003B' 0020               	movlb	0	; select bank0
  7902  003C' 00AF'              	movwf	___flsub@b+3
  7903  003D' 3000               	movlw	0
  7904  003E' 00AE'              	movwf	___flsub@b+2
  7905  003F' 3000               	movlw	0
  7906  0040' 00AD'              	movwf	___flsub@b+1
  7907  0041' 3000               	movlw	0
  7908  0042' 00AC'              	movwf	___flsub@b
  7909  0043' 3000               	movlw	0
  7910  0044' 0021               	movlb	1	; select bank1
  7911  0045' 0080'              	movwf	??_SSPA_getTemp^(0+128)
  7912  0046' 3004               	movlw	4
  7913  0047' 0081'              	movwf	(??_SSPA_getTemp^(0+128)+1)
  7914  0048' 0800'              	movf	SSPA_getTemp@adc_value^(0+128),w
  7915  0049' 0200'              	subwf	??_SSPA_getTemp^(0+128),w
  7916  004A' 0020               	movlb	0	; select bank0
  7917  004B' 0080'              	movwf	___xxtofl@val
  7918  004C' 0021               	movlb	1	; select bank1
  7919  004D' 0800'              	movf	(SSPA_getTemp@adc_value+1)^(0+128),w
  7920  004E' 3B00'              	subwfb	(??_SSPA_getTemp+1)^(0+128),w
  7921  004F' 0020               	movlb	0	; select bank0
  7922  0050' 0081'              	movwf	___xxtofl@val+1
  7923  0051' 0182'              	clrf	___xxtofl@val+2
  7924  0052' 0183'              	clrf	___xxtofl@val+3
  7925  0053' 3000               	movlw	0
  7926  0054' 3180' 2000' 3180'  	fcall	___xxtofl
  7927  0057' 0803'              	movf	?___xxtofl+3,w
  7928  0058' 0095'              	movwf	___flmul@a+3
  7929  0059' 0802'              	movf	?___xxtofl+2,w
  7930  005A' 0094'              	movwf	___flmul@a+2
  7931  005B' 0801'              	movf	?___xxtofl+1,w
  7932  005C' 0093'              	movwf	___flmul@a+1
  7933  005D' 0800'              	movf	?___xxtofl,w
  7934  005E' 0092'              	movwf	___flmul@a
  7935  005F' 3040               	movlw	64
  7936  0060' 0091'              	movwf	___flmul@b+3
  7937  0061' 3089               	movlw	137
  7938  0062' 0090'              	movwf	___flmul@b+2
  7939  0063' 3099               	movlw	153
  7940  0064' 008F'              	movwf	___flmul@b+1
  7941  0065' 309A               	movlw	154
  7942  0066' 008E'              	movwf	___flmul@b
  7943  0067' 3180' 2000' 3180'  	fcall	___flmul
  7944  006A' 0811'              	movf	?___flmul+3,w
  7945  006B' 00AB'              	movwf	___flsub@a+3
  7946  006C' 0810'              	movf	?___flmul+2,w
  7947  006D' 00AA'              	movwf	___flsub@a+2
  7948  006E' 080F'              	movf	?___flmul+1,w
  7949  006F' 00A9'              	movwf	___flsub@a+1
  7950  0070' 080E'              	movf	?___flmul,w
  7951  0071' 00A8'              	movwf	___flsub@a
  7952  0072' 3180' 2000' 3180'  	fcall	___flsub
  7953  0075' 082B'              	movf	?___flsub+3,w
  7954  0076' 00B7'              	movwf	___fldiv@b+3
  7955  0077' 082A'              	movf	?___flsub+2,w
  7956  0078' 00B6'              	movwf	___fldiv@b+2
  7957  0079' 0829'              	movf	?___flsub+1,w
  7958  007A' 00B5'              	movwf	___fldiv@b+1
  7959  007B' 0828'              	movf	?___flsub,w
  7960  007C' 00B4'              	movwf	___fldiv@b
  7961  007D' 303F               	movlw	63
  7962  007E' 00B3'              	movwf	___fldiv@a+3
  7963  007F' 3080               	movlw	128
  7964  0080' 00B2'              	movwf	___fldiv@a+2
  7965  0081' 3000               	movlw	0
  7966  0082' 00B1'              	movwf	___fldiv@a+1
  7967  0083' 3000               	movlw	0
  7968  0084' 00B0'              	movwf	___fldiv@a
  7969  0085' 3180' 2000' 3180'  	fcall	___fldiv
  7970  0088' 0833'              	movf	?___fldiv+3,w
  7971  0089' 00CD'              	movwf	___fltol@f1+3
  7972  008A' 0832'              	movf	?___fldiv+2,w
  7973  008B' 00CC'              	movwf	___fltol@f1+2
  7974  008C' 0831'              	movf	?___fldiv+1,w
  7975  008D' 00CB'              	movwf	___fltol@f1+1
  7976  008E' 0830'              	movf	?___fldiv,w
  7977  008F' 00CA'              	movwf	___fltol@f1
  7978  0090' 3180' 2000'        	fcall	___fltol
  7979  0092' 0021               	movlb	1	; select bank1
  7980  0093' 0A00'              	incf	SSPA_getTemp@sspa^(0+128),w
  7981  0094' 0086               	movwf	6
  7982  0095' 3001               	movlw	1	; select bank2/3
  7983  0096' 0087               	movwf	7
  7984  0097' 0020               	movlb	0	; select bank0
  7985  0098' 084A'              	movf	?___fltol,w
  7986  0099' 3FC0               	movwi [0]fsr1
  7987  009A' 084B'              	movf	?___fltol+1,w
  7988  009B' 3FC1               	movwi [1]fsr1
  7989  009C' 0008               	return
  7990  009D'                    __end_of_SSPA_getTemp:
  7991                           
  7992                           	psect	text24
  7993  0000'                    __ptext24:	
  7994 ;; *************** function _SSPA_getPOut *****************
  7995 ;; Defined at:
  7996 ;;		line 313 in file "main.c"
  7997 ;; Parameters:    Size  Location     Type
  7998 ;;  sspa            1    wreg     PTR struct .
  7999 ;;		 -> sppas(24), 
  8000 ;;  band            1    4[BANK1 ] unsigned char 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  sspa            1    7[BANK1 ] PTR struct .
  8003 ;;		 -> sppas(24), 
  8004 ;;  adc_value       2    8[BANK1 ] unsigned short 
  8005 ;;  channel         1   10[BANK1 ] enum E9222
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      void 
  8008 ;; Registers used:
  8009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8010 ;; Tracked objects:
  8011 ;;		On entry : 1F/1
  8012 ;;		On exit  : 1E/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8015 ;;      Params:         0       0       1       0       0       0       0       0
  8016 ;;      Locals:         0       0       4       0       0       0       0       0
  8017 ;;      Temps:          0       0       2       0       0       0       0       0
  8018 ;;      Totals:         0       0       7       0       0       0       0       0
  8019 ;;Total ram usage:        7 bytes
  8020 ;; Hardware stack levels used: 1
  8021 ;; Hardware stack levels required when called: 14
  8022 ;; This function calls:
  8023 ;;		___assert_fail
  8024 ;;		___fldiv
  8025 ;;		___flmul
  8026 ;;		___flsub
  8027 ;;		___fltol
  8028 ;;		___xxtofl
  8029 ;;		_getADCValue
  8030 ;; This function is called by:
  8031 ;;		_ProcessMsg
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035  0000'                    _SSPA_getPOut:	
  8036                           ;psect for function _SSPA_getPOut
  8037                           
  8038                           
  8039                           ;main.c: 314:     adc_channel_t channel;;main.c: 315:     adc_result_t adc_value;;main.c
      +                          : 317:     switch (band) {
  8040                           
  8041                           ;incstack = 0
  8042 ;; hardware stack exceeded
  8043                           ; Regs used in _SSPA_getPOut: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8044  0000' 2800'              	goto	l5065
  8045  0001'                    l709:	
  8046                           ;main.c: 318:         case 1:
  8047                           
  8048                           
  8049                           ;main.c: 319:             channel = CS_Ka;
  8050  0001' 0180'              	clrf	SSPA_getPOut@channel^(0+128)
  8051  0002' 0A80'              	incf	SSPA_getPOut@channel^(0+128),f
  8052                           
  8053                           ;main.c: 320:             adc_value = getADCValue(channel);
  8054  0003' 3001               	movlw	1
  8055  0004' 3180' 2000' 3180'  	fcall	_getADCValue
  8056  0007' 0839'              	movf	?_getADCValue+1,w
  8057  0008' 0021               	movlb	1	; select bank1
  8058  0009' 0080'              	movwf	(SSPA_getPOut@adc_value+1)^(0+128)
  8059  000A' 0020               	movlb	0	; select bank0
  8060  000B' 0838'              	movf	?_getADCValue,w
  8061  000C' 0021               	movlb	1	; select bank1
  8062  000D' 0080'              	movwf	SSPA_getPOut@adc_value^(0+128)
  8063                           
  8064                           ;main.c: 321:             sppas->m_lCurrent = (uint32_t)(int16_t) ((0 - 4.3 * (1024 - (a
      +                          dc_value))) / 1);
  8065  000E' 3000               	movlw	0
  8066  000F' 0020               	movlb	0	; select bank0
  8067  0010' 00AF'              	movwf	___flsub@b+3
  8068  0011' 3000               	movlw	0
  8069  0012' 00AE'              	movwf	___flsub@b+2
  8070  0013' 3000               	movlw	0
  8071  0014' 00AD'              	movwf	___flsub@b+1
  8072  0015' 3000               	movlw	0
  8073  0016' 00AC'              	movwf	___flsub@b
  8074  0017' 3000               	movlw	0
  8075  0018' 0021               	movlb	1	; select bank1
  8076  0019' 0080'              	movwf	??_SSPA_getPOut^(0+128)
  8077  001A' 3004               	movlw	4
  8078  001B' 0081'              	movwf	(??_SSPA_getPOut^(0+128)+1)
  8079  001C' 0800'              	movf	SSPA_getPOut@adc_value^(0+128),w
  8080  001D' 0200'              	subwf	??_SSPA_getPOut^(0+128),w
  8081  001E' 0020               	movlb	0	; select bank0
  8082  001F' 0080'              	movwf	___xxtofl@val
  8083  0020' 0021               	movlb	1	; select bank1
  8084  0021' 0800'              	movf	(SSPA_getPOut@adc_value+1)^(0+128),w
  8085  0022' 3B00'              	subwfb	(??_SSPA_getPOut+1)^(0+128),w
  8086  0023' 0020               	movlb	0	; select bank0
  8087  0024' 0081'              	movwf	___xxtofl@val+1
  8088  0025' 0182'              	clrf	___xxtofl@val+2
  8089  0026' 0183'              	clrf	___xxtofl@val+3
  8090  0027' 3000               	movlw	0
  8091  0028' 3180' 2000' 3180'  	fcall	___xxtofl
  8092  002B' 0803'              	movf	?___xxtofl+3,w
  8093  002C' 0095'              	movwf	___flmul@a+3
  8094  002D' 0802'              	movf	?___xxtofl+2,w
  8095  002E' 0094'              	movwf	___flmul@a+2
  8096  002F' 0801'              	movf	?___xxtofl+1,w
  8097  0030' 0093'              	movwf	___flmul@a+1
  8098  0031' 0800'              	movf	?___xxtofl,w
  8099  0032' 0092'              	movwf	___flmul@a
  8100  0033' 3040               	movlw	64
  8101  0034' 0091'              	movwf	___flmul@b+3
  8102  0035' 3089               	movlw	137
  8103  0036' 0090'              	movwf	___flmul@b+2
  8104  0037' 3099               	movlw	153
  8105  0038' 008F'              	movwf	___flmul@b+1
  8106  0039' 309A               	movlw	154
  8107  003A' 008E'              	movwf	___flmul@b
  8108  003B' 3180' 2000' 3180'  	fcall	___flmul
  8109  003E' 0811'              	movf	?___flmul+3,w
  8110  003F' 00AB'              	movwf	___flsub@a+3
  8111  0040' 0810'              	movf	?___flmul+2,w
  8112  0041' 00AA'              	movwf	___flsub@a+2
  8113  0042' 080F'              	movf	?___flmul+1,w
  8114  0043' 00A9'              	movwf	___flsub@a+1
  8115  0044' 080E'              	movf	?___flmul,w
  8116  0045' 00A8'              	movwf	___flsub@a
  8117  0046' 3180' 2000' 3180'  	fcall	___flsub
  8118  0049' 082B'              	movf	?___flsub+3,w
  8119  004A' 00B7'              	movwf	___fldiv@b+3
  8120  004B' 082A'              	movf	?___flsub+2,w
  8121  004C' 00B6'              	movwf	___fldiv@b+2
  8122  004D' 0829'              	movf	?___flsub+1,w
  8123  004E' 00B5'              	movwf	___fldiv@b+1
  8124  004F' 0828'              	movf	?___flsub,w
  8125  0050' 00B4'              	movwf	___fldiv@b
  8126  0051' 303F               	movlw	63
  8127  0052' 00B3'              	movwf	___fldiv@a+3
  8128  0053' 3080               	movlw	128
  8129  0054' 00B2'              	movwf	___fldiv@a+2
  8130  0055' 3000               	movlw	0
  8131  0056' 00B1'              	movwf	___fldiv@a+1
  8132  0057' 3000               	movlw	0
  8133  0058' 00B0'              	movwf	___fldiv@a
  8134  0059' 3180' 2000' 3180'  	fcall	___fldiv
  8135  005C' 0833'              	movf	?___fldiv+3,w
  8136  005D' 00CD'              	movwf	___fltol@f1+3
  8137  005E' 0832'              	movf	?___fldiv+2,w
  8138  005F' 00CC'              	movwf	___fltol@f1+2
  8139  0060' 0831'              	movf	?___fldiv+1,w
  8140  0061' 00CB'              	movwf	___fltol@f1+1
  8141  0062' 0830'              	movf	?___fldiv,w
  8142  0063' 00CA'              	movwf	___fltol@f1
  8143  0064' 3180' 2000' 3180'  	fcall	___fltol
  8144  0067' 084A'              	movf	?___fltol,w
  8145  0068' 0022               	movlb	2	; select bank2
  8146  0069' 0084'              	movwf	(_sppas^(0+256)+4)
  8147  006A' 0020               	movlb	0	; select bank0
  8148  006B' 084B'              	movf	?___fltol+1,w
  8149  006C' 0022               	movlb	2	; select bank2
  8150  006D' 0084'              	movwf	((_sppas+1)^(0+256)+4)
  8151  006E' 0D89               	rlf	9,f
  8152  006F' 3B89               	subwfb	9,f
  8153  0070' 0989               	comf	9,f
  8154  0071' 0084'              	movwf	((_sppas+2)^(0+256)+4)
  8155  0072' 0084'              	movwf	((_sppas+3)^(0+256)+4)
  8156                           
  8157                           ;main.c: 322:             sppas->m_bPOut = 0xFF;
  8158  0073' 30FF               	movlw	255
  8159  0074' 2800'              	goto	L2
  8160  0075'                    l5051:	
  8161                           ;main.c: 323:             break;
  8162                           
  8163                           
  8164                           ;main.c: 327:             adc_value = getADCValue(channel);
  8165  0075' 300A               	movlw	10
  8166  0076' 3180' 2000' 3180'  	fcall	_getADCValue
  8167  0079' 0839'              	movf	?_getADCValue+1,w
  8168  007A' 0021               	movlb	1	; select bank1
  8169  007B' 0080'              	movwf	(SSPA_getPOut@adc_value+1)^(0+128)
  8170  007C' 0020               	movlb	0	; select bank0
  8171  007D' 0838'              	movf	?_getADCValue,w
  8172  007E' 0021               	movlb	1	; select bank1
  8173  007F' 0080'              	movwf	SSPA_getPOut@adc_value^(0+128)
  8174                           
  8175                           ;main.c: 328:             sppas->m_lCurrent = (uint32_t)(int16_t) ((0 - 4.3 * (1024 - (a
      +                          dc_value))) / 1);
  8176  0080' 3000               	movlw	0
  8177  0081' 0020               	movlb	0	; select bank0
  8178  0082' 00AF'              	movwf	___flsub@b+3
  8179  0083' 3000               	movlw	0
  8180  0084' 00AE'              	movwf	___flsub@b+2
  8181  0085' 3000               	movlw	0
  8182  0086' 00AD'              	movwf	___flsub@b+1
  8183  0087' 3000               	movlw	0
  8184  0088' 00AC'              	movwf	___flsub@b
  8185  0089' 3000               	movlw	0
  8186  008A' 0021               	movlb	1	; select bank1
  8187  008B' 0080'              	movwf	??_SSPA_getPOut^(0+128)
  8188  008C' 3004               	movlw	4
  8189  008D' 0081'              	movwf	(??_SSPA_getPOut^(0+128)+1)
  8190  008E' 0800'              	movf	SSPA_getPOut@adc_value^(0+128),w
  8191  008F' 0200'              	subwf	??_SSPA_getPOut^(0+128),w
  8192  0090' 0020               	movlb	0	; select bank0
  8193  0091' 0080'              	movwf	___xxtofl@val
  8194  0092' 0021               	movlb	1	; select bank1
  8195  0093' 0800'              	movf	(SSPA_getPOut@adc_value+1)^(0+128),w
  8196  0094' 3B00'              	subwfb	(??_SSPA_getPOut+1)^(0+128),w
  8197  0095' 0020               	movlb	0	; select bank0
  8198  0096' 0081'              	movwf	___xxtofl@val+1
  8199  0097' 0182'              	clrf	___xxtofl@val+2
  8200  0098' 0183'              	clrf	___xxtofl@val+3
  8201  0099' 3000               	movlw	0
  8202  009A' 3180' 2000' 3180'  	fcall	___xxtofl
  8203  009D' 0803'              	movf	?___xxtofl+3,w
  8204  009E' 0095'              	movwf	___flmul@a+3
  8205  009F' 0802'              	movf	?___xxtofl+2,w
  8206  00A0' 0094'              	movwf	___flmul@a+2
  8207  00A1' 0801'              	movf	?___xxtofl+1,w
  8208  00A2' 0093'              	movwf	___flmul@a+1
  8209  00A3' 0800'              	movf	?___xxtofl,w
  8210  00A4' 0092'              	movwf	___flmul@a
  8211  00A5' 3040               	movlw	64
  8212  00A6' 0091'              	movwf	___flmul@b+3
  8213  00A7' 3089               	movlw	137
  8214  00A8' 0090'              	movwf	___flmul@b+2
  8215  00A9' 3099               	movlw	153
  8216  00AA' 008F'              	movwf	___flmul@b+1
  8217  00AB' 309A               	movlw	154
  8218  00AC' 008E'              	movwf	___flmul@b
  8219  00AD' 3180' 2000' 3180'  	fcall	___flmul
  8220  00B0' 0811'              	movf	?___flmul+3,w
  8221  00B1' 00AB'              	movwf	___flsub@a+3
  8222  00B2' 0810'              	movf	?___flmul+2,w
  8223  00B3' 00AA'              	movwf	___flsub@a+2
  8224  00B4' 080F'              	movf	?___flmul+1,w
  8225  00B5' 00A9'              	movwf	___flsub@a+1
  8226  00B6' 080E'              	movf	?___flmul,w
  8227  00B7' 00A8'              	movwf	___flsub@a
  8228  00B8' 3180' 2000' 3180'  	fcall	___flsub
  8229  00BB' 082B'              	movf	?___flsub+3,w
  8230  00BC' 00B7'              	movwf	___fldiv@b+3
  8231  00BD' 082A'              	movf	?___flsub+2,w
  8232  00BE' 00B6'              	movwf	___fldiv@b+2
  8233  00BF' 0829'              	movf	?___flsub+1,w
  8234  00C0' 00B5'              	movwf	___fldiv@b+1
  8235  00C1' 0828'              	movf	?___flsub,w
  8236  00C2' 00B4'              	movwf	___fldiv@b
  8237  00C3' 303F               	movlw	63
  8238  00C4' 00B3'              	movwf	___fldiv@a+3
  8239  00C5' 3080               	movlw	128
  8240  00C6' 00B2'              	movwf	___fldiv@a+2
  8241  00C7' 3000               	movlw	0
  8242  00C8' 00B1'              	movwf	___fldiv@a+1
  8243  00C9' 3000               	movlw	0
  8244  00CA' 00B0'              	movwf	___fldiv@a
  8245  00CB' 3180' 2000' 3180'  	fcall	___fldiv
  8246  00CE' 0833'              	movf	?___fldiv+3,w
  8247  00CF' 00CD'              	movwf	___fltol@f1+3
  8248  00D0' 0832'              	movf	?___fldiv+2,w
  8249  00D1' 00CC'              	movwf	___fltol@f1+2
  8250  00D2' 0831'              	movf	?___fldiv+1,w
  8251  00D3' 00CB'              	movwf	___fltol@f1+1
  8252  00D4' 0830'              	movf	?___fldiv,w
  8253  00D5' 00CA'              	movwf	___fltol@f1
  8254  00D6' 3180' 2000' 3180'  	fcall	___fltol
  8255  00D9' 084A'              	movf	?___fltol,w
  8256  00DA' 0022               	movlb	2	; select bank2
  8257  00DB' 0084'              	movwf	(_sppas^(0+256)+4)
  8258  00DC' 0020               	movlb	0	; select bank0
  8259  00DD' 084B'              	movf	?___fltol+1,w
  8260  00DE' 0022               	movlb	2	; select bank2
  8261  00DF' 0084'              	movwf	((_sppas+1)^(0+256)+4)
  8262  00E0' 0D89               	rlf	9,f
  8263  00E1' 3B89               	subwfb	9,f
  8264  00E2' 0989               	comf	9,f
  8265  00E3' 0084'              	movwf	((_sppas+2)^(0+256)+4)
  8266  00E4' 0084'              	movwf	((_sppas+3)^(0+256)+4)
  8267                           
  8268                           ;main.c: 329:             channel = PD_X;
  8269  00E5' 0021               	movlb	1	; select bank1
  8270  00E6' 0180'              	clrf	SSPA_getPOut@channel^(0+128)
  8271                           
  8272                           ;main.c: 330:             adc_value = getADCValue(channel);
  8273  00E7' 3000               	movlw	0
  8274  00E8' 3180' 2000' 3180'  	fcall	_getADCValue
  8275  00EB' 0839'              	movf	?_getADCValue+1,w
  8276  00EC' 0021               	movlb	1	; select bank1
  8277  00ED' 0080'              	movwf	(SSPA_getPOut@adc_value+1)^(0+128)
  8278  00EE' 0020               	movlb	0	; select bank0
  8279  00EF' 0838'              	movf	?_getADCValue,w
  8280  00F0' 0021               	movlb	1	; select bank1
  8281  00F1' 0080'              	movwf	SSPA_getPOut@adc_value^(0+128)
  8282                           
  8283                           ;main.c: 331:             sppas->m_bPOut = (uint8_t)(int16_t) ((0 - 4.3 * (1024 - (adc_v
      +                          alue))) / 1);
  8284  00F2' 3000               	movlw	0
  8285  00F3' 0020               	movlb	0	; select bank0
  8286  00F4' 00AF'              	movwf	___flsub@b+3
  8287  00F5' 3000               	movlw	0
  8288  00F6' 00AE'              	movwf	___flsub@b+2
  8289  00F7' 3000               	movlw	0
  8290  00F8' 00AD'              	movwf	___flsub@b+1
  8291  00F9' 3000               	movlw	0
  8292  00FA' 00AC'              	movwf	___flsub@b
  8293  00FB' 3000               	movlw	0
  8294  00FC' 0021               	movlb	1	; select bank1
  8295  00FD' 0080'              	movwf	??_SSPA_getPOut^(0+128)
  8296  00FE' 3004               	movlw	4
  8297  00FF' 0081'              	movwf	(??_SSPA_getPOut^(0+128)+1)
  8298  0100' 0800'              	movf	SSPA_getPOut@adc_value^(0+128),w
  8299  0101' 0200'              	subwf	??_SSPA_getPOut^(0+128),w
  8300  0102' 0020               	movlb	0	; select bank0
  8301  0103' 0080'              	movwf	___xxtofl@val
  8302  0104' 0021               	movlb	1	; select bank1
  8303  0105' 0800'              	movf	(SSPA_getPOut@adc_value+1)^(0+128),w
  8304  0106' 3B00'              	subwfb	(??_SSPA_getPOut+1)^(0+128),w
  8305  0107' 0020               	movlb	0	; select bank0
  8306  0108' 0081'              	movwf	___xxtofl@val+1
  8307  0109' 0182'              	clrf	___xxtofl@val+2
  8308  010A' 0183'              	clrf	___xxtofl@val+3
  8309  010B' 3000               	movlw	0
  8310  010C' 3180' 2000' 3180'  	fcall	___xxtofl
  8311  010F' 0803'              	movf	?___xxtofl+3,w
  8312  0110' 0095'              	movwf	___flmul@a+3
  8313  0111' 0802'              	movf	?___xxtofl+2,w
  8314  0112' 0094'              	movwf	___flmul@a+2
  8315  0113' 0801'              	movf	?___xxtofl+1,w
  8316  0114' 0093'              	movwf	___flmul@a+1
  8317  0115' 0800'              	movf	?___xxtofl,w
  8318  0116' 0092'              	movwf	___flmul@a
  8319  0117' 3040               	movlw	64
  8320  0118' 0091'              	movwf	___flmul@b+3
  8321  0119' 3089               	movlw	137
  8322  011A' 0090'              	movwf	___flmul@b+2
  8323  011B' 3099               	movlw	153
  8324  011C' 008F'              	movwf	___flmul@b+1
  8325  011D' 309A               	movlw	154
  8326  011E' 008E'              	movwf	___flmul@b
  8327  011F' 3180' 2000' 3180'  	fcall	___flmul
  8328  0122' 0811'              	movf	?___flmul+3,w
  8329  0123' 00AB'              	movwf	___flsub@a+3
  8330  0124' 0810'              	movf	?___flmul+2,w
  8331  0125' 00AA'              	movwf	___flsub@a+2
  8332  0126' 080F'              	movf	?___flmul+1,w
  8333  0127' 00A9'              	movwf	___flsub@a+1
  8334  0128' 080E'              	movf	?___flmul,w
  8335  0129' 00A8'              	movwf	___flsub@a
  8336  012A' 3180' 2000' 3180'  	fcall	___flsub
  8337  012D' 082B'              	movf	?___flsub+3,w
  8338  012E' 00B7'              	movwf	___fldiv@b+3
  8339  012F' 082A'              	movf	?___flsub+2,w
  8340  0130' 00B6'              	movwf	___fldiv@b+2
  8341  0131' 0829'              	movf	?___flsub+1,w
  8342  0132' 00B5'              	movwf	___fldiv@b+1
  8343  0133' 0828'              	movf	?___flsub,w
  8344  0134' 00B4'              	movwf	___fldiv@b
  8345  0135' 303F               	movlw	63
  8346  0136' 00B3'              	movwf	___fldiv@a+3
  8347  0137' 3080               	movlw	128
  8348  0138' 00B2'              	movwf	___fldiv@a+2
  8349  0139' 3000               	movlw	0
  8350  013A' 00B1'              	movwf	___fldiv@a+1
  8351  013B' 3000               	movlw	0
  8352  013C' 00B0'              	movwf	___fldiv@a
  8353  013D' 3180' 2000' 3180'  	fcall	___fldiv
  8354  0140' 0833'              	movf	?___fldiv+3,w
  8355  0141' 00CD'              	movwf	___fltol@f1+3
  8356  0142' 0832'              	movf	?___fldiv+2,w
  8357  0143' 00CC'              	movwf	___fltol@f1+2
  8358  0144' 0831'              	movf	?___fldiv+1,w
  8359  0145' 00CB'              	movwf	___fltol@f1+1
  8360  0146' 0830'              	movf	?___fldiv,w
  8361  0147' 00CA'              	movwf	___fltol@f1
  8362  0148' 3180' 2000' 3180'  	fcall	___fltol
  8363  014B' 084A'              	movf	?___fltol,w
  8364  014C' 0022               	movlb	2	; select bank2
  8365  014D'                    L2:
  8366  014D' 0083'              	movwf	(_sppas^(0+256)+3)
  8367                           
  8368                           ;main.c: 332:             break;
  8369  014E' 2800'              	goto	l5067
  8370  014F'                    l5065:
  8371  014F' 0800'              	movf	SSPA_getPOut@band^(0+128),w
  8372                           
  8373                           ; Switch size 1, requested type "simple"
  8374                           ; Number of cases is 3, Range of values is 0 to 2
  8375                           ; switch strategies available:
  8376                           ; Name         Instructions Cycles
  8377                           ; simple_byte           10     6 (average)
  8378                           ; direct_byte           12     6 (fixed)
  8379                           ; jumptable            260     6 (fixed)
  8380                           ;	Chosen strategy is simple_byte
  8381  0150' 3A00               	xorlw	0	; case 0
  8382  0151' 1903               	skipnz
  8383  0152' 2800'              	goto	l5067
  8384  0153' 3A01               	xorlw	1	; case 1
  8385  0154' 1903               	skipnz
  8386  0155' 2800'              	goto	l709
  8387  0156' 3A03               	xorlw	3	; case 2
  8388  0157' 1903               	skipnz
  8389  0158' 2800'              	goto	l5051
  8390  0159' 2800'              	goto	l5067
  8391  015A'                    l5067:
  8392                           
  8393                           ;main.c: 339:     ((void)((channel == PD_X || channel == CS_Ka || channel == CS_X) || (_
      +                          _assert_fail("channel == PD_X || channel == CS_Ka || channel == CS_X", "main.c", 339, __
      +                          func__),0)));
  8394  015A' 0021               	movlb	1	; select bank1
  8395  015B' 0800'              	movf	SSPA_getPOut@channel^(0+128),w
  8396  015C' 1903               	btfsc	3,2
  8397  015D' 0008               	return
  8398  015E' 0300'              	decf	SSPA_getPOut@channel^(0+128),w
  8399  015F' 1903               	btfsc	3,2
  8400  0160' 0008               	return
  8401  0161' 300A               	movlw	10
  8402  0162' 0600'              	xorwf	SSPA_getPOut@channel^(0+128),w
  8403  0163' 1903               	btfsc	3,2
  8404  0164' 0008               	return
  8405  0165' 3000'              	movlw	low (STR_13| (0+32768))
  8406  0166' 0020               	movlb	0	; select bank0
  8407  0167' 00B0'              	movwf	___assert_fail@expr
  8408  0168' 3000'              	movlw	high (STR_13| (0+32768))
  8409  0169' 00B1'              	movwf	___assert_fail@expr+1
  8410  016A' 3000'              	movlw	low (STR_2| (0+32768))
  8411  016B' 00B2'              	movwf	___assert_fail@file
  8412  016C' 3000'              	movlw	high (STR_2| (0+32768))
  8413  016D' 00B3'              	movwf	___assert_fail@file+1
  8414  016E' 3053               	movlw	83
  8415  016F' 00B4'              	movwf	___assert_fail@line
  8416  0170' 3001               	movlw	1
  8417  0171' 00B5'              	movwf	___assert_fail@line+1
  8418  0172' 3000'              	movlw	low (STR_15| (0+32768))
  8419  0173' 00B6'              	movwf	___assert_fail@func
  8420  0174' 3000'              	movlw	high (STR_15| (0+32768))
  8421  0175' 00B7'              	movwf	___assert_fail@func+1
  8422  0176' 3180' 2000'        	fcall	___assert_fail
  8423  0178' 0008               	return
  8424  0179'                    __end_of_SSPA_getPOut:
  8425                           
  8426                           	psect	text25
  8427  0000'                    __ptext25:	
  8428 ;; *************** function _getADCValue *****************
  8429 ;; Defined at:
  8430 ;;		line 233 in file "main.c"
  8431 ;; Parameters:    Size  Location     Type
  8432 ;;  channel         1    wreg     enum E9222
  8433 ;; Auto vars:     Size  Location     Type
  8434 ;;  channel         1   60[BANK0 ] enum E9222
  8435 ;;  i               1   63[BANK0 ] unsigned char 
  8436 ;;  avg             2   61[BANK0 ] unsigned short 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  2   56[BANK0 ] unsigned short 
  8439 ;; Registers used:
  8440 ;;		wreg, status,2, status,0, pclath, cstack
  8441 ;; Tracked objects:
  8442 ;;		On entry : 1F/1
  8443 ;;		On exit  : 1F/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8446 ;;      Params:         0       2       0       0       0       0       0       0
  8447 ;;      Locals:         0       4       0       0       0       0       0       0
  8448 ;;      Temps:          0       2       0       0       0       0       0       0
  8449 ;;      Totals:         0       8       0       0       0       0       0       0
  8450 ;;Total ram usage:        8 bytes
  8451 ;; Hardware stack levels used: 1
  8452 ;; Hardware stack levels required when called: 13
  8453 ;; This function calls:
  8454 ;;		_ADC_GetConversionResult
  8455 ;;		_ADC_IsConversionDone
  8456 ;;		_ADC_SelectChannel
  8457 ;;		_ADC_StartConversion
  8458 ;;		___assert_fail
  8459 ;; This function is called by:
  8460 ;;		_SSPA_getTemp
  8461 ;;		_SSPA_getPOut
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465  0000'                    _getADCValue:	
  8466                           ;psect for function _getADCValue
  8467                           
  8468                           
  8469                           ;incstack = 0
  8470 ;; hardware stack exceeded
  8471                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  8472                           ;getADCValue@channel stored from wreg
  8473  0000' 0020               	movlb	0	; select bank0
  8474  0001' 00BC'              	movwf	getADCValue@channel
  8475                           
  8476                           ;main.c: 236:     adc_result_t avg = 0;
  8477                           
  8478                           ;main.c: 234:     ((void)((sizeof (adc_result_t) == sizeof (uint16_t)) || (__assert_fail
      +                          ("sizeof (adc_result_t) == sizeof (uint16_t)", "main.c", 234, __func__),0)));
  8479  0002' 01BD'              	clrf	getADCValue@avg
  8480  0003' 01BE'              	clrf	getADCValue@avg+1
  8481                           
  8482                           ;main.c: 238:     ADC_StartConversion();
  8483  0004' 3180' 2000' 3180'  	fcall	_ADC_StartConversion
  8484                           
  8485                           ;main.c: 239:     ADC_SelectChannel(channel);
  8486  0007' 0020               	movlb	0	; select bank0
  8487  0008' 083C'              	movf	getADCValue@channel,w
  8488  0009' 3180' 2000' 3180'  	fcall	_ADC_SelectChannel
  8489                           
  8490                           ;main.c: 241:     for (uint8_t i = 0; i < 32; i++)
  8491  000C' 0020               	movlb	0	; select bank0
  8492  000D' 01BF'              	clrf	getADCValue@i
  8493  000E'                    l4829:
  8494                           
  8495                           ;main.c: 242:         if (ADC_IsConversionDone())
  8496  000E' 3180' 2000' 3180'  	fcall	_ADC_IsConversionDone
  8497  0011' 3A00               	xorlw	0
  8498  0012' 1903               	skipnz
  8499  0013' 2800'              	goto	l4833
  8500                           
  8501                           ;main.c: 243:             avg += ADC_GetConversionResult();
  8502  0014' 3180' 2000' 3180'  	fcall	_ADC_GetConversionResult
  8503  0017' 0800'              	movf	?_ADC_GetConversionResult,w
  8504  0018' 07BD'              	addwf	getADCValue@avg,f
  8505  0019' 0801'              	movf	?_ADC_GetConversionResult+1,w
  8506  001A' 3DBE'              	addwfc	getADCValue@avg+1,f
  8507  001B'                    l4833:
  8508  001B' 3001               	movlw	1
  8509  001C' 0020               	movlb	0	; select bank0
  8510  001D' 00BA'              	movwf	??_getADCValue
  8511  001E' 083A'              	movf	??_getADCValue,w
  8512  001F' 07BF'              	addwf	getADCValue@i,f
  8513  0020' 3020               	movlw	32
  8514  0021' 023F'              	subwf	getADCValue@i,w
  8515  0022' 1C03               	skipc
  8516  0023' 2800'              	goto	l4829
  8517                           
  8518                           ;main.c: 245:     return avg >> 5;
  8519  0024' 083E'              	movf	getADCValue@avg+1,w
  8520  0025' 00BB'              	movwf	??_getADCValue+1
  8521  0026' 083D'              	movf	getADCValue@avg,w
  8522  0027' 00BA'              	movwf	??_getADCValue
  8523  0028' 3005               	movlw	5
  8524  0029'                    u4945:
  8525  0029' 36BB'              	lsrf	??_getADCValue+1,f
  8526  002A' 0CBA'              	rrf	??_getADCValue,f
  8527  002B' 0B89               	decfsz	9,f
  8528  002C' 2800'              	goto	u4945
  8529  002D' 083A'              	movf	??_getADCValue,w
  8530  002E' 00B8'              	movwf	?_getADCValue
  8531  002F' 083B'              	movf	??_getADCValue+1,w
  8532  0030' 00B9'              	movwf	?_getADCValue+1
  8533  0031' 0008               	return
  8534  0032'                    __end_of_getADCValue:
  8535                           
  8536                           	psect	text26
  8537  0000'                    __ptext26:	
  8538 ;; *************** function ___assert_fail *****************
  8539 ;; Defined at:
  8540 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\assert.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  expr            2   48[BANK0 ] PTR const unsigned char 
  8543 ;;		 -> STR_16(55), STR_10(36), STR_4(43), 
  8544 ;;  file            2   50[BANK0 ] PTR const unsigned char 
  8545 ;;		 -> STR_17(7), STR_11(7), STR_5(7), 
  8546 ;;  line            2   52[BANK0 ] int 
  8547 ;;  func            2   54[BANK0 ] PTR const unsigned char 
  8548 ;;		 -> STR_18(13), STR_12(13), STR_6(12), 
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;		None
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  1    wreg      void 
  8553 ;; Registers used:
  8554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8555 ;; Tracked objects:
  8556 ;;		On entry : 1F/0
  8557 ;;		On exit  : 1F/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8560 ;;      Params:         0       8       0       0       0       0       0       0
  8561 ;;      Locals:         0       0       0       0       0       0       0       0
  8562 ;;      Temps:          0       0       0       0       0       0       0       0
  8563 ;;      Totals:         0       8       0       0       0       0       0       0
  8564 ;;Total ram usage:        8 bytes
  8565 ;; Hardware stack levels used: 1
  8566 ;; Hardware stack levels required when called: 12
  8567 ;; This function calls:
  8568 ;;		_abort
  8569 ;;		_printf
  8570 ;; This function is called by:
  8571 ;;		_getADCValue
  8572 ;;		_SSPA_getTemp
  8573 ;;		_SSPA_getPOut
  8574 ;; This function uses a non-reentrant model
  8575 ;;
  8576                           
  8577  0000'                    ___assert_fail:	
  8578                           ;psect for function ___assert_fail
  8579                           
  8580                           
  8581                           ;incstack = 0
  8582 ;; hardware stack exceeded
  8583                           ; Regs used in ___assert_fail: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8584  0000' 3000'              	movlw	low (STR_19| (0+32768))
  8585  0001' 00A5'              	movwf	printf@fmt
  8586  0002' 3000'              	movlw	high (STR_19| (0+32768))
  8587  0003' 00A6'              	movwf	printf@fmt+1
  8588  0004' 0831'              	movf	___assert_fail@expr+1,w
  8589  0005' 0081'              	movwf	(low ((?_printf| 0+2))+1)
  8590  0006' 0830'              	movf	___assert_fail@expr,w
  8591  0007' 0080'              	movwf	low ((?_printf| 0+2))
  8592  0008' 0833'              	movf	___assert_fail@file+1,w
  8593  0009' 0081'              	movwf	(low ((?_printf| 0+4))+1)
  8594  000A' 0832'              	movf	___assert_fail@file,w
  8595  000B' 0080'              	movwf	low ((?_printf| 0+4))
  8596  000C' 0837'              	movf	___assert_fail@func+1,w
  8597  000D' 0081'              	movwf	(low ((?_printf| 0+6))+1)
  8598  000E' 0836'              	movf	___assert_fail@func,w
  8599  000F' 0080'              	movwf	low ((?_printf| 0+6))
  8600  0010' 0835'              	movf	___assert_fail@line+1,w
  8601  0011' 00AE'              	movwf	?_printf+9
  8602  0012' 0834'              	movf	___assert_fail@line,w
  8603  0013' 00AD'              	movwf	?_printf+8
  8604  0014' 3180' 2000' 3180'  	fcall	_printf
  8605  0017' 3180' 2000'        	fcall	_abort
  8606  0019' 0008               	return
  8607  001A'                    __end_of___assert_fail:
  8608                           
  8609                           	psect	text27
  8610  0000'                    __ptext27:	
  8611 ;; *************** function _printf *****************
  8612 ;; Defined at:
  8613 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\printf.c"
  8614 ;; Parameters:    Size  Location     Type
  8615 ;;  fmt             2   37[BANK0 ] PTR const unsigned char 
  8616 ;;		 -> STR_19(35), 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;  ret             2    0        int 
  8619 ;;  ap              1   47[BANK0 ] PTR void [1]
  8620 ;;		 -> ?_printf(2), 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  2   37[BANK0 ] int 
  8623 ;; Registers used:
  8624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 1F/0
  8627 ;;		On exit  : 1F/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8630 ;;      Params:         0      10       0       0       0       0       0       0
  8631 ;;      Locals:         0       1       0       0       0       0       0       0
  8632 ;;      Temps:          0       0       0       0       0       0       0       0
  8633 ;;      Totals:         0      11       0       0       0       0       0       0
  8634 ;;Total ram usage:       11 bytes
  8635 ;; Hardware stack levels used: 1
  8636 ;; Hardware stack levels required when called: 11
  8637 ;; This function calls:
  8638 ;;		_vfprintf
  8639 ;; This function is called by:
  8640 ;;		___assert_fail
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644  0000'                    _printf:	
  8645                           ;psect for function _printf
  8646                           
  8647                           
  8648                           ;incstack = 0
  8649 ;; hardware stack exceeded
  8650                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8651  0000' 3000'              	movlw	(low ((?_printf| 0+2)))& (0+255)
  8652  0001' 00AF'              	movwf	printf@ap
  8653  0002' 3000               	movlw	0
  8654  0003' 009D'              	movwf	vfprintf@fp
  8655  0004' 009E'              	movwf	vfprintf@fp+1
  8656  0005' 0826'              	movf	printf@fmt+1,w
  8657  0006' 00A0'              	movwf	vfprintf@fmt+1
  8658  0007' 0825'              	movf	printf@fmt,w
  8659  0008' 009F'              	movwf	vfprintf@fmt
  8660  0009' 3000'              	movlw	(low (printf@ap| 0))& (0+255)
  8661  000A' 00A1'              	movwf	vfprintf@ap
  8662  000B' 3180' 2000'        	fcall	_vfprintf
  8663  000D' 0008               	return
  8664  000E'                    __end_of_printf:
  8665                           
  8666                           	psect	text28
  8667  0000'                    __ptext28:	
  8668 ;; *************** function _vfprintf *****************
  8669 ;; Defined at:
  8670 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;  fp              2   29[BANK0 ] PTR struct _IO_FILE
  8673 ;;		 -> NULL(0), 
  8674 ;;  fmt             2   31[BANK0 ] PTR const unsigned char 
  8675 ;;		 -> STR_19(35), 
  8676 ;;  ap              1   33[BANK0 ] PTR PTR void 
  8677 ;;		 -> printf@ap(1), 
  8678 ;; Auto vars:     Size  Location     Type
  8679 ;;  cfmt            2   35[BANK0 ] PTR unsigned char 
  8680 ;;		 -> STR_19(35), 
  8681 ;; Return value:  Size  Location     Type
  8682 ;;                  2   29[BANK0 ] int 
  8683 ;; Registers used:
  8684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8685 ;; Tracked objects:
  8686 ;;		On entry : 1F/0
  8687 ;;		On exit  : 1F/0
  8688 ;;		Unchanged: 0/0
  8689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8690 ;;      Params:         0       5       0       0       0       0       0       0
  8691 ;;      Locals:         0       2       0       0       0       0       0       0
  8692 ;;      Temps:          0       1       0       0       0       0       0       0
  8693 ;;      Totals:         0       8       0       0       0       0       0       0
  8694 ;;Total ram usage:        8 bytes
  8695 ;; Hardware stack levels used: 1
  8696 ;; Hardware stack levels required when called: 10
  8697 ;; This function calls:
  8698 ;;		_vfpfcnvrt
  8699 ;; This function is called by:
  8700 ;;		_printf
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704  0000'                    _vfprintf:	
  8705                           ;psect for function _vfprintf
  8706                           
  8707                           
  8708                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  8709                           
  8710                           ;incstack = 0
  8711 ;; hardware stack exceeded
  8712                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8713  0000' 0820'              	movf	vfprintf@fmt+1,w
  8714  0001' 00A4'              	movwf	vfprintf@cfmt+1
  8715  0002' 081F'              	movf	vfprintf@fmt,w
  8716  0003' 00A3'              	movwf	vfprintf@cfmt
  8717  0004'                    l4767:	
  8718                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8719                           
  8720                           
  8721                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8722  0004' 0823'              	movf	vfprintf@cfmt,w
  8723  0005' 0084               	movwf	4
  8724  0006' 0824'              	movf	vfprintf@cfmt+1,w
  8725  0007' 0085               	movwf	5
  8726  0008' 0012               	moviw fsr0++
  8727  0009' 1903               	btfsc	3,2
  8728  000A' 2800'              	goto	l4769
  8729                           
  8730                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  8731  000B' 081E'              	movf	vfprintf@fp+1,w
  8732  000C' 008C'              	movwf	vfpfcnvrt@fp+1
  8733  000D' 081D'              	movf	vfprintf@fp,w
  8734  000E' 008B'              	movwf	vfpfcnvrt@fp
  8735  000F' 3000'              	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  8736  0010' 008D'              	movwf	vfpfcnvrt@fmt
  8737  0011' 0821'              	movf	vfprintf@ap,w
  8738  0012' 008E'              	movwf	vfpfcnvrt@ap
  8739  0013' 3180' 2000' 3180'  	fcall	_vfpfcnvrt
  8740  0016' 2800'              	goto	l4767
  8741  0017'                    l4769:
  8742                           
  8743                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  8744  0017' 019D'              	clrf	?_vfprintf
  8745  0018' 019E'              	clrf	?_vfprintf+1
  8746  0019' 0008               	return
  8747  001A'                    __end_of_vfprintf:
  8748                           
  8749                           	psect	text29
  8750  0000'                    __ptext29:	
  8751 ;; *************** function _vfpfcnvrt *****************
  8752 ;; Defined at:
  8753 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;  fp              2   11[BANK0 ] PTR struct _IO_FILE
  8756 ;;		 -> NULL(0), 
  8757 ;;  fmt             1   13[BANK0 ] PTR PTR unsigned char 
  8758 ;;		 -> vfprintf@cfmt(2), 
  8759 ;;  ap              1   14[BANK0 ] PTR PTR void 
  8760 ;;		 -> printf@ap(1), 
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;  cp              2   19[BANK0 ] PTR unsigned char 
  8763 ;;		 -> ?_printf(2), STR_18(13), STR_17(7), STR_16(55), 
  8764 ;;		 -> STR_12(13), STR_11(7), STR_10(36), STR_6(12), 
  8765 ;;		 -> STR_5(7), STR_4(43), 
  8766 ;;  convarg         4   24[BANK0 ] struct .
  8767 ;;  cp              2   21[BANK0 ] PTR unsigned char 
  8768 ;;		 -> STR_19(35), 
  8769 ;;  c               1   28[BANK0 ] unsigned char 
  8770 ;;  done            1   23[BANK0 ] _Bool 
  8771 ;; Return value:  Size  Location     Type
  8772 ;;                  1    wreg      void 
  8773 ;; Registers used:
  8774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8775 ;; Tracked objects:
  8776 ;;		On entry : 1F/0
  8777 ;;		On exit  : 1F/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8780 ;;      Params:         0       4       0       0       0       0       0       0
  8781 ;;      Locals:         0      10       0       0       0       0       0       0
  8782 ;;      Temps:          0       4       0       0       0       0       0       0
  8783 ;;      Totals:         0      18       0       0       0       0       0       0
  8784 ;;Total ram usage:       18 bytes
  8785 ;; Hardware stack levels used: 1
  8786 ;; Hardware stack levels required when called: 9
  8787 ;; This function calls:
  8788 ;;		___awdiv
  8789 ;;		___awmod
  8790 ;;		_abs
  8791 ;;		_fputc
  8792 ;; This function is called by:
  8793 ;;		_vfprintf
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797  0000'                    _vfpfcnvrt:	
  8798                           ;psect for function _vfpfcnvrt
  8799                           
  8800                           
  8801                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  8802                           
  8803                           ;incstack = 0
  8804 ;; hardware stack exceeded
  8805                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8806  0000' 080D'              	movf	vfpfcnvrt@fmt,w
  8807  0001' 0086               	movwf	6
  8808  0002' 0187               	clrf	7
  8809  0003' 3F40               	moviw [0]fsr1
  8810  0004' 008F'              	movwf	??_vfpfcnvrt
  8811  0005' 3F41               	moviw [1]fsr1
  8812  0006' 0090'              	movwf	??_vfpfcnvrt+1
  8813  0007' 080F'              	movf	??_vfpfcnvrt,w
  8814  0008' 0084               	movwf	4
  8815  0009' 0810'              	movf	??_vfpfcnvrt+1,w
  8816  000A' 0085               	movwf	5
  8817  000B' 0012               	moviw fsr0++
  8818  000C' 3A25               	xorlw	37
  8819  000D' 1D03               	btfss	3,2
  8820  000E' 2800'              	goto	l4755
  8821                           
  8822                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  8823  000F' 080D'              	movf	vfpfcnvrt@fmt,w
  8824  0010' 0086               	movwf	6
  8825  0011' 0187               	clrf	7
  8826  0012' 3001               	movlw	1
  8827  0013' 0781               	addwf	1,f
  8828  0014' 3141               	addfsr 1,1
  8829  0015' 1803               	skipnc
  8830  0016' 0A81               	incf	1,f
  8831                           
  8832                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  8833  0017' 0021               	movlb	1	; select bank1
  8834  0018' 0180'              	clrf	_width^(0+128)
  8835  0019' 0180'              	clrf	(_width+1)^(0+128)
  8836  001A' 1003               	clrc
  8837  001B' 3000               	movlw	0
  8838  001C' 1803               	btfsc	3,0
  8839  001D' 3001               	movlw	1
  8840  001E' 0084'              	movwf	_flags
  8841                           
  8842                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  8843  001F' 30FF               	movlw	255
  8844  0020' 0080'              	movwf	_prec^(0+128)
  8845  0021' 30FF               	movlw	255
  8846  0022' 0081'              	movwf	(_prec^(0+128)+1)
  8847                           
  8848                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  8849  0023' 0020               	movlb	0	; select bank0
  8850  0024' 080D'              	movf	vfpfcnvrt@fmt,w
  8851  0025' 0086               	movwf	6
  8852  0026' 0187               	clrf	7
  8853  0027' 3F40               	moviw [0]fsr1
  8854  0028' 0095'              	movwf	vfpfcnvrt@cp
  8855  0029' 3F41               	moviw [1]fsr1
  8856  002A' 0096'              	movwf	vfpfcnvrt@cp+1
  8857                           
  8858                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  8859  002B' 0815'              	movf	vfpfcnvrt@cp,w
  8860  002C' 0084               	movwf	4
  8861  002D' 0816'              	movf	vfpfcnvrt@cp+1,w
  8862  002E' 0085               	movwf	5
  8863  002F' 0012               	moviw fsr0++
  8864  0030' 3A64               	xorlw	100
  8865  0031' 1903               	btfsc	3,2
  8866  0032' 2800'              	goto	l4695
  8867  0033' 0815'              	movf	vfpfcnvrt@cp,w
  8868  0034' 0084               	movwf	4
  8869  0035' 0816'              	movf	vfpfcnvrt@cp+1,w
  8870  0036' 0085               	movwf	5
  8871  0037' 0012               	moviw fsr0++
  8872  0038' 3A69               	xorlw	105
  8873  0039' 1D03               	btfss	3,2
  8874  003A' 2800'              	goto	l4723
  8875  003B'                    l4695:
  8876                           
  8877                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  8878  003B' 080E'              	movf	vfpfcnvrt@ap,w
  8879  003C' 0086               	movwf	6
  8880  003D' 0187               	clrf	7
  8881  003E' 0801               	movf	1,w
  8882  003F' 0084               	movwf	4
  8883  0040' 0185               	clrf	5
  8884  0041' 3002               	movlw	2
  8885  0042' 0781               	addwf	1,f
  8886  0043' 3F00               	moviw [0]fsr0
  8887  0044' 0098'              	movwf	vfpfcnvrt@convarg
  8888  0045' 3F01               	moviw [1]fsr0
  8889  0046' 0099'              	movwf	vfpfcnvrt@convarg+1
  8890                           
  8891                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  8892  0047' 0815'              	movf	vfpfcnvrt@cp,w
  8893  0048' 3E01               	addlw	1
  8894  0049' 008F'              	movwf	??_vfpfcnvrt
  8895  004A' 3000               	movlw	0
  8896  004B' 3D16'              	addwfc	vfpfcnvrt@cp+1,w
  8897  004C' 0090'              	movwf	??_vfpfcnvrt+1
  8898  004D' 080D'              	movf	vfpfcnvrt@fmt,w
  8899  004E' 0086               	movwf	6
  8900  004F' 0187               	clrf	7
  8901  0050' 080F'              	movf	??_vfpfcnvrt,w
  8902  0051' 3FC0               	movwi [0]fsr1
  8903  0052' 0810'              	movf	??_vfpfcnvrt+1,w
  8904  0053' 3FC1               	movwi [1]fsr1
  8905                           
  8906                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  8907  0054' 3020               	movlw	32
  8908  0055' 009C'              	movwf	vfpfcnvrt@c
  8909                           
  8910                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  8911  0056' 1F99'              	btfss	vfpfcnvrt@convarg+1,7
  8912  0057' 2800'              	goto	u4750
  8913  0058' 3001               	movlw	1
  8914  0059' 2800'              	goto	u4760
  8915  005A'                    u4750:
  8916  005A' 3000               	movlw	0
  8917  005B'                    u4760:
  8918  005B' 0097'              	movwf	vfpfcnvrt@done
  8919  005C' 2800'              	goto	l4703
  8920  005D'                    l4709:
  8921  005D' 081C'              	movf	vfpfcnvrt@c,w
  8922  005E' 1903               	btfsc	3,2
  8923  005F' 2800'              	goto	l4711
  8924  0060'                    l4703:
  8925                           
  8926                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  8927  0060' 3001               	movlw	1
  8928  0061' 029C'              	subwf	vfpfcnvrt@c,f
  8929  0062' 081C'              	movf	vfpfcnvrt@c,w
  8930  0063' 3E00'              	addlw	(low (_dbuf| (0+256)))& (0+255)
  8931  0064' 0086               	movwf	6
  8932  0065' 3001               	movlw	1	; select bank2/3
  8933  0066' 0087               	movwf	7
  8934  0067' 300A               	movlw	10
  8935  0068' 0080'              	movwf	___awmod@divisor
  8936  0069' 3000               	movlw	0
  8937  006A' 0081'              	movwf	___awmod@divisor+1
  8938  006B' 0819'              	movf	vfpfcnvrt@convarg+1,w
  8939  006C' 0083'              	movwf	___awmod@dividend+1
  8940  006D' 0818'              	movf	vfpfcnvrt@convarg,w
  8941  006E' 0082'              	movwf	___awmod@dividend
  8942  006F' 3180' 2000' 3180'  	fcall	___awmod
  8943  0072' 0801'              	movf	?___awmod+1,w
  8944  0073' 0088'              	movwf	abs@a+1
  8945  0074' 0800'              	movf	?___awmod,w
  8946  0075' 0087'              	movwf	abs@a
  8947  0076' 3180' 2000' 3180'  	fcall	_abs
  8948  0079' 0807'              	movf	?_abs,w
  8949  007A' 3E30               	addlw	48
  8950  007B' 0081               	movwf	1
  8951                           
  8952                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  8953  007C' 300A               	movlw	10
  8954  007D' 0080'              	movwf	___awdiv@divisor
  8955  007E' 3000               	movlw	0
  8956  007F' 0081'              	movwf	___awdiv@divisor+1
  8957  0080' 0819'              	movf	vfpfcnvrt@convarg+1,w
  8958  0081' 0083'              	movwf	___awdiv@dividend+1
  8959  0082' 0818'              	movf	vfpfcnvrt@convarg,w
  8960  0083' 0082'              	movwf	___awdiv@dividend
  8961  0084' 3180' 2000' 3180'  	fcall	___awdiv
  8962  0087' 0801'              	movf	?___awdiv+1,w
  8963  0088' 0099'              	movwf	vfpfcnvrt@convarg+1
  8964  0089' 0800'              	movf	?___awdiv,w
  8965  008A' 0098'              	movwf	vfpfcnvrt@convarg
  8966                           
  8967                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  8968  008B' 0818'              	movf	vfpfcnvrt@convarg,w
  8969  008C' 0419'              	iorwf	vfpfcnvrt@convarg+1,w
  8970  008D' 1D03               	btfss	3,2
  8971  008E' 2800'              	goto	l4709
  8972  008F'                    l4711:
  8973                           
  8974                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  8975  008F' 081C'              	movf	vfpfcnvrt@c,w
  8976  0090' 1903               	btfsc	3,2
  8977  0091' 2800'              	goto	l4721
  8978  0092' 0817'              	movf	vfpfcnvrt@done,w
  8979  0093' 1903               	btfsc	3,2
  8980  0094' 2800'              	goto	l4721
  8981                           
  8982                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  8983  0095' 3001               	movlw	1
  8984  0096' 029C'              	subwf	vfpfcnvrt@c,f
  8985  0097' 081C'              	movf	vfpfcnvrt@c,w
  8986  0098' 3E00'              	addlw	(low (_dbuf| (0+256)))& (0+255)
  8987  0099' 0086               	movwf	6
  8988  009A' 3001               	movlw	1	; select bank2/3
  8989  009B' 0087               	movwf	7
  8990  009C' 302D               	movlw	45
  8991  009D' 0081               	movwf	1
  8992  009E'                    l4721:
  8993                           
  8994                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  8995  009E' 3020               	movlw	32
  8996  009F' 061C'              	xorwf	vfpfcnvrt@c,w
  8997  00A0' 1903               	btfsc	3,2
  8998  00A1' 0008               	return
  8999                           
  9000                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  9001  00A2' 081C'              	movf	vfpfcnvrt@c,w
  9002  00A3' 3E00'              	addlw	(low (_dbuf| (0+256)))& (0+255)
  9003  00A4' 0086               	movwf	6
  9004  00A5' 3001               	movlw	1	; select bank2/3
  9005  00A6' 0087               	movwf	7
  9006  00A7' 0801               	movf	1,w
  9007  00A8' 008F'              	movwf	??_vfpfcnvrt
  9008  00A9' 0190'              	clrf	??_vfpfcnvrt+1
  9009  00AA' 080F'              	movf	??_vfpfcnvrt,w
  9010  00AB' 0080'              	movwf	fputc@c
  9011  00AC' 0810'              	movf	??_vfpfcnvrt+1,w
  9012  00AD' 0081'              	movwf	fputc@c+1
  9013  00AE' 080C'              	movf	vfpfcnvrt@fp+1,w
  9014  00AF' 0083'              	movwf	fputc@fp+1
  9015  00B0' 080B'              	movf	vfpfcnvrt@fp,w
  9016  00B1' 0082'              	movwf	fputc@fp
  9017  00B2' 3180' 2000' 3180'  	fcall	_fputc
  9018  00B5' 3001               	movlw	1
  9019  00B6' 0020               	movlb	0	; select bank0
  9020  00B7' 008F'              	movwf	??_vfpfcnvrt
  9021  00B8' 080F'              	movf	??_vfpfcnvrt,w
  9022  00B9' 079C'              	addwf	vfpfcnvrt@c,f
  9023  00BA' 2800'              	goto	l4721
  9024  00BB'                    l4723:
  9025                           
  9026                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1656:   done = 0;
  9027  00BB' 0197'              	clrf	vfpfcnvrt@done
  9028                           
  9029                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1657:   if ((*fmt
      +                          )[0] == 's') {
  9030  00BC' 080D'              	movf	vfpfcnvrt@fmt,w
  9031  00BD' 0086               	movwf	6
  9032  00BE' 0187               	clrf	7
  9033  00BF' 3F40               	moviw [0]fsr1
  9034  00C0' 008F'              	movwf	??_vfpfcnvrt
  9035  00C1' 3F41               	moviw [1]fsr1
  9036  00C2' 0090'              	movwf	??_vfpfcnvrt+1
  9037  00C3' 080F'              	movf	??_vfpfcnvrt,w
  9038  00C4' 0084               	movwf	4
  9039  00C5' 0810'              	movf	??_vfpfcnvrt+1,w
  9040  00C6' 0085               	movwf	5
  9041  00C7' 0012               	moviw fsr0++
  9042  00C8' 3A73               	xorlw	115
  9043  00C9' 1D03               	btfss	3,2
  9044  00CA' 2800'              	goto	l4731
  9045                           
  9046                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1658:    ++*fmt;
  9047  00CB' 080D'              	movf	vfpfcnvrt@fmt,w
  9048  00CC' 0086               	movwf	6
  9049  00CD' 0187               	clrf	7
  9050  00CE' 3001               	movlw	1
  9051  00CF' 2800'              	goto	L3
  9052  00D0'                    l4731:	
  9053                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1660:   }
  9054                           
  9055  00D0' 080D'              	movf	vfpfcnvrt@fmt,w
  9056  00D1' 0086               	movwf	6
  9057  00D2' 0187               	clrf	7
  9058  00D3' 3F40               	moviw [0]fsr1
  9059  00D4' 008F'              	movwf	??_vfpfcnvrt
  9060  00D5' 3F41               	moviw [1]fsr1
  9061  00D6' 0090'              	movwf	??_vfpfcnvrt+1
  9062  00D7' 080F'              	movf	??_vfpfcnvrt,w
  9063  00D8' 0084               	movwf	4
  9064  00D9' 0810'              	movf	??_vfpfcnvrt+1,w
  9065  00DA' 0085               	movwf	5
  9066  00DB' 0012               	moviw fsr0++
  9067  00DC' 3A6C               	xorlw	108
  9068  00DD' 1D03               	btfss	3,2
  9069  00DE' 2800'              	goto	l4741
  9070  00DF' 080D'              	movf	vfpfcnvrt@fmt,w
  9071  00E0' 0086               	movwf	6
  9072  00E1' 0187               	clrf	7
  9073  00E2' 3F40               	moviw [0]fsr1
  9074  00E3' 008F'              	movwf	??_vfpfcnvrt
  9075  00E4' 3F41               	moviw [1]fsr1
  9076  00E5' 0090'              	movwf	??_vfpfcnvrt+1
  9077  00E6' 3001               	movlw	1
  9078  00E7' 070F'              	addwf	??_vfpfcnvrt,w
  9079  00E8' 0084               	movwf	4
  9080  00E9' 0810'              	movf	??_vfpfcnvrt+1,w
  9081  00EA' 1803               	skipnc
  9082  00EB' 0A10'              	incf	??_vfpfcnvrt+1,w
  9083  00EC' 0085               	movwf	5
  9084  00ED' 0012               	moviw fsr0++
  9085  00EE' 3A6C               	xorlw	108
  9086  00EF' 1D03               	btfss	3,2
  9087  00F0' 2800'              	goto	l4741
  9088  00F1' 080D'              	movf	vfpfcnvrt@fmt,w
  9089  00F2' 0086               	movwf	6
  9090  00F3' 0187               	clrf	7
  9091  00F4' 3F40               	moviw [0]fsr1
  9092  00F5' 008F'              	movwf	??_vfpfcnvrt
  9093  00F6' 3F41               	moviw [1]fsr1
  9094  00F7' 0090'              	movwf	??_vfpfcnvrt+1
  9095  00F8' 3002               	movlw	2
  9096  00F9' 070F'              	addwf	??_vfpfcnvrt,w
  9097  00FA' 0084               	movwf	4
  9098  00FB' 0810'              	movf	??_vfpfcnvrt+1,w
  9099  00FC' 1803               	skipnc
  9100  00FD' 0A10'              	incf	??_vfpfcnvrt+1,w
  9101  00FE' 0085               	movwf	5
  9102  00FF' 0012               	moviw fsr0++
  9103  0100' 3A73               	xorlw	115
  9104  0101' 1D03               	btfss	3,2
  9105  0102' 2800'              	goto	l4741
  9106                           
  9107                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1662:    *fmt += 
      +                          3;
  9108  0103' 080D'              	movf	vfpfcnvrt@fmt,w
  9109  0104' 0086               	movwf	6
  9110  0105' 0187               	clrf	7
  9111  0106' 3003               	movlw	3
  9112  0107'                    L3:
  9113  0107' 0781               	addwf	1,f
  9114  0108' 3141               	addfsr 1,1
  9115  0109' 1803               	skipnc
  9116  010A' 0A81               	incf	1,f
  9117                           
  9118                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1659:    done = 1
      +                          ;
  9119  010B' 0197'              	clrf	vfpfcnvrt@done
  9120  010C' 0A97'              	incf	vfpfcnvrt@done,f
  9121  010D'                    l4741:
  9122                           
  9123                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1665:   if (done)
      +                           {
  9124  010D' 0817'              	movf	vfpfcnvrt@done,w
  9125  010E' 1903               	btfsc	3,2
  9126  010F' 2800'              	goto	l4751
  9127                           
  9128                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1669:    for (cha
      +                          r * cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0)); *cp != '\0'; cp++) {
  9129  0110' 080E'              	movf	vfpfcnvrt@ap,w
  9130  0111' 0086               	movwf	6
  9131  0112' 0187               	clrf	7
  9132  0113' 0801               	movf	1,w
  9133  0114' 0084               	movwf	4
  9134  0115' 0185               	clrf	5
  9135  0116' 3002               	movlw	2
  9136  0117' 0781               	addwf	1,f
  9137  0118' 3F00               	moviw [0]fsr0
  9138  0119' 0093'              	movwf	vfpfcnvrt@cp_2048
  9139  011A' 3F01               	moviw [1]fsr0
  9140  011B' 0094'              	movwf	vfpfcnvrt@cp_2048+1
  9141  011C'                    l4749:
  9142  011C' 0813'              	movf	vfpfcnvrt@cp_2048,w
  9143  011D' 0084               	movwf	4
  9144  011E' 0814'              	movf	vfpfcnvrt@cp_2048+1,w
  9145  011F' 0085               	movwf	5
  9146  0120' 0012               	moviw fsr0++
  9147  0121' 1903               	btfsc	3,2
  9148  0122' 0008               	return
  9149                           
  9150                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1670:     fputc(*
      +                          cp, fp);
  9151  0123' 0813'              	movf	vfpfcnvrt@cp_2048,w
  9152  0124' 0084               	movwf	4
  9153  0125' 0814'              	movf	vfpfcnvrt@cp_2048+1,w
  9154  0126' 0085               	movwf	5
  9155  0127' 0800               	movf	0,w	;code access
  9156  0128' 008F'              	movwf	??_vfpfcnvrt
  9157  0129' 0190'              	clrf	??_vfpfcnvrt+1
  9158  012A' 080F'              	movf	??_vfpfcnvrt,w
  9159  012B' 0080'              	movwf	fputc@c
  9160  012C' 0810'              	movf	??_vfpfcnvrt+1,w
  9161  012D' 0081'              	movwf	fputc@c+1
  9162  012E' 080C'              	movf	vfpfcnvrt@fp+1,w
  9163  012F' 0083'              	movwf	fputc@fp+1
  9164  0130' 080B'              	movf	vfpfcnvrt@fp,w
  9165  0131' 0082'              	movwf	fputc@fp
  9166  0132' 3180' 2000' 3180'  	fcall	_fputc
  9167                           
  9168                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1674:    }
  9169  0135' 3001               	movlw	1
  9170  0136' 0020               	movlb	0	; select bank0
  9171  0137' 0793'              	addwf	vfpfcnvrt@cp_2048,f
  9172  0138' 3000               	movlw	0
  9173  0139' 3D94'              	addwfc	vfpfcnvrt@cp_2048+1,f
  9174  013A' 2800'              	goto	l4749
  9175  013B'                    l4751:
  9176                           
  9177                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9178  013B' 0020               	movlb	0	; select bank0
  9179  013C' 080D'              	movf	vfpfcnvrt@fmt,w
  9180  013D' 0086               	movwf	6
  9181  013E' 0187               	clrf	7
  9182  013F' 3001               	movlw	1
  9183  0140' 0781               	addwf	1,f
  9184  0141' 3141               	addfsr 1,1
  9185  0142' 1803               	skipnc
  9186  0143' 0A81               	incf	1,f
  9187  0144' 0008               	return
  9188  0145'                    l4755:
  9189                           
  9190                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9191  0145' 080D'              	movf	vfpfcnvrt@fmt,w
  9192  0146' 0086               	movwf	6
  9193  0147' 0187               	clrf	7
  9194  0148' 3F40               	moviw [0]fsr1
  9195  0149' 008F'              	movwf	??_vfpfcnvrt
  9196  014A' 3F41               	moviw [1]fsr1
  9197  014B' 0090'              	movwf	??_vfpfcnvrt+1
  9198  014C' 080F'              	movf	??_vfpfcnvrt,w
  9199  014D' 0084               	movwf	4
  9200  014E' 0810'              	movf	??_vfpfcnvrt+1,w
  9201  014F' 0085               	movwf	5
  9202  0150' 0800               	movf	0,w	;code access
  9203  0151' 0091'              	movwf	??_vfpfcnvrt+2
  9204  0152' 0192'              	clrf	??_vfpfcnvrt+3
  9205  0153' 0811'              	movf	??_vfpfcnvrt+2,w
  9206  0154' 0080'              	movwf	fputc@c
  9207  0155' 0812'              	movf	??_vfpfcnvrt+3,w
  9208  0156' 0081'              	movwf	fputc@c+1
  9209  0157' 080C'              	movf	vfpfcnvrt@fp+1,w
  9210  0158' 0083'              	movwf	fputc@fp+1
  9211  0159' 080B'              	movf	vfpfcnvrt@fp,w
  9212  015A' 0082'              	movwf	fputc@fp
  9213  015B' 3180' 2000' 3180'  	fcall	_fputc
  9214  015E' 2800'              	goto	l4751
  9215  015F'                    __end_of_vfpfcnvrt:
  9216                           
  9217                           	psect	text30
  9218  0000'                    __ptext30:	
  9219 ;; *************** function _fputc *****************
  9220 ;; Defined at:
  9221 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  9222 ;; Parameters:    Size  Location     Type
  9223 ;;  c               2    0[BANK0 ] int 
  9224 ;;  fp              2    2[BANK0 ] PTR struct _IO_FILE
  9225 ;;		 -> NULL(0), 
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;		None
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  2    0[BANK0 ] int 
  9230 ;; Registers used:
  9231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9232 ;; Tracked objects:
  9233 ;;		On entry : 1F/0
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9237 ;;      Params:         0       4       0       0       0       0       0       0
  9238 ;;      Locals:         0       0       0       0       0       0       0       0
  9239 ;;      Temps:          0       5       0       0       0       0       0       0
  9240 ;;      Totals:         0       9       0       0       0       0       0       0
  9241 ;;Total ram usage:        9 bytes
  9242 ;; Hardware stack levels used: 1
  9243 ;; Hardware stack levels required when called: 8
  9244 ;; This function calls:
  9245 ;;		_putch
  9246 ;; This function is called by:
  9247 ;;		_vfpfcnvrt
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251  0000'                    _fputc:	
  9252                           ;psect for function _fputc
  9253                           
  9254                           
  9255                           ;incstack = 0
  9256 ;; hardware stack exceeded
  9257                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9258  0000' 0802'              	movf	fputc@fp,w
  9259  0001' 0403'              	iorwf	fputc@fp+1,w
  9260  0002' 1903               	btfsc	3,2
  9261  0003' 2800'              	goto	l4663
  9262  0004' 0802'              	movf	fputc@fp,w
  9263  0005' 0403'              	iorwf	fputc@fp+1,w
  9264  0006' 1D03               	btfss	3,2
  9265  0007' 2800'              	goto	l4665
  9266  0008'                    l4663:
  9267  0008' 0800'              	movf	fputc@c,w
  9268  0009' 3180' 2000'        	fcall	_putch
  9269  000B' 0008               	return
  9270  000C'                    l4665:
  9271  000C' 0802'              	movf	fputc@fp,w
  9272  000D' 0086               	movwf	6
  9273  000E' 0803'              	movf	fputc@fp+1,w
  9274  000F' 0087               	movwf	7
  9275  0010' 3149               	addfsr 1,9
  9276  0011' 0016               	moviw fsr1++
  9277  0012' 0401               	iorwf	1,w
  9278  0013' 1903               	btfsc	3,2
  9279  0014' 2800'              	goto	l4669
  9280  0015' 0802'              	movf	fputc@fp,w
  9281  0016' 0086               	movwf	6
  9282  0017' 0803'              	movf	fputc@fp+1,w
  9283  0018' 0087               	movwf	7
  9284  0019' 3149               	addfsr 1,9
  9285  001A' 3F40               	moviw [0]fsr1
  9286  001B' 0084'              	movwf	??_fputc
  9287  001C' 3F41               	moviw [1]fsr1
  9288  001D' 0085'              	movwf	??_fputc+1
  9289  001E' 0802'              	movf	fputc@fp,w
  9290  001F' 0086               	movwf	6
  9291  0020' 0803'              	movf	fputc@fp+1,w
  9292  0021' 0087               	movwf	7
  9293  0022' 3142               	addfsr 1,2
  9294  0023' 3F40               	moviw [0]fsr1
  9295  0024' 0086'              	movwf	??_fputc+2
  9296  0025' 3F41               	moviw [1]fsr1
  9297  0026' 0087'              	movwf	??_fputc+3
  9298  0027' 0807'              	movf	??_fputc+3,w
  9299  0028' 3A80               	xorlw	128
  9300  0029' 0088'              	movwf	??_fputc+4
  9301  002A' 0805'              	movf	??_fputc+1,w
  9302  002B' 3A80               	xorlw	128
  9303  002C' 0208'              	subwf	??_fputc+4,w
  9304  002D' 1D03               	skipz
  9305  002E' 2800'              	goto	u4705
  9306  002F' 0804'              	movf	??_fputc,w
  9307  0030' 0206'              	subwf	??_fputc+2,w
  9308  0031'                    u4705:
  9309  0031' 1803               	skipnc
  9310  0032' 0008               	return
  9311  0033'                    l4669:
  9312  0033' 0020               	movlb	0	; select bank0
  9313  0034' 0802'              	movf	fputc@fp,w
  9314  0035' 0086               	movwf	6
  9315  0036' 0803'              	movf	fputc@fp+1,w
  9316  0037' 0087               	movwf	7
  9317  0038' 3142               	addfsr 1,2
  9318  0039' 0802'              	movf	fputc@fp,w
  9319  003A' 0084               	movwf	4
  9320  003B' 0803'              	movf	fputc@fp+1,w
  9321  003C' 0085               	movwf	5
  9322  003D' 3F40               	moviw [0]fsr1
  9323  003E' 0700               	addwf	0,w
  9324  003F' 0084'              	movwf	??_fputc
  9325  0040' 3101               	addfsr 0,1
  9326  0041' 3F41               	moviw [1]fsr1
  9327  0042' 3D00               	addwfc	0,w
  9328  0043' 0085'              	movwf	??_fputc+1
  9329  0044' 0804'              	movf	??_fputc,w
  9330  0045' 0086               	movwf	6
  9331  0046' 0805'              	movf	??_fputc+1,w
  9332  0047' 0087               	movwf	7
  9333  0048' 0800'              	movf	fputc@c,w
  9334  0049' 0081               	movwf	1
  9335  004A' 0802'              	movf	fputc@fp,w
  9336  004B' 0086               	movwf	6
  9337  004C' 0803'              	movf	fputc@fp+1,w
  9338  004D' 0087               	movwf	7
  9339  004E' 3142               	addfsr 1,2
  9340  004F' 3001               	movlw	1
  9341  0050' 0781               	addwf	1,f
  9342  0051' 3141               	addfsr 1,1
  9343  0052' 1803               	skipnc
  9344  0053' 0A81               	incf	1,f
  9345  0054' 0008               	return
  9346  0055'                    __end_of_fputc:
  9347                           
  9348                           	psect	text31
  9349  0000'                    __ptext31:	
  9350 ;; *************** function _putch *****************
  9351 ;; Defined at:
  9352 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;  c               1    wreg     unsigned char 
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;  c               1    0[COMMON] unsigned char 
  9357 ;; Return value:  Size  Location     Type
  9358 ;;                  1    wreg      void 
  9359 ;; Registers used:
  9360 ;;		wreg
  9361 ;; Tracked objects:
  9362 ;;		On entry : 1F/0
  9363 ;;		On exit  : 1F/0
  9364 ;;		Unchanged: 1F/0
  9365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9366 ;;      Params:         0       0       0       0       0       0       0       0
  9367 ;;      Locals:         0       0       0       0       0       0       0       0
  9368 ;;      Temps:          0       0       0       0       0       0       0       0
  9369 ;;      Totals:         0       0       0       0       0       0       0       0
  9370 ;;Total ram usage:        0 bytes
  9371 ;; Hardware stack levels used: 1
  9372 ;; Hardware stack levels required when called: 7
  9373 ;; This function calls:
  9374 ;;		Nothing
  9375 ;; This function is called by:
  9376 ;;		_fputc
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380  0000'                    _putch:	
  9381                           ;psect for function _putch
  9382                           
  9383                           
  9384                           ;incstack = 0
  9385 ;; hardware stack exceeded
  9386                           ; Regs used in _putch: [wreg]
  9387  0000' 0008               	return
  9388  0001'                    __end_of_putch:
  9389                           
  9390                           	psect	text32
  9391  0000'                    __ptext32:	
  9392 ;; *************** function _abs *****************
  9393 ;; Defined at:
  9394 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;  a               2    7[BANK0 ] int 
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;		None
  9399 ;; Return value:  Size  Location     Type
  9400 ;;                  2    7[BANK0 ] int 
  9401 ;; Registers used:
  9402 ;;		wreg, status,2, status,0
  9403 ;; Tracked objects:
  9404 ;;		On entry : 1F/0
  9405 ;;		On exit  : 1F/0
  9406 ;;		Unchanged: 0/0
  9407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9408 ;;      Params:         0       2       0       0       0       0       0       0
  9409 ;;      Locals:         0       0       0       0       0       0       0       0
  9410 ;;      Temps:          0       2       0       0       0       0       0       0
  9411 ;;      Totals:         0       4       0       0       0       0       0       0
  9412 ;;Total ram usage:        4 bytes
  9413 ;; Hardware stack levels used: 1
  9414 ;; Hardware stack levels required when called: 7
  9415 ;; This function calls:
  9416 ;;		Nothing
  9417 ;; This function is called by:
  9418 ;;		_vfpfcnvrt
  9419 ;; This function uses a non-reentrant model
  9420 ;;
  9421                           
  9422  0000'                    _abs:	
  9423                           ;psect for function _abs
  9424                           
  9425                           
  9426                           ;incstack = 0
  9427                           ; Regs used in _abs: [wreg+status,2+status,0]
  9428  0000' 1F88'              	btfss	abs@a+1,7
  9429  0001' 0008               	return
  9430  0002' 0907'              	comf	abs@a,w
  9431  0003' 0089'              	movwf	??_abs
  9432  0004' 0908'              	comf	abs@a+1,w
  9433  0005' 008A'              	movwf	??_abs+1
  9434  0006' 0A89'              	incf	??_abs,f
  9435  0007' 1903               	skipnz
  9436  0008' 0A8A'              	incf	??_abs+1,f
  9437  0009' 0809'              	movf	??_abs,w
  9438  000A' 0087'              	movwf	?_abs
  9439  000B' 080A'              	movf	??_abs+1,w
  9440  000C' 0088'              	movwf	?_abs+1
  9441  000D' 0008               	return
  9442  000E'                    __end_of_abs:
  9443                           
  9444                           	psect	text33
  9445  0000'                    __ptext33:	
  9446 ;; *************** function ___awmod *****************
  9447 ;; Defined at:
  9448 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  divisor         2    0[BANK0 ] int 
  9451 ;;  dividend        2    2[BANK0 ] int 
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;  sign            1    6[BANK0 ] unsigned char 
  9454 ;;  counter         1    5[BANK0 ] unsigned char 
  9455 ;; Return value:  Size  Location     Type
  9456 ;;                  2    0[BANK0 ] int 
  9457 ;; Registers used:
  9458 ;;		wreg, status,2, status,0
  9459 ;; Tracked objects:
  9460 ;;		On entry : 1F/0
  9461 ;;		On exit  : 1F/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9464 ;;      Params:         0       4       0       0       0       0       0       0
  9465 ;;      Locals:         0       2       0       0       0       0       0       0
  9466 ;;      Temps:          0       1       0       0       0       0       0       0
  9467 ;;      Totals:         0       7       0       0       0       0       0       0
  9468 ;;Total ram usage:        7 bytes
  9469 ;; Hardware stack levels used: 1
  9470 ;; Hardware stack levels required when called: 7
  9471 ;; This function calls:
  9472 ;;		Nothing
  9473 ;; This function is called by:
  9474 ;;		_vfpfcnvrt
  9475 ;; This function uses a non-reentrant model
  9476 ;;
  9477                           
  9478  0000'                    ___awmod:	
  9479                           ;psect for function ___awmod
  9480                           
  9481                           
  9482                           ;incstack = 0
  9483                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9484  0000' 0186'              	clrf	___awmod@sign
  9485  0001' 1F83'              	btfss	___awmod@dividend+1,7
  9486  0002' 2800'              	goto	l4629
  9487  0003' 0982'              	comf	___awmod@dividend,f
  9488  0004' 0983'              	comf	___awmod@dividend+1,f
  9489  0005' 0A82'              	incf	___awmod@dividend,f
  9490  0006' 1903               	skipnz
  9491  0007' 0A83'              	incf	___awmod@dividend+1,f
  9492  0008' 0186'              	clrf	___awmod@sign
  9493  0009' 0A86'              	incf	___awmod@sign,f
  9494  000A'                    l4629:
  9495  000A' 1F81'              	btfss	___awmod@divisor+1,7
  9496  000B' 2800'              	goto	l4633
  9497  000C' 0980'              	comf	___awmod@divisor,f
  9498  000D' 0981'              	comf	___awmod@divisor+1,f
  9499  000E' 0A80'              	incf	___awmod@divisor,f
  9500  000F' 1903               	skipnz
  9501  0010' 0A81'              	incf	___awmod@divisor+1,f
  9502  0011'                    l4633:
  9503  0011' 0800'              	movf	___awmod@divisor,w
  9504  0012' 0401'              	iorwf	___awmod@divisor+1,w
  9505  0013' 1903               	btfsc	3,2
  9506  0014' 2800'              	goto	l4651
  9507  0015' 0185'              	clrf	___awmod@counter
  9508  0016' 0A85'              	incf	___awmod@counter,f
  9509  0017'                    l4641:
  9510  0017' 1B81'              	btfsc	___awmod@divisor+1,7
  9511  0018' 2800'              	goto	l4643
  9512  0019' 3001               	movlw	1
  9513  001A'                    u4615:
  9514  001A' 3580'              	lslf	___awmod@divisor,f
  9515  001B' 0D81'              	rlf	___awmod@divisor+1,f
  9516  001C' 0B89               	decfsz	9,f
  9517  001D' 2800'              	goto	u4615
  9518  001E' 3001               	movlw	1
  9519  001F' 0084'              	movwf	??___awmod
  9520  0020' 0804'              	movf	??___awmod,w
  9521  0021' 0785'              	addwf	___awmod@counter,f
  9522  0022' 2800'              	goto	l4641
  9523  0023'                    l4643:
  9524  0023' 0801'              	movf	___awmod@divisor+1,w
  9525  0024' 0203'              	subwf	___awmod@dividend+1,w
  9526  0025' 1D03               	skipz
  9527  0026' 2800'              	goto	u4635
  9528  0027' 0800'              	movf	___awmod@divisor,w
  9529  0028' 0202'              	subwf	___awmod@dividend,w
  9530  0029'                    u4635:
  9531  0029' 1C03               	skipc
  9532  002A' 2800'              	goto	l4647
  9533  002B' 0800'              	movf	___awmod@divisor,w
  9534  002C' 0282'              	subwf	___awmod@dividend,f
  9535  002D' 0801'              	movf	___awmod@divisor+1,w
  9536  002E' 3B83'              	subwfb	___awmod@dividend+1,f
  9537  002F'                    l4647:
  9538  002F' 3001               	movlw	1
  9539  0030'                    u4645:
  9540  0030' 3681'              	lsrf	___awmod@divisor+1,f
  9541  0031' 0C80'              	rrf	___awmod@divisor,f
  9542  0032' 0B89               	decfsz	9,f
  9543  0033' 2800'              	goto	u4645
  9544  0034' 3001               	movlw	1
  9545  0035' 0285'              	subwf	___awmod@counter,f
  9546  0036' 1D03               	btfss	3,2
  9547  0037' 2800'              	goto	l4643
  9548  0038'                    l4651:
  9549  0038' 0806'              	movf	___awmod@sign,w
  9550  0039' 1903               	btfsc	3,2
  9551  003A' 2800'              	goto	l4655
  9552  003B' 0982'              	comf	___awmod@dividend,f
  9553  003C' 0983'              	comf	___awmod@dividend+1,f
  9554  003D' 0A82'              	incf	___awmod@dividend,f
  9555  003E' 1903               	skipnz
  9556  003F' 0A83'              	incf	___awmod@dividend+1,f
  9557  0040'                    l4655:
  9558  0040' 0803'              	movf	___awmod@dividend+1,w
  9559  0041' 0081'              	movwf	?___awmod+1
  9560  0042' 0802'              	movf	___awmod@dividend,w
  9561  0043' 0080'              	movwf	?___awmod
  9562  0044' 0008               	return
  9563  0045'                    __end_of___awmod:
  9564                           
  9565                           	psect	text34
  9566  0000'                    __ptext34:	
  9567 ;; *************** function ___awdiv *****************
  9568 ;; Defined at:
  9569 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;  divisor         2    0[BANK0 ] int 
  9572 ;;  dividend        2    2[BANK0 ] int 
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;  quotient        2    7[BANK0 ] int 
  9575 ;;  sign            1    6[BANK0 ] unsigned char 
  9576 ;;  counter         1    5[BANK0 ] unsigned char 
  9577 ;; Return value:  Size  Location     Type
  9578 ;;                  2    0[BANK0 ] int 
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0
  9581 ;; Tracked objects:
  9582 ;;		On entry : 1F/0
  9583 ;;		On exit  : 1F/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9586 ;;      Params:         0       4       0       0       0       0       0       0
  9587 ;;      Locals:         0       4       0       0       0       0       0       0
  9588 ;;      Temps:          0       1       0       0       0       0       0       0
  9589 ;;      Totals:         0       9       0       0       0       0       0       0
  9590 ;;Total ram usage:        9 bytes
  9591 ;; Hardware stack levels used: 1
  9592 ;; Hardware stack levels required when called: 7
  9593 ;; This function calls:
  9594 ;;		Nothing
  9595 ;; This function is called by:
  9596 ;;		_vfpfcnvrt
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600  0000'                    ___awdiv:	
  9601                           ;psect for function ___awdiv
  9602                           
  9603                           
  9604                           ;incstack = 0
  9605                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9606  0000' 0186'              	clrf	___awdiv@sign
  9607  0001' 1F81'              	btfss	___awdiv@divisor+1,7
  9608  0002' 2800'              	goto	l4585
  9609  0003' 0980'              	comf	___awdiv@divisor,f
  9610  0004' 0981'              	comf	___awdiv@divisor+1,f
  9611  0005' 0A80'              	incf	___awdiv@divisor,f
  9612  0006' 1903               	skipnz
  9613  0007' 0A81'              	incf	___awdiv@divisor+1,f
  9614  0008' 0186'              	clrf	___awdiv@sign
  9615  0009' 0A86'              	incf	___awdiv@sign,f
  9616  000A'                    l4585:
  9617  000A' 1F83'              	btfss	___awdiv@dividend+1,7
  9618  000B' 2800'              	goto	l4591
  9619  000C' 0982'              	comf	___awdiv@dividend,f
  9620  000D' 0983'              	comf	___awdiv@dividend+1,f
  9621  000E' 0A82'              	incf	___awdiv@dividend,f
  9622  000F' 1903               	skipnz
  9623  0010' 0A83'              	incf	___awdiv@dividend+1,f
  9624  0011' 3001               	movlw	1
  9625  0012' 0084'              	movwf	??___awdiv
  9626  0013' 0804'              	movf	??___awdiv,w
  9627  0014' 0686'              	xorwf	___awdiv@sign,f
  9628  0015'                    l4591:
  9629  0015' 0187'              	clrf	___awdiv@quotient
  9630  0016' 0188'              	clrf	___awdiv@quotient+1
  9631  0017' 0800'              	movf	___awdiv@divisor,w
  9632  0018' 0401'              	iorwf	___awdiv@divisor+1,w
  9633  0019' 1903               	btfsc	3,2
  9634  001A' 2800'              	goto	l4613
  9635  001B' 0185'              	clrf	___awdiv@counter
  9636  001C' 0A85'              	incf	___awdiv@counter,f
  9637  001D'                    l4601:
  9638  001D' 1B81'              	btfsc	___awdiv@divisor+1,7
  9639  001E' 2800'              	goto	l4603
  9640  001F' 3001               	movlw	1
  9641  0020'                    u4515:
  9642  0020' 3580'              	lslf	___awdiv@divisor,f
  9643  0021' 0D81'              	rlf	___awdiv@divisor+1,f
  9644  0022' 0B89               	decfsz	9,f
  9645  0023' 2800'              	goto	u4515
  9646  0024' 3001               	movlw	1
  9647  0025' 0084'              	movwf	??___awdiv
  9648  0026' 0804'              	movf	??___awdiv,w
  9649  0027' 0785'              	addwf	___awdiv@counter,f
  9650  0028' 2800'              	goto	l4601
  9651  0029'                    l4603:
  9652  0029' 3001               	movlw	1
  9653  002A'                    u4535:
  9654  002A' 3587'              	lslf	___awdiv@quotient,f
  9655  002B' 0D88'              	rlf	___awdiv@quotient+1,f
  9656  002C' 0B89               	decfsz	9,f
  9657  002D' 2800'              	goto	u4535
  9658  002E' 0801'              	movf	___awdiv@divisor+1,w
  9659  002F' 0203'              	subwf	___awdiv@dividend+1,w
  9660  0030' 1D03               	skipz
  9661  0031' 2800'              	goto	u4545
  9662  0032' 0800'              	movf	___awdiv@divisor,w
  9663  0033' 0202'              	subwf	___awdiv@dividend,w
  9664  0034'                    u4545:
  9665  0034' 1C03               	skipc
  9666  0035' 2800'              	goto	l4609
  9667  0036' 0800'              	movf	___awdiv@divisor,w
  9668  0037' 0282'              	subwf	___awdiv@dividend,f
  9669  0038' 0801'              	movf	___awdiv@divisor+1,w
  9670  0039' 3B83'              	subwfb	___awdiv@dividend+1,f
  9671  003A' 1407'              	bsf	___awdiv@quotient,0
  9672  003B'                    l4609:
  9673  003B' 3001               	movlw	1
  9674  003C'                    u4555:
  9675  003C' 3681'              	lsrf	___awdiv@divisor+1,f
  9676  003D' 0C80'              	rrf	___awdiv@divisor,f
  9677  003E' 0B89               	decfsz	9,f
  9678  003F' 2800'              	goto	u4555
  9679  0040' 3001               	movlw	1
  9680  0041' 0285'              	subwf	___awdiv@counter,f
  9681  0042' 1D03               	btfss	3,2
  9682  0043' 2800'              	goto	l4603
  9683  0044'                    l4613:
  9684  0044' 0806'              	movf	___awdiv@sign,w
  9685  0045' 1903               	btfsc	3,2
  9686  0046' 2800'              	goto	l4617
  9687  0047' 0987'              	comf	___awdiv@quotient,f
  9688  0048' 0988'              	comf	___awdiv@quotient+1,f
  9689  0049' 0A87'              	incf	___awdiv@quotient,f
  9690  004A' 1903               	skipnz
  9691  004B' 0A88'              	incf	___awdiv@quotient+1,f
  9692  004C'                    l4617:
  9693  004C' 0808'              	movf	___awdiv@quotient+1,w
  9694  004D' 0081'              	movwf	?___awdiv+1
  9695  004E' 0807'              	movf	___awdiv@quotient,w
  9696  004F' 0080'              	movwf	?___awdiv
  9697  0050' 0008               	return
  9698  0051'                    __end_of___awdiv:
  9699                           
  9700                           	psect	text35
  9701  0000'                    __ptext35:	
  9702 ;; *************** function _abort *****************
  9703 ;; Defined at:
  9704 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abort.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;		None
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;		None
  9709 ;; Return value:  Size  Location     Type
  9710 ;;                  1    wreg      void 
  9711 ;; Registers used:
  9712 ;;		wreg, status,2, status,0, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 1F/0
  9715 ;;		On exit  : 1F/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9718 ;;      Params:         0       0       0       0       0       0       0       0
  9719 ;;      Locals:         0       0       0       0       0       0       0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0       0
  9721 ;;      Totals:         0       0       0       0       0       0       0       0
  9722 ;;Total ram usage:        0 bytes
  9723 ;; Hardware stack levels used: 1
  9724 ;; Hardware stack levels required when called: 9
  9725 ;; This function calls:
  9726 ;;		_exit
  9727 ;; This function is called by:
  9728 ;;		___assert_fail
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732  0000'                    _abort:	
  9733                           ;psect for function _abort
  9734                           
  9735                           
  9736                           ;incstack = 0
  9737                           ; Regs used in _abort: [wreg+status,2+status,0+pclath+cstack]
  9738  0000' 30FF               	movlw	255
  9739  0001' 0082'              	movwf	exit@code
  9740  0002' 30FF               	movlw	255
  9741  0003' 0083'              	movwf	exit@code+1
  9742  0004' 3180' 2000'        	fcall	_exit
  9743  0006' 0008               	return
  9744  0007'                    __end_of_abort:
  9745                           
  9746                           	psect	text36
  9747  0000'                    __ptext36:	
  9748 ;; *************** function _exit *****************
  9749 ;; Defined at:
  9750 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\exit.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;  code            2    2[BANK0 ] int 
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;		None
  9755 ;; Return value:  Size  Location     Type
  9756 ;;                  1    wreg      void 
  9757 ;; Registers used:
  9758 ;;		wreg, status,2, status,0, pclath, cstack
  9759 ;; Tracked objects:
  9760 ;;		On entry : 1F/0
  9761 ;;		On exit  : 1F/0
  9762 ;;		Unchanged: 0/0
  9763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9764 ;;      Params:         0       2       0       0       0       0       0       0
  9765 ;;      Locals:         0       0       0       0       0       0       0       0
  9766 ;;      Temps:          0       0       0       0       0       0       0       0
  9767 ;;      Totals:         0       2       0       0       0       0       0       0
  9768 ;;Total ram usage:        2 bytes
  9769 ;; Hardware stack levels used: 1
  9770 ;; Hardware stack levels required when called: 8
  9771 ;; This function calls:
  9772 ;;		__Exit
  9773 ;;		___funcs_on_exit
  9774 ;; This function is called by:
  9775 ;;		_abort
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779  0000'                    _exit:	
  9780                           ;psect for function _exit
  9781                           
  9782                           
  9783                           ;incstack = 0
  9784                           ; Regs used in _exit: [wreg+status,2+status,0+pclath+cstack]
  9785  0000' 3180' 2000' 3180'  	fcall	___funcs_on_exit
  9786  0003' 0803'              	movf	exit@code+1,w
  9787  0004' 0081'              	movwf	__Exit@ec+1
  9788  0005' 0802'              	movf	exit@code,w
  9789  0006' 0080'              	movwf	__Exit@ec
  9790  0007' 3180' 2000'        	fcall	__Exit
  9791  0009' 0008               	return
  9792  000A'                    __end_of_exit:
  9793                           
  9794                           	psect	text37
  9795  0000'                    __ptext37:	
  9796 ;; *************** function ___funcs_on_exit *****************
  9797 ;; Defined at:
  9798 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\atexit.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;  func            2    0        PTR FTN()void 
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  1    wreg      void 
  9805 ;; Registers used:
  9806 ;;		wreg, status,2, status,0
  9807 ;; Tracked objects:
  9808 ;;		On entry : 1F/0
  9809 ;;		On exit  : 1F/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9812 ;;      Params:         0       0       0       0       0       0       0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0
  9814 ;;      Temps:          0       1       0       0       0       0       0       0
  9815 ;;      Totals:         0       1       0       0       0       0       0       0
  9816 ;;Total ram usage:        1 bytes
  9817 ;; Hardware stack levels used: 1
  9818 ;; Hardware stack levels required when called: 7
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_exit
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826  0000'                    ___funcs_on_exit:	
  9827                           ;psect for function ___funcs_on_exit
  9828                           
  9829  0000'                    l4679:	
  9830                           ;incstack = 0
  9831                           ; Regs used in ___funcs_on_exit: [wreg+status,2+status,0]
  9832                           
  9833  0000' 0805'              	movf	_count,w
  9834  0001' 3A80               	xorlw	128
  9835  0002' 3E7F               	addlw	-129
  9836  0003' 1C03               	btfss	3,0
  9837  0004' 0008               	return
  9838  0005' 30FF               	movlw	255
  9839  0006' 0080'              	movwf	??___funcs_on_exit
  9840  0007' 0800'              	movf	??___funcs_on_exit,w
  9841  0008' 0785'              	addwf	_count,f
  9842  0009' 2800'              	goto	l4679
  9843  000A'                    __end_of___funcs_on_exit:
  9844                           
  9845                           	psect	text38
  9846  0000'                    __ptext38:	
  9847 ;; *************** function __Exit *****************
  9848 ;; Defined at:
  9849 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\_Exit.c"
  9850 ;; Parameters:    Size  Location     Type
  9851 ;;  ec              2    0[BANK0 ] int 
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;		None
  9854 ;; Return value:  Size  Location     Type
  9855 ;;                  1    wreg      void 
  9856 ;; Registers used:
  9857 ;;		None
  9858 ;; Tracked objects:
  9859 ;;		On entry : 1F/0
  9860 ;;		On exit  : 1F/0
  9861 ;;		Unchanged: 1F/0
  9862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9863 ;;      Params:         0       2       0       0       0       0       0       0
  9864 ;;      Locals:         0       0       0       0       0       0       0       0
  9865 ;;      Temps:          0       0       0       0       0       0       0       0
  9866 ;;      Totals:         0       2       0       0       0       0       0       0
  9867 ;;Total ram usage:        2 bytes
  9868 ;; Hardware stack levels used: 1
  9869 ;; Hardware stack levels required when called: 7
  9870 ;; This function calls:
  9871 ;;		Nothing
  9872 ;; This function is called by:
  9873 ;;		_exit
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877  0000'                    __Exit:	
  9878                           ;psect for function __Exit
  9879                           
  9880  0000'                    l1345:	
  9881                           ;incstack = 0
  9882                           ; Regs used in __Exit: []
  9883                           
  9884  0000' 2800'              	goto	l1345
  9885  0001'                    __end_of__Exit:
  9886                           
  9887                           	psect	text39
  9888  0000'                    __ptext39:	
  9889 ;; *************** function _ADC_StartConversion *****************
  9890 ;; Defined at:
  9891 ;;		line 88 in file "mcc_generated_files/adc/src/adc.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;		None
  9894 ;; Auto vars:     Size  Location     Type
  9895 ;;		None
  9896 ;; Return value:  Size  Location     Type
  9897 ;;                  1    wreg      void 
  9898 ;; Registers used:
  9899 ;;		None
  9900 ;; Tracked objects:
  9901 ;;		On entry : 1F/0
  9902 ;;		On exit  : 1F/1
  9903 ;;		Unchanged: 0/0
  9904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9905 ;;      Params:         0       0       0       0       0       0       0       0
  9906 ;;      Locals:         0       0       0       0       0       0       0       0
  9907 ;;      Temps:          0       0       0       0       0       0       0       0
  9908 ;;      Totals:         0       0       0       0       0       0       0       0
  9909 ;;Total ram usage:        0 bytes
  9910 ;; Hardware stack levels used: 1
  9911 ;; Hardware stack levels required when called: 7
  9912 ;; This function calls:
  9913 ;;		Nothing
  9914 ;; This function is called by:
  9915 ;;		_getADCValue
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919  0000'                    _ADC_StartConversion:	
  9920                           ;psect for function _ADC_StartConversion
  9921                           
  9922                           
  9923                           ;mcc_generated_files/adc/src/adc.c: 91:     ADCON0bits.GO_nDONE = 1;
  9924                           
  9925                           ;incstack = 0
  9926                           ; Regs used in _ADC_StartConversion: []
  9927  0000' 0021               	movlb	1	; select bank1
  9928  0001' 149D               	bsf	29,1	;volatile
  9929  0002' 0008               	return
  9930  0003'                    __end_of_ADC_StartConversion:
  9931                           
  9932                           	psect	text40
  9933  0000'                    __ptext40:	
  9934 ;; *************** function _ADC_SelectChannel *****************
  9935 ;; Defined at:
  9936 ;;		line 82 in file "mcc_generated_files/adc/src/adc.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  channel         1    wreg     enum E9219
  9939 ;; Auto vars:     Size  Location     Type
  9940 ;;  channel         1    1[BANK0 ] enum E9219
  9941 ;; Return value:  Size  Location     Type
  9942 ;;                  1    wreg      void 
  9943 ;; Registers used:
  9944 ;;		wreg, status,2, status,0
  9945 ;; Tracked objects:
  9946 ;;		On entry : 1F/0
  9947 ;;		On exit  : 1F/1
  9948 ;;		Unchanged: 0/0
  9949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9950 ;;      Params:         0       0       0       0       0       0       0       0
  9951 ;;      Locals:         0       1       0       0       0       0       0       0
  9952 ;;      Temps:          0       1       0       0       0       0       0       0
  9953 ;;      Totals:         0       2       0       0       0       0       0       0
  9954 ;;Total ram usage:        2 bytes
  9955 ;; Hardware stack levels used: 1
  9956 ;; Hardware stack levels required when called: 7
  9957 ;; This function calls:
  9958 ;;		Nothing
  9959 ;; This function is called by:
  9960 ;;		_getADCValue
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964  0000'                    _ADC_SelectChannel:	
  9965                           ;psect for function _ADC_SelectChannel
  9966                           
  9967                           
  9968                           ;incstack = 0
  9969                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  9970                           ;ADC_SelectChannel@channel stored from wreg
  9971  0000' 0081'              	movwf	ADC_SelectChannel@channel
  9972                           
  9973                           ;mcc_generated_files/adc/src/adc.c: 82: void ADC_SelectChannel(adc_channel_t channel);mc
      +                          c_generated_files/adc/src/adc.c: 83: {;mcc_generated_files/adc/src/adc.c: 85:     ADCON0
      +                          bits.CHS = channel;
  9974  0001' 0801'              	movf	ADC_SelectChannel@channel,w
  9975  0002' 0080'              	movwf	??_ADC_SelectChannel
  9976  0003' 0D80'              	rlf	??_ADC_SelectChannel,f
  9977  0004' 0D80'              	rlf	??_ADC_SelectChannel,f
  9978  0005' 0021               	movlb	1	; select bank1
  9979  0006' 081D               	movf	29,w	;volatile
  9980  0007' 0020               	movlb	0	; select bank0
  9981  0008' 0600'              	xorwf	??_ADC_SelectChannel,w
  9982  0009' 3983               	andlw	-125
  9983  000A' 0600'              	xorwf	??_ADC_SelectChannel,w
  9984  000B' 0021               	movlb	1	; select bank1
  9985  000C' 009D               	movwf	29	;volatile
  9986  000D' 0008               	return
  9987  000E'                    __end_of_ADC_SelectChannel:
  9988                           
  9989                           	psect	text41
  9990  0000'                    __ptext41:	
  9991 ;; *************** function _ADC_IsConversionDone *****************
  9992 ;; Defined at:
  9993 ;;		line 94 in file "mcc_generated_files/adc/src/adc.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;		None
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;		None
  9998 ;; Return value:  Size  Location     Type
  9999 ;;                  1    wreg      _Bool 
 10000 ;; Registers used:
 10001 ;;		wreg, status,0
 10002 ;; Tracked objects:
 10003 ;;		On entry : 1F/0
 10004 ;;		On exit  : 1F/1
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10007 ;;      Params:         0       0       0       0       0       0       0       0
 10008 ;;      Locals:         0       0       0       0       0       0       0       0
 10009 ;;      Temps:          0       0       0       0       0       0       0       0
 10010 ;;      Totals:         0       0       0       0       0       0       0       0
 10011 ;;Total ram usage:        0 bytes
 10012 ;; Hardware stack levels used: 1
 10013 ;; Hardware stack levels required when called: 7
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		_getADCValue
 10018 ;; This function uses a non-reentrant model
 10019 ;;
 10020                           
 10021  0000'                    _ADC_IsConversionDone:	
 10022                           ;psect for function _ADC_IsConversionDone
 10023                           
 10024                           
 10025                           ;mcc_generated_files/adc/src/adc.c: 97:     return ((_Bool)(!ADCON0bits.GO_nDONE));
 10026                           
 10027                           ;incstack = 0
 10028                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
 10029  0000' 1003               	clrc
 10030  0001' 0021               	movlb	1	; select bank1
 10031  0002' 1C9D               	btfss	29,1	;volatile
 10032  0003' 1403               	setc
 10033  0004' 3000               	movlw	0
 10034  0005' 3D09               	addwfc	9,w
 10035  0006' 0008               	return
 10036  0007'                    __end_of_ADC_IsConversionDone:
 10037                           
 10038                           	psect	text42
 10039  0000'                    __ptext42:	
 10040 ;; *************** function _ADC_GetConversionResult *****************
 10041 ;; Defined at:
 10042 ;;		line 100 in file "mcc_generated_files/adc/src/adc.c"
 10043 ;; Parameters:    Size  Location     Type
 10044 ;;		None
 10045 ;; Auto vars:     Size  Location     Type
 10046 ;;		None
 10047 ;; Return value:  Size  Location     Type
 10048 ;;                  2    0[BANK0 ] unsigned short 
 10049 ;; Registers used:
 10050 ;;		wreg
 10051 ;; Tracked objects:
 10052 ;;		On entry : 1F/1
 10053 ;;		On exit  : 1F/0
 10054 ;;		Unchanged: 0/0
 10055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10056 ;;      Params:         0       2       0       0       0       0       0       0
 10057 ;;      Locals:         0       0       0       0       0       0       0       0
 10058 ;;      Temps:          0       0       0       0       0       0       0       0
 10059 ;;      Totals:         0       2       0       0       0       0       0       0
 10060 ;;Total ram usage:        2 bytes
 10061 ;; Hardware stack levels used: 1
 10062 ;; Hardware stack levels required when called: 7
 10063 ;; This function calls:
 10064 ;;		Nothing
 10065 ;; This function is called by:
 10066 ;;		_getADCValue
 10067 ;; This function uses a non-reentrant model
 10068 ;;
 10069                           
 10070  0000'                    _ADC_GetConversionResult:	
 10071                           ;psect for function _ADC_GetConversionResult
 10072                           
 10073                           
 10074                           ;mcc_generated_files/adc/src/adc.c: 103:     return ((adc_result_t)((ADRESH << 8) + ADRE
      +                          SL));
 10075                           
 10076                           ;incstack = 0
 10077                           ; Regs used in _ADC_GetConversionResult: [wreg]
 10078  0000' 081C               	movf	28,w	;volatile
 10079  0001' 0020               	movlb	0	; select bank0
 10080  0002' 0081'              	movwf	?_ADC_GetConversionResult+1
 10081  0003' 0021               	movlb	1	; select bank1
 10082  0004' 081B               	movf	27,w	;volatile
 10083  0005' 0020               	movlb	0	; select bank0
 10084  0006' 0080'              	movwf	?_ADC_GetConversionResult
 10085  0007' 0008               	return
 10086  0008'                    __end_of_ADC_GetConversionResult:
 10087                           
 10088                           	psect	text43
 10089  0000'                    __ptext43:	
 10090 ;; *************** function ___xxtofl *****************
 10091 ;; Defined at:
 10092 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\xxtofl.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;  sign            1    wreg     unsigned char 
 10095 ;;  val             4    0[BANK0 ] long 
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;  sign            1    8[BANK0 ] unsigned char 
 10098 ;;  arg             4   10[BANK0 ] unsigned long 
 10099 ;;  exp             1    9[BANK0 ] unsigned char 
 10100 ;; Return value:  Size  Location     Type
 10101 ;;                  4    0[BANK0 ] unsigned char 
 10102 ;; Registers used:
 10103 ;;		wreg, status,2, status,0
 10104 ;; Tracked objects:
 10105 ;;		On entry : 1F/0
 10106 ;;		On exit  : 1F/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10109 ;;      Params:         0       4       0       0       0       0       0       0
 10110 ;;      Locals:         0       6       0       0       0       0       0       0
 10111 ;;      Temps:          0       4       0       0       0       0       0       0
 10112 ;;      Totals:         0      14       0       0       0       0       0       0
 10113 ;;Total ram usage:       14 bytes
 10114 ;; Hardware stack levels used: 1
 10115 ;; Hardware stack levels required when called: 7
 10116 ;; This function calls:
 10117 ;;		Nothing
 10118 ;; This function is called by:
 10119 ;;		_SSPA_getTemp
 10120 ;;		_SSPA_getPOut
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124  0000'                    ___xxtofl:	
 10125                           ;psect for function ___xxtofl
 10126                           
 10127                           
 10128                           ;incstack = 0
 10129                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 10130                           ;___xxtofl@sign stored from wreg
 10131  0000' 0088'              	movwf	___xxtofl@sign
 10132  0001' 0808'              	movf	___xxtofl@sign,w
 10133  0002' 1D03               	btfss	3,2
 10134  0003' 1F83'              	btfss	___xxtofl@val+3,7
 10135  0004' 2800'              	goto	l3871
 10136  0005' 0900'              	comf	___xxtofl@val,w
 10137  0006' 008A'              	movwf	___xxtofl@arg
 10138  0007' 0901'              	comf	___xxtofl@val+1,w
 10139  0008' 008B'              	movwf	___xxtofl@arg+1
 10140  0009' 0902'              	comf	___xxtofl@val+2,w
 10141  000A' 008C'              	movwf	___xxtofl@arg+2
 10142  000B' 0903'              	comf	___xxtofl@val+3,w
 10143  000C' 008D'              	movwf	___xxtofl@arg+3
 10144  000D' 0A8A'              	incf	___xxtofl@arg,f
 10145  000E' 1903               	skipnz
 10146  000F' 0A8B'              	incf	___xxtofl@arg+1,f
 10147  0010' 1903               	skipnz
 10148  0011' 0A8C'              	incf	___xxtofl@arg+2,f
 10149  0012' 1903               	skipnz
 10150  0013' 0A8D'              	incf	___xxtofl@arg+3,f
 10151  0014' 2800'              	goto	l1308
 10152  0015'                    l3871:
 10153  0015' 0803'              	movf	___xxtofl@val+3,w
 10154  0016' 008D'              	movwf	___xxtofl@arg+3
 10155  0017' 0802'              	movf	___xxtofl@val+2,w
 10156  0018' 008C'              	movwf	___xxtofl@arg+2
 10157  0019' 0801'              	movf	___xxtofl@val+1,w
 10158  001A' 008B'              	movwf	___xxtofl@arg+1
 10159  001B' 0800'              	movf	___xxtofl@val,w
 10160  001C' 008A'              	movwf	___xxtofl@arg
 10161  001D'                    l1308:
 10162  001D' 0803'              	movf	___xxtofl@val+3,w
 10163  001E' 0402'              	iorwf	___xxtofl@val+2,w
 10164  001F' 0401'              	iorwf	___xxtofl@val+1,w
 10165  0020' 0400'              	iorwf	___xxtofl@val,w
 10166  0021' 1D03               	skipz
 10167  0022' 2800'              	goto	l3877
 10168  0023' 3000               	movlw	0
 10169  0024' 0083'              	movwf	?___xxtofl+3
 10170  0025' 3000               	movlw	0
 10171  0026' 0082'              	movwf	?___xxtofl+2
 10172  0027' 3000               	movlw	0
 10173  0028' 0081'              	movwf	?___xxtofl+1
 10174  0029' 3000               	movlw	0
 10175  002A' 0080'              	movwf	?___xxtofl
 10176  002B' 0008               	return
 10177  002C'                    l3877:
 10178  002C' 3096               	movlw	150
 10179  002D' 0089'              	movwf	___xxtofl@exp
 10180  002E'                    l3881:
 10181  002E' 30FE               	movlw	254
 10182  002F' 050D'              	andwf	___xxtofl@arg+3,w
 10183  0030' 1903               	btfsc	3,2
 10184  0031' 2800'              	goto	l1314
 10185  0032' 3001               	movlw	1
 10186  0033' 0084'              	movwf	??___xxtofl
 10187  0034' 0804'              	movf	??___xxtofl,w
 10188  0035' 0789'              	addwf	___xxtofl@exp,f
 10189  0036' 3001               	movlw	1
 10190  0037'                    u3845:
 10191  0037' 368D'              	lsrf	___xxtofl@arg+3,f
 10192  0038' 0C8C'              	rrf	___xxtofl@arg+2,f
 10193  0039' 0C8B'              	rrf	___xxtofl@arg+1,f
 10194  003A' 0C8A'              	rrf	___xxtofl@arg,f
 10195  003B' 0B89               	decfsz	9,f
 10196  003C' 2800'              	goto	u3845
 10197  003D' 2800'              	goto	l3881
 10198  003E'                    l3883:
 10199  003E' 3001               	movlw	1
 10200  003F' 0084'              	movwf	??___xxtofl
 10201  0040' 0804'              	movf	??___xxtofl,w
 10202  0041' 0789'              	addwf	___xxtofl@exp,f
 10203  0042' 3001               	movlw	1
 10204  0043' 078A'              	addwf	___xxtofl@arg,f
 10205  0044' 3000               	movlw	0
 10206  0045' 3D8B'              	addwfc	___xxtofl@arg+1,f
 10207  0046' 3000               	movlw	0
 10208  0047' 3D8C'              	addwfc	___xxtofl@arg+2,f
 10209  0048' 3000               	movlw	0
 10210  0049' 3D8D'              	addwfc	___xxtofl@arg+3,f
 10211  004A' 3001               	movlw	1
 10212  004B'                    u3865:
 10213  004B' 368D'              	lsrf	___xxtofl@arg+3,f
 10214  004C' 0C8C'              	rrf	___xxtofl@arg+2,f
 10215  004D' 0C8B'              	rrf	___xxtofl@arg+1,f
 10216  004E' 0C8A'              	rrf	___xxtofl@arg,f
 10217  004F' 0B89               	decfsz	9,f
 10218  0050' 2800'              	goto	u3865
 10219  0051'                    l1314:
 10220  0051' 30FF               	movlw	255
 10221  0052' 050D'              	andwf	___xxtofl@arg+3,w
 10222  0053' 1903               	btfsc	3,2
 10223  0054' 2800'              	goto	l3891
 10224  0055' 2800'              	goto	l3883
 10225  0056'                    l3893:
 10226  0056' 3002               	movlw	2
 10227  0057' 0209'              	subwf	___xxtofl@exp,w
 10228  0058' 1C03               	btfss	3,0
 10229  0059' 2800'              	goto	l1321
 10230  005A' 3001               	movlw	1
 10231  005B' 0289'              	subwf	___xxtofl@exp,f
 10232  005C' 3001               	movlw	1
 10233  005D'                    u3885:
 10234  005D' 358A'              	lslf	___xxtofl@arg,f
 10235  005E' 0D8B'              	rlf	___xxtofl@arg+1,f
 10236  005F' 0D8C'              	rlf	___xxtofl@arg+2,f
 10237  0060' 0D8D'              	rlf	___xxtofl@arg+3,f
 10238  0061' 0B89               	decfsz	9,f
 10239  0062' 2800'              	goto	u3885
 10240  0063'                    l3891:
 10241  0063' 1F8C'              	btfss	___xxtofl@arg+2,7
 10242  0064' 2800'              	goto	l3893
 10243  0065'                    l1321:
 10244  0065' 1809'              	btfsc	___xxtofl@exp,0
 10245  0066' 2800'              	goto	l1322
 10246  0067' 30FF               	movlw	255
 10247  0068' 058A'              	andwf	___xxtofl@arg,f
 10248  0069' 30FF               	movlw	255
 10249  006A' 058B'              	andwf	___xxtofl@arg+1,f
 10250  006B' 307F               	movlw	127
 10251  006C' 058C'              	andwf	___xxtofl@arg+2,f
 10252  006D' 30FF               	movlw	255
 10253  006E' 058D'              	andwf	___xxtofl@arg+3,f
 10254  006F'                    l1322:
 10255  006F' 1003               	clrc
 10256  0070' 0C89'              	rrf	___xxtofl@exp,f
 10257  0071' 0809'              	movf	___xxtofl@exp,w
 10258  0072' 0084'              	movwf	??___xxtofl
 10259  0073' 0185'              	clrf	??___xxtofl+1
 10260  0074' 0186'              	clrf	??___xxtofl+2
 10261  0075' 0187'              	clrf	??___xxtofl+3
 10262  0076' 3018               	movlw	24
 10263  0077'                    u3925:
 10264  0077' 3584'              	lslf	??___xxtofl,f
 10265  0078' 0D85'              	rlf	??___xxtofl+1,f
 10266  0079' 0D86'              	rlf	??___xxtofl+2,f
 10267  007A' 0D87'              	rlf	??___xxtofl+3,f
 10268  007B' 0B89               	decfsz	9,f
 10269  007C' 2800'              	goto	u3925
 10270  007D' 0804'              	movf	??___xxtofl,w
 10271  007E' 048A'              	iorwf	___xxtofl@arg,f
 10272  007F' 0805'              	movf	??___xxtofl+1,w
 10273  0080' 048B'              	iorwf	___xxtofl@arg+1,f
 10274  0081' 0806'              	movf	??___xxtofl+2,w
 10275  0082' 048C'              	iorwf	___xxtofl@arg+2,f
 10276  0083' 0807'              	movf	??___xxtofl+3,w
 10277  0084' 048D'              	iorwf	___xxtofl@arg+3,f
 10278  0085' 0808'              	movf	___xxtofl@sign,w
 10279  0086' 1D03               	btfss	3,2
 10280  0087' 1F83'              	btfss	___xxtofl@val+3,7
 10281  0088' 2800'              	goto	l3905
 10282  0089' 178D'              	bsf	___xxtofl@arg+3,7
 10283  008A'                    l3905:
 10284  008A' 080D'              	movf	___xxtofl@arg+3,w
 10285  008B' 0083'              	movwf	?___xxtofl+3
 10286  008C' 080C'              	movf	___xxtofl@arg+2,w
 10287  008D' 0082'              	movwf	?___xxtofl+2
 10288  008E' 080B'              	movf	___xxtofl@arg+1,w
 10289  008F' 0081'              	movwf	?___xxtofl+1
 10290  0090' 080A'              	movf	___xxtofl@arg,w
 10291  0091' 0080'              	movwf	?___xxtofl
 10292  0092' 0008               	return
 10293  0093'                    __end_of___xxtofl:
 10294                           
 10295                           	psect	text44
 10296  0000'                    __ptext44:	
 10297 ;; *************** function ___fltol *****************
 10298 ;; Defined at:
 10299 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\fltol.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;  f1              4   74[BANK0 ] unsigned char 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  exp1            1   79[BANK0 ] unsigned char 
 10304 ;;  sign1           1   78[BANK0 ] unsigned char 
 10305 ;; Return value:  Size  Location     Type
 10306 ;;                  4   74[BANK0 ] long 
 10307 ;; Registers used:
 10308 ;;		wreg, status,2, status,0
 10309 ;; Tracked objects:
 10310 ;;		On entry : 1F/0
 10311 ;;		On exit  : 1F/0
 10312 ;;		Unchanged: 0/0
 10313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10314 ;;      Params:         0       4       0       0       0       0       0       0
 10315 ;;      Locals:         0       2       0       0       0       0       0       0
 10316 ;;      Temps:          0       0       4       0       0       0       0       0
 10317 ;;      Totals:         0       6       4       0       0       0       0       0
 10318 ;;Total ram usage:       10 bytes
 10319 ;; Hardware stack levels used: 1
 10320 ;; Hardware stack levels required when called: 7
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_SSPA_getTemp
 10325 ;;		_SSPA_getPOut
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329  0000'                    ___fltol:	
 10330                           ;psect for function ___fltol
 10331                           
 10332                           
 10333                           ;incstack = 0
 10334                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 10335  0000' 1003               	clrc
 10336  0001' 0D4C'              	rlf	___fltol@f1+2,w
 10337  0002' 0D4D'              	rlf	___fltol@f1+3,w
 10338  0003' 00CF'              	movwf	___fltol@exp1
 10339  0004' 084F'              	movf	___fltol@exp1,w
 10340  0005' 1D03               	btfss	3,2
 10341  0006' 2800'              	goto	l3549
 10342  0007'                    l3545:
 10343  0007' 3000               	movlw	0
 10344  0008' 00CD'              	movwf	?___fltol+3
 10345  0009' 3000               	movlw	0
 10346  000A' 00CC'              	movwf	?___fltol+2
 10347  000B' 3000               	movlw	0
 10348  000C' 00CB'              	movwf	?___fltol+1
 10349  000D' 3000               	movlw	0
 10350  000E' 00CA'              	movwf	?___fltol
 10351  000F' 0008               	return
 10352  0010'                    l3549:
 10353  0010' 084A'              	movf	___fltol@f1,w
 10354  0011' 0021               	movlb	1	; select bank1
 10355  0012' 0080'              	movwf	??___fltol^(0+128)
 10356  0013' 0020               	movlb	0	; select bank0
 10357  0014' 084B'              	movf	___fltol@f1+1,w
 10358  0015' 0021               	movlb	1	; select bank1
 10359  0016' 0081'              	movwf	(??___fltol^(0+128)+1)
 10360  0017' 0020               	movlb	0	; select bank0
 10361  0018' 084C'              	movf	___fltol@f1+2,w
 10362  0019' 0021               	movlb	1	; select bank1
 10363  001A' 0082'              	movwf	(??___fltol^(0+128)+2)
 10364  001B' 0020               	movlb	0	; select bank0
 10365  001C' 084D'              	movf	___fltol@f1+3,w
 10366  001D' 0021               	movlb	1	; select bank1
 10367  001E' 0083'              	movwf	(??___fltol^(0+128)+3)
 10368  001F' 301F               	movlw	31
 10369  0020'                    u3185:
 10370  0020' 3683'              	lsrf	(??___fltol^(0+128)+3),f
 10371  0021' 0C82'              	rrf	(??___fltol^(0+128)+2),f
 10372  0022' 0C81'              	rrf	(??___fltol^(0+128)+1),f
 10373  0023' 0C80'              	rrf	??___fltol^(0+128),f
 10374  0024' 0B89               	decfsz	9,f
 10375  0025' 2800'              	goto	u3185
 10376  0026' 0800'              	movf	??___fltol^(0+128),w
 10377  0027' 0020               	movlb	0	; select bank0
 10378  0028' 00CE'              	movwf	___fltol@sign1
 10379  0029' 17CC'              	bsf	___fltol@f1+2,7
 10380  002A' 30FF               	movlw	255
 10381  002B' 05CA'              	andwf	___fltol@f1,f
 10382  002C' 30FF               	movlw	255
 10383  002D' 05CB'              	andwf	___fltol@f1+1,f
 10384  002E' 30FF               	movlw	255
 10385  002F' 05CC'              	andwf	___fltol@f1+2,f
 10386  0030' 3000               	movlw	0
 10387  0031' 05CD'              	andwf	___fltol@f1+3,f
 10388  0032' 3096               	movlw	150
 10389  0033' 02CF'              	subwf	___fltol@exp1,f
 10390  0034' 1FCF'              	btfss	___fltol@exp1,7
 10391  0035' 2800'              	goto	l3567
 10392  0036' 084F'              	movf	___fltol@exp1,w
 10393  0037' 3A80               	xorlw	128
 10394  0038' 3E97               	addlw	151
 10395  0039' 1C03               	btfss	3,0
 10396  003A' 2800'              	goto	l3545
 10397  003B'                    l3565:
 10398  003B' 3001               	movlw	1
 10399  003C'                    u3215:
 10400  003C' 36CD'              	lsrf	___fltol@f1+3,f
 10401  003D' 0CCC'              	rrf	___fltol@f1+2,f
 10402  003E' 0CCB'              	rrf	___fltol@f1+1,f
 10403  003F' 0CCA'              	rrf	___fltol@f1,f
 10404  0040' 0B89               	decfsz	9,f
 10405  0041' 2800'              	goto	u3215
 10406  0042' 3001               	movlw	1
 10407  0043' 0021               	movlb	1	; select bank1
 10408  0044' 0080'              	movwf	??___fltol^(0+128)
 10409  0045' 0800'              	movf	??___fltol^(0+128),w
 10410  0046' 0020               	movlb	0	; select bank0
 10411  0047' 07CF'              	addwf	___fltol@exp1,f
 10412  0048' 1903               	btfsc	3,2
 10413  0049' 2800'              	goto	l3575
 10414  004A' 2800'              	goto	l3565
 10415  004B'                    l3567:
 10416  004B' 3020               	movlw	32
 10417  004C' 024F'              	subwf	___fltol@exp1,w
 10418  004D' 1803               	btfsc	3,0
 10419  004E' 2800'              	goto	l3545
 10420  004F'                    l1068:
 10421  004F' 084F'              	movf	___fltol@exp1,w
 10422  0050' 1903               	btfsc	3,2
 10423  0051' 2800'              	goto	l3575
 10424  0052' 3001               	movlw	1
 10425  0053'                    u3245:
 10426  0053' 35CA'              	lslf	___fltol@f1,f
 10427  0054' 0DCB'              	rlf	___fltol@f1+1,f
 10428  0055' 0DCC'              	rlf	___fltol@f1+2,f
 10429  0056' 0DCD'              	rlf	___fltol@f1+3,f
 10430  0057' 0B89               	decfsz	9,f
 10431  0058' 2800'              	goto	u3245
 10432  0059' 3001               	movlw	1
 10433  005A' 02CF'              	subwf	___fltol@exp1,f
 10434  005B' 2800'              	goto	l1068
 10435  005C'                    l3575:
 10436  005C' 084E'              	movf	___fltol@sign1,w
 10437  005D' 1903               	btfsc	3,2
 10438  005E' 0008               	return
 10439  005F' 09CA'              	comf	___fltol@f1,f
 10440  0060' 09CB'              	comf	___fltol@f1+1,f
 10441  0061' 09CC'              	comf	___fltol@f1+2,f
 10442  0062' 09CD'              	comf	___fltol@f1+3,f
 10443  0063' 0ACA'              	incf	___fltol@f1,f
 10444  0064' 1903               	skipnz
 10445  0065' 0ACB'              	incf	___fltol@f1+1,f
 10446  0066' 1903               	skipnz
 10447  0067' 0ACC'              	incf	___fltol@f1+2,f
 10448  0068' 1903               	skipnz
 10449  0069' 0ACD'              	incf	___fltol@f1+3,f
 10450  006A' 0008               	return
 10451  006B'                    __end_of___fltol:
 10452                           
 10453                           	psect	text45
 10454  0000'                    __ptext45:	
 10455 ;; *************** function ___flsub *****************
 10456 ;; Defined at:
 10457 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcadd.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;  a               4   40[BANK0 ] long 
 10460 ;;  b               4   44[BANK0 ] long 
 10461 ;; Auto vars:     Size  Location     Type
 10462 ;;		None
 10463 ;; Return value:  Size  Location     Type
 10464 ;;                  4   40[BANK0 ] long 
 10465 ;; Registers used:
 10466 ;;		wreg, status,2, status,0, pclath, cstack
 10467 ;; Tracked objects:
 10468 ;;		On entry : 1F/0
 10469 ;;		On exit  : 1F/0
 10470 ;;		Unchanged: 0/0
 10471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10472 ;;      Params:         0       8       0       0       0       0       0       0
 10473 ;;      Locals:         0       0       0       0       0       0       0       0
 10474 ;;      Temps:          0       0       0       0       0       0       0       0
 10475 ;;      Totals:         0       8       0       0       0       0       0       0
 10476 ;;Total ram usage:        8 bytes
 10477 ;; Hardware stack levels used: 1
 10478 ;; Hardware stack levels required when called: 8
 10479 ;; This function calls:
 10480 ;;		___fladd
 10481 ;; This function is called by:
 10482 ;;		_SSPA_getTemp
 10483 ;;		_SSPA_getPOut
 10484 ;; This function uses a non-reentrant model
 10485 ;;
 10486                           
 10487  0000'                    ___flsub:	
 10488                           ;psect for function ___flsub
 10489                           
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 10493  0000' 3080               	movlw	128
 10494  0001' 06AB'              	xorwf	___flsub@a+3,f
 10495  0002' 082F'              	movf	___flsub@b+3,w
 10496  0003' 0083'              	movwf	___fladd@b+3
 10497  0004' 082E'              	movf	___flsub@b+2,w
 10498  0005' 0082'              	movwf	___fladd@b+2
 10499  0006' 082D'              	movf	___flsub@b+1,w
 10500  0007' 0081'              	movwf	___fladd@b+1
 10501  0008' 082C'              	movf	___flsub@b,w
 10502  0009' 0080'              	movwf	___fladd@b
 10503  000A' 082B'              	movf	___flsub@a+3,w
 10504  000B' 0087'              	movwf	___fladd@a+3
 10505  000C' 082A'              	movf	___flsub@a+2,w
 10506  000D' 0086'              	movwf	___fladd@a+2
 10507  000E' 0829'              	movf	___flsub@a+1,w
 10508  000F' 0085'              	movwf	___fladd@a+1
 10509  0010' 0828'              	movf	___flsub@a,w
 10510  0011' 0084'              	movwf	___fladd@a
 10511  0012' 3180' 2000'        	fcall	___fladd
 10512  0014' 0803'              	movf	?___fladd+3,w
 10513  0015' 00AB'              	movwf	?___flsub+3
 10514  0016' 0802'              	movf	?___fladd+2,w
 10515  0017' 00AA'              	movwf	?___flsub+2
 10516  0018' 0801'              	movf	?___fladd+1,w
 10517  0019' 00A9'              	movwf	?___flsub+1
 10518  001A' 0800'              	movf	?___fladd,w
 10519  001B' 00A8'              	movwf	?___flsub
 10520  001C' 0008               	return
 10521  001D'                    __end_of___flsub:
 10522                           
 10523                           	psect	text46
 10524  0000'                    __ptext46:	
 10525 ;; *************** function ___fladd *****************
 10526 ;; Defined at:
 10527 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcadd.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  b               4    0[BANK0 ] long 
 10530 ;;  a               4    4[BANK0 ] long 
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;  grs             1   19[BANK0 ] unsigned char 
 10533 ;;  bexp            1   18[BANK0 ] unsigned char 
 10534 ;;  aexp            1   17[BANK0 ] unsigned char 
 10535 ;;  signs           1   16[BANK0 ] unsigned char 
 10536 ;; Return value:  Size  Location     Type
 10537 ;;                  4    0[BANK0 ] unsigned char 
 10538 ;; Registers used:
 10539 ;;		wreg, status,2, status,0
 10540 ;; Tracked objects:
 10541 ;;		On entry : 1F/0
 10542 ;;		On exit  : 1F/0
 10543 ;;		Unchanged: 0/0
 10544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10545 ;;      Params:         0       8       0       0       0       0       0       0
 10546 ;;      Locals:         0       4       0       0       0       0       0       0
 10547 ;;      Temps:          0       8       0       0       0       0       0       0
 10548 ;;      Totals:         0      20       0       0       0       0       0       0
 10549 ;;Total ram usage:       20 bytes
 10550 ;; Hardware stack levels used: 1
 10551 ;; Hardware stack levels required when called: 7
 10552 ;; This function calls:
 10553 ;;		Nothing
 10554 ;; This function is called by:
 10555 ;;		___flsub
 10556 ;; This function uses a non-reentrant model
 10557 ;;
 10558                           
 10559  0000'                    ___fladd:	
 10560                           ;psect for function ___fladd
 10561                           
 10562                           
 10563                           ;incstack = 0
 10564                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 10565  0000' 0803'              	movf	___fladd@b+3,w
 10566  0001' 3980               	andlw	128
 10567  0002' 0090'              	movwf	___fladd@signs
 10568  0003' 3503'              	lslf	___fladd@b+3,w
 10569  0004' 0092'              	movwf	___fladd@bexp
 10570  0005' 1B82'              	btfsc	___fladd@b+2,7
 10571  0006' 1412'              	bsf	___fladd@bexp,0
 10572  0007' 0812'              	movf	___fladd@bexp,w
 10573  0008' 1903               	btfsc	3,2
 10574  0009' 2800'              	goto	l3289
 10575  000A' 0A12'              	incf	___fladd@bexp,w
 10576  000B' 1D03               	btfss	3,2
 10577  000C' 2800'              	goto	l3285
 10578  000D' 3000               	movlw	0
 10579  000E' 0083'              	movwf	___fladd@b+3
 10580  000F' 3000               	movlw	0
 10581  0010' 0082'              	movwf	___fladd@b+2
 10582  0011' 3000               	movlw	0
 10583  0012' 0081'              	movwf	___fladd@b+1
 10584  0013' 3000               	movlw	0
 10585  0014' 0080'              	movwf	___fladd@b
 10586  0015'                    l3285:
 10587  0015' 1782'              	bsf	___fladd@b+2,7
 10588  0016' 0183'              	clrf	___fladd@b+3
 10589  0017' 2800'              	goto	l3291
 10590  0018'                    l3289:
 10591  0018' 3000               	movlw	0
 10592  0019' 0083'              	movwf	___fladd@b+3
 10593  001A' 3000               	movlw	0
 10594  001B' 0082'              	movwf	___fladd@b+2
 10595  001C' 3000               	movlw	0
 10596  001D' 0081'              	movwf	___fladd@b+1
 10597  001E' 3000               	movlw	0
 10598  001F' 0080'              	movwf	___fladd@b
 10599  0020'                    l3291:
 10600  0020' 0807'              	movf	___fladd@a+3,w
 10601  0021' 3980               	andlw	128
 10602  0022' 0091'              	movwf	___fladd@aexp
 10603  0023' 0811'              	movf	___fladd@aexp,w
 10604  0024' 0610'              	xorwf	___fladd@signs,w
 10605  0025' 1D03               	btfss	3,2
 10606  0026' 1710'              	bsf	___fladd@signs,6
 10607  0027' 3507'              	lslf	___fladd@a+3,w
 10608  0028' 0091'              	movwf	___fladd@aexp
 10609  0029' 1B86'              	btfsc	___fladd@a+2,7
 10610  002A' 1411'              	bsf	___fladd@aexp,0
 10611  002B' 0811'              	movf	___fladd@aexp,w
 10612  002C' 1903               	btfsc	3,2
 10613  002D' 2800'              	goto	l3313
 10614  002E' 0A11'              	incf	___fladd@aexp,w
 10615  002F' 1D03               	btfss	3,2
 10616  0030' 2800'              	goto	l3309
 10617  0031' 3000               	movlw	0
 10618  0032' 0087'              	movwf	___fladd@a+3
 10619  0033' 3000               	movlw	0
 10620  0034' 0086'              	movwf	___fladd@a+2
 10621  0035' 3000               	movlw	0
 10622  0036' 0085'              	movwf	___fladd@a+1
 10623  0037' 3000               	movlw	0
 10624  0038' 0084'              	movwf	___fladd@a
 10625  0039'                    l3309:
 10626  0039' 1786'              	bsf	___fladd@a+2,7
 10627  003A' 0187'              	clrf	___fladd@a+3
 10628  003B' 2800'              	goto	l1168
 10629  003C'                    l3313:
 10630  003C' 3000               	movlw	0
 10631  003D' 0087'              	movwf	___fladd@a+3
 10632  003E' 3000               	movlw	0
 10633  003F' 0086'              	movwf	___fladd@a+2
 10634  0040' 3000               	movlw	0
 10635  0041' 0085'              	movwf	___fladd@a+1
 10636  0042' 3000               	movlw	0
 10637  0043' 0084'              	movwf	___fladd@a
 10638  0044'                    l1168:
 10639  0044' 0812'              	movf	___fladd@bexp,w
 10640  0045' 0211'              	subwf	___fladd@aexp,w
 10641  0046' 1803               	skipnc
 10642  0047' 2800'              	goto	l3349
 10643  0048' 1F10'              	btfss	___fladd@signs,6
 10644  0049' 2800'              	goto	l3319
 10645  004A' 3080               	movlw	128
 10646  004B' 0088'              	movwf	??___fladd
 10647  004C' 0808'              	movf	??___fladd,w
 10648  004D' 0690'              	xorwf	___fladd@signs,f
 10649  004E'                    l3319:
 10650  004E' 0812'              	movf	___fladd@bexp,w
 10651  004F' 0093'              	movwf	___fladd@grs
 10652  0050' 0811'              	movf	___fladd@aexp,w
 10653  0051' 0092'              	movwf	___fladd@bexp
 10654  0052' 0813'              	movf	___fladd@grs,w
 10655  0053' 0091'              	movwf	___fladd@aexp
 10656  0054' 0800'              	movf	___fladd@b,w
 10657  0055' 0093'              	movwf	___fladd@grs
 10658  0056' 0804'              	movf	___fladd@a,w
 10659  0057' 0080'              	movwf	___fladd@b
 10660  0058' 0813'              	movf	___fladd@grs,w
 10661  0059' 0084'              	movwf	___fladd@a
 10662  005A' 0801'              	movf	___fladd@b+1,w
 10663  005B' 0093'              	movwf	___fladd@grs
 10664  005C' 0805'              	movf	___fladd@a+1,w
 10665  005D' 0081'              	movwf	___fladd@b+1
 10666  005E' 0813'              	movf	___fladd@grs,w
 10667  005F' 0085'              	movwf	___fladd@a+1
 10668  0060' 0802'              	movf	___fladd@b+2,w
 10669  0061' 0093'              	movwf	___fladd@grs
 10670  0062' 0806'              	movf	___fladd@a+2,w
 10671  0063' 0082'              	movwf	___fladd@b+2
 10672  0064' 0813'              	movf	___fladd@grs,w
 10673  0065' 0086'              	movwf	___fladd@a+2
 10674  0066' 0803'              	movf	___fladd@b+3,w
 10675  0067' 0093'              	movwf	___fladd@grs
 10676  0068' 0807'              	movf	___fladd@a+3,w
 10677  0069' 0083'              	movwf	___fladd@b+3
 10678  006A' 0813'              	movf	___fladd@grs,w
 10679  006B' 0087'              	movwf	___fladd@a+3
 10680  006C'                    l3349:
 10681  006C' 0193'              	clrf	___fladd@grs
 10682  006D' 0811'              	movf	___fladd@aexp,w
 10683  006E' 0088'              	movwf	??___fladd
 10684  006F' 0189'              	clrf	??___fladd+1
 10685  0070' 0809'              	movf	??___fladd+1,w
 10686  0071' 008B'              	movwf	??___fladd+3
 10687  0072' 0812'              	movf	___fladd@bexp,w
 10688  0073' 0208'              	subwf	??___fladd,w
 10689  0074' 008A'              	movwf	??___fladd+2
 10690  0075' 1C03               	skipc
 10691  0076' 038B'              	decf	??___fladd+3,f
 10692  0077' 080B'              	movf	??___fladd+3,w
 10693  0078' 3A80               	xorlw	128
 10694  0079' 008C'              	movwf	??___fladd+4
 10695  007A' 3080               	movlw	128
 10696  007B' 020C'              	subwf	??___fladd+4,w
 10697  007C' 1D03               	skipz
 10698  007D' 2800'              	goto	u2775
 10699  007E' 301A               	movlw	26
 10700  007F' 020A'              	subwf	??___fladd+2,w
 10701  0080'                    u2775:
 10702  0080' 1C03               	skipc
 10703  0081' 2800'              	goto	l3367
 10704  0082' 0020               	movlb	0	; select bank0
 10705  0083' 0803'              	movf	___fladd@b+3,w
 10706  0084' 0402'              	iorwf	___fladd@b+2,w
 10707  0085' 0401'              	iorwf	___fladd@b+1,w
 10708  0086' 0400'              	iorwf	___fladd@b,w
 10709  0087' 1903               	btfsc	3,2
 10710  0088' 2800'              	goto	u2780
 10711  0089' 3001               	movlw	1
 10712  008A' 2800'              	goto	u2790
 10713  008B'                    u2780:
 10714  008B' 3000               	movlw	0
 10715  008C'                    u2790:
 10716  008C' 0093'              	movwf	___fladd@grs
 10717  008D' 3000               	movlw	0
 10718  008E' 0083'              	movwf	___fladd@b+3
 10719  008F' 3000               	movlw	0
 10720  0090' 0082'              	movwf	___fladd@b+2
 10721  0091' 3000               	movlw	0
 10722  0092' 0081'              	movwf	___fladd@b+1
 10723  0093' 3000               	movlw	0
 10724  0094' 0080'              	movwf	___fladd@b
 10725  0095' 0811'              	movf	___fladd@aexp,w
 10726  0096' 0092'              	movwf	___fladd@bexp
 10727  0097' 2800'              	goto	l1172
 10728  0098'                    l1174:
 10729  0098' 1C13'              	btfss	___fladd@grs,0
 10730  0099' 2800'              	goto	l3357
 10731  009A' 3613'              	lsrf	___fladd@grs,w
 10732  009B' 3801               	iorlw	1
 10733  009C' 0093'              	movwf	___fladd@grs
 10734  009D' 2800'              	goto	l3359
 10735  009E'                    l3357:
 10736  009E' 1003               	clrc
 10737  009F' 0C93'              	rrf	___fladd@grs,f
 10738  00A0'                    l3359:
 10739  00A0' 1800'              	btfsc	___fladd@b,0
 10740  00A1' 1793'              	bsf	___fladd@grs,7
 10741  00A2' 3001               	movlw	1
 10742  00A3' 0088'              	movwf	??___fladd
 10743  00A4'                    u2825:
 10744  00A4' 3783'              	asrf	___fladd@b+3,f
 10745  00A5' 0C82'              	rrf	___fladd@b+2,f
 10746  00A6' 0C81'              	rrf	___fladd@b+1,f
 10747  00A7' 0C80'              	rrf	___fladd@b,f
 10748  00A8' 0B80'              	decfsz	??___fladd& (0+127),f
 10749  00A9' 2800'              	goto	u2825
 10750  00AA' 3001               	movlw	1
 10751  00AB' 0088'              	movwf	??___fladd
 10752  00AC' 0808'              	movf	??___fladd,w
 10753  00AD' 0792'              	addwf	___fladd@bexp,f
 10754  00AE'                    l3367:
 10755  00AE' 0020               	movlb	0	; select bank0
 10756  00AF' 0811'              	movf	___fladd@aexp,w
 10757  00B0' 0212'              	subwf	___fladd@bexp,w
 10758  00B1' 1C03               	skipc
 10759  00B2' 2800'              	goto	l1174
 10760  00B3'                    l1172:
 10761  00B3' 1B10'              	btfsc	___fladd@signs,6
 10762  00B4' 2800'              	goto	l3393
 10763  00B5' 0812'              	movf	___fladd@bexp,w
 10764  00B6' 1D03               	btfss	3,2
 10765  00B7' 2800'              	goto	l3375
 10766  00B8' 3000               	movlw	0
 10767  00B9' 0083'              	movwf	?___fladd+3
 10768  00BA' 3000               	movlw	0
 10769  00BB' 0082'              	movwf	?___fladd+2
 10770  00BC' 3000               	movlw	0
 10771  00BD' 0081'              	movwf	?___fladd+1
 10772  00BE' 3000               	movlw	0
 10773  00BF' 0080'              	movwf	?___fladd
 10774  00C0' 0008               	return
 10775  00C1'                    l3375:
 10776  00C1' 0804'              	movf	___fladd@a,w
 10777  00C2' 0780'              	addwf	___fladd@b,f
 10778  00C3' 0805'              	movf	___fladd@a+1,w
 10779  00C4' 3D81'              	addwfc	___fladd@b+1,f
 10780  00C5' 0806'              	movf	___fladd@a+2,w
 10781  00C6' 3D82'              	addwfc	___fladd@b+2,f
 10782  00C7' 0807'              	movf	___fladd@a+3,w
 10783  00C8' 3D83'              	addwfc	___fladd@b+3,f
 10784  00C9' 1C03'              	btfss	___fladd@b+3,0
 10785  00CA' 2800'              	goto	l3427
 10786  00CB' 1C13'              	btfss	___fladd@grs,0
 10787  00CC' 2800'              	goto	l3383
 10788  00CD' 3613'              	lsrf	___fladd@grs,w
 10789  00CE' 3801               	iorlw	1
 10790  00CF' 0093'              	movwf	___fladd@grs
 10791  00D0' 2800'              	goto	l3385
 10792  00D1'                    l3383:
 10793  00D1' 1003               	clrc
 10794  00D2' 0C93'              	rrf	___fladd@grs,f
 10795  00D3'                    l3385:
 10796  00D3' 1800'              	btfsc	___fladd@b,0
 10797  00D4' 1793'              	bsf	___fladd@grs,7
 10798  00D5' 3001               	movlw	1
 10799  00D6' 0088'              	movwf	??___fladd
 10800  00D7'                    u2895:
 10801  00D7' 3783'              	asrf	___fladd@b+3,f
 10802  00D8' 0C82'              	rrf	___fladd@b+2,f
 10803  00D9' 0C81'              	rrf	___fladd@b+1,f
 10804  00DA' 0C80'              	rrf	___fladd@b,f
 10805  00DB' 0B80'              	decfsz	??___fladd& (0+127),f
 10806  00DC' 2800'              	goto	u2895
 10807  00DD' 3001               	movlw	1
 10808  00DE' 0088'              	movwf	??___fladd
 10809  00DF' 0808'              	movf	??___fladd,w
 10810  00E0' 0792'              	addwf	___fladd@bexp,f
 10811  00E1' 2800'              	goto	l3427
 10812  00E2'                    l3393:
 10813  00E2' 0803'              	movf	___fladd@b+3,w
 10814  00E3' 3A80               	xorlw	128
 10815  00E4' 0088'              	movwf	??___fladd
 10816  00E5' 0807'              	movf	___fladd@a+3,w
 10817  00E6' 3A80               	xorlw	128
 10818  00E7' 0208'              	subwf	??___fladd,w
 10819  00E8' 1D03               	skipz
 10820  00E9' 2800'              	goto	u2903
 10821  00EA' 0806'              	movf	___fladd@a+2,w
 10822  00EB' 0202'              	subwf	___fladd@b+2,w
 10823  00EC' 1D03               	skipz
 10824  00ED' 2800'              	goto	u2903
 10825  00EE' 0805'              	movf	___fladd@a+1,w
 10826  00EF' 0201'              	subwf	___fladd@b+1,w
 10827  00F0' 1D03               	skipz
 10828  00F1' 2800'              	goto	u2903
 10829  00F2' 0804'              	movf	___fladd@a,w
 10830  00F3' 0200'              	subwf	___fladd@b,w
 10831  00F4'                    u2903:
 10832  00F4' 1803               	skipnc
 10833  00F5' 2800'              	goto	l3403
 10834  00F6' 30FF               	movlw	255
 10835  00F7' 0088'              	movwf	??___fladd
 10836  00F8' 30FF               	movlw	255
 10837  00F9' 0089'              	movwf	??___fladd+1
 10838  00FA' 30FF               	movlw	255
 10839  00FB' 008A'              	movwf	??___fladd+2
 10840  00FC' 30FF               	movlw	255
 10841  00FD' 008B'              	movwf	??___fladd+3
 10842  00FE' 0800'              	movf	___fladd@b,w
 10843  00FF' 0204'              	subwf	___fladd@a,w
 10844  0100' 008C'              	movwf	??___fladd+4
 10845  0101' 0801'              	movf	___fladd@b+1,w
 10846  0102' 3B05'              	subwfb	___fladd@a+1,w
 10847  0103' 008D'              	movwf	??___fladd+5
 10848  0104' 0802'              	movf	___fladd@b+2,w
 10849  0105' 3B06'              	subwfb	___fladd@a+2,w
 10850  0106' 008E'              	movwf	??___fladd+6
 10851  0107' 0803'              	movf	___fladd@b+3,w
 10852  0108' 3B07'              	subwfb	___fladd@a+3,w
 10853  0109' 008F'              	movwf	??___fladd+7
 10854  010A' 080C'              	movf	??___fladd+4,w
 10855  010B' 0788'              	addwf	??___fladd,f
 10856  010C' 080D'              	movf	??___fladd+5,w
 10857  010D' 3D89'              	addwfc	??___fladd+1,f
 10858  010E' 080E'              	movf	??___fladd+6,w
 10859  010F' 3D8A'              	addwfc	??___fladd+2,f
 10860  0110' 080F'              	movf	??___fladd+7,w
 10861  0111' 3D8B'              	addwfc	??___fladd+3,f
 10862  0112' 080B'              	movf	??___fladd+3,w
 10863  0113' 0083'              	movwf	___fladd@b+3
 10864  0114' 080A'              	movf	??___fladd+2,w
 10865  0115' 0082'              	movwf	___fladd@b+2
 10866  0116' 0809'              	movf	??___fladd+1,w
 10867  0117' 0081'              	movwf	___fladd@b+1
 10868  0118' 0808'              	movf	??___fladd,w
 10869  0119' 0080'              	movwf	___fladd@b
 10870  011A' 3080               	movlw	128
 10871  011B' 0088'              	movwf	??___fladd
 10872  011C' 0808'              	movf	??___fladd,w
 10873  011D' 0690'              	xorwf	___fladd@signs,f
 10874  011E' 0993'              	comf	___fladd@grs,f
 10875  011F' 0A93'              	incf	___fladd@grs,f
 10876  0120' 0813'              	movf	___fladd@grs,w
 10877  0121' 1D03               	btfss	3,2
 10878  0122' 2800'              	goto	l1189
 10879  0123' 3001               	movlw	1
 10880  0124' 0780'              	addwf	___fladd@b,f
 10881  0125' 3000               	movlw	0
 10882  0126' 3D81'              	addwfc	___fladd@b+1,f
 10883  0127' 3000               	movlw	0
 10884  0128' 3D82'              	addwfc	___fladd@b+2,f
 10885  0129' 3000               	movlw	0
 10886  012A' 3D83'              	addwfc	___fladd@b+3,f
 10887  012B' 2800'              	goto	l1189
 10888  012C'                    l3403:
 10889  012C' 0804'              	movf	___fladd@a,w
 10890  012D' 0280'              	subwf	___fladd@b,f
 10891  012E' 0805'              	movf	___fladd@a+1,w
 10892  012F' 3B81'              	subwfb	___fladd@b+1,f
 10893  0130' 0806'              	movf	___fladd@a+2,w
 10894  0131' 3B82'              	subwfb	___fladd@b+2,f
 10895  0132' 0807'              	movf	___fladd@a+3,w
 10896  0133' 3B83'              	subwfb	___fladd@b+3,f
 10897  0134'                    l1189:
 10898  0134' 0803'              	movf	___fladd@b+3,w
 10899  0135' 0402'              	iorwf	___fladd@b+2,w
 10900  0136' 0401'              	iorwf	___fladd@b+1,w
 10901  0137' 0400'              	iorwf	___fladd@b,w
 10902  0138' 1D03               	skipz
 10903  0139' 2800'              	goto	l3425
 10904  013A' 0813'              	movf	___fladd@grs,w
 10905  013B' 1D03               	btfss	3,2
 10906  013C' 2800'              	goto	l3425
 10907  013D' 3000               	movlw	0
 10908  013E' 0083'              	movwf	?___fladd+3
 10909  013F' 3000               	movlw	0
 10910  0140' 0082'              	movwf	?___fladd+2
 10911  0141' 3000               	movlw	0
 10912  0142' 0081'              	movwf	?___fladd+1
 10913  0143' 3000               	movlw	0
 10914  0144' 0080'              	movwf	?___fladd
 10915  0145' 0008               	return
 10916  0146'                    l3411:
 10917  0146' 3001               	movlw	1
 10918  0147'                    u2945:
 10919  0147' 3580'              	lslf	___fladd@b,f
 10920  0148' 0D81'              	rlf	___fladd@b+1,f
 10921  0149' 0D82'              	rlf	___fladd@b+2,f
 10922  014A' 0D83'              	rlf	___fladd@b+3,f
 10923  014B' 0B89               	decfsz	9,f
 10924  014C' 2800'              	goto	u2945
 10925  014D' 1B93'              	btfsc	___fladd@grs,7
 10926  014E' 1400'              	bsf	___fladd@b,0
 10927  014F' 1C13'              	btfss	___fladd@grs,0
 10928  0150' 2800'              	goto	l3419
 10929  0151' 1403               	setc
 10930  0152' 2800'              	goto	L4
 10931  0153'                    l3419:
 10932  0153' 1003               	clrc
 10933  0154'                    L4:
 10934  0154' 0D93'              	rlf	___fladd@grs,f
 10935  0155' 0812'              	movf	___fladd@bexp,w
 10936  0156' 1903               	btfsc	3,2
 10937  0157' 2800'              	goto	l3425
 10938  0158' 3001               	movlw	1
 10939  0159' 0292'              	subwf	___fladd@bexp,f
 10940  015A'                    l3425:
 10941  015A' 1F82'              	btfss	___fladd@b+2,7
 10942  015B' 2800'              	goto	l3411
 10943  015C'                    l3427:
 10944  015C' 0191'              	clrf	___fladd@aexp
 10945  015D' 1F93'              	btfss	___fladd@grs,7
 10946  015E' 2800'              	goto	l3437
 10947  015F' 0813'              	movf	___fladd@grs,w
 10948  0160' 397F               	andlw	127
 10949  0161' 1903               	btfsc	3,2
 10950  0162' 1800'              	btfsc	___fladd@b,0
 10951  0163' 2800'              	goto	l3433
 10952  0164' 2800'              	goto	l3437
 10953  0165'                    l3433:
 10954  0165' 0191'              	clrf	___fladd@aexp
 10955  0166' 0A91'              	incf	___fladd@aexp,f
 10956  0167'                    l3437:
 10957  0167' 0811'              	movf	___fladd@aexp,w
 10958  0168' 1903               	btfsc	3,2
 10959  0169' 2800'              	goto	l1202
 10960  016A' 3001               	movlw	1
 10961  016B' 0780'              	addwf	___fladd@b,f
 10962  016C' 3000               	movlw	0
 10963  016D' 3D81'              	addwfc	___fladd@b+1,f
 10964  016E' 3000               	movlw	0
 10965  016F' 3D82'              	addwfc	___fladd@b+2,f
 10966  0170' 3000               	movlw	0
 10967  0171' 3D83'              	addwfc	___fladd@b+3,f
 10968  0172' 1C03'              	btfss	___fladd@b+3,0
 10969  0173' 2800'              	goto	l1202
 10970  0174' 0800'              	movf	___fladd@b,w
 10971  0175' 0088'              	movwf	??___fladd
 10972  0176' 0801'              	movf	___fladd@b+1,w
 10973  0177' 0089'              	movwf	??___fladd+1
 10974  0178' 0802'              	movf	___fladd@b+2,w
 10975  0179' 008A'              	movwf	??___fladd+2
 10976  017A' 0803'              	movf	___fladd@b+3,w
 10977  017B' 008B'              	movwf	??___fladd+3
 10978  017C' 3001               	movlw	1
 10979  017D' 008C'              	movwf	??___fladd+4
 10980  017E'                    u3045:
 10981  017E' 378B'              	asrf	??___fladd+3,f
 10982  017F' 0C8A'              	rrf	??___fladd+2,f
 10983  0180' 0C89'              	rrf	??___fladd+1,f
 10984  0181' 0C88'              	rrf	??___fladd,f
 10985  0182' 0B8C'              	decfsz	??___fladd+4,f
 10986  0183' 2800'              	goto	u3045
 10987  0184' 080B'              	movf	??___fladd+3,w
 10988  0185' 0083'              	movwf	___fladd@b+3
 10989  0186' 080A'              	movf	??___fladd+2,w
 10990  0187' 0082'              	movwf	___fladd@b+2
 10991  0188' 0809'              	movf	??___fladd+1,w
 10992  0189' 0081'              	movwf	___fladd@b+1
 10993  018A' 0808'              	movf	??___fladd,w
 10994  018B' 0080'              	movwf	___fladd@b
 10995  018C' 0A12'              	incf	___fladd@bexp,w
 10996  018D' 1903               	btfsc	3,2
 10997  018E' 2800'              	goto	l1202
 10998  018F' 3001               	movlw	1
 10999  0190' 0088'              	movwf	??___fladd
 11000  0191' 0808'              	movf	??___fladd,w
 11001  0192' 0792'              	addwf	___fladd@bexp,f
 11002  0193'                    l1202:
 11003  0193' 0A12'              	incf	___fladd@bexp,w
 11004  0194' 1D03               	btfss	3,2
 11005  0195' 0812'              	movf	___fladd@bexp,w
 11006  0196' 1D03               	btfss	3,2
 11007  0197' 2800'              	goto	l3455
 11008  0198' 3000               	movlw	0
 11009  0199' 0083'              	movwf	___fladd@b+3
 11010  019A' 3000               	movlw	0
 11011  019B' 0082'              	movwf	___fladd@b+2
 11012  019C' 3000               	movlw	0
 11013  019D' 0081'              	movwf	___fladd@b+1
 11014  019E' 3000               	movlw	0
 11015  019F' 0080'              	movwf	___fladd@b
 11016  01A0' 0812'              	movf	___fladd@bexp,w
 11017  01A1' 1903               	btfsc	3,2
 11018  01A2' 0190'              	clrf	___fladd@signs
 11019  01A3'                    l3455:
 11020  01A3' 1C12'              	btfss	___fladd@bexp,0
 11021  01A4' 2800'              	goto	l3459
 11022  01A5' 1782'              	bsf	___fladd@b+2,7
 11023  01A6' 2800'              	goto	l1210
 11024  01A7'                    l3459:
 11025  01A7' 307F               	movlw	127
 11026  01A8' 0088'              	movwf	??___fladd
 11027  01A9' 0808'              	movf	??___fladd,w
 11028  01AA' 0582'              	andwf	___fladd@b+2,f
 11029  01AB'                    l1210:
 11030  01AB' 3612'              	lsrf	___fladd@bexp,w
 11031  01AC' 0083'              	movwf	___fladd@b+3
 11032  01AD' 1F90'              	btfss	___fladd@signs,7
 11033  01AE' 0008               	return
 11034  01AF' 1783'              	bsf	___fladd@b+3,7
 11035  01B0' 0008               	return
 11036  01B1'                    __end_of___fladd:
 11037                           
 11038                           	psect	text47
 11039  0000'                    __ptext47:	
 11040 ;; *************** function ___flmul *****************
 11041 ;; Defined at:
 11042 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcmul.c"
 11043 ;; Parameters:    Size  Location     Type
 11044 ;;  b               4   14[BANK0 ] unsigned char 
 11045 ;;  a               4   18[BANK0 ] unsigned char 
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;  prod            4   34[BANK0 ] struct .
 11048 ;;  grs             4   30[BANK0 ] unsigned long 
 11049 ;;  temp            2   38[BANK0 ] struct .
 11050 ;;  bexp            1   29[BANK0 ] unsigned char 
 11051 ;;  aexp            1   28[BANK0 ] unsigned char 
 11052 ;;  sign            1   27[BANK0 ] unsigned char 
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  4   14[BANK0 ] unsigned char 
 11055 ;; Registers used:
 11056 ;;		wreg, status,2, status,0, pclath, cstack
 11057 ;; Tracked objects:
 11058 ;;		On entry : 1F/0
 11059 ;;		On exit  : 1F/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11062 ;;      Params:         0       8       0       0       0       0       0       0
 11063 ;;      Locals:         0      13       0       0       0       0       0       0
 11064 ;;      Temps:          0       5       0       0       0       0       0       0
 11065 ;;      Totals:         0      26       0       0       0       0       0       0
 11066 ;;Total ram usage:       26 bytes
 11067 ;; Hardware stack levels used: 1
 11068 ;; Hardware stack levels required when called: 8
 11069 ;; This function calls:
 11070 ;;		__Umul8_16
 11071 ;; This function is called by:
 11072 ;;		_SSPA_getTemp
 11073 ;;		_SSPA_getPOut
 11074 ;; This function uses a non-reentrant model
 11075 ;;
 11076                           
 11077  0000'                    ___flmul:	
 11078                           ;psect for function ___flmul
 11079                           
 11080                           
 11081                           ;incstack = 0
 11082                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 11083  0000' 0811'              	movf	___flmul@b+3,w
 11084  0001' 3980               	andlw	128
 11085  0002' 009B'              	movwf	___flmul@sign
 11086  0003' 3511'              	lslf	___flmul@b+3,w
 11087  0004' 009D'              	movwf	___flmul@bexp
 11088  0005' 1B90'              	btfsc	___flmul@b+2,7
 11089  0006' 141D'              	bsf	___flmul@bexp,0
 11090  0007' 081D'              	movf	___flmul@bexp,w
 11091  0008' 1903               	btfsc	3,2
 11092  0009' 2800'              	goto	l4863
 11093  000A' 0A1D'              	incf	___flmul@bexp,w
 11094  000B' 1D03               	btfss	3,2
 11095  000C' 2800'              	goto	l4861
 11096  000D' 3000               	movlw	0
 11097  000E' 0091'              	movwf	___flmul@b+3
 11098  000F' 3000               	movlw	0
 11099  0010' 0090'              	movwf	___flmul@b+2
 11100  0011' 3000               	movlw	0
 11101  0012' 008F'              	movwf	___flmul@b+1
 11102  0013' 3000               	movlw	0
 11103  0014' 008E'              	movwf	___flmul@b
 11104  0015'                    l4861:
 11105  0015' 1790'              	bsf	___flmul@b+2,7
 11106  0016' 2800'              	goto	l4865
 11107  0017'                    l4863:
 11108  0017' 3000               	movlw	0
 11109  0018' 0091'              	movwf	___flmul@b+3
 11110  0019' 3000               	movlw	0
 11111  001A' 0090'              	movwf	___flmul@b+2
 11112  001B' 3000               	movlw	0
 11113  001C' 008F'              	movwf	___flmul@b+1
 11114  001D' 3000               	movlw	0
 11115  001E' 008E'              	movwf	___flmul@b
 11116  001F'                    l4865:
 11117  001F' 0815'              	movf	___flmul@a+3,w
 11118  0020' 3980               	andlw	128
 11119  0021' 0096'              	movwf	??___flmul
 11120  0022' 0816'              	movf	??___flmul,w
 11121  0023' 069B'              	xorwf	___flmul@sign,f
 11122  0024' 3515'              	lslf	___flmul@a+3,w
 11123  0025' 009C'              	movwf	___flmul@aexp
 11124  0026' 1B94'              	btfsc	___flmul@a+2,7
 11125  0027' 141C'              	bsf	___flmul@aexp,0
 11126  0028' 081C'              	movf	___flmul@aexp,w
 11127  0029' 1903               	btfsc	3,2
 11128  002A' 2800'              	goto	l4881
 11129  002B' 0A1C'              	incf	___flmul@aexp,w
 11130  002C' 1D03               	btfss	3,2
 11131  002D' 2800'              	goto	l4879
 11132  002E' 3000               	movlw	0
 11133  002F' 0095'              	movwf	___flmul@a+3
 11134  0030' 3000               	movlw	0
 11135  0031' 0094'              	movwf	___flmul@a+2
 11136  0032' 3000               	movlw	0
 11137  0033' 0093'              	movwf	___flmul@a+1
 11138  0034' 3000               	movlw	0
 11139  0035' 0092'              	movwf	___flmul@a
 11140  0036'                    l4879:
 11141  0036' 1794'              	bsf	___flmul@a+2,7
 11142  0037' 2800'              	goto	l4883
 11143  0038'                    l4881:
 11144  0038' 3000               	movlw	0
 11145  0039' 0095'              	movwf	___flmul@a+3
 11146  003A' 3000               	movlw	0
 11147  003B' 0094'              	movwf	___flmul@a+2
 11148  003C' 3000               	movlw	0
 11149  003D' 0093'              	movwf	___flmul@a+1
 11150  003E' 3000               	movlw	0
 11151  003F' 0092'              	movwf	___flmul@a
 11152  0040'                    l4883:
 11153  0040' 081C'              	movf	___flmul@aexp,w
 11154  0041' 1D03               	btfss	3,2
 11155  0042' 081D'              	movf	___flmul@bexp,w
 11156  0043' 1D03               	btfss	3,2
 11157  0044' 2800'              	goto	l4891
 11158  0045' 3000               	movlw	0
 11159  0046' 0091'              	movwf	?___flmul+3
 11160  0047' 3000               	movlw	0
 11161  0048' 0090'              	movwf	?___flmul+2
 11162  0049' 3000               	movlw	0
 11163  004A' 008F'              	movwf	?___flmul+1
 11164  004B' 3000               	movlw	0
 11165  004C' 008E'              	movwf	?___flmul
 11166  004D' 0008               	return
 11167  004E'                    l4891:
 11168  004E' 080E'              	movf	___flmul@b,w
 11169  004F' 0080'              	movwf	__Umul8_16@multiplicand
 11170  0050' 0814'              	movf	___flmul@a+2,w
 11171  0051' 3180' 2000' 3180'  	fcall	__Umul8_16
 11172  0054' 0801'              	movf	?__Umul8_16+1,w
 11173  0055' 00A7'              	movwf	___flmul@temp+1
 11174  0056' 0800'              	movf	?__Umul8_16,w
 11175  0057' 00A6'              	movwf	___flmul@temp
 11176  0058' 0826'              	movf	___flmul@temp,w
 11177  0059' 0096'              	movwf	??___flmul
 11178  005A' 0197'              	clrf	??___flmul+1
 11179  005B' 0198'              	clrf	??___flmul+2
 11180  005C' 0199'              	clrf	??___flmul+3
 11181  005D' 0819'              	movf	??___flmul+3,w
 11182  005E' 00A1'              	movwf	___flmul@grs+3
 11183  005F' 0818'              	movf	??___flmul+2,w
 11184  0060' 00A0'              	movwf	___flmul@grs+2
 11185  0061' 0817'              	movf	??___flmul+1,w
 11186  0062' 009F'              	movwf	___flmul@grs+1
 11187  0063' 0816'              	movf	??___flmul,w
 11188  0064' 009E'              	movwf	___flmul@grs
 11189  0065' 0827'              	movf	___flmul@temp+1,w
 11190  0066' 0096'              	movwf	??___flmul
 11191  0067' 0197'              	clrf	??___flmul+1
 11192  0068' 0198'              	clrf	??___flmul+2
 11193  0069' 0199'              	clrf	??___flmul+3
 11194  006A' 0819'              	movf	??___flmul+3,w
 11195  006B' 00A5'              	movwf	___flmul@prod+3
 11196  006C' 0818'              	movf	??___flmul+2,w
 11197  006D' 00A4'              	movwf	___flmul@prod+2
 11198  006E' 0817'              	movf	??___flmul+1,w
 11199  006F' 00A3'              	movwf	___flmul@prod+1
 11200  0070' 0816'              	movf	??___flmul,w
 11201  0071' 00A2'              	movwf	___flmul@prod
 11202  0072' 080F'              	movf	___flmul@b+1,w
 11203  0073' 0080'              	movwf	__Umul8_16@multiplicand
 11204  0074' 0813'              	movf	___flmul@a+1,w
 11205  0075' 3180' 2000' 3180'  	fcall	__Umul8_16
 11206  0078' 0801'              	movf	?__Umul8_16+1,w
 11207  0079' 00A7'              	movwf	___flmul@temp+1
 11208  007A' 0800'              	movf	?__Umul8_16,w
 11209  007B' 00A6'              	movwf	___flmul@temp
 11210  007C' 0826'              	movf	___flmul@temp,w
 11211  007D' 0096'              	movwf	??___flmul
 11212  007E' 0197'              	clrf	??___flmul+1
 11213  007F' 0198'              	clrf	??___flmul+2
 11214  0080' 0199'              	clrf	??___flmul+3
 11215  0081' 0816'              	movf	??___flmul,w
 11216  0082' 079E'              	addwf	___flmul@grs,f
 11217  0083' 0817'              	movf	??___flmul+1,w
 11218  0084' 3D9F'              	addwfc	___flmul@grs+1,f
 11219  0085' 0818'              	movf	??___flmul+2,w
 11220  0086' 3DA0'              	addwfc	___flmul@grs+2,f
 11221  0087' 0819'              	movf	??___flmul+3,w
 11222  0088' 3DA1'              	addwfc	___flmul@grs+3,f
 11223  0089' 0827'              	movf	___flmul@temp+1,w
 11224  008A' 0096'              	movwf	??___flmul
 11225  008B' 0197'              	clrf	??___flmul+1
 11226  008C' 0198'              	clrf	??___flmul+2
 11227  008D' 0199'              	clrf	??___flmul+3
 11228  008E' 0816'              	movf	??___flmul,w
 11229  008F' 07A2'              	addwf	___flmul@prod,f
 11230  0090' 0817'              	movf	??___flmul+1,w
 11231  0091' 3DA3'              	addwfc	___flmul@prod+1,f
 11232  0092' 0818'              	movf	??___flmul+2,w
 11233  0093' 3DA4'              	addwfc	___flmul@prod+2,f
 11234  0094' 0819'              	movf	??___flmul+3,w
 11235  0095' 3DA5'              	addwfc	___flmul@prod+3,f
 11236  0096' 0810'              	movf	___flmul@b+2,w
 11237  0097' 0080'              	movwf	__Umul8_16@multiplicand
 11238  0098' 0812'              	movf	___flmul@a,w
 11239  0099' 3180' 2000' 3180'  	fcall	__Umul8_16
 11240  009C' 0801'              	movf	?__Umul8_16+1,w
 11241  009D' 00A7'              	movwf	___flmul@temp+1
 11242  009E' 0800'              	movf	?__Umul8_16,w
 11243  009F' 00A6'              	movwf	___flmul@temp
 11244  00A0' 0826'              	movf	___flmul@temp,w
 11245  00A1' 0096'              	movwf	??___flmul
 11246  00A2' 0197'              	clrf	??___flmul+1
 11247  00A3' 0198'              	clrf	??___flmul+2
 11248  00A4' 0199'              	clrf	??___flmul+3
 11249  00A5' 0816'              	movf	??___flmul,w
 11250  00A6' 079E'              	addwf	___flmul@grs,f
 11251  00A7' 0817'              	movf	??___flmul+1,w
 11252  00A8' 3D9F'              	addwfc	___flmul@grs+1,f
 11253  00A9' 0818'              	movf	??___flmul+2,w
 11254  00AA' 3DA0'              	addwfc	___flmul@grs+2,f
 11255  00AB' 0819'              	movf	??___flmul+3,w
 11256  00AC' 3DA1'              	addwfc	___flmul@grs+3,f
 11257  00AD' 0827'              	movf	___flmul@temp+1,w
 11258  00AE' 0096'              	movwf	??___flmul
 11259  00AF' 0197'              	clrf	??___flmul+1
 11260  00B0' 0198'              	clrf	??___flmul+2
 11261  00B1' 0199'              	clrf	??___flmul+3
 11262  00B2' 0816'              	movf	??___flmul,w
 11263  00B3' 07A2'              	addwf	___flmul@prod,f
 11264  00B4' 0817'              	movf	??___flmul+1,w
 11265  00B5' 3DA3'              	addwfc	___flmul@prod+1,f
 11266  00B6' 0818'              	movf	??___flmul+2,w
 11267  00B7' 3DA4'              	addwfc	___flmul@prod+2,f
 11268  00B8' 0819'              	movf	??___flmul+3,w
 11269  00B9' 3DA5'              	addwfc	___flmul@prod+3,f
 11270  00BA' 3008               	movlw	8
 11271  00BB'                    u5035:
 11272  00BB' 359E'              	lslf	___flmul@grs,f
 11273  00BC' 0D9F'              	rlf	___flmul@grs+1,f
 11274  00BD' 0DA0'              	rlf	___flmul@grs+2,f
 11275  00BE' 0DA1'              	rlf	___flmul@grs+3,f
 11276  00BF' 0B89               	decfsz	9,f
 11277  00C0' 2800'              	goto	u5035
 11278  00C1' 080F'              	movf	___flmul@b+1,w
 11279  00C2' 0080'              	movwf	__Umul8_16@multiplicand
 11280  00C3' 0812'              	movf	___flmul@a,w
 11281  00C4' 3180' 2000' 3180'  	fcall	__Umul8_16
 11282  00C7' 0801'              	movf	?__Umul8_16+1,w
 11283  00C8' 00A7'              	movwf	___flmul@temp+1
 11284  00C9' 0800'              	movf	?__Umul8_16,w
 11285  00CA' 00A6'              	movwf	___flmul@temp
 11286  00CB' 0826'              	movf	___flmul@temp,w
 11287  00CC' 079E'              	addwf	___flmul@grs,f
 11288  00CD' 0827'              	movf	___flmul@temp+1,w
 11289  00CE' 3D9F'              	addwfc	___flmul@grs+1,f
 11290  00CF' 3000               	movlw	0
 11291  00D0' 3DA0'              	addwfc	___flmul@grs+2,f
 11292  00D1' 3DA1'              	addwfc	___flmul@grs+3,f
 11293  00D2' 080E'              	movf	___flmul@b,w
 11294  00D3' 0080'              	movwf	__Umul8_16@multiplicand
 11295  00D4' 0813'              	movf	___flmul@a+1,w
 11296  00D5' 3180' 2000' 3180'  	fcall	__Umul8_16
 11297  00D8' 0801'              	movf	?__Umul8_16+1,w
 11298  00D9' 00A7'              	movwf	___flmul@temp+1
 11299  00DA' 0800'              	movf	?__Umul8_16,w
 11300  00DB' 00A6'              	movwf	___flmul@temp
 11301  00DC' 0826'              	movf	___flmul@temp,w
 11302  00DD' 079E'              	addwf	___flmul@grs,f
 11303  00DE' 0827'              	movf	___flmul@temp+1,w
 11304  00DF' 3D9F'              	addwfc	___flmul@grs+1,f
 11305  00E0' 3000               	movlw	0
 11306  00E1' 3DA0'              	addwfc	___flmul@grs+2,f
 11307  00E2' 3DA1'              	addwfc	___flmul@grs+3,f
 11308  00E3' 3008               	movlw	8
 11309  00E4'                    u5045:
 11310  00E4' 359E'              	lslf	___flmul@grs,f
 11311  00E5' 0D9F'              	rlf	___flmul@grs+1,f
 11312  00E6' 0DA0'              	rlf	___flmul@grs+2,f
 11313  00E7' 0DA1'              	rlf	___flmul@grs+3,f
 11314  00E8' 0B89               	decfsz	9,f
 11315  00E9' 2800'              	goto	u5045
 11316  00EA' 080E'              	movf	___flmul@b,w
 11317  00EB' 0080'              	movwf	__Umul8_16@multiplicand
 11318  00EC' 0812'              	movf	___flmul@a,w
 11319  00ED' 3180' 2000' 3180'  	fcall	__Umul8_16
 11320  00F0' 0801'              	movf	?__Umul8_16+1,w
 11321  00F1' 00A7'              	movwf	___flmul@temp+1
 11322  00F2' 0800'              	movf	?__Umul8_16,w
 11323  00F3' 00A6'              	movwf	___flmul@temp
 11324  00F4' 0826'              	movf	___flmul@temp,w
 11325  00F5' 079E'              	addwf	___flmul@grs,f
 11326  00F6' 0827'              	movf	___flmul@temp+1,w
 11327  00F7' 3D9F'              	addwfc	___flmul@grs+1,f
 11328  00F8' 3000               	movlw	0
 11329  00F9' 3DA0'              	addwfc	___flmul@grs+2,f
 11330  00FA' 3DA1'              	addwfc	___flmul@grs+3,f
 11331  00FB' 080F'              	movf	___flmul@b+1,w
 11332  00FC' 0080'              	movwf	__Umul8_16@multiplicand
 11333  00FD' 0814'              	movf	___flmul@a+2,w
 11334  00FE' 3180' 2000' 3180'  	fcall	__Umul8_16
 11335  0101' 0801'              	movf	?__Umul8_16+1,w
 11336  0102' 00A7'              	movwf	___flmul@temp+1
 11337  0103' 0800'              	movf	?__Umul8_16,w
 11338  0104' 00A6'              	movwf	___flmul@temp
 11339  0105' 0826'              	movf	___flmul@temp,w
 11340  0106' 07A2'              	addwf	___flmul@prod,f
 11341  0107' 0827'              	movf	___flmul@temp+1,w
 11342  0108' 3DA3'              	addwfc	___flmul@prod+1,f
 11343  0109' 3000               	movlw	0
 11344  010A' 3DA4'              	addwfc	___flmul@prod+2,f
 11345  010B' 3DA5'              	addwfc	___flmul@prod+3,f
 11346  010C' 0810'              	movf	___flmul@b+2,w
 11347  010D' 0080'              	movwf	__Umul8_16@multiplicand
 11348  010E' 0813'              	movf	___flmul@a+1,w
 11349  010F' 3180' 2000' 3180'  	fcall	__Umul8_16
 11350  0112' 0801'              	movf	?__Umul8_16+1,w
 11351  0113' 00A7'              	movwf	___flmul@temp+1
 11352  0114' 0800'              	movf	?__Umul8_16,w
 11353  0115' 00A6'              	movwf	___flmul@temp
 11354  0116' 0826'              	movf	___flmul@temp,w
 11355  0117' 07A2'              	addwf	___flmul@prod,f
 11356  0118' 0827'              	movf	___flmul@temp+1,w
 11357  0119' 3DA3'              	addwfc	___flmul@prod+1,f
 11358  011A' 3000               	movlw	0
 11359  011B' 3DA4'              	addwfc	___flmul@prod+2,f
 11360  011C' 3DA5'              	addwfc	___flmul@prod+3,f
 11361  011D' 0810'              	movf	___flmul@b+2,w
 11362  011E' 0080'              	movwf	__Umul8_16@multiplicand
 11363  011F' 0814'              	movf	___flmul@a+2,w
 11364  0120' 3180' 2000' 3180'  	fcall	__Umul8_16
 11365  0123' 0801'              	movf	?__Umul8_16+1,w
 11366  0124' 00A7'              	movwf	___flmul@temp+1
 11367  0125' 0800'              	movf	?__Umul8_16,w
 11368  0126' 00A6'              	movwf	___flmul@temp
 11369  0127' 0826'              	movf	___flmul@temp,w
 11370  0128' 0096'              	movwf	??___flmul
 11371  0129' 0827'              	movf	___flmul@temp+1,w
 11372  012A' 0097'              	movwf	??___flmul+1
 11373  012B' 0198'              	clrf	??___flmul+2
 11374  012C' 0199'              	clrf	??___flmul+3
 11375  012D' 3008               	movlw	8
 11376  012E'                    u5055:
 11377  012E' 3596'              	lslf	??___flmul,f
 11378  012F' 0D97'              	rlf	??___flmul+1,f
 11379  0130' 0D98'              	rlf	??___flmul+2,f
 11380  0131' 0D99'              	rlf	??___flmul+3,f
 11381  0132' 0B89               	decfsz	9,f
 11382  0133' 2800'              	goto	u5055
 11383  0134' 0816'              	movf	??___flmul,w
 11384  0135' 07A2'              	addwf	___flmul@prod,f
 11385  0136' 0817'              	movf	??___flmul+1,w
 11386  0137' 3DA3'              	addwfc	___flmul@prod+1,f
 11387  0138' 0818'              	movf	??___flmul+2,w
 11388  0139' 3DA4'              	addwfc	___flmul@prod+2,f
 11389  013A' 0819'              	movf	??___flmul+3,w
 11390  013B' 3DA5'              	addwfc	___flmul@prod+3,f
 11391  013C' 0821'              	movf	___flmul@grs+3,w
 11392  013D' 0096'              	movwf	??___flmul
 11393  013E' 0197'              	clrf	??___flmul+1
 11394  013F' 0198'              	clrf	??___flmul+2
 11395  0140' 0199'              	clrf	??___flmul+3
 11396  0141' 0816'              	movf	??___flmul,w
 11397  0142' 07A2'              	addwf	___flmul@prod,f
 11398  0143' 0817'              	movf	??___flmul+1,w
 11399  0144' 3DA3'              	addwfc	___flmul@prod+1,f
 11400  0145' 0818'              	movf	??___flmul+2,w
 11401  0146' 3DA4'              	addwfc	___flmul@prod+2,f
 11402  0147' 0819'              	movf	??___flmul+3,w
 11403  0148' 3DA5'              	addwfc	___flmul@prod+3,f
 11404  0149' 3008               	movlw	8
 11405  014A'                    u5065:
 11406  014A' 359E'              	lslf	___flmul@grs,f
 11407  014B' 0D9F'              	rlf	___flmul@grs+1,f
 11408  014C' 0DA0'              	rlf	___flmul@grs+2,f
 11409  014D' 0DA1'              	rlf	___flmul@grs+3,f
 11410  014E' 0B89               	decfsz	9,f
 11411  014F' 2800'              	goto	u5065
 11412  0150' 081D'              	movf	___flmul@bexp,w
 11413  0151' 071C'              	addwf	___flmul@aexp,w
 11414  0152' 0096'              	movwf	??___flmul
 11415  0153' 0197'              	clrf	??___flmul+1
 11416  0154' 0D97'              	rlf	??___flmul+1,f
 11417  0155' 0816'              	movf	??___flmul,w
 11418  0156' 3E82               	addlw	130
 11419  0157' 00A6'              	movwf	___flmul@temp
 11420  0158' 30FF               	movlw	255
 11421  0159' 3D17'              	addwfc	??___flmul+1,w
 11422  015A' 00A7'              	movwf	___flmul@temp+1
 11423  015B'                    l4943:
 11424  015B' 1BA4'              	btfsc	___flmul@prod+2,7
 11425  015C' 2800'              	goto	l4945
 11426  015D' 3001               	movlw	1
 11427  015E'                    u5075:
 11428  015E' 35A2'              	lslf	___flmul@prod,f
 11429  015F' 0DA3'              	rlf	___flmul@prod+1,f
 11430  0160' 0DA4'              	rlf	___flmul@prod+2,f
 11431  0161' 0DA5'              	rlf	___flmul@prod+3,f
 11432  0162' 0B89               	decfsz	9,f
 11433  0163' 2800'              	goto	u5075
 11434  0164' 1BA1'              	btfsc	___flmul@grs+3,7
 11435  0165' 1422'              	bsf	___flmul@prod,0
 11436  0166' 3001               	movlw	1
 11437  0167'                    u5095:
 11438  0167' 359E'              	lslf	___flmul@grs,f
 11439  0168' 0D9F'              	rlf	___flmul@grs+1,f
 11440  0169' 0DA0'              	rlf	___flmul@grs+2,f
 11441  016A' 0DA1'              	rlf	___flmul@grs+3,f
 11442  016B' 0B89               	decfsz	9,f
 11443  016C' 2800'              	goto	u5095
 11444  016D' 30FF               	movlw	255
 11445  016E' 07A6'              	addwf	___flmul@temp,f
 11446  016F' 30FF               	movlw	255
 11447  0170' 3DA7'              	addwfc	___flmul@temp+1,f
 11448  0171' 2800'              	goto	l4943
 11449  0172'                    l4945:
 11450  0172' 019C'              	clrf	___flmul@aexp
 11451  0173' 1FA1'              	btfss	___flmul@grs+3,7
 11452  0174' 2800'              	goto	l4955
 11453  0175' 30FF               	movlw	255
 11454  0176' 051E'              	andwf	___flmul@grs,w
 11455  0177' 0096'              	movwf	??___flmul
 11456  0178' 30FF               	movlw	255
 11457  0179' 051F'              	andwf	___flmul@grs+1,w
 11458  017A' 0097'              	movwf	??___flmul+1
 11459  017B' 30FF               	movlw	255
 11460  017C' 0520'              	andwf	___flmul@grs+2,w
 11461  017D' 0098'              	movwf	??___flmul+2
 11462  017E' 307F               	movlw	127
 11463  017F' 0521'              	andwf	___flmul@grs+3,w
 11464  0180' 0099'              	movwf	??___flmul+3
 11465  0181' 0819'              	movf	??___flmul+3,w
 11466  0182' 0418'              	iorwf	??___flmul+2,w
 11467  0183' 0417'              	iorwf	??___flmul+1,w
 11468  0184' 0416'              	iorwf	??___flmul,w
 11469  0185' 1903               	skipnz
 11470  0186' 1822'              	btfsc	___flmul@prod,0
 11471  0187' 2800'              	goto	l4951
 11472  0188' 2800'              	goto	l4955
 11473  0189'                    l4951:
 11474  0189' 019C'              	clrf	___flmul@aexp
 11475  018A' 0A9C'              	incf	___flmul@aexp,f
 11476  018B'                    l4955:
 11477  018B' 081C'              	movf	___flmul@aexp,w
 11478  018C' 1903               	btfsc	3,2
 11479  018D' 2800'              	goto	l4965
 11480  018E' 3001               	movlw	1
 11481  018F' 07A2'              	addwf	___flmul@prod,f
 11482  0190' 3000               	movlw	0
 11483  0191' 3DA3'              	addwfc	___flmul@prod+1,f
 11484  0192' 3000               	movlw	0
 11485  0193' 3DA4'              	addwfc	___flmul@prod+2,f
 11486  0194' 3000               	movlw	0
 11487  0195' 3DA5'              	addwfc	___flmul@prod+3,f
 11488  0196' 1C25'              	btfss	___flmul@prod+3,0
 11489  0197' 2800'              	goto	l4965
 11490  0198' 0822'              	movf	___flmul@prod,w
 11491  0199' 0096'              	movwf	??___flmul
 11492  019A' 0823'              	movf	___flmul@prod+1,w
 11493  019B' 0097'              	movwf	??___flmul+1
 11494  019C' 0824'              	movf	___flmul@prod+2,w
 11495  019D' 0098'              	movwf	??___flmul+2
 11496  019E' 0825'              	movf	___flmul@prod+3,w
 11497  019F' 0099'              	movwf	??___flmul+3
 11498  01A0' 3001               	movlw	1
 11499  01A1' 009A'              	movwf	??___flmul+4
 11500  01A2'                    u5165:
 11501  01A2' 3799'              	asrf	??___flmul+3,f
 11502  01A3' 0C98'              	rrf	??___flmul+2,f
 11503  01A4' 0C97'              	rrf	??___flmul+1,f
 11504  01A5' 0C96'              	rrf	??___flmul,f
 11505  01A6' 0B9A'              	decfsz	??___flmul+4,f
 11506  01A7' 2800'              	goto	u5165
 11507  01A8' 0819'              	movf	??___flmul+3,w
 11508  01A9' 00A5'              	movwf	___flmul@prod+3
 11509  01AA' 0818'              	movf	??___flmul+2,w
 11510  01AB' 00A4'              	movwf	___flmul@prod+2
 11511  01AC' 0817'              	movf	??___flmul+1,w
 11512  01AD' 00A3'              	movwf	___flmul@prod+1
 11513  01AE' 0816'              	movf	??___flmul,w
 11514  01AF' 00A2'              	movwf	___flmul@prod
 11515  01B0' 3001               	movlw	1
 11516  01B1' 07A6'              	addwf	___flmul@temp,f
 11517  01B2' 3000               	movlw	0
 11518  01B3' 3DA7'              	addwfc	___flmul@temp+1,f
 11519  01B4'                    l4965:
 11520  01B4' 0827'              	movf	___flmul@temp+1,w
 11521  01B5' 3A80               	xorlw	128
 11522  01B6' 0096'              	movwf	??___flmul
 11523  01B7' 3080               	movlw	128
 11524  01B8' 0216'              	subwf	??___flmul,w
 11525  01B9' 1D03               	skipz
 11526  01BA' 2800'              	goto	u5175
 11527  01BB' 30FF               	movlw	255
 11528  01BC' 0226'              	subwf	___flmul@temp,w
 11529  01BD'                    u5175:
 11530  01BD' 1C03               	skipc
 11531  01BE' 2800'              	goto	l4969
 11532  01BF' 307F               	movlw	127
 11533  01C0' 0020               	movlb	0	; select bank0
 11534  01C1' 00A5'              	movwf	___flmul@prod+3
 11535  01C2' 3080               	movlw	128
 11536  01C3' 00A4'              	movwf	___flmul@prod+2
 11537  01C4' 3000               	movlw	0
 11538  01C5' 00A3'              	movwf	___flmul@prod+1
 11539  01C6' 3000               	movlw	0
 11540  01C7' 00A2'              	movwf	___flmul@prod
 11541  01C8' 2800'              	goto	l1276
 11542  01C9'                    l4969:
 11543  01C9' 0020               	movlb	0	; select bank0
 11544  01CA' 0827'              	movf	___flmul@temp+1,w
 11545  01CB' 3A80               	xorlw	128
 11546  01CC' 0096'              	movwf	??___flmul
 11547  01CD' 3080               	movlw	128
 11548  01CE' 0216'              	subwf	??___flmul,w
 11549  01CF' 1D03               	skipz
 11550  01D0' 2800'              	goto	u5185
 11551  01D1' 3001               	movlw	1
 11552  01D2' 0226'              	subwf	___flmul@temp,w
 11553  01D3'                    u5185:
 11554  01D3' 1803               	skipnc
 11555  01D4' 2800'              	goto	l4975
 11556  01D5' 3000               	movlw	0
 11557  01D6' 0020               	movlb	0	; select bank0
 11558  01D7' 00A5'              	movwf	___flmul@prod+3
 11559  01D8' 3000               	movlw	0
 11560  01D9' 00A4'              	movwf	___flmul@prod+2
 11561  01DA' 3000               	movlw	0
 11562  01DB' 00A3'              	movwf	___flmul@prod+1
 11563  01DC' 3000               	movlw	0
 11564  01DD' 00A2'              	movwf	___flmul@prod
 11565  01DE' 019B'              	clrf	___flmul@sign
 11566  01DF' 2800'              	goto	l1276
 11567  01E0'                    l4975:
 11568  01E0' 0020               	movlb	0	; select bank0
 11569  01E1' 0826'              	movf	___flmul@temp,w
 11570  01E2' 009D'              	movwf	___flmul@bexp
 11571  01E3' 30FF               	movlw	255
 11572  01E4' 05A2'              	andwf	___flmul@prod,f
 11573  01E5' 30FF               	movlw	255
 11574  01E6' 05A3'              	andwf	___flmul@prod+1,f
 11575  01E7' 307F               	movlw	127
 11576  01E8' 05A4'              	andwf	___flmul@prod+2,f
 11577  01E9' 3000               	movlw	0
 11578  01EA' 05A5'              	andwf	___flmul@prod+3,f
 11579  01EB' 181D'              	btfsc	___flmul@bexp,0
 11580  01EC' 17A4'              	bsf	___flmul@prod+2,7
 11581  01ED' 361D'              	lsrf	___flmul@bexp,w
 11582  01EE' 00A5'              	movwf	___flmul@prod+3
 11583  01EF'                    l1276:
 11584  01EF' 081B'              	movf	___flmul@sign,w
 11585  01F0' 0096'              	movwf	??___flmul
 11586  01F1' 0816'              	movf	??___flmul,w
 11587  01F2' 04A5'              	iorwf	___flmul@prod+3,f
 11588  01F3' 0825'              	movf	___flmul@prod+3,w
 11589  01F4' 0091'              	movwf	?___flmul+3
 11590  01F5' 0824'              	movf	___flmul@prod+2,w
 11591  01F6' 0090'              	movwf	?___flmul+2
 11592  01F7' 0823'              	movf	___flmul@prod+1,w
 11593  01F8' 008F'              	movwf	?___flmul+1
 11594  01F9' 0822'              	movf	___flmul@prod,w
 11595  01FA' 008E'              	movwf	?___flmul
 11596  01FB' 0008               	return
 11597  01FC'                    __end_of___flmul:
 11598                           
 11599                           	psect	text48
 11600  0000'                    __ptext48:	
 11601 ;; *************** function __Umul8_16 *****************
 11602 ;; Defined at:
 11603 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8_16.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;  multiplier      1    wreg     unsigned char 
 11606 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;  multiplier      1    8[BANK0 ] unsigned char 
 11609 ;;  word_mpld       2    6[BANK0 ] unsigned short 
 11610 ;;  product         2    4[BANK0 ] unsigned short 
 11611 ;; Return value:  Size  Location     Type
 11612 ;;                  2    0[BANK0 ] unsigned int 
 11613 ;; Registers used:
 11614 ;;		wreg, status,2, status,0
 11615 ;; Tracked objects:
 11616 ;;		On entry : 1F/0
 11617 ;;		On exit  : 1F/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11620 ;;      Params:         0       2       0       0       0       0       0       0
 11621 ;;      Locals:         0       5       0       0       0       0       0       0
 11622 ;;      Temps:          0       2       0       0       0       0       0       0
 11623 ;;      Totals:         0       9       0       0       0       0       0       0
 11624 ;;Total ram usage:        9 bytes
 11625 ;; Hardware stack levels used: 1
 11626 ;; Hardware stack levels required when called: 7
 11627 ;; This function calls:
 11628 ;;		Nothing
 11629 ;; This function is called by:
 11630 ;;		___flmul
 11631 ;; This function uses a non-reentrant model
 11632 ;;
 11633                           
 11634  0000'                    __Umul8_16:	
 11635                           ;psect for function __Umul8_16
 11636                           
 11637                           
 11638                           ;incstack = 0
 11639                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 11640                           ;__Umul8_16@multiplier stored from wreg
 11641  0000' 0088'              	movwf	__Umul8_16@multiplier
 11642  0001' 0184'              	clrf	__Umul8_16@product
 11643  0002' 0185'              	clrf	__Umul8_16@product+1
 11644  0003' 0800'              	movf	__Umul8_16@multiplicand,w
 11645  0004' 0082'              	movwf	??__Umul8_16
 11646  0005' 0183'              	clrf	??__Umul8_16+1
 11647  0006' 0802'              	movf	??__Umul8_16,w
 11648  0007' 0086'              	movwf	__Umul8_16@word_mpld
 11649  0008' 0803'              	movf	??__Umul8_16+1,w
 11650  0009' 0087'              	movwf	__Umul8_16@word_mpld+1
 11651  000A'                    l4801:
 11652  000A' 1C08'              	btfss	__Umul8_16@multiplier,0
 11653  000B' 2800'              	goto	l1283
 11654  000C' 0806'              	movf	__Umul8_16@word_mpld,w
 11655  000D' 0784'              	addwf	__Umul8_16@product,f
 11656  000E' 0807'              	movf	__Umul8_16@word_mpld+1,w
 11657  000F' 3D85'              	addwfc	__Umul8_16@product+1,f
 11658  0010'                    l1283:
 11659  0010' 3001               	movlw	1
 11660  0011'                    u4905:
 11661  0011' 3586'              	lslf	__Umul8_16@word_mpld,f
 11662  0012' 0D87'              	rlf	__Umul8_16@word_mpld+1,f
 11663  0013' 0B89               	decfsz	9,f
 11664  0014' 2800'              	goto	u4905
 11665  0015' 1003               	clrc
 11666  0016' 0C88'              	rrf	__Umul8_16@multiplier,f
 11667  0017' 0808'              	movf	__Umul8_16@multiplier,w
 11668  0018' 1D03               	btfss	3,2
 11669  0019' 2800'              	goto	l4801
 11670  001A' 0805'              	movf	__Umul8_16@product+1,w
 11671  001B' 0081'              	movwf	?__Umul8_16+1
 11672  001C' 0804'              	movf	__Umul8_16@product,w
 11673  001D' 0080'              	movwf	?__Umul8_16
 11674  001E' 0008               	return
 11675  001F'                    __end_of__Umul8_16:
 11676                           
 11677                           	psect	text49
 11678  0000'                    __ptext49:	
 11679 ;; *************** function ___fldiv *****************
 11680 ;; Defined at:
 11681 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcdiv.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;  a               4   48[BANK0 ] unsigned int 
 11684 ;;  b               4   52[BANK0 ] unsigned int 
 11685 ;; Auto vars:     Size  Location     Type
 11686 ;;  grs             4   68[BANK0 ] unsigned long 
 11687 ;;  rem             4   61[BANK0 ] unsigned long 
 11688 ;;  new_exp         2   66[BANK0 ] short 
 11689 ;;  aexp            1   73[BANK0 ] unsigned char 
 11690 ;;  bexp            1   72[BANK0 ] unsigned char 
 11691 ;;  sign            1   65[BANK0 ] unsigned char 
 11692 ;; Return value:  Size  Location     Type
 11693 ;;                  4   48[BANK0 ] unsigned char 
 11694 ;; Registers used:
 11695 ;;		wreg, status,2, status,0
 11696 ;; Tracked objects:
 11697 ;;		On entry : 1F/0
 11698 ;;		On exit  : 1F/0
 11699 ;;		Unchanged: 0/0
 11700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11701 ;;      Params:         0       8       0       0       0       0       0       0
 11702 ;;      Locals:         0      13       0       0       0       0       0       0
 11703 ;;      Temps:          0       5       0       0       0       0       0       0
 11704 ;;      Totals:         0      26       0       0       0       0       0       0
 11705 ;;Total ram usage:       26 bytes
 11706 ;; Hardware stack levels used: 1
 11707 ;; Hardware stack levels required when called: 7
 11708 ;; This function calls:
 11709 ;;		Nothing
 11710 ;; This function is called by:
 11711 ;;		_SSPA_getTemp
 11712 ;;		_SSPA_getPOut
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716  0000'                    ___fldiv:	
 11717                           ;psect for function ___fldiv
 11718                           
 11719                           
 11720                           ;incstack = 0
 11721                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 11722  0000' 0837'              	movf	___fldiv@b+3,w
 11723  0001' 3980               	andlw	128
 11724  0002' 00C1'              	movwf	___fldiv@sign
 11725  0003' 3537'              	lslf	___fldiv@b+3,w
 11726  0004' 00C8'              	movwf	___fldiv@bexp
 11727  0005' 1BB6'              	btfsc	___fldiv@b+2,7
 11728  0006' 1448'              	bsf	___fldiv@bexp,0
 11729  0007' 0848'              	movf	___fldiv@bexp,w
 11730  0008' 1903               	btfsc	3,2
 11731  0009' 2800'              	goto	l3603
 11732  000A' 0A48'              	incf	___fldiv@bexp,w
 11733  000B' 1D03               	btfss	3,2
 11734  000C' 2800'              	goto	l3599
 11735  000D' 3000               	movlw	0
 11736  000E' 00B7'              	movwf	___fldiv@b+3
 11737  000F' 3000               	movlw	0
 11738  0010' 00B6'              	movwf	___fldiv@b+2
 11739  0011' 3000               	movlw	0
 11740  0012' 00B5'              	movwf	___fldiv@b+1
 11741  0013' 3000               	movlw	0
 11742  0014' 00B4'              	movwf	___fldiv@b
 11743  0015'                    l3599:
 11744  0015' 17B6'              	bsf	___fldiv@b+2,7
 11745  0016' 01B7'              	clrf	___fldiv@b+3
 11746  0017' 2800'              	goto	l3605
 11747  0018'                    l3603:
 11748  0018' 3000               	movlw	0
 11749  0019' 00B7'              	movwf	___fldiv@b+3
 11750  001A' 3000               	movlw	0
 11751  001B' 00B6'              	movwf	___fldiv@b+2
 11752  001C' 3000               	movlw	0
 11753  001D' 00B5'              	movwf	___fldiv@b+1
 11754  001E' 3000               	movlw	0
 11755  001F' 00B4'              	movwf	___fldiv@b
 11756  0020'                    l3605:
 11757  0020' 0833'              	movf	___fldiv@a+3,w
 11758  0021' 3980               	andlw	128
 11759  0022' 00B8'              	movwf	??___fldiv
 11760  0023' 0838'              	movf	??___fldiv,w
 11761  0024' 06C1'              	xorwf	___fldiv@sign,f
 11762  0025' 3533'              	lslf	___fldiv@a+3,w
 11763  0026' 00C9'              	movwf	___fldiv@aexp
 11764  0027' 1BB2'              	btfsc	___fldiv@a+2,7
 11765  0028' 1449'              	bsf	___fldiv@aexp,0
 11766  0029' 0849'              	movf	___fldiv@aexp,w
 11767  002A' 1903               	btfsc	3,2
 11768  002B' 2800'              	goto	l3623
 11769  002C' 0A49'              	incf	___fldiv@aexp,w
 11770  002D' 1D03               	btfss	3,2
 11771  002E' 2800'              	goto	l3619
 11772  002F' 3000               	movlw	0
 11773  0030' 00B3'              	movwf	___fldiv@a+3
 11774  0031' 3000               	movlw	0
 11775  0032' 00B2'              	movwf	___fldiv@a+2
 11776  0033' 3000               	movlw	0
 11777  0034' 00B1'              	movwf	___fldiv@a+1
 11778  0035' 3000               	movlw	0
 11779  0036' 00B0'              	movwf	___fldiv@a
 11780  0037'                    l3619:
 11781  0037' 17B2'              	bsf	___fldiv@a+2,7
 11782  0038' 01B3'              	clrf	___fldiv@a+3
 11783  0039' 2800'              	goto	l1224
 11784  003A'                    l3623:
 11785  003A' 3000               	movlw	0
 11786  003B' 00B3'              	movwf	___fldiv@a+3
 11787  003C' 3000               	movlw	0
 11788  003D' 00B2'              	movwf	___fldiv@a+2
 11789  003E' 3000               	movlw	0
 11790  003F' 00B1'              	movwf	___fldiv@a+1
 11791  0040' 3000               	movlw	0
 11792  0041' 00B0'              	movwf	___fldiv@a
 11793  0042'                    l1224:
 11794  0042' 0833'              	movf	___fldiv@a+3,w
 11795  0043' 0432'              	iorwf	___fldiv@a+2,w
 11796  0044' 0431'              	iorwf	___fldiv@a+1,w
 11797  0045' 0430'              	iorwf	___fldiv@a,w
 11798  0046' 1D03               	skipz
 11799  0047' 2800'              	goto	l3633
 11800  0048' 3000               	movlw	0
 11801  0049' 00B7'              	movwf	___fldiv@b+3
 11802  004A' 3000               	movlw	0
 11803  004B' 00B6'              	movwf	___fldiv@b+2
 11804  004C' 3000               	movlw	0
 11805  004D' 00B5'              	movwf	___fldiv@b+1
 11806  004E' 3000               	movlw	0
 11807  004F' 00B4'              	movwf	___fldiv@b
 11808  0050' 3080               	movlw	128
 11809  0051' 04B6'              	iorwf	___fldiv@b+2,f
 11810  0052' 307F               	movlw	127
 11811  0053' 04B7'              	iorwf	___fldiv@b+3,f
 11812  0054'                    L5:
 11813  0054' 0841'              	movf	___fldiv@sign,w
 11814  0055' 00B8'              	movwf	??___fldiv
 11815  0056' 0838'              	movf	??___fldiv,w
 11816  0057' 04B7'              	iorwf	___fldiv@b+3,f
 11817  0058' 0837'              	movf	___fldiv@b+3,w
 11818  0059' 00B3'              	movwf	?___fldiv+3
 11819  005A' 0836'              	movf	___fldiv@b+2,w
 11820  005B' 00B2'              	movwf	?___fldiv+2
 11821  005C' 0835'              	movf	___fldiv@b+1,w
 11822  005D' 00B1'              	movwf	?___fldiv+1
 11823  005E' 0834'              	movf	___fldiv@b,w
 11824  005F' 00B0'              	movwf	?___fldiv
 11825  0060' 0008               	return
 11826  0061'                    l3633:
 11827  0061' 0848'              	movf	___fldiv@bexp,w
 11828  0062' 1D03               	btfss	3,2
 11829  0063' 2800'              	goto	l3639
 11830  0064' 3000               	movlw	0
 11831  0065' 00B3'              	movwf	?___fldiv+3
 11832  0066' 3000               	movlw	0
 11833  0067' 00B2'              	movwf	?___fldiv+2
 11834  0068' 3000               	movlw	0
 11835  0069' 00B1'              	movwf	?___fldiv+1
 11836  006A' 3000               	movlw	0
 11837  006B' 00B0'              	movwf	?___fldiv
 11838  006C' 0008               	return
 11839  006D'                    l3639:
 11840  006D' 0848'              	movf	___fldiv@bexp,w
 11841  006E' 00B8'              	movwf	??___fldiv
 11842  006F' 01B9'              	clrf	??___fldiv+1
 11843  0070' 0839'              	movf	??___fldiv+1,w
 11844  0071' 00BB'              	movwf	??___fldiv+3
 11845  0072' 0849'              	movf	___fldiv@aexp,w
 11846  0073' 0238'              	subwf	??___fldiv,w
 11847  0074' 00BA'              	movwf	??___fldiv+2
 11848  0075' 1C03               	skipc
 11849  0076' 03BB'              	decf	??___fldiv+3,f
 11850  0077' 083A'              	movf	??___fldiv+2,w
 11851  0078' 3E7F               	addlw	127
 11852  0079' 00C2'              	movwf	___fldiv@new_exp
 11853  007A' 3000               	movlw	0
 11854  007B' 3D3B'              	addwfc	??___fldiv+3,w
 11855  007C' 00C3'              	movwf	___fldiv@new_exp+1
 11856  007D' 0837'              	movf	___fldiv@b+3,w
 11857  007E' 00C0'              	movwf	___fldiv@rem+3
 11858  007F' 0836'              	movf	___fldiv@b+2,w
 11859  0080' 00BF'              	movwf	___fldiv@rem+2
 11860  0081' 0835'              	movf	___fldiv@b+1,w
 11861  0082' 00BE'              	movwf	___fldiv@rem+1
 11862  0083' 0834'              	movf	___fldiv@b,w
 11863  0084' 00BD'              	movwf	___fldiv@rem
 11864  0085' 3000               	movlw	0
 11865  0086' 00B7'              	movwf	___fldiv@b+3
 11866  0087' 3000               	movlw	0
 11867  0088' 00B6'              	movwf	___fldiv@b+2
 11868  0089' 3000               	movlw	0
 11869  008A' 00B5'              	movwf	___fldiv@b+1
 11870  008B' 3000               	movlw	0
 11871  008C' 00B4'              	movwf	___fldiv@b
 11872  008D' 3000               	movlw	0
 11873  008E' 00C7'              	movwf	___fldiv@grs+3
 11874  008F' 3000               	movlw	0
 11875  0090' 00C6'              	movwf	___fldiv@grs+2
 11876  0091' 3000               	movlw	0
 11877  0092' 00C5'              	movwf	___fldiv@grs+1
 11878  0093' 3000               	movlw	0
 11879  0094' 00C4'              	movwf	___fldiv@grs
 11880  0095' 01C9'              	clrf	___fldiv@aexp
 11881  0096'                    l3667:
 11882  0096' 301A               	movlw	26
 11883  0097' 0249'              	subwf	___fldiv@aexp,w
 11884  0098' 1803               	btfsc	3,0
 11885  0099' 2800'              	goto	l3669
 11886  009A' 0849'              	movf	___fldiv@aexp,w
 11887  009B' 1903               	btfsc	3,2
 11888  009C' 2800'              	goto	l3659
 11889  009D' 3001               	movlw	1
 11890  009E'                    u3365:
 11891  009E' 35BD'              	lslf	___fldiv@rem,f
 11892  009F' 0DBE'              	rlf	___fldiv@rem+1,f
 11893  00A0' 0DBF'              	rlf	___fldiv@rem+2,f
 11894  00A1' 0DC0'              	rlf	___fldiv@rem+3,f
 11895  00A2' 0B89               	decfsz	9,f
 11896  00A3' 2800'              	goto	u3365
 11897  00A4' 3001               	movlw	1
 11898  00A5'                    u3375:
 11899  00A5' 35B4'              	lslf	___fldiv@b,f
 11900  00A6' 0DB5'              	rlf	___fldiv@b+1,f
 11901  00A7' 0DB6'              	rlf	___fldiv@b+2,f
 11902  00A8' 0DB7'              	rlf	___fldiv@b+3,f
 11903  00A9' 0B89               	decfsz	9,f
 11904  00AA' 2800'              	goto	u3375
 11905  00AB' 1BC7'              	btfsc	___fldiv@grs+3,7
 11906  00AC' 1434'              	bsf	___fldiv@b,0
 11907  00AD' 3001               	movlw	1
 11908  00AE'                    u3395:
 11909  00AE' 35C4'              	lslf	___fldiv@grs,f
 11910  00AF' 0DC5'              	rlf	___fldiv@grs+1,f
 11911  00B0' 0DC6'              	rlf	___fldiv@grs+2,f
 11912  00B1' 0DC7'              	rlf	___fldiv@grs+3,f
 11913  00B2' 0B89               	decfsz	9,f
 11914  00B3' 2800'              	goto	u3395
 11915  00B4'                    l3659:
 11916  00B4' 0833'              	movf	___fldiv@a+3,w
 11917  00B5' 0240'              	subwf	___fldiv@rem+3,w
 11918  00B6' 1D03               	skipz
 11919  00B7' 2800'              	goto	u3405
 11920  00B8' 0832'              	movf	___fldiv@a+2,w
 11921  00B9' 023F'              	subwf	___fldiv@rem+2,w
 11922  00BA' 1D03               	skipz
 11923  00BB' 2800'              	goto	u3405
 11924  00BC' 0831'              	movf	___fldiv@a+1,w
 11925  00BD' 023E'              	subwf	___fldiv@rem+1,w
 11926  00BE' 1D03               	skipz
 11927  00BF' 2800'              	goto	u3405
 11928  00C0' 0830'              	movf	___fldiv@a,w
 11929  00C1' 023D'              	subwf	___fldiv@rem,w
 11930  00C2'                    u3405:
 11931  00C2' 1C03               	skipc
 11932  00C3' 2800'              	goto	l3665
 11933  00C4' 1747'              	bsf	___fldiv@grs+3,6
 11934  00C5' 0830'              	movf	___fldiv@a,w
 11935  00C6' 02BD'              	subwf	___fldiv@rem,f
 11936  00C7' 0831'              	movf	___fldiv@a+1,w
 11937  00C8' 3BBE'              	subwfb	___fldiv@rem+1,f
 11938  00C9' 0832'              	movf	___fldiv@a+2,w
 11939  00CA' 3BBF'              	subwfb	___fldiv@rem+2,f
 11940  00CB' 0833'              	movf	___fldiv@a+3,w
 11941  00CC' 3BC0'              	subwfb	___fldiv@rem+3,f
 11942  00CD'                    l3665:
 11943  00CD' 3001               	movlw	1
 11944  00CE' 00B8'              	movwf	??___fldiv
 11945  00CF' 0838'              	movf	??___fldiv,w
 11946  00D0' 07C9'              	addwf	___fldiv@aexp,f
 11947  00D1' 2800'              	goto	l3667
 11948  00D2'                    l3669:
 11949  00D2' 0840'              	movf	___fldiv@rem+3,w
 11950  00D3' 043F'              	iorwf	___fldiv@rem+2,w
 11951  00D4' 043E'              	iorwf	___fldiv@rem+1,w
 11952  00D5' 043D'              	iorwf	___fldiv@rem,w
 11953  00D6' 1D03               	btfss	3,2
 11954  00D7' 1444'              	bsf	___fldiv@grs,0
 11955  00D8'                    l3683:
 11956  00D8' 1BB6'              	btfsc	___fldiv@b+2,7
 11957  00D9' 2800'              	goto	l3685
 11958  00DA' 3001               	movlw	1
 11959  00DB'                    u3435:
 11960  00DB' 35B4'              	lslf	___fldiv@b,f
 11961  00DC' 0DB5'              	rlf	___fldiv@b+1,f
 11962  00DD' 0DB6'              	rlf	___fldiv@b+2,f
 11963  00DE' 0DB7'              	rlf	___fldiv@b+3,f
 11964  00DF' 0B89               	decfsz	9,f
 11965  00E0' 2800'              	goto	u3435
 11966  00E1' 1BC7'              	btfsc	___fldiv@grs+3,7
 11967  00E2' 1434'              	bsf	___fldiv@b,0
 11968  00E3' 3001               	movlw	1
 11969  00E4'                    u3455:
 11970  00E4' 35C4'              	lslf	___fldiv@grs,f
 11971  00E5' 0DC5'              	rlf	___fldiv@grs+1,f
 11972  00E6' 0DC6'              	rlf	___fldiv@grs+2,f
 11973  00E7' 0DC7'              	rlf	___fldiv@grs+3,f
 11974  00E8' 0B89               	decfsz	9,f
 11975  00E9' 2800'              	goto	u3455
 11976  00EA' 30FF               	movlw	255
 11977  00EB' 07C2'              	addwf	___fldiv@new_exp,f
 11978  00EC' 30FF               	movlw	255
 11979  00ED' 3DC3'              	addwfc	___fldiv@new_exp+1,f
 11980  00EE' 2800'              	goto	l3683
 11981  00EF'                    l3685:
 11982  00EF' 01C9'              	clrf	___fldiv@aexp
 11983  00F0' 1FC7'              	btfss	___fldiv@grs+3,7
 11984  00F1' 2800'              	goto	l3695
 11985  00F2' 30FF               	movlw	255
 11986  00F3' 0544'              	andwf	___fldiv@grs,w
 11987  00F4' 00B8'              	movwf	??___fldiv
 11988  00F5' 30FF               	movlw	255
 11989  00F6' 0545'              	andwf	___fldiv@grs+1,w
 11990  00F7' 00B9'              	movwf	??___fldiv+1
 11991  00F8' 30FF               	movlw	255
 11992  00F9' 0546'              	andwf	___fldiv@grs+2,w
 11993  00FA' 00BA'              	movwf	??___fldiv+2
 11994  00FB' 307F               	movlw	127
 11995  00FC' 0547'              	andwf	___fldiv@grs+3,w
 11996  00FD' 00BB'              	movwf	??___fldiv+3
 11997  00FE' 083B'              	movf	??___fldiv+3,w
 11998  00FF' 043A'              	iorwf	??___fldiv+2,w
 11999  0100' 0439'              	iorwf	??___fldiv+1,w
 12000  0101' 0438'              	iorwf	??___fldiv,w
 12001  0102' 1903               	skipnz
 12002  0103' 1834'              	btfsc	___fldiv@b,0
 12003  0104' 2800'              	goto	l3691
 12004  0105' 2800'              	goto	l3695
 12005  0106'                    l3691:
 12006  0106' 01C9'              	clrf	___fldiv@aexp
 12007  0107' 0AC9'              	incf	___fldiv@aexp,f
 12008  0108'                    l3695:
 12009  0108' 0849'              	movf	___fldiv@aexp,w
 12010  0109' 1903               	btfsc	3,2
 12011  010A' 2800'              	goto	l3705
 12012  010B' 3001               	movlw	1
 12013  010C' 07B4'              	addwf	___fldiv@b,f
 12014  010D' 3000               	movlw	0
 12015  010E' 3DB5'              	addwfc	___fldiv@b+1,f
 12016  010F' 3000               	movlw	0
 12017  0110' 3DB6'              	addwfc	___fldiv@b+2,f
 12018  0111' 3000               	movlw	0
 12019  0112' 3DB7'              	addwfc	___fldiv@b+3,f
 12020  0113' 1C37'              	btfss	___fldiv@b+3,0
 12021  0114' 2800'              	goto	l3705
 12022  0115' 0834'              	movf	___fldiv@b,w
 12023  0116' 00B8'              	movwf	??___fldiv
 12024  0117' 0835'              	movf	___fldiv@b+1,w
 12025  0118' 00B9'              	movwf	??___fldiv+1
 12026  0119' 0836'              	movf	___fldiv@b+2,w
 12027  011A' 00BA'              	movwf	??___fldiv+2
 12028  011B' 0837'              	movf	___fldiv@b+3,w
 12029  011C' 00BB'              	movwf	??___fldiv+3
 12030  011D' 3001               	movlw	1
 12031  011E' 00BC'              	movwf	??___fldiv+4
 12032  011F'                    u3525:
 12033  011F' 37BB'              	asrf	??___fldiv+3,f
 12034  0120' 0CBA'              	rrf	??___fldiv+2,f
 12035  0121' 0CB9'              	rrf	??___fldiv+1,f
 12036  0122' 0CB8'              	rrf	??___fldiv,f
 12037  0123' 0BBC'              	decfsz	??___fldiv+4,f
 12038  0124' 2800'              	goto	u3525
 12039  0125' 083B'              	movf	??___fldiv+3,w
 12040  0126' 00B7'              	movwf	___fldiv@b+3
 12041  0127' 083A'              	movf	??___fldiv+2,w
 12042  0128' 00B6'              	movwf	___fldiv@b+2
 12043  0129' 0839'              	movf	??___fldiv+1,w
 12044  012A' 00B5'              	movwf	___fldiv@b+1
 12045  012B' 0838'              	movf	??___fldiv,w
 12046  012C' 00B4'              	movwf	___fldiv@b
 12047  012D' 3001               	movlw	1
 12048  012E' 07C2'              	addwf	___fldiv@new_exp,f
 12049  012F' 3000               	movlw	0
 12050  0130' 3DC3'              	addwfc	___fldiv@new_exp+1,f
 12051  0131'                    l3705:
 12052  0131' 0843'              	movf	___fldiv@new_exp+1,w
 12053  0132' 3A80               	xorlw	128
 12054  0133' 00B8'              	movwf	??___fldiv
 12055  0134' 3080               	movlw	128
 12056  0135' 0238'              	subwf	??___fldiv,w
 12057  0136' 1D03               	skipz
 12058  0137' 2800'              	goto	u3535
 12059  0138' 30FF               	movlw	255
 12060  0139' 0242'              	subwf	___fldiv@new_exp,w
 12061  013A'                    u3535:
 12062  013A' 1C03               	skipc
 12063  013B' 2800'              	goto	l1245
 12064  013C' 30FF               	movlw	255
 12065  013D' 0020               	movlb	0	; select bank0
 12066  013E' 00C2'              	movwf	___fldiv@new_exp
 12067  013F' 3000               	movlw	0
 12068  0140' 00C3'              	movwf	___fldiv@new_exp+1
 12069  0141' 3000               	movlw	0
 12070  0142' 00B7'              	movwf	___fldiv@b+3
 12071  0143' 3000               	movlw	0
 12072  0144' 00B6'              	movwf	___fldiv@b+2
 12073  0145' 3000               	movlw	0
 12074  0146' 00B5'              	movwf	___fldiv@b+1
 12075  0147' 3000               	movlw	0
 12076  0148' 00B4'              	movwf	___fldiv@b
 12077  0149'                    l1245:
 12078  0149' 0020               	movlb	0	; select bank0
 12079  014A' 0843'              	movf	___fldiv@new_exp+1,w
 12080  014B' 3A80               	xorlw	128
 12081  014C' 00B8'              	movwf	??___fldiv
 12082  014D' 3080               	movlw	128
 12083  014E' 0238'              	subwf	??___fldiv,w
 12084  014F' 1D03               	skipz
 12085  0150' 2800'              	goto	u3545
 12086  0151' 3001               	movlw	1
 12087  0152' 0242'              	subwf	___fldiv@new_exp,w
 12088  0153'                    u3545:
 12089  0153' 1803               	skipnc
 12090  0154' 2800'              	goto	l1246
 12091  0155' 0020               	movlb	0	; select bank0
 12092  0156' 01C2'              	clrf	___fldiv@new_exp
 12093  0157' 01C3'              	clrf	___fldiv@new_exp+1
 12094  0158' 3000               	movlw	0
 12095  0159' 00B7'              	movwf	___fldiv@b+3
 12096  015A' 3000               	movlw	0
 12097  015B' 00B6'              	movwf	___fldiv@b+2
 12098  015C' 3000               	movlw	0
 12099  015D' 00B5'              	movwf	___fldiv@b+1
 12100  015E' 3000               	movlw	0
 12101  015F' 00B4'              	movwf	___fldiv@b
 12102  0160' 01C1'              	clrf	___fldiv@sign
 12103  0161'                    l1246:
 12104  0161' 0020               	movlb	0	; select bank0
 12105  0162' 0842'              	movf	___fldiv@new_exp,w
 12106  0163' 00C8'              	movwf	___fldiv@bexp
 12107  0164' 1C48'              	btfss	___fldiv@bexp,0
 12108  0165' 2800'              	goto	l3719
 12109  0166' 17B6'              	bsf	___fldiv@b+2,7
 12110  0167' 2800'              	goto	l1248
 12111  0168'                    l3719:
 12112  0168' 307F               	movlw	127
 12113  0169' 00B8'              	movwf	??___fldiv
 12114  016A' 0838'              	movf	??___fldiv,w
 12115  016B' 05B6'              	andwf	___fldiv@b+2,f
 12116  016C'                    l1248:
 12117  016C' 3648'              	lsrf	___fldiv@bexp,w
 12118  016D' 00B7'              	movwf	___fldiv@b+3
 12119  016E' 2800'              	goto	L5
 12120  016F'                    __end_of___fldiv:
 12121                           
 12122                           	psect	text50
 12123  0000'                    __ptext50:	
 12124 ;; *************** function _KAPS_setRelPos *****************
 12125 ;; Defined at:
 12126 ;;		line 369 in file "main.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;  kaps            1    wreg     PTR struct .
 12129 ;;		 -> kaps(7), 
 12130 ;;  offset          4   13[BANK0 ] unsigned long 
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;  kaps            1   17[BANK0 ] PTR struct .
 12133 ;;		 -> kaps(7), 
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  1    wreg      void 
 12136 ;; Registers used:
 12137 ;;		wreg
 12138 ;; Tracked objects:
 12139 ;;		On entry : 1F/0
 12140 ;;		On exit  : 1F/0
 12141 ;;		Unchanged: 1F/0
 12142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12143 ;;      Params:         0       4       0       0       0       0       0       0
 12144 ;;      Locals:         0       1       0       0       0       0       0       0
 12145 ;;      Temps:          0       0       0       0       0       0       0       0
 12146 ;;      Totals:         0       5       0       0       0       0       0       0
 12147 ;;Total ram usage:        5 bytes
 12148 ;; Hardware stack levels used: 1
 12149 ;; Hardware stack levels required when called: 7
 12150 ;; This function calls:
 12151 ;;		Nothing
 12152 ;; This function is called by:
 12153 ;;		_ProcessMsg
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157  0000'                    _KAPS_setRelPos:	
 12158                           ;psect for function _KAPS_setRelPos
 12159                           
 12160                           
 12161                           ;incstack = 0
 12162                           ; Regs used in _KAPS_setRelPos: [wreg]
 12163  0000' 0008               	return
 12164  0001'                    __end_of_KAPS_setRelPos:
 12165                           
 12166                           	psect	text51
 12167  0000'                    __ptext51:	
 12168 ;; *************** function _KAPS_setAbsPos *****************
 12169 ;; Defined at:
 12170 ;;		line 358 in file "main.c"
 12171 ;; Parameters:    Size  Location     Type
 12172 ;;  kaps            1    wreg     PTR struct .
 12173 ;;		 -> kaps(7), 
 12174 ;;  pos             4   13[BANK0 ] unsigned long 
 12175 ;; Auto vars:     Size  Location     Type
 12176 ;;  kaps            1   17[BANK0 ] PTR struct .
 12177 ;;		 -> kaps(7), 
 12178 ;; Return value:  Size  Location     Type
 12179 ;;                  1    wreg      void 
 12180 ;; Registers used:
 12181 ;;		wreg
 12182 ;; Tracked objects:
 12183 ;;		On entry : 1F/0
 12184 ;;		On exit  : 1F/0
 12185 ;;		Unchanged: 1F/0
 12186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12187 ;;      Params:         0       4       0       0       0       0       0       0
 12188 ;;      Locals:         0       1       0       0       0       0       0       0
 12189 ;;      Temps:          0       0       0       0       0       0       0       0
 12190 ;;      Totals:         0       5       0       0       0       0       0       0
 12191 ;;Total ram usage:        5 bytes
 12192 ;; Hardware stack levels used: 1
 12193 ;; Hardware stack levels required when called: 7
 12194 ;; This function calls:
 12195 ;;		Nothing
 12196 ;; This function is called by:
 12197 ;;		_ProcessMsg
 12198 ;; This function uses a non-reentrant model
 12199 ;;
 12200                           
 12201  0000'                    _KAPS_setAbsPos:	
 12202                           ;psect for function _KAPS_setAbsPos
 12203                           
 12204                           
 12205                           ;incstack = 0
 12206                           ; Regs used in _KAPS_setAbsPos: [wreg]
 12207  0000' 0008               	return
 12208  0001'                    __end_of_KAPS_setAbsPos:
 12209                           
 12210                           	psect	text52
 12211  0000'                    __ptext52:	
 12212 ;; *************** function _KAPS_getStatus *****************
 12213 ;; Defined at:
 12214 ;;		line 391 in file "main.c"
 12215 ;; Parameters:    Size  Location     Type
 12216 ;;  kaps            1    wreg     PTR struct .
 12217 ;;		 -> kaps(7), 
 12218 ;; Auto vars:     Size  Location     Type
 12219 ;;  kaps            1    0[BANK0 ] PTR struct .
 12220 ;;		 -> kaps(7), 
 12221 ;; Return value:  Size  Location     Type
 12222 ;;                  1    wreg      void 
 12223 ;; Registers used:
 12224 ;;		wreg
 12225 ;; Tracked objects:
 12226 ;;		On entry : 1F/1
 12227 ;;		On exit  : 1F/1
 12228 ;;		Unchanged: 1F/0
 12229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12230 ;;      Params:         0       0       0       0       0       0       0       0
 12231 ;;      Locals:         0       1       0       0       0       0       0       0
 12232 ;;      Temps:          0       0       0       0       0       0       0       0
 12233 ;;      Totals:         0       1       0       0       0       0       0       0
 12234 ;;Total ram usage:        1 bytes
 12235 ;; Hardware stack levels used: 1
 12236 ;; Hardware stack levels required when called: 7
 12237 ;; This function calls:
 12238 ;;		Nothing
 12239 ;; This function is called by:
 12240 ;;		_ProcessMsg
 12241 ;; This function uses a non-reentrant model
 12242 ;;
 12243                           
 12244  0000'                    _KAPS_getStatus:	
 12245                           ;psect for function _KAPS_getStatus
 12246                           
 12247                           
 12248                           ;incstack = 0
 12249                           ; Regs used in _KAPS_getStatus: [wreg]
 12250  0000' 0008               	return
 12251  0001'                    __end_of_KAPS_getStatus:
 12252                           
 12253                           	psect	text53
 12254  0000'                    __ptext53:	
 12255 ;; *************** function _KAPS_getPos *****************
 12256 ;; Defined at:
 12257 ;;		line 407 in file "main.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;  kaps            1    wreg     PTR struct .
 12260 ;;		 -> kaps(7), 
 12261 ;; Auto vars:     Size  Location     Type
 12262 ;;  kaps            1    0[BANK0 ] PTR struct .
 12263 ;;		 -> kaps(7), 
 12264 ;; Return value:  Size  Location     Type
 12265 ;;                  1    wreg      void 
 12266 ;; Registers used:
 12267 ;;		wreg
 12268 ;; Tracked objects:
 12269 ;;		On entry : 1F/1
 12270 ;;		On exit  : 1F/1
 12271 ;;		Unchanged: 1F/0
 12272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12273 ;;      Params:         0       0       0       0       0       0       0       0
 12274 ;;      Locals:         0       1       0       0       0       0       0       0
 12275 ;;      Temps:          0       0       0       0       0       0       0       0
 12276 ;;      Totals:         0       1       0       0       0       0       0       0
 12277 ;;Total ram usage:        1 bytes
 12278 ;; Hardware stack levels used: 1
 12279 ;; Hardware stack levels required when called: 7
 12280 ;; This function calls:
 12281 ;;		Nothing
 12282 ;; This function is called by:
 12283 ;;		_ProcessMsg
 12284 ;; This function uses a non-reentrant model
 12285 ;;
 12286                           
 12287  0000'                    _KAPS_getPos:	
 12288                           ;psect for function _KAPS_getPos
 12289                           
 12290                           
 12291                           ;incstack = 0
 12292                           ; Regs used in _KAPS_getPos: [wreg]
 12293  0000' 0008               	return
 12294  0001'                    __end_of_KAPS_getPos:
 12295                           
 12296                           	psect	text54
 12297  0000'                    __ptext54:	
 12298 ;; *************** function _KAPS_getIndex *****************
 12299 ;; Defined at:
 12300 ;;		line 399 in file "main.c"
 12301 ;; Parameters:    Size  Location     Type
 12302 ;;  kaps            1    wreg     PTR struct .
 12303 ;;		 -> kaps(7), 
 12304 ;; Auto vars:     Size  Location     Type
 12305 ;;  kaps            1    0[BANK0 ] PTR struct .
 12306 ;;		 -> kaps(7), 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  1    wreg      void 
 12309 ;; Registers used:
 12310 ;;		wreg
 12311 ;; Tracked objects:
 12312 ;;		On entry : 1F/1
 12313 ;;		On exit  : 1F/1
 12314 ;;		Unchanged: 1F/0
 12315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12316 ;;      Params:         0       0       0       0       0       0       0       0
 12317 ;;      Locals:         0       1       0       0       0       0       0       0
 12318 ;;      Temps:          0       0       0       0       0       0       0       0
 12319 ;;      Totals:         0       1       0       0       0       0       0       0
 12320 ;;Total ram usage:        1 bytes
 12321 ;; Hardware stack levels used: 1
 12322 ;; Hardware stack levels required when called: 7
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		_ProcessMsg
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330  0000'                    _KAPS_getIndex:	
 12331                           ;psect for function _KAPS_getIndex
 12332                           
 12333                           
 12334                           ;incstack = 0
 12335                           ; Regs used in _KAPS_getIndex: [wreg]
 12336  0000' 0008               	return
 12337  0001'                    __end_of_KAPS_getIndex:
 12338                           
 12339                           	psect	text55
 12340  0000'                    __ptext55:	
 12341 ;; *************** function _KAPS_StorePos *****************
 12342 ;; Defined at:
 12343 ;;		line 381 in file "main.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;  kaps            1    wreg     PTR struct .
 12346 ;;		 -> kaps(7), 
 12347 ;;  idx             1   13[BANK0 ] unsigned char 
 12348 ;;  pos             4   14[BANK0 ] unsigned long 
 12349 ;; Auto vars:     Size  Location     Type
 12350 ;;  kaps            1   18[BANK0 ] PTR struct .
 12351 ;;		 -> kaps(7), 
 12352 ;; Return value:  Size  Location     Type
 12353 ;;                  1    wreg      void 
 12354 ;; Registers used:
 12355 ;;		wreg
 12356 ;; Tracked objects:
 12357 ;;		On entry : 1F/0
 12358 ;;		On exit  : 1F/0
 12359 ;;		Unchanged: 1F/0
 12360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12361 ;;      Params:         0       5       0       0       0       0       0       0
 12362 ;;      Locals:         0       1       0       0       0       0       0       0
 12363 ;;      Temps:          0       0       0       0       0       0       0       0
 12364 ;;      Totals:         0       6       0       0       0       0       0       0
 12365 ;;Total ram usage:        6 bytes
 12366 ;; Hardware stack levels used: 1
 12367 ;; Hardware stack levels required when called: 7
 12368 ;; This function calls:
 12369 ;;		Nothing
 12370 ;; This function is called by:
 12371 ;;		_ProcessMsg
 12372 ;; This function uses a non-reentrant model
 12373 ;;
 12374                           
 12375  0000'                    _KAPS_StorePos:	
 12376                           ;psect for function _KAPS_StorePos
 12377                           
 12378                           
 12379                           ;incstack = 0
 12380                           ; Regs used in _KAPS_StorePos: [wreg]
 12381  0000' 0008               	return
 12382  0001'                    __end_of_KAPS_StorePos:
 12383                           
 12384                           	psect	text56
 12385  0000'                    __ptext56:	
 12386 ;; *************** function _KAPS_GoToIdx *****************
 12387 ;; Defined at:
 12388 ;;		line 347 in file "main.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;  kaps            1    wreg     PTR struct .
 12391 ;;		 -> kaps(7), 
 12392 ;;  idx             1    0[BANK0 ] unsigned char 
 12393 ;; Auto vars:     Size  Location     Type
 12394 ;;  kaps            1    1[BANK0 ] PTR struct .
 12395 ;;		 -> kaps(7), 
 12396 ;; Return value:  Size  Location     Type
 12397 ;;                  1    wreg      void 
 12398 ;; Registers used:
 12399 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12400 ;; Tracked objects:
 12401 ;;		On entry : 1F/0
 12402 ;;		On exit  : 1F/0
 12403 ;;		Unchanged: 0/0
 12404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12405 ;;      Params:         0       1       0       0       0       0       0       0
 12406 ;;      Locals:         0       1       0       0       0       0       0       0
 12407 ;;      Temps:          0       0       0       0       0       0       0       0
 12408 ;;      Totals:         0       2       0       0       0       0       0       0
 12409 ;;Total ram usage:        2 bytes
 12410 ;; Hardware stack levels used: 1
 12411 ;; Hardware stack levels required when called: 7
 12412 ;; This function calls:
 12413 ;;		Nothing
 12414 ;; This function is called by:
 12415 ;;		_ProcessMsg
 12416 ;; This function uses a non-reentrant model
 12417 ;;
 12418                           
 12419  0000'                    _KAPS_GoToIdx:	
 12420                           ;psect for function _KAPS_GoToIdx
 12421                           
 12422                           
 12423                           ;incstack = 0
 12424                           ; Regs used in _KAPS_GoToIdx: [wreg+fsr1l+fsr1h+status,2+status,0]
 12425                           ;KAPS_GoToIdx@kaps stored from wreg
 12426  0000' 0081'              	movwf	KAPS_GoToIdx@kaps
 12427                           
 12428                           ;main.c: 350:     kaps->m_bIdxPos = idx;
 12429  0001' 0801'              	movf	KAPS_GoToIdx@kaps,w
 12430  0002' 3E06               	addlw	6
 12431  0003' 0086               	movwf	6
 12432  0004' 0187               	clrf	7
 12433  0005' 0800'              	movf	KAPS_GoToIdx@idx,w
 12434  0006' 0081               	movwf	1
 12435  0007' 0008               	return
 12436  0008'                    __end_of_KAPS_GoToIdx:
 12437                           
 12438                           	psect	text57
 12439  0000'                    __ptext57:	
 12440 ;; *************** function _EUSART_Read *****************
 12441 ;; Defined at:
 12442 ;;		line 213 in file "mcc_generated_files/uart/src/eusart.c"
 12443 ;; Parameters:    Size  Location     Type
 12444 ;;		None
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;		None
 12447 ;; Return value:  Size  Location     Type
 12448 ;;                  1    wreg      unsigned char 
 12449 ;; Registers used:
 12450 ;;		wreg, status,2, status,0, pclath, cstack
 12451 ;; Tracked objects:
 12452 ;;		On entry : 1F/0
 12453 ;;		On exit  : 1F/3
 12454 ;;		Unchanged: 0/0
 12455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12456 ;;      Params:         0       0       0       0       0       0       0       0
 12457 ;;      Locals:         0       0       0       0       0       0       0       0
 12458 ;;      Temps:          0       0       0       0       0       0       0       0
 12459 ;;      Totals:         0       0       0       0       0       0       0       0
 12460 ;;Total ram usage:        0 bytes
 12461 ;; Hardware stack levels used: 1
 12462 ;; Hardware stack levels required when called: 8
 12463 ;; This function calls:
 12464 ;;		NULL
 12465 ;;		_EUSART_DefaultFramingErrorCallback
 12466 ;;		_EUSART_DefaultOverrunErrorCallback
 12467 ;; This function is called by:
 12468 ;;		_main
 12469 ;; This function uses a non-reentrant model
 12470 ;;
 12471                           
 12472  0000'                    _EUSART_Read:	
 12473                           ;psect for function _EUSART_Read
 12474                           
 12475                           
 12476                           ;mcc_generated_files/uart/src/eusart.c: 215:     eusartRxLastError.status = 0;
 12477                           
 12478                           ;incstack = 0
 12479                           ; Regs used in _EUSART_Read: [wreg+status,2+status,0+pclath+cstack]
 12480  0000' 0021               	movlb	1	; select bank1
 12481  0001' 0180'              	clrf	_eusartRxLastError^(0+128)	;volatile
 12482  0002' 0180'              	clrf	(_eusartRxLastError+1)^(0+128)	;volatile
 12483                           
 12484                           ;mcc_generated_files/uart/src/eusart.c: 216:     if(1 == RC1STAbits.OERR)
 12485  0003' 0023               	movlb	3	; select bank3
 12486  0004' 1C9D               	btfss	29,1	;volatile
 12487  0005' 2800'              	goto	l5281
 12488                           
 12489                           ;mcc_generated_files/uart/src/eusart.c: 217:     {;mcc_generated_files/uart/src/eusart.c
      +                          : 218:         eusartRxLastError.oerr = 1;
 12490  0006' 0021               	movlb	1	; select bank1
 12491  0007' 1500'              	bsf	_eusartRxLastError^(0+128),2	;volatile
 12492                           
 12493                           ;mcc_generated_files/uart/src/eusart.c: 219:         if(((void*)0) != EUSART_OverrunErro
      +                          rHandler)
 12494  0008' 0800'              	movf	_EUSART_OverrunErrorHandler,w
 12495  0009' 0401'              	iorwf	_EUSART_OverrunErrorHandler+1,w
 12496  000A' 1903               	btfsc	3,2
 12497  000B' 2800'              	goto	l5281
 12498                           
 12499                           ;mcc_generated_files/uart/src/eusart.c: 220:         {;mcc_generated_files/uart/src/eusa
      +                          rt.c: 221:             EUSART_OverrunErrorHandler();
 12500  000C' 0801'              	movf	_EUSART_OverrunErrorHandler+1,w
 12501  000D' 008A               	movwf	10
 12502  000E' 0800'              	movf	_EUSART_OverrunErrorHandler,w
 12503  000F' 000A               	callw
 12504  0010' 3180'              	pagesel	$
 12505  0011'                    l5281:
 12506                           
 12507                           ;mcc_generated_files/uart/src/eusart.c: 224:     if(1 == RC1STAbits.FERR)
 12508  0011' 0023               	movlb	3	; select bank3
 12509  0012' 1D1D               	btfss	29,2	;volatile
 12510  0013' 2800'              	goto	l5289
 12511                           
 12512                           ;mcc_generated_files/uart/src/eusart.c: 225:     {;mcc_generated_files/uart/src/eusart.c
      +                          : 226:         eusartRxLastError.ferr = 1;
 12513  0014' 0021               	movlb	1	; select bank1
 12514  0015' 1480'              	bsf	_eusartRxLastError^(0+128),1	;volatile
 12515                           
 12516                           ;mcc_generated_files/uart/src/eusart.c: 227:         if(((void*)0) != EUSART_FramingErro
      +                          rHandler)
 12517  0016' 0802'              	movf	_EUSART_FramingErrorHandler,w
 12518  0017' 0403'              	iorwf	_EUSART_FramingErrorHandler+1,w
 12519  0018' 1903               	btfsc	3,2
 12520  0019' 2800'              	goto	l5289
 12521                           
 12522                           ;mcc_generated_files/uart/src/eusart.c: 228:         {;mcc_generated_files/uart/src/eusa
      +                          rt.c: 229:             EUSART_FramingErrorHandler();
 12523  001A' 0803'              	movf	_EUSART_FramingErrorHandler+1,w
 12524  001B' 008A               	movwf	10
 12525  001C' 0802'              	movf	_EUSART_FramingErrorHandler,w
 12526  001D' 000A               	callw
 12527  001E' 3180'              	pagesel	$
 12528  001F'                    l5289:
 12529                           
 12530                           ;mcc_generated_files/uart/src/eusart.c: 232:     return RC1REG;
 12531  001F' 0023               	movlb	3	; select bank3
 12532  0020' 0819               	movf	25,w	;volatile
 12533  0021' 0008               	return
 12534  0022'                    __end_of_EUSART_Read:
 12535                           
 12536                           	psect	text58
 12537  0000'                    __ptext58:	
 12538 ;; *************** function _EUSART_DefaultOverrunErrorCallback *****************
 12539 ;; Defined at:
 12540 ;;		line 245 in file "mcc_generated_files/uart/src/eusart.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;		None
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;		None
 12545 ;; Return value:  Size  Location     Type
 12546 ;;                  1    wreg      void 
 12547 ;; Registers used:
 12548 ;;		None
 12549 ;; Tracked objects:
 12550 ;;		On entry : 1F/1
 12551 ;;		On exit  : 1F/3
 12552 ;;		Unchanged: 0/0
 12553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12554 ;;      Params:         0       0       0       0       0       0       0       0
 12555 ;;      Locals:         0       0       0       0       0       0       0       0
 12556 ;;      Temps:          0       0       0       0       0       0       0       0
 12557 ;;      Totals:         0       0       0       0       0       0       0       0
 12558 ;;Total ram usage:        0 bytes
 12559 ;; Hardware stack levels used: 1
 12560 ;; Hardware stack levels required when called: 7
 12561 ;; This function calls:
 12562 ;;		Nothing
 12563 ;; This function is called by:
 12564 ;;		_EUSART_Initialize
 12565 ;;		_EUSART_Read
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569  0000'                    _EUSART_DefaultOverrunErrorCallback:	
 12570                           ;psect for function _EUSART_DefaultOverrunErrorCallback
 12571                           
 12572                           
 12573                           ;mcc_generated_files/uart/src/eusart.c: 248:     RC1STAbits.CREN = 0;
 12574                           
 12575                           ;incstack = 0
 12576                           ; Regs used in _EUSART_DefaultOverrunErrorCallback: []
 12577  0000' 0023               	movlb	3	; select bank3
 12578  0001' 121D               	bcf	29,4	;volatile
 12579                           
 12580                           ;mcc_generated_files/uart/src/eusart.c: 249:     RC1STAbits.CREN = 1;
 12581  0002' 161D               	bsf	29,4	;volatile
 12582  0003' 0008               	return
 12583  0004'                    __end_of_EUSART_DefaultOverrunErrorCallback:
 12584                           
 12585                           	psect	text59
 12586  0000'                    __ptext59:	
 12587 ;; *************** function _EUSART_DefaultFramingErrorCallback *****************
 12588 ;; Defined at:
 12589 ;;		line 240 in file "mcc_generated_files/uart/src/eusart.c"
 12590 ;; Parameters:    Size  Location     Type
 12591 ;;		None
 12592 ;; Auto vars:     Size  Location     Type
 12593 ;;		None
 12594 ;; Return value:  Size  Location     Type
 12595 ;;                  1    wreg      void 
 12596 ;; Registers used:
 12597 ;;		None
 12598 ;; Tracked objects:
 12599 ;;		On entry : 1F/1
 12600 ;;		On exit  : 1F/1
 12601 ;;		Unchanged: 1F/0
 12602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12603 ;;      Params:         0       0       0       0       0       0       0       0
 12604 ;;      Locals:         0       0       0       0       0       0       0       0
 12605 ;;      Temps:          0       0       0       0       0       0       0       0
 12606 ;;      Totals:         0       0       0       0       0       0       0       0
 12607 ;;Total ram usage:        0 bytes
 12608 ;; Hardware stack levels used: 1
 12609 ;; Hardware stack levels required when called: 7
 12610 ;; This function calls:
 12611 ;;		Nothing
 12612 ;; This function is called by:
 12613 ;;		_EUSART_Initialize
 12614 ;;		_EUSART_Read
 12615 ;; This function uses a non-reentrant model
 12616 ;;
 12617                           
 12618  0000'                    _EUSART_DefaultFramingErrorCallback:	
 12619                           ;psect for function _EUSART_DefaultFramingErrorCallback
 12620                           
 12621                           
 12622                           ;incstack = 0
 12623                           ; Regs used in _EUSART_DefaultFramingErrorCallback: []
 12624  0000' 0008               	return
 12625  0001'                    __end_of_EUSART_DefaultFramingErrorCallback:
 12626                           
 12627                           	psect	text60
 12628  0000'                    __ptext60:	
 12629 ;; *************** function _EUSART_IsRxReady *****************
 12630 ;; Defined at:
 12631 ;;		line 193 in file "mcc_generated_files/uart/src/eusart.c"
 12632 ;; Parameters:    Size  Location     Type
 12633 ;;		None
 12634 ;; Auto vars:     Size  Location     Type
 12635 ;;		None
 12636 ;; Return value:  Size  Location     Type
 12637 ;;                  1    wreg      _Bool 
 12638 ;; Registers used:
 12639 ;;		wreg, status,2, status,0
 12640 ;; Tracked objects:
 12641 ;;		On entry : 1C/1
 12642 ;;		On exit  : 1F/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12645 ;;      Params:         0       0       0       0       0       0       0       0
 12646 ;;      Locals:         0       0       0       0       0       0       0       0
 12647 ;;      Temps:          0       0       0       0       0       0       0       0
 12648 ;;      Totals:         0       0       0       0       0       0       0       0
 12649 ;;Total ram usage:        0 bytes
 12650 ;; Hardware stack levels used: 1
 12651 ;; Hardware stack levels required when called: 7
 12652 ;; This function calls:
 12653 ;;		Nothing
 12654 ;; This function is called by:
 12655 ;;		_main
 12656 ;; This function uses a non-reentrant model
 12657 ;;
 12658                           
 12659  0000'                    _EUSART_IsRxReady:	
 12660                           ;psect for function _EUSART_IsRxReady
 12661                           
 12662                           
 12663                           ;mcc_generated_files/uart/src/eusart.c: 195:     return (_Bool)(PIR1bits.RCIF);
 12664                           
 12665                           ;incstack = 0
 12666                           ; Regs used in _EUSART_IsRxReady: [wreg+status,2+status,0]
 12667  0000' 0020               	movlb	0	; select bank0
 12668  0001' 0E10               	swapf	16,w	;volatile
 12669  0002' 0C89               	rrf	9,f
 12670  0003' 3901               	andlw	1
 12671  0004' 0008               	return
 12672  0005'                    __end_of_EUSART_IsRxReady:
 12673                           
 12674                           	psect	intentry
 12675  0000'                    __pintentry:	
 12676 ;; *************** function _INTERRUPT_InterruptManager *****************
 12677 ;; Defined at:
 12678 ;;		line 59 in file "mcc_generated_files/system/src/interrupt.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;		None
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;		None
 12683 ;; Return value:  Size  Location     Type
 12684 ;;                  1    wreg      void 
 12685 ;; Registers used:
 12686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12692 ;;      Params:         0       0       0       0       0       0       0       0
 12693 ;;      Locals:         0       0       0       0       0       0       0       0
 12694 ;;      Temps:          0       0       0       0       0       0       0       0
 12695 ;;      Totals:         0       0       0       0       0       0       0       0
 12696 ;;Total ram usage:        0 bytes
 12697 ;; Hardware stack levels used: 1
 12698 ;; Hardware stack levels required when called: 6
 12699 ;; This function calls:
 12700 ;;		_ADC_ISR
 12701 ;;		_I2C1_ERROR_ISR
 12702 ;;		_I2C1_ISR
 12703 ;; This function is called by:
 12704 ;;		Interrupt level 1
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708  0000'                    _INTERRUPT_InterruptManager:
 12709                           
 12710                           ;incstack = 0
 12711 ;; hardware stack exceeded
 12712  0000' 147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12713                           
 12714                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12715  0001' 3180'              	pagesel	$
 12716                           
 12717                           ;mcc_generated_files/system/src/interrupt.c: 62:     if(INTCONbits.PEIE == 1)
 12718  0002' 1F0B               	btfss	11,6	;volatile
 12719  0003' 2800'              	goto	i1l455
 12720                           
 12721                           ;mcc_generated_files/system/src/interrupt.c: 63:     {;mcc_generated_files/system/src/in
      +                          terrupt.c: 64:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 12722  0004' 0021               	movlb	1	; select bank1
 12723  0005' 1F10               	btfss	16,6	;volatile
 12724  0006' 2800'              	goto	i1l448
 12725  0007' 0020               	movlb	0	; select bank0
 12726  0008' 1F10               	btfss	16,6	;volatile
 12727  0009' 2800'              	goto	i1l448
 12728                           
 12729                           ;mcc_generated_files/system/src/interrupt.c: 65:         {;mcc_generated_files/system/sr
      +                          c/interrupt.c: 66:             ADC_ISR();
 12730  000A' 3180' 2000' 3180'  	fcall	_ADC_ISR
 12731                           
 12732                           ;mcc_generated_files/system/src/interrupt.c: 67:         }
 12733  000D' 2800'              	goto	i1l455
 12734  000E'                    i1l448:	
 12735                           ;mcc_generated_files/system/src/interrupt.c: 68:         else if(PIE2bits.BCL1IE == 1 &&
      +                           PIR2bits.BCL1IF == 1)
 12736                           
 12737  000E' 0021               	movlb	1	; select bank1
 12738  000F' 1D91               	btfss	17,3	;volatile
 12739  0010' 2800'              	goto	i1l450
 12740  0011' 0020               	movlb	0	; select bank0
 12741  0012' 1D91               	btfss	17,3	;volatile
 12742  0013' 2800'              	goto	i1l450
 12743                           
 12744                           ;mcc_generated_files/system/src/interrupt.c: 69:         {;mcc_generated_files/system/sr
      +                          c/interrupt.c: 70:             I2C1_ERROR_ISR();
 12745  0014' 3180' 2000' 3180'  	fcall	_I2C1_ERROR_ISR
 12746                           
 12747                           ;mcc_generated_files/system/src/interrupt.c: 71:         }
 12748  0017' 2800'              	goto	i1l455
 12749  0018'                    i1l450:	
 12750                           ;mcc_generated_files/system/src/interrupt.c: 72:         else if(PIE1bits.SSP1IE == 1 &&
      +                           PIR1bits.SSP1IF == 1)
 12751                           
 12752  0018' 0021               	movlb	1	; select bank1
 12753  0019' 1D90               	btfss	16,3	;volatile
 12754  001A' 2800'              	goto	i1l455
 12755  001B' 0020               	movlb	0	; select bank0
 12756  001C' 1D90               	btfss	16,3	;volatile
 12757  001D' 2800'              	goto	i1l455
 12758                           
 12759                           ;mcc_generated_files/system/src/interrupt.c: 73:         {;mcc_generated_files/system/sr
      +                          c/interrupt.c: 74:             I2C1_ISR();
 12760  001E' 3180' 2000'        	fcall	_I2C1_ISR
 12761  0020'                    i1l455:	
 12762                           ;mcc_generated_files/system/src/interrupt.c: 80:     }
 12763                           
 12764                           ;mcc_generated_files/system/src/interrupt.c: 75:         }
 12765                           
 12766  0020' 107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12767  0021' 0009               	retfie
 12768  0022'                    __end_of_INTERRUPT_InterruptManager:
 12769                           
 12770                           	psect	text62
 12771  0000'                    __ptext62:	
 12772 ;; *************** function _I2C1_ISR *****************
 12773 ;; Defined at:
 12774 ;;		line 219 in file "mcc_generated_files/i2c_host/src/mssp.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;		None
 12777 ;; Auto vars:     Size  Location     Type
 12778 ;;		None
 12779 ;; Return value:  Size  Location     Type
 12780 ;;                  1    wreg      void 
 12781 ;; Registers used:
 12782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12783 ;; Tracked objects:
 12784 ;;		On entry : 1F/0
 12785 ;;		On exit  : 1F/1
 12786 ;;		Unchanged: 0/0
 12787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12788 ;;      Params:         0       0       0       0       0       0       0       0
 12789 ;;      Locals:         0       0       0       0       0       0       0       0
 12790 ;;      Temps:          0       0       0       0       0       0       0       0
 12791 ;;      Totals:         0       0       0       0       0       0       0       0
 12792 ;;Total ram usage:        0 bytes
 12793 ;; Hardware stack levels used: 1
 12794 ;; Hardware stack levels required when called: 5
 12795 ;; This function calls:
 12796 ;;		_I2C1_EventHandler
 12797 ;; This function is called by:
 12798 ;;		_INTERRUPT_InterruptManager
 12799 ;; This function uses a non-reentrant model
 12800 ;;
 12801                           
 12802  0000'                    _I2C1_ISR:	
 12803                           ;psect for function _I2C1_ISR
 12804                           
 12805                           
 12806                           ;mcc_generated_files/i2c_host/src/mssp.c: 221:     I2C1_EventHandler();
 12807                           
 12808                           ;incstack = 0
 12809 ;; hardware stack exceeded
 12810                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12811  0000' 3180' 2000'        	fcall	_I2C1_EventHandler
 12812  0002' 0008               	return
 12813  0003'                    __end_of_I2C1_ISR:
 12814                           
 12815                           	psect	text63
 12816  0000'                    __ptext63:	
 12817 ;; *************** function _I2C1_EventHandler *****************
 12818 ;; Defined at:
 12819 ;;		line 256 in file "mcc_generated_files/i2c_host/src/mssp.c"
 12820 ;; Parameters:    Size  Location     Type
 12821 ;;		None
 12822 ;; Auto vars:     Size  Location     Type
 12823 ;;		None
 12824 ;; Return value:  Size  Location     Type
 12825 ;;                  1    wreg      void 
 12826 ;; Registers used:
 12827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12828 ;; Tracked objects:
 12829 ;;		On entry : 1F/0
 12830 ;;		On exit  : 1F/1
 12831 ;;		Unchanged: 0/0
 12832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12833 ;;      Params:         0       0       0       0       0       0       0       0
 12834 ;;      Locals:         0       0       0       0       0       0       0       0
 12835 ;;      Temps:          2       0       0       0       0       0       0       0
 12836 ;;      Totals:         2       0       0       0       0       0       0       0
 12837 ;;Total ram usage:        2 bytes
 12838 ;; Hardware stack levels used: 1
 12839 ;; Hardware stack levels required when called: 4
 12840 ;; This function calls:
 12841 ;;		_I2C1_EVENT_ERROR
 12842 ;;		_I2C1_EVENT_IDLE
 12843 ;;		_I2C1_EVENT_NACK
 12844 ;;		_I2C1_EVENT_RESET
 12845 ;;		_I2C1_EVENT_RX
 12846 ;;		_I2C1_EVENT_SEND_RD_ADDR
 12847 ;;		_I2C1_EVENT_SEND_WR_ADDR
 12848 ;;		_I2C1_EVENT_STOP
 12849 ;;		_I2C1_EVENT_TX
 12850 ;;		_I2C1_InterruptClear
 12851 ;;		_I2C1_IsAddr
 12852 ;;		_I2C1_IsData
 12853 ;;		_I2C1_IsNack
 12854 ;; This function is called by:
 12855 ;;		_I2C1_ISR
 12856 ;; This function uses a non-reentrant model
 12857 ;;
 12858                           
 12859  0000'                    _I2C1_EventHandler:	
 12860                           ;psect for function _I2C1_EventHandler
 12861                           
 12862                           
 12863                           ;mcc_generated_files/i2c_host/src/mssp.c: 258:     I2C1_InterruptClear();
 12864                           
 12865                           ;incstack = 0
 12866 ;; hardware stack exceeded
 12867                           ; Regs used in _I2C1_EventHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12868  0000' 3180' 2000' 3180'  	fcall	_I2C1_InterruptClear
 12869                           
 12870                           ;mcc_generated_files/i2c_host/src/mssp.c: 259:     if (I2C1_IsAddr() && I2C1_IsNack())
 12871  0003' 3180' 2000' 3180'  	fcall	_I2C1_IsAddr
 12872  0006' 3A00               	xorlw	0
 12873  0007' 1903               	skipnz
 12874  0008' 2800'              	goto	i1l4167
 12875  0009' 3180' 2000' 3180'  	fcall	_I2C1_IsNack
 12876  000C' 3A00               	xorlw	0
 12877  000D' 1903               	skipnz
 12878  000E' 2800'              	goto	i1l4167
 12879                           
 12880                           ;mcc_generated_files/i2c_host/src/mssp.c: 260:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 261:         i2c1Status.state = I2C_STATE_NACK;
 12881  000F' 3005               	movlw	5
 12882  0010' 0021               	movlb	1	; select bank1
 12883  0011' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 12884                           
 12885                           ;mcc_generated_files/i2c_host/src/mssp.c: 262:         i2c1Status.errorState = I2C_ERROR
      +                          _ADDR_NACK;
 12886  0012' 3001               	movlw	1
 12887  0013' 2800'              	goto	L6
 12888  0014'                    i1l4167:	
 12889                           ;mcc_generated_files/i2c_host/src/mssp.c: 263:     }
 12890                           
 12891  0014' 3180' 2000' 3180'  	fcall	_I2C1_IsData
 12892  0017' 3A00               	xorlw	0
 12893  0018' 1903               	skipnz
 12894  0019' 2800'              	goto	i1l4173
 12895  001A' 3180' 2000' 3180'  	fcall	_I2C1_IsNack
 12896  001D' 3A00               	xorlw	0
 12897  001E' 1903               	skipnz
 12898  001F' 2800'              	goto	i1l4173
 12899                           
 12900                           ;mcc_generated_files/i2c_host/src/mssp.c: 265:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 266:         i2c1Status.state = I2C_STATE_NACK;
 12901  0020' 3005               	movlw	5
 12902  0021' 0021               	movlb	1	; select bank1
 12903  0022' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 12904                           
 12905                           ;mcc_generated_files/i2c_host/src/mssp.c: 267:         i2c1Status.errorState = I2C_ERROR
      +                          _DATA_NACK;
 12906  0023' 3002               	movlw	2
 12907  0024'                    L6:
 12908  0024' 008C'              	movwf	(_i2c1Status^(0+128)+12)	;volatile
 12909  0025'                    i1l4173:
 12910                           
 12911                           ;mcc_generated_files/i2c_host/src/mssp.c: 269:     i2c1Status.state = i2c1_eventTable[i2
      +                          c1Status.state]();
 12912  0025' 0021               	movlb	1	; select bank1
 12913  0026' 080D'              	movf	(_i2c1Status^(0+128)+13),w	;volatile
 12914  0027' 0084'              	movwf	??_I2C1_EventHandler
 12915  0028' 0185'              	clrf	??_I2C1_EventHandler+1
 12916  0029' 3584'              	lslf	??_I2C1_EventHandler,f
 12917  002A' 0D85'              	rlf	??_I2C1_EventHandler+1,f
 12918  002B' 3000'              	movlw	low _i2c1_eventTable
 12919  002C' 0704'              	addwf	??_I2C1_EventHandler,w
 12920  002D' 0084               	movwf	4
 12921  002E' 3000'              	movlw	high _i2c1_eventTable
 12922  002F' 3D05'              	addwfc	??_I2C1_EventHandler+1,w
 12923  0030' 3880               	iorlw	128
 12924  0031' 0085               	movwf	5
 12925  0032' 3F01               	moviw [1]fsr0
 12926  0033' 008A               	movwf	10
 12927  0034' 3F00               	moviw [0]fsr0
 12928  0035' 000A               	callw
 12929  0036' 3180'              	pagesel	$
 12930  0037' 0021               	movlb	1	; select bank1
 12931  0038' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 12932  0039' 0008               	return
 12933  003A'                    __end_of_I2C1_EventHandler:
 12934                           
 12935                           	psect	text64
 12936  0000'                    __ptext64:	
 12937 ;; *************** function _I2C1_IsNack *****************
 12938 ;; Defined at:
 12939 ;;		line 447 in file "mcc_generated_files/i2c_host/src/mssp.c"
 12940 ;; Parameters:    Size  Location     Type
 12941 ;;		None
 12942 ;; Auto vars:     Size  Location     Type
 12943 ;;		None
 12944 ;; Return value:  Size  Location     Type
 12945 ;;                  1    wreg      _Bool 
 12946 ;; Registers used:
 12947 ;;		wreg, status,2, status,0
 12948 ;; Tracked objects:
 12949 ;;		On entry : 1F/4
 12950 ;;		On exit  : 1F/4
 12951 ;;		Unchanged: 0/0
 12952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12953 ;;      Params:         0       0       0       0       0       0       0       0
 12954 ;;      Locals:         0       0       0       0       0       0       0       0
 12955 ;;      Temps:          0       0       0       0       0       0       0       0
 12956 ;;      Totals:         0       0       0       0       0       0       0       0
 12957 ;;Total ram usage:        0 bytes
 12958 ;; Hardware stack levels used: 1
 12959 ;; This function calls:
 12960 ;;		Nothing
 12961 ;; This function is called by:
 12962 ;;		_I2C1_EventHandler
 12963 ;; This function uses a non-reentrant model
 12964 ;;
 12965                           
 12966  0000'                    _I2C1_IsNack:	
 12967                           ;psect for function _I2C1_IsNack
 12968                           
 12969                           
 12970                           ;mcc_generated_files/i2c_host/src/mssp.c: 449:     return SSP1CON2bits.ACKSTAT;
 12971                           
 12972                           ;incstack = 0
 12973                           ; Regs used in _I2C1_IsNack: [wreg+status,2+status,0]
 12974  0000' 0E16               	swapf	22,w	;volatile
 12975  0001' 0C89               	rrf	9,f
 12976  0002' 0C89               	rrf	9,f
 12977  0003' 3901               	andlw	1
 12978  0004' 0008               	return
 12979  0005'                    __end_of_I2C1_IsNack:
 12980                           
 12981                           	psect	text65
 12982  0000'                    __ptext65:	
 12983 ;; *************** function _I2C1_IsData *****************
 12984 ;; Defined at:
 12985 ;;		line 452 in file "mcc_generated_files/i2c_host/src/mssp.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;		None
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;		None
 12990 ;; Return value:  Size  Location     Type
 12991 ;;                  1    wreg      _Bool 
 12992 ;; Registers used:
 12993 ;;		wreg, status,2, status,0
 12994 ;; Tracked objects:
 12995 ;;		On entry : 1F/4
 12996 ;;		On exit  : 1F/4
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12999 ;;      Params:         0       0       0       0       0       0       0       0
 13000 ;;      Locals:         0       0       0       0       0       0       0       0
 13001 ;;      Temps:          0       0       0       0       0       0       0       0
 13002 ;;      Totals:         0       0       0       0       0       0       0       0
 13003 ;;Total ram usage:        0 bytes
 13004 ;; Hardware stack levels used: 1
 13005 ;; This function calls:
 13006 ;;		Nothing
 13007 ;; This function is called by:
 13008 ;;		_I2C1_EventHandler
 13009 ;; This function uses a non-reentrant model
 13010 ;;
 13011                           
 13012  0000'                    _I2C1_IsData:	
 13013                           ;psect for function _I2C1_IsData
 13014                           
 13015                           
 13016                           ;mcc_generated_files/i2c_host/src/mssp.c: 454:     return (SSP1STATbits.D_nA);
 13017                           
 13018                           ;incstack = 0
 13019                           ; Regs used in _I2C1_IsData: [wreg+status,2+status,0]
 13020  0000' 0E14               	swapf	20,w	;volatile
 13021  0001' 0C89               	rrf	9,f
 13022  0002' 3901               	andlw	1
 13023  0003' 0008               	return
 13024  0004'                    __end_of_I2C1_IsData:
 13025                           
 13026                           	psect	text66
 13027  0000'                    __ptext66:	
 13028 ;; *************** function _I2C1_IsAddr *****************
 13029 ;; Defined at:
 13030 ;;		line 457 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13031 ;; Parameters:    Size  Location     Type
 13032 ;;		None
 13033 ;; Auto vars:     Size  Location     Type
 13034 ;;		None
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  1    wreg      _Bool 
 13037 ;; Registers used:
 13038 ;;		wreg, status,0
 13039 ;; Tracked objects:
 13040 ;;		On entry : 1F/0
 13041 ;;		On exit  : 1F/4
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13044 ;;      Params:         0       0       0       0       0       0       0       0
 13045 ;;      Locals:         0       0       0       0       0       0       0       0
 13046 ;;      Temps:          0       0       0       0       0       0       0       0
 13047 ;;      Totals:         0       0       0       0       0       0       0       0
 13048 ;;Total ram usage:        0 bytes
 13049 ;; Hardware stack levels used: 1
 13050 ;; This function calls:
 13051 ;;		Nothing
 13052 ;; This function is called by:
 13053 ;;		_I2C1_EventHandler
 13054 ;; This function uses a non-reentrant model
 13055 ;;
 13056                           
 13057  0000'                    _I2C1_IsAddr:	
 13058                           ;psect for function _I2C1_IsAddr
 13059                           
 13060                           
 13061                           ;mcc_generated_files/i2c_host/src/mssp.c: 459:     return !(SSP1STATbits.D_nA);
 13062                           
 13063                           ;incstack = 0
 13064                           ; Regs used in _I2C1_IsAddr: [wreg+status,0]
 13065  0000' 1003               	clrc
 13066  0001' 0024               	movlb	4	; select bank4
 13067  0002' 1E94               	btfss	20,5	;volatile
 13068  0003' 1403               	setc
 13069  0004' 3000               	movlw	0
 13070  0005' 3D09               	addwfc	9,w
 13071  0006' 0008               	return
 13072  0007'                    __end_of_I2C1_IsAddr:
 13073                           
 13074                           	psect	text67
 13075  0000'                    __ptext67:	
 13076 ;; *************** function _I2C1_ERROR_ISR *****************
 13077 ;; Defined at:
 13078 ;;		line 224 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13079 ;; Parameters:    Size  Location     Type
 13080 ;;		None
 13081 ;; Auto vars:     Size  Location     Type
 13082 ;;		None
 13083 ;; Return value:  Size  Location     Type
 13084 ;;                  1    wreg      void 
 13085 ;; Registers used:
 13086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13087 ;; Tracked objects:
 13088 ;;		On entry : 1F/0
 13089 ;;		On exit  : 0/0
 13090 ;;		Unchanged: 0/0
 13091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13092 ;;      Params:         0       0       0       0       0       0       0       0
 13093 ;;      Locals:         0       0       0       0       0       0       0       0
 13094 ;;      Temps:          0       0       0       0       0       0       0       0
 13095 ;;      Totals:         0       0       0       0       0       0       0       0
 13096 ;;Total ram usage:        0 bytes
 13097 ;; Hardware stack levels used: 1
 13098 ;; Hardware stack levels required when called: 5
 13099 ;; This function calls:
 13100 ;;		_I2C1_ErrorEventHandler
 13101 ;; This function is called by:
 13102 ;;		_INTERRUPT_InterruptManager
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106  0000'                    _I2C1_ERROR_ISR:	
 13107                           ;psect for function _I2C1_ERROR_ISR
 13108                           
 13109                           
 13110                           ;mcc_generated_files/i2c_host/src/mssp.c: 226:     I2C1_ErrorEventHandler();
 13111                           
 13112                           ;incstack = 0
 13113 ;; hardware stack exceeded
 13114                           ; Regs used in _I2C1_ERROR_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13115  0000' 3180' 2000'        	fcall	_I2C1_ErrorEventHandler
 13116  0002' 0008               	return
 13117  0003'                    __end_of_I2C1_ERROR_ISR:
 13118                           
 13119                           	psect	text68
 13120  0000'                    __ptext68:	
 13121 ;; *************** function _I2C1_ErrorEventHandler *****************
 13122 ;; Defined at:
 13123 ;;		line 272 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13124 ;; Parameters:    Size  Location     Type
 13125 ;;		None
 13126 ;; Auto vars:     Size  Location     Type
 13127 ;;		None
 13128 ;; Return value:  Size  Location     Type
 13129 ;;                  1    wreg      void 
 13130 ;; Registers used:
 13131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13132 ;; Tracked objects:
 13133 ;;		On entry : 1F/0
 13134 ;;		On exit  : 0/0
 13135 ;;		Unchanged: 0/0
 13136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13137 ;;      Params:         0       0       0       0       0       0       0       0
 13138 ;;      Locals:         0       0       0       0       0       0       0       0
 13139 ;;      Temps:          2       0       0       0       0       0       0       0
 13140 ;;      Totals:         2       0       0       0       0       0       0       0
 13141 ;;Total ram usage:        2 bytes
 13142 ;; Hardware stack levels used: 1
 13143 ;; Hardware stack levels required when called: 4
 13144 ;; This function calls:
 13145 ;;		NULL
 13146 ;;		_I2C1_DefaultCallback
 13147 ;;		_I2C1_EVENT_ERROR
 13148 ;;		_I2C1_EVENT_IDLE
 13149 ;;		_I2C1_EVENT_NACK
 13150 ;;		_I2C1_EVENT_RESET
 13151 ;;		_I2C1_EVENT_RX
 13152 ;;		_I2C1_EVENT_SEND_RD_ADDR
 13153 ;;		_I2C1_EVENT_SEND_WR_ADDR
 13154 ;;		_I2C1_EVENT_STOP
 13155 ;;		_I2C1_EVENT_TX
 13156 ;;		_I2C1_ErrorInterruptClear
 13157 ;; This function is called by:
 13158 ;;		_I2C1_ERROR_ISR
 13159 ;; This function uses a non-reentrant model
 13160 ;;
 13161                           
 13162  0000'                    _I2C1_ErrorEventHandler:	
 13163                           ;psect for function _I2C1_ErrorEventHandler
 13164                           
 13165                           
 13166                           ;mcc_generated_files/i2c_host/src/mssp.c: 274:     i2c1Status.state = I2C_STATE_ERROR;
 13167                           
 13168                           ;incstack = 0
 13169 ;; hardware stack exceeded
 13170                           ; Regs used in _I2C1_ErrorEventHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13171  0000' 3006               	movlw	6
 13172  0001' 0021               	movlb	1	; select bank1
 13173  0002' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 13174                           
 13175                           ;mcc_generated_files/i2c_host/src/mssp.c: 275:     i2c1Status.errorState = I2C_ERROR_BUS
      +                          _COLLISION;
 13176  0003' 3003               	movlw	3
 13177  0004' 008C'              	movwf	(_i2c1Status^(0+128)+12)	;volatile
 13178                           
 13179                           ;mcc_generated_files/i2c_host/src/mssp.c: 276:     I2C1_ErrorInterruptClear();
 13180  0005' 3180' 2000' 3180'  	fcall	_I2C1_ErrorInterruptClear
 13181                           
 13182                           ;mcc_generated_files/i2c_host/src/mssp.c: 277:     i2c1Status.state = i2c1_eventTable[i2
      +                          c1Status.state]();
 13183  0008' 0021               	movlb	1	; select bank1
 13184  0009' 080D'              	movf	(_i2c1Status^(0+128)+13),w	;volatile
 13185  000A' 0084'              	movwf	??_I2C1_ErrorEventHandler
 13186  000B' 0185'              	clrf	??_I2C1_ErrorEventHandler+1
 13187  000C' 3584'              	lslf	??_I2C1_ErrorEventHandler,f
 13188  000D' 0D85'              	rlf	??_I2C1_ErrorEventHandler+1,f
 13189  000E' 3000'              	movlw	low _i2c1_eventTable
 13190  000F' 0704'              	addwf	??_I2C1_ErrorEventHandler,w
 13191  0010' 0084               	movwf	4
 13192  0011' 3000'              	movlw	high _i2c1_eventTable
 13193  0012' 3D05'              	addwfc	??_I2C1_ErrorEventHandler+1,w
 13194  0013' 3880               	iorlw	128
 13195  0014' 0085               	movwf	5
 13196  0015' 3F01               	moviw [1]fsr0
 13197  0016' 008A               	movwf	10
 13198  0017' 3F00               	moviw [0]fsr0
 13199  0018' 000A               	callw
 13200  0019' 3180'              	pagesel	$
 13201  001A' 0021               	movlb	1	; select bank1
 13202  001B' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 13203                           
 13204                           ;mcc_generated_files/i2c_host/src/mssp.c: 278:     I2C1_Callback();
 13205  001C' 0800'              	movf	(_I2C1_Callback+1)^(0+128),w
 13206  001D' 008A               	movwf	10
 13207  001E' 0800'              	movf	_I2C1_Callback^(0+128),w
 13208  001F' 000A               	callw
 13209  0020' 3180'              	pagesel	$
 13210  0021' 0008               	return
 13211  0022'                    __end_of_I2C1_ErrorEventHandler:
 13212                           
 13213                           	psect	text69
 13214  0000'                    __ptext69:	
 13215 ;; *************** function _I2C1_EVENT_RESET *****************
 13216 ;; Defined at:
 13217 ;;		line 384 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;		None
 13220 ;; Auto vars:     Size  Location     Type
 13221 ;;		None
 13222 ;; Return value:  Size  Location     Type
 13223 ;;                  1    wreg      enum E9544
 13224 ;; Registers used:
 13225 ;;		wreg, status,2, status,0, pclath, cstack
 13226 ;; Tracked objects:
 13227 ;;		On entry : 1F/1
 13228 ;;		On exit  : 1F/1
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13231 ;;      Params:         0       0       0       0       0       0       0       0
 13232 ;;      Locals:         0       0       0       0       0       0       0       0
 13233 ;;      Temps:          0       0       0       0       0       0       0       0
 13234 ;;      Totals:         0       0       0       0       0       0       0       0
 13235 ;;Total ram usage:        0 bytes
 13236 ;; Hardware stack levels used: 1
 13237 ;; Hardware stack levels required when called: 1
 13238 ;; This function calls:
 13239 ;;		_I2C1_BusReset
 13240 ;; This function is called by:
 13241 ;;		_I2C1_EVENT_ERROR
 13242 ;;		_I2C1_EventHandler
 13243 ;;		_I2C1_ErrorEventHandler
 13244 ;; This function uses a non-reentrant model
 13245 ;;
 13246                           
 13247  0000'                    _I2C1_EVENT_RESET:	
 13248                           ;psect for function _I2C1_EVENT_RESET
 13249                           
 13250                           
 13251                           ;mcc_generated_files/i2c_host/src/mssp.c: 386:     I2C1_BusReset();
 13252                           
 13253                           ;incstack = 0
 13254                           ; Regs used in _I2C1_EVENT_RESET: [wreg+status,2+status,0+pclath+cstack]
 13255  0000' 3180' 2000'        	fcall	_I2C1_BusReset
 13256                           
 13257                           ;mcc_generated_files/i2c_host/src/mssp.c: 387:     i2c1Status.busy = 0;
 13258  0002' 0021               	movlb	1	; select bank1
 13259  0003' 0180'              	clrf	_i2c1Status^(0+128)	;volatile
 13260                           
 13261                           ;mcc_generated_files/i2c_host/src/mssp.c: 388:     return I2C_STATE_IDLE;
 13262  0004' 3000               	movlw	0
 13263  0005' 0008               	return
 13264  0006'                    __end_of_I2C1_EVENT_RESET:
 13265                           
 13266                           	psect	text70
 13267  0000'                    __ptext70:	
 13268 ;; *************** function _I2C1_EVENT_STOP *****************
 13269 ;; Defined at:
 13270 ;;		line 377 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13271 ;; Parameters:    Size  Location     Type
 13272 ;;		None
 13273 ;; Auto vars:     Size  Location     Type
 13274 ;;		None
 13275 ;; Return value:  Size  Location     Type
 13276 ;;                  1    wreg      enum E9544
 13277 ;; Registers used:
 13278 ;;		wreg, status,2, status,0, pclath, cstack
 13279 ;; Tracked objects:
 13280 ;;		On entry : 1F/1
 13281 ;;		On exit  : 1F/4
 13282 ;;		Unchanged: 0/0
 13283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13284 ;;      Params:         0       0       0       0       0       0       0       0
 13285 ;;      Locals:         0       0       0       0       0       0       0       0
 13286 ;;      Temps:          0       0       0       0       0       0       0       0
 13287 ;;      Totals:         0       0       0       0       0       0       0       0
 13288 ;;Total ram usage:        0 bytes
 13289 ;; Hardware stack levels used: 1
 13290 ;; Hardware stack levels required when called: 2
 13291 ;; This function calls:
 13292 ;;		_I2C1_Close
 13293 ;;		_I2C1_StopSend
 13294 ;; This function is called by:
 13295 ;;		_I2C1_EVENT_TX
 13296 ;;		_I2C1_EVENT_NACK
 13297 ;;		_I2C1_EventHandler
 13298 ;;		_I2C1_ErrorEventHandler
 13299 ;; This function uses a non-reentrant model
 13300 ;;
 13301                           
 13302  0000'                    _I2C1_EVENT_STOP:	
 13303                           ;psect for function _I2C1_EVENT_STOP
 13304                           
 13305                           
 13306                           ;mcc_generated_files/i2c_host/src/mssp.c: 379:     I2C1_StopSend();
 13307                           
 13308                           ;incstack = 0
 13309 ;; hardware stack exceeded
 13310                           ; Regs used in _I2C1_EVENT_STOP: [wreg+status,2+status,0+pclath+cstack]
 13311  0000' 3180' 2000' 3180'  	fcall	_I2C1_StopSend
 13312                           
 13313                           ;mcc_generated_files/i2c_host/src/mssp.c: 380:     I2C1_Close();
 13314  0003' 3180' 2000'        	fcall	_I2C1_Close
 13315                           
 13316                           ;mcc_generated_files/i2c_host/src/mssp.c: 381:     return I2C_STATE_IDLE;
 13317  0005' 3000               	movlw	0
 13318  0006' 0008               	return
 13319  0007'                    __end_of_I2C1_EVENT_STOP:
 13320                           
 13321                           	psect	text71
 13322  0000'                    __ptext71:	
 13323 ;; *************** function _I2C1_EVENT_ERROR *****************
 13324 ;; Defined at:
 13325 ;;		line 370 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13326 ;; Parameters:    Size  Location     Type
 13327 ;;		None
 13328 ;; Auto vars:     Size  Location     Type
 13329 ;;  retEventStat    1    0[COMMON] enum E9544
 13330 ;; Return value:  Size  Location     Type
 13331 ;;                  1    wreg      enum E9544
 13332 ;; Registers used:
 13333 ;;		wreg, status,2, status,0, pclath, cstack
 13334 ;; Tracked objects:
 13335 ;;		On entry : 1F/1
 13336 ;;		On exit  : 1F/1
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13339 ;;      Params:         0       0       0       0       0       0       0       0
 13340 ;;      Locals:         1       0       0       0       0       0       0       0
 13341 ;;      Temps:          0       0       0       0       0       0       0       0
 13342 ;;      Totals:         1       0       0       0       0       0       0       0
 13343 ;;Total ram usage:        1 bytes
 13344 ;; Hardware stack levels used: 1
 13345 ;; Hardware stack levels required when called: 2
 13346 ;; This function calls:
 13347 ;;		_I2C1_EVENT_RESET
 13348 ;; This function is called by:
 13349 ;;		_I2C1_EventHandler
 13350 ;;		_I2C1_ErrorEventHandler
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354  0000'                    _I2C1_EVENT_ERROR:	
 13355                           ;psect for function _I2C1_EVENT_ERROR
 13356                           
 13357                           
 13358                           ;mcc_generated_files/i2c_host/src/mssp.c: 373:     retEventState = I2C1_EVENT_RESET();
 13359                           
 13360                           ;incstack = 0
 13361                           ; Regs used in _I2C1_EVENT_ERROR: [wreg+status,2+status,0+pclath+cstack]
 13362  0000' 3180' 2000'        	fcall	_I2C1_EVENT_RESET
 13363  0002' 0080'              	movwf	I2C1_EVENT_ERROR@retEventState
 13364                           
 13365                           ;mcc_generated_files/i2c_host/src/mssp.c: 374:     return retEventState;
 13366  0003' 0800'              	movf	I2C1_EVENT_ERROR@retEventState,w
 13367  0004' 0008               	return
 13368  0005'                    __end_of_I2C1_EVENT_ERROR:
 13369                           
 13370                           	psect	text72
 13371  0000'                    __ptext72:	
 13372 ;; *************** function _I2C1_EVENT_NACK *****************
 13373 ;; Defined at:
 13374 ;;		line 363 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13375 ;; Parameters:    Size  Location     Type
 13376 ;;		None
 13377 ;; Auto vars:     Size  Location     Type
 13378 ;;  retEventStat    1    0[COMMON] enum E9544
 13379 ;; Return value:  Size  Location     Type
 13380 ;;                  1    wreg      enum E9544
 13381 ;; Registers used:
 13382 ;;		wreg, status,2, status,0, pclath, cstack
 13383 ;; Tracked objects:
 13384 ;;		On entry : 1F/1
 13385 ;;		On exit  : 1F/4
 13386 ;;		Unchanged: 0/0
 13387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13388 ;;      Params:         0       0       0       0       0       0       0       0
 13389 ;;      Locals:         1       0       0       0       0       0       0       0
 13390 ;;      Temps:          0       0       0       0       0       0       0       0
 13391 ;;      Totals:         1       0       0       0       0       0       0       0
 13392 ;;Total ram usage:        1 bytes
 13393 ;; Hardware stack levels used: 1
 13394 ;; Hardware stack levels required when called: 3
 13395 ;; This function calls:
 13396 ;;		_I2C1_EVENT_STOP
 13397 ;; This function is called by:
 13398 ;;		_I2C1_EventHandler
 13399 ;;		_I2C1_ErrorEventHandler
 13400 ;; This function uses a non-reentrant model
 13401 ;;
 13402                           
 13403  0000'                    _I2C1_EVENT_NACK:	
 13404                           ;psect for function _I2C1_EVENT_NACK
 13405                           
 13406                           
 13407                           ;mcc_generated_files/i2c_host/src/mssp.c: 366:     retEventState = I2C1_EVENT_STOP();
 13408                           
 13409                           ;incstack = 0
 13410 ;; hardware stack exceeded
 13411                           ; Regs used in _I2C1_EVENT_NACK: [wreg+status,2+status,0+pclath+cstack]
 13412  0000' 3180' 2000'        	fcall	_I2C1_EVENT_STOP
 13413  0002' 0080'              	movwf	I2C1_EVENT_NACK@retEventState
 13414                           
 13415                           ;mcc_generated_files/i2c_host/src/mssp.c: 367:     return retEventState;
 13416  0003' 0800'              	movf	I2C1_EVENT_NACK@retEventState,w
 13417  0004' 0008               	return
 13418  0005'                    __end_of_I2C1_EVENT_NACK:
 13419                           
 13420                           	psect	text73
 13421  0000'                    __ptext73:	
 13422 ;; *************** function _I2C1_EVENT_RX *****************
 13423 ;; Defined at:
 13424 ;;		line 331 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13425 ;; Parameters:    Size  Location     Type
 13426 ;;		None
 13427 ;; Auto vars:     Size  Location     Type
 13428 ;;  retEventStat    1    1[COMMON] enum E9544
 13429 ;; Return value:  Size  Location     Type
 13430 ;;                  1    wreg      enum E9544
 13431 ;; Registers used:
 13432 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13433 ;; Tracked objects:
 13434 ;;		On entry : 1F/1
 13435 ;;		On exit  : 1F/4
 13436 ;;		Unchanged: 0/0
 13437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13438 ;;      Params:         0       0       0       0       0       0       0       0
 13439 ;;      Locals:         1       0       0       0       0       0       0       0
 13440 ;;      Temps:          1       0       0       0       0       0       0       0
 13441 ;;      Totals:         2       0       0       0       0       0       0       0
 13442 ;;Total ram usage:        2 bytes
 13443 ;; Hardware stack levels used: 1
 13444 ;; Hardware stack levels required when called: 1
 13445 ;; This function calls:
 13446 ;;		_I2C1_AckSend
 13447 ;;		_I2C1_DataReceive
 13448 ;;		_I2C1_IsRxBufFull
 13449 ;;		_I2C1_NackSend
 13450 ;;		_I2C1_ReceiveEnable
 13451 ;;		_I2C1_RestartDisable
 13452 ;; This function is called by:
 13453 ;;		_I2C1_EventHandler
 13454 ;;		_I2C1_ErrorEventHandler
 13455 ;; This function uses a non-reentrant model
 13456 ;;
 13457                           
 13458  0000'                    _I2C1_EVENT_RX:	
 13459                           ;psect for function _I2C1_EVENT_RX
 13460                           
 13461                           
 13462                           ;mcc_generated_files/i2c_host/src/mssp.c: 333:     i2c_host_event_states_t retEventState
      +                           = I2C_STATE_RX;
 13463                           
 13464                           ;incstack = 0
 13465                           ; Regs used in _I2C1_EVENT_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13466  0000' 3004               	movlw	4
 13467  0001' 0081'              	movwf	I2C1_EVENT_RX@retEventState
 13468                           
 13469                           ;mcc_generated_files/i2c_host/src/mssp.c: 335:     if (I2C1_IsRxBufFull())
 13470  0002' 3180' 2000' 3180'  	fcall	_I2C1_IsRxBufFull
 13471  0005' 3A00               	xorlw	0
 13472  0006' 1903               	skipnz
 13473  0007' 2800'              	goto	i1l3991
 13474                           
 13475                           ;mcc_generated_files/i2c_host/src/mssp.c: 336:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 337:         if (i2c1Status.readLength > 0)
 13476  0008' 0021               	movlb	1	; select bank1
 13477  0009' 0809'              	movf	(_i2c1Status^(0+128)+9),w	;volatile
 13478  000A' 0409'              	iorwf	((_i2c1Status+1)^(0+128)+9),w	;volatile
 13479  000B' 1903               	btfsc	3,2
 13480  000C' 2800'              	goto	i1l3983
 13481                           
 13482                           ;mcc_generated_files/i2c_host/src/mssp.c: 338:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 339:             *i2c1Status.readPtr++ = I2C1_DataReceive();
 13483  000D' 3180' 2000' 3180'  	fcall	_I2C1_DataReceive
 13484  0010' 0080'              	movwf	??_I2C1_EVENT_RX
 13485  0011' 3007               	movlw	7
 13486  0012' 3E00'              	addlw	(low (_i2c1Status| 0))& (0+255)
 13487  0013' 0086               	movwf	6
 13488  0014' 0187               	clrf	7
 13489  0015' 3F40               	moviw [0]fsr1
 13490  0016' 0084               	movwf	4
 13491  0017' 3F41               	moviw [1]fsr1
 13492  0018' 0085               	movwf	5
 13493  0019' 0800'              	movf	??_I2C1_EVENT_RX,w
 13494  001A' 0080               	movwf	0
 13495  001B' 3001               	movlw	1
 13496  001C' 0021               	movlb	1	; select bank1
 13497  001D' 0780'              	addwf	(low ((_i2c1Status| 0+7)))^(0+128),f	;volatile
 13498  001E' 3000               	movlw	0
 13499  001F' 3D80'              	addwfc	((low ((_i2c1Status| 0+7))+1))^(0+128),f	;volatile
 13500                           
 13501                           ;mcc_generated_files/i2c_host/src/mssp.c: 340:             i2c1Status.readLength--;
 13502  0020' 3001               	movlw	1
 13503  0021' 0289'              	subwf	(_i2c1Status^(0+128)+9),f	;volatile
 13504  0022' 3000               	movlw	0
 13505  0023' 3B89'              	subwfb	((_i2c1Status+1)^(0+128)+9),f	;volatile
 13506  0024'                    i1l3983:
 13507                           
 13508                           ;mcc_generated_files/i2c_host/src/mssp.c: 344:         if (i2c1Status.readLength > 0)
 13509  0024' 0809'              	movf	(_i2c1Status^(0+128)+9),w	;volatile
 13510  0025' 0409'              	iorwf	((_i2c1Status+1)^(0+128)+9),w	;volatile
 13511  0026' 1903               	btfsc	3,2
 13512  0027' 2800'              	goto	i1l3987
 13513                           
 13514                           ;mcc_generated_files/i2c_host/src/mssp.c: 345:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 346:             I2C1_AckSend();
 13515  0028' 3180' 2000' 3180'  	fcall	_I2C1_AckSend
 13516                           
 13517                           ;mcc_generated_files/i2c_host/src/mssp.c: 347:         }
 13518  002B' 2800'              	goto	i1l3993
 13519  002C'                    i1l3987:
 13520                           
 13521                           ;mcc_generated_files/i2c_host/src/mssp.c: 349:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 350:             I2C1_RestartDisable();
 13522  002C' 3180' 2000' 3180'  	fcall	_I2C1_RestartDisable
 13523                           
 13524                           ;mcc_generated_files/i2c_host/src/mssp.c: 351:             I2C1_NackSend();
 13525  002F' 3180' 2000' 3180'  	fcall	_I2C1_NackSend
 13526                           
 13527                           ;mcc_generated_files/i2c_host/src/mssp.c: 352:             retEventState = I2C_STATE_STO
      +                          P;
 13528  0032' 3007               	movlw	7
 13529  0033' 0081'              	movwf	I2C1_EVENT_RX@retEventState
 13530  0034' 2800'              	goto	i1l3993
 13531  0035'                    i1l3991:
 13532                           
 13533                           ;mcc_generated_files/i2c_host/src/mssp.c: 357:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 358:         I2C1_ReceiveEnable();
 13534  0035' 3180' 2000'        	fcall	_I2C1_ReceiveEnable
 13535  0037'                    i1l3993:
 13536                           
 13537                           ;mcc_generated_files/i2c_host/src/mssp.c: 360:     return retEventState;
 13538  0037' 0801'              	movf	I2C1_EVENT_RX@retEventState,w
 13539  0038' 0008               	return
 13540  0039'                    __end_of_I2C1_EVENT_RX:
 13541                           
 13542                           	psect	text74
 13543  0000'                    __ptext74:	
 13544 ;; *************** function _I2C1_EVENT_SEND_WR_ADDR *****************
 13545 ;; Defined at:
 13546 ;;		line 299 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13547 ;; Parameters:    Size  Location     Type
 13548 ;;		None
 13549 ;; Auto vars:     Size  Location     Type
 13550 ;;		None
 13551 ;; Return value:  Size  Location     Type
 13552 ;;                  1    wreg      enum E9544
 13553 ;; Registers used:
 13554 ;;		wreg, status,2, status,0, pclath, cstack
 13555 ;; Tracked objects:
 13556 ;;		On entry : 1F/1
 13557 ;;		On exit  : 1F/4
 13558 ;;		Unchanged: 0/0
 13559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13560 ;;      Params:         0       0       0       0       0       0       0       0
 13561 ;;      Locals:         0       0       0       0       0       0       0       0
 13562 ;;      Temps:          0       0       0       0       0       0       0       0
 13563 ;;      Totals:         0       0       0       0       0       0       0       0
 13564 ;;Total ram usage:        0 bytes
 13565 ;; Hardware stack levels used: 1
 13566 ;; Hardware stack levels required when called: 1
 13567 ;; This function calls:
 13568 ;;		_I2C1_DataTransmit
 13569 ;; This function is called by:
 13570 ;;		_I2C1_EventHandler
 13571 ;;		_I2C1_ErrorEventHandler
 13572 ;; This function uses a non-reentrant model
 13573 ;;
 13574                           
 13575  0000'                    _I2C1_EVENT_SEND_WR_ADDR:	
 13576                           ;psect for function _I2C1_EVENT_SEND_WR_ADDR
 13577                           
 13578                           
 13579                           ;mcc_generated_files/i2c_host/src/mssp.c: 301:     I2C1_DataTransmit((uint8_t) (i2c1Stat
      +                          us.address << 1));
 13580                           
 13581                           ;incstack = 0
 13582                           ; Regs used in _I2C1_EVENT_SEND_WR_ADDR: [wreg+status,2+status,0+pclath+cstack]
 13583  0000' 3501'              	lslf	(_i2c1Status^(0+128)+1),w	;volatile
 13584  0001' 3180' 2000'        	fcall	_I2C1_DataTransmit
 13585                           
 13586                           ;mcc_generated_files/i2c_host/src/mssp.c: 302:     return I2C_STATE_TX;
 13587  0003' 3003               	movlw	3
 13588  0004' 0008               	return
 13589  0005'                    __end_of_I2C1_EVENT_SEND_WR_ADDR:
 13590                           
 13591                           	psect	text75
 13592  0000'                    __ptext75:	
 13593 ;; *************** function _I2C1_EVENT_SEND_RD_ADDR *****************
 13594 ;; Defined at:
 13595 ;;		line 293 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13596 ;; Parameters:    Size  Location     Type
 13597 ;;		None
 13598 ;; Auto vars:     Size  Location     Type
 13599 ;;		None
 13600 ;; Return value:  Size  Location     Type
 13601 ;;                  1    wreg      enum E9544
 13602 ;; Registers used:
 13603 ;;		wreg, status,2, status,0, pclath, cstack
 13604 ;; Tracked objects:
 13605 ;;		On entry : 1F/1
 13606 ;;		On exit  : 1F/4
 13607 ;;		Unchanged: 0/0
 13608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13609 ;;      Params:         0       0       0       0       0       0       0       0
 13610 ;;      Locals:         0       0       0       0       0       0       0       0
 13611 ;;      Temps:          0       0       0       0       0       0       0       0
 13612 ;;      Totals:         0       0       0       0       0       0       0       0
 13613 ;;Total ram usage:        0 bytes
 13614 ;; Hardware stack levels used: 1
 13615 ;; Hardware stack levels required when called: 1
 13616 ;; This function calls:
 13617 ;;		_I2C1_DataTransmit
 13618 ;; This function is called by:
 13619 ;;		_I2C1_EventHandler
 13620 ;;		_I2C1_ErrorEventHandler
 13621 ;; This function uses a non-reentrant model
 13622 ;;
 13623                           
 13624  0000'                    _I2C1_EVENT_SEND_RD_ADDR:	
 13625                           ;psect for function _I2C1_EVENT_SEND_RD_ADDR
 13626                           
 13627                           
 13628                           ;mcc_generated_files/i2c_host/src/mssp.c: 295:     I2C1_DataTransmit((uint8_t) (i2c1Stat
      +                          us.address << 1 | 1));
 13629                           
 13630                           ;incstack = 0
 13631                           ; Regs used in _I2C1_EVENT_SEND_RD_ADDR: [wreg+status,2+status,0+pclath+cstack]
 13632  0000' 1403               	setc
 13633  0001' 0D01'              	rlf	(_i2c1Status^(0+128)+1),w	;volatile
 13634  0002' 3180' 2000'        	fcall	_I2C1_DataTransmit
 13635                           
 13636                           ;mcc_generated_files/i2c_host/src/mssp.c: 296:     return I2C_STATE_RX;
 13637  0004' 3004               	movlw	4
 13638  0005' 0008               	return
 13639  0006'                    __end_of_I2C1_EVENT_SEND_RD_ADDR:
 13640                           
 13641                           	psect	text76
 13642  0000'                    __ptext76:	
 13643 ;; *************** function _I2C1_EVENT_IDLE *****************
 13644 ;; Defined at:
 13645 ;;		line 287 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;		None
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;		None
 13650 ;; Return value:  Size  Location     Type
 13651 ;;                  1    wreg      enum E9544
 13652 ;; Registers used:
 13653 ;;		wreg, status,2
 13654 ;; Tracked objects:
 13655 ;;		On entry : 1F/1
 13656 ;;		On exit  : 1F/1
 13657 ;;		Unchanged: 0/0
 13658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13659 ;;      Params:         0       0       0       0       0       0       0       0
 13660 ;;      Locals:         0       0       0       0       0       0       0       0
 13661 ;;      Temps:          0       0       0       0       0       0       0       0
 13662 ;;      Totals:         0       0       0       0       0       0       0       0
 13663 ;;Total ram usage:        0 bytes
 13664 ;; Hardware stack levels used: 1
 13665 ;; This function calls:
 13666 ;;		Nothing
 13667 ;; This function is called by:
 13668 ;;		_I2C1_EventHandler
 13669 ;;		_I2C1_ErrorEventHandler
 13670 ;; This function uses a non-reentrant model
 13671 ;;
 13672                           
 13673  0000'                    _I2C1_EVENT_IDLE:	
 13674                           ;psect for function _I2C1_EVENT_IDLE
 13675                           
 13676                           
 13677                           ;mcc_generated_files/i2c_host/src/mssp.c: 289:     i2c1Status.busy = 0;
 13678                           
 13679                           ;incstack = 0
 13680                           ; Regs used in _I2C1_EVENT_IDLE: [wreg+status,2]
 13681  0000' 0180'              	clrf	_i2c1Status^(0+128)	;volatile
 13682                           
 13683                           ;mcc_generated_files/i2c_host/src/mssp.c: 290:     return I2C_STATE_RESET;
 13684  0001' 3008               	movlw	8
 13685  0002' 0008               	return
 13686  0003'                    __end_of_I2C1_EVENT_IDLE:
 13687                           
 13688                           	psect	text77
 13689  0000'                    __ptext77:	
 13690 ;; *************** function _I2C1_EVENT_TX *****************
 13691 ;; Defined at:
 13692 ;;		line 305 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13693 ;; Parameters:    Size  Location     Type
 13694 ;;		None
 13695 ;; Auto vars:     Size  Location     Type
 13696 ;;  retEventStat    1    3[COMMON] enum E9544
 13697 ;; Return value:  Size  Location     Type
 13698 ;;                  1    wreg      enum E9544
 13699 ;; Registers used:
 13700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13701 ;; Tracked objects:
 13702 ;;		On entry : 1F/1
 13703 ;;		On exit  : 1F/4
 13704 ;;		Unchanged: 0/0
 13705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13706 ;;      Params:         0       0       0       0       0       0       0       0
 13707 ;;      Locals:         1       0       0       0       0       0       0       0
 13708 ;;      Temps:          2       0       0       0       0       0       0       0
 13709 ;;      Totals:         3       0       0       0       0       0       0       0
 13710 ;;Total ram usage:        3 bytes
 13711 ;; Hardware stack levels used: 1
 13712 ;; Hardware stack levels required when called: 3
 13713 ;; This function calls:
 13714 ;;		_I2C1_DataTransmit
 13715 ;;		_I2C1_EVENT_STOP
 13716 ;;		_I2C1_RestartEnable
 13717 ;; This function is called by:
 13718 ;;		_I2C1_EventHandler
 13719 ;;		_I2C1_ErrorEventHandler
 13720 ;; This function uses a non-reentrant model
 13721 ;;
 13722                           
 13723  0000'                    _I2C1_EVENT_TX:	
 13724                           ;psect for function _I2C1_EVENT_TX
 13725                           
 13726                           
 13727                           ;mcc_generated_files/i2c_host/src/mssp.c: 308:     if (i2c1Status.writeLength)
 13728                           
 13729                           ;incstack = 0
 13730 ;; hardware stack exceeded
 13731                           ; Regs used in _I2C1_EVENT_TX: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13732  0000' 0805'              	movf	(_i2c1Status^(0+128)+5),w	;volatile
 13733  0001' 0405'              	iorwf	((_i2c1Status+1)^(0+128)+5),w	;volatile
 13734  0002' 1903               	btfsc	3,2
 13735  0003' 2800'              	goto	i1l3957
 13736                           
 13737                           ;mcc_generated_files/i2c_host/src/mssp.c: 309:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 310:         i2c1Status.writeLength--;
 13738  0004' 3001               	movlw	1
 13739  0005' 0285'              	subwf	(_i2c1Status^(0+128)+5),f	;volatile
 13740  0006' 3000               	movlw	0
 13741  0007' 3B85'              	subwfb	((_i2c1Status+1)^(0+128)+5),f	;volatile
 13742                           
 13743                           ;mcc_generated_files/i2c_host/src/mssp.c: 311:         I2C1_DataTransmit(*i2c1Status.wri
      +                          tePtr++);
 13744  0008' 0800'              	movf	((low ((_i2c1Status| 0+3))+1))^(0+128),w	;volatile
 13745  0009' 0082'              	movwf	??_I2C1_EVENT_TX+1
 13746  000A' 0800'              	movf	(low ((_i2c1Status| 0+3)))^(0+128),w	;volatile
 13747  000B' 0081'              	movwf	??_I2C1_EVENT_TX
 13748  000C' 0A80'              	incf	(low ((_i2c1Status| 0+3)))^(0+128),f	;volatile
 13749  000D' 1903               	skipnz
 13750  000E' 0A80'              	incf	((low ((_i2c1Status| 0+3))+1))^(0+128),f	;volatile
 13751  000F' 0801'              	movf	??_I2C1_EVENT_TX,w
 13752  0010' 0086               	movwf	6
 13753  0011' 0802'              	movf	??_I2C1_EVENT_TX+1,w
 13754  0012' 0087               	movwf	7
 13755  0013' 0801               	movf	1,w
 13756  0014' 3180' 2000' 3180'  	fcall	_I2C1_DataTransmit
 13757                           
 13758                           ;mcc_generated_files/i2c_host/src/mssp.c: 312:         retEventState = I2C_STATE_TX;
 13759  0017' 3003               	movlw	3
 13760  0018' 2800'              	goto	L7
 13761  0019'                    i1l3957:	
 13762                           ;mcc_generated_files/i2c_host/src/mssp.c: 313:     }
 13763                           
 13764                           
 13765                           ;mcc_generated_files/i2c_host/src/mssp.c: 315:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 316:         if (i2c1Status.switchToRead)
 13766  0019' 080B'              	movf	(_i2c1Status^(0+128)+11),w	;volatile
 13767  001A' 1903               	btfsc	3,2
 13768  001B' 2800'              	goto	i1l3965
 13769                           
 13770                           ;mcc_generated_files/i2c_host/src/mssp.c: 317:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 318:             i2c1Status.switchToRead = 0;
 13771  001C' 018B'              	clrf	(_i2c1Status^(0+128)+11)	;volatile
 13772                           
 13773                           ;mcc_generated_files/i2c_host/src/mssp.c: 319:             I2C1_RestartEnable();
 13774  001D' 3180' 2000' 3180'  	fcall	_I2C1_RestartEnable
 13775                           
 13776                           ;mcc_generated_files/i2c_host/src/mssp.c: 320:             retEventState = I2C_STATE_SEN
      +                          D_RD_ADDR;
 13777  0020' 0183'              	clrf	I2C1_EVENT_TX@retEventState
 13778  0021' 0A83'              	incf	I2C1_EVENT_TX@retEventState,f
 13779                           
 13780                           ;mcc_generated_files/i2c_host/src/mssp.c: 321:         }
 13781  0022' 2800'              	goto	i1l3967
 13782  0023'                    i1l3965:
 13783                           
 13784                           ;mcc_generated_files/i2c_host/src/mssp.c: 323:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 324:             retEventState = I2C1_EVENT_STOP();
 13785  0023' 3180' 2000'        	fcall	_I2C1_EVENT_STOP
 13786  0025'                    L7:
 13787  0025' 0083'              	movwf	I2C1_EVENT_TX@retEventState
 13788  0026'                    i1l3967:
 13789                           
 13790                           ;mcc_generated_files/i2c_host/src/mssp.c: 328:     return retEventState;
 13791  0026' 0803'              	movf	I2C1_EVENT_TX@retEventState,w
 13792  0027' 0008               	return
 13793  0028'                    __end_of_I2C1_EVENT_TX:
 13794                           
 13795                           	psect	text78
 13796  0000'                    __ptext78:	
 13797 ;; *************** function _I2C1_RestartEnable *****************
 13798 ;; Defined at:
 13799 ;;		line 415 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13800 ;; Parameters:    Size  Location     Type
 13801 ;;		None
 13802 ;; Auto vars:     Size  Location     Type
 13803 ;;		None
 13804 ;; Return value:  Size  Location     Type
 13805 ;;                  1    wreg      void 
 13806 ;; Registers used:
 13807 ;;		None
 13808 ;; Tracked objects:
 13809 ;;		On entry : 1F/1
 13810 ;;		On exit  : 1F/4
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13813 ;;      Params:         0       0       0       0       0       0       0       0
 13814 ;;      Locals:         0       0       0       0       0       0       0       0
 13815 ;;      Temps:          0       0       0       0       0       0       0       0
 13816 ;;      Totals:         0       0       0       0       0       0       0       0
 13817 ;;Total ram usage:        0 bytes
 13818 ;; Hardware stack levels used: 1
 13819 ;; This function calls:
 13820 ;;		Nothing
 13821 ;; This function is called by:
 13822 ;;		_I2C1_EVENT_TX
 13823 ;; This function uses a non-reentrant model
 13824 ;;
 13825                           
 13826  0000'                    _I2C1_RestartEnable:	
 13827                           ;psect for function _I2C1_RestartEnable
 13828                           
 13829                           
 13830                           ;mcc_generated_files/i2c_host/src/mssp.c: 417:     SSP1CON2bits.RSEN = 1;
 13831                           
 13832                           ;incstack = 0
 13833                           ; Regs used in _I2C1_RestartEnable: []
 13834  0000' 0024               	movlb	4	; select bank4
 13835  0001' 1496               	bsf	22,1	;volatile
 13836  0002' 0008               	return
 13837  0003'                    __end_of_I2C1_RestartEnable:
 13838                           
 13839                           	psect	text79
 13840  0000'                    __ptext79:	
 13841 ;; *************** function _I2C1_DataTransmit *****************
 13842 ;; Defined at:
 13843 ;;		line 399 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13844 ;; Parameters:    Size  Location     Type
 13845 ;;  data            1    wreg     unsigned char 
 13846 ;; Auto vars:     Size  Location     Type
 13847 ;;  data            1    0[COMMON] unsigned char 
 13848 ;; Return value:  Size  Location     Type
 13849 ;;                  1    wreg      void 
 13850 ;; Registers used:
 13851 ;;		wreg
 13852 ;; Tracked objects:
 13853 ;;		On entry : 1F/1
 13854 ;;		On exit  : 1F/4
 13855 ;;		Unchanged: 0/0
 13856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13857 ;;      Params:         0       0       0       0       0       0       0       0
 13858 ;;      Locals:         1       0       0       0       0       0       0       0
 13859 ;;      Temps:          0       0       0       0       0       0       0       0
 13860 ;;      Totals:         1       0       0       0       0       0       0       0
 13861 ;;Total ram usage:        1 bytes
 13862 ;; Hardware stack levels used: 1
 13863 ;; This function calls:
 13864 ;;		Nothing
 13865 ;; This function is called by:
 13866 ;;		_I2C1_EVENT_SEND_RD_ADDR
 13867 ;;		_I2C1_EVENT_SEND_WR_ADDR
 13868 ;;		_I2C1_EVENT_TX
 13869 ;; This function uses a non-reentrant model
 13870 ;;
 13871                           
 13872  0000'                    _I2C1_DataTransmit:	
 13873                           ;psect for function _I2C1_DataTransmit
 13874                           
 13875                           
 13876                           ;incstack = 0
 13877                           ; Regs used in _I2C1_DataTransmit: [wreg]
 13878                           ;I2C1_DataTransmit@data stored from wreg
 13879  0000' 0080'              	movwf	I2C1_DataTransmit@data
 13880                           
 13881                           ;mcc_generated_files/i2c_host/src/mssp.c: 399: static void I2C1_DataTransmit(uint8_t dat
      +                          a);mcc_generated_files/i2c_host/src/mssp.c: 400: {;mcc_generated_files/i2c_host/src/mssp
      +                          .c: 401:     SSP1BUF = data;
 13882  0001' 0800'              	movf	I2C1_DataTransmit@data,w
 13883  0002' 0024               	movlb	4	; select bank4
 13884  0003' 0091               	movwf	17	;volatile
 13885  0004' 0008               	return
 13886  0005'                    __end_of_I2C1_DataTransmit:
 13887                           
 13888                           	psect	text80
 13889  0000'                    __ptext80:	
 13890 ;; *************** function _I2C1_RestartDisable *****************
 13891 ;; Defined at:
 13892 ;;		line 420 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13893 ;; Parameters:    Size  Location     Type
 13894 ;;		None
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;		None
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  1    wreg      void 
 13899 ;; Registers used:
 13900 ;;		None
 13901 ;; Tracked objects:
 13902 ;;		On entry : 1F/1
 13903 ;;		On exit  : 1F/4
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13906 ;;      Params:         0       0       0       0       0       0       0       0
 13907 ;;      Locals:         0       0       0       0       0       0       0       0
 13908 ;;      Temps:          0       0       0       0       0       0       0       0
 13909 ;;      Totals:         0       0       0       0       0       0       0       0
 13910 ;;Total ram usage:        0 bytes
 13911 ;; Hardware stack levels used: 1
 13912 ;; This function calls:
 13913 ;;		Nothing
 13914 ;; This function is called by:
 13915 ;;		_I2C1_EVENT_RX
 13916 ;; This function uses a non-reentrant model
 13917 ;;
 13918                           
 13919  0000'                    _I2C1_RestartDisable:	
 13920                           ;psect for function _I2C1_RestartDisable
 13921                           
 13922                           
 13923                           ;mcc_generated_files/i2c_host/src/mssp.c: 422:     SSP1CON2bits.RSEN = 0;
 13924                           
 13925                           ;incstack = 0
 13926                           ; Regs used in _I2C1_RestartDisable: []
 13927  0000' 0024               	movlb	4	; select bank4
 13928  0001' 1096               	bcf	22,1	;volatile
 13929  0002' 0008               	return
 13930  0003'                    __end_of_I2C1_RestartDisable:
 13931                           
 13932                           	psect	text81
 13933  0000'                    __ptext81:	
 13934 ;; *************** function _I2C1_ReceiveEnable *****************
 13935 ;; Defined at:
 13936 ;;		line 410 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13937 ;; Parameters:    Size  Location     Type
 13938 ;;		None
 13939 ;; Auto vars:     Size  Location     Type
 13940 ;;		None
 13941 ;; Return value:  Size  Location     Type
 13942 ;;                  1    wreg      void 
 13943 ;; Registers used:
 13944 ;;		None
 13945 ;; Tracked objects:
 13946 ;;		On entry : 1F/4
 13947 ;;		On exit  : 1F/4
 13948 ;;		Unchanged: 0/0
 13949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13950 ;;      Params:         0       0       0       0       0       0       0       0
 13951 ;;      Locals:         0       0       0       0       0       0       0       0
 13952 ;;      Temps:          0       0       0       0       0       0       0       0
 13953 ;;      Totals:         0       0       0       0       0       0       0       0
 13954 ;;Total ram usage:        0 bytes
 13955 ;; Hardware stack levels used: 1
 13956 ;; This function calls:
 13957 ;;		Nothing
 13958 ;; This function is called by:
 13959 ;;		_I2C1_EVENT_RX
 13960 ;; This function uses a non-reentrant model
 13961 ;;
 13962                           
 13963  0000'                    _I2C1_ReceiveEnable:	
 13964                           ;psect for function _I2C1_ReceiveEnable
 13965                           
 13966                           
 13967                           ;mcc_generated_files/i2c_host/src/mssp.c: 412:     SSP1CON2bits.RCEN = 1;
 13968                           
 13969                           ;incstack = 0
 13970                           ; Regs used in _I2C1_ReceiveEnable: []
 13971  0000' 1596               	bsf	22,3	;volatile
 13972  0001' 0008               	return
 13973  0002'                    __end_of_I2C1_ReceiveEnable:
 13974                           
 13975                           	psect	text82
 13976  0000'                    __ptext82:	
 13977 ;; *************** function _I2C1_NackSend *****************
 13978 ;; Defined at:
 13979 ;;		line 441 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13980 ;; Parameters:    Size  Location     Type
 13981 ;;		None
 13982 ;; Auto vars:     Size  Location     Type
 13983 ;;		None
 13984 ;; Return value:  Size  Location     Type
 13985 ;;                  1    wreg      void 
 13986 ;; Registers used:
 13987 ;;		None
 13988 ;; Tracked objects:
 13989 ;;		On entry : 1F/4
 13990 ;;		On exit  : 1F/4
 13991 ;;		Unchanged: 0/0
 13992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13993 ;;      Params:         0       0       0       0       0       0       0       0
 13994 ;;      Locals:         0       0       0       0       0       0       0       0
 13995 ;;      Temps:          0       0       0       0       0       0       0       0
 13996 ;;      Totals:         0       0       0       0       0       0       0       0
 13997 ;;Total ram usage:        0 bytes
 13998 ;; Hardware stack levels used: 1
 13999 ;; This function calls:
 14000 ;;		Nothing
 14001 ;; This function is called by:
 14002 ;;		_I2C1_EVENT_RX
 14003 ;; This function uses a non-reentrant model
 14004 ;;
 14005                           
 14006  0000'                    _I2C1_NackSend:	
 14007                           ;psect for function _I2C1_NackSend
 14008                           
 14009                           
 14010                           ;mcc_generated_files/i2c_host/src/mssp.c: 443:     SSP1CON2bits.ACKDT = 1;
 14011                           
 14012                           ;incstack = 0
 14013                           ; Regs used in _I2C1_NackSend: []
 14014  0000' 1696               	bsf	22,5	;volatile
 14015                           
 14016                           ;mcc_generated_files/i2c_host/src/mssp.c: 444:     SSP1CON2bits.ACKEN = 1;
 14017  0001' 1616               	bsf	22,4	;volatile
 14018  0002' 0008               	return
 14019  0003'                    __end_of_I2C1_NackSend:
 14020                           
 14021                           	psect	text83
 14022  0000'                    __ptext83:	
 14023 ;; *************** function _I2C1_IsRxBufFull *****************
 14024 ;; Defined at:
 14025 ;;		line 462 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14026 ;; Parameters:    Size  Location     Type
 14027 ;;		None
 14028 ;; Auto vars:     Size  Location     Type
 14029 ;;		None
 14030 ;; Return value:  Size  Location     Type
 14031 ;;                  1    wreg      _Bool 
 14032 ;; Registers used:
 14033 ;;		wreg, status,2, status,0
 14034 ;; Tracked objects:
 14035 ;;		On entry : 1F/1
 14036 ;;		On exit  : 1F/4
 14037 ;;		Unchanged: 0/0
 14038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14039 ;;      Params:         0       0       0       0       0       0       0       0
 14040 ;;      Locals:         0       0       0       0       0       0       0       0
 14041 ;;      Temps:          0       0       0       0       0       0       0       0
 14042 ;;      Totals:         0       0       0       0       0       0       0       0
 14043 ;;Total ram usage:        0 bytes
 14044 ;; Hardware stack levels used: 1
 14045 ;; This function calls:
 14046 ;;		Nothing
 14047 ;; This function is called by:
 14048 ;;		_I2C1_EVENT_RX
 14049 ;; This function uses a non-reentrant model
 14050 ;;
 14051                           
 14052  0000'                    _I2C1_IsRxBufFull:	
 14053                           ;psect for function _I2C1_IsRxBufFull
 14054                           
 14055                           
 14056                           ;mcc_generated_files/i2c_host/src/mssp.c: 464:     return SSP1STATbits.BF;
 14057                           
 14058                           ;incstack = 0
 14059                           ; Regs used in _I2C1_IsRxBufFull: [wreg+status,2+status,0]
 14060  0000' 0024               	movlb	4	; select bank4
 14061  0001' 0814               	movf	20,w	;volatile
 14062  0002' 3901               	andlw	1
 14063  0003' 0008               	return
 14064  0004'                    __end_of_I2C1_IsRxBufFull:
 14065                           
 14066                           	psect	text84
 14067  0000'                    __ptext84:	
 14068 ;; *************** function _I2C1_DataReceive *****************
 14069 ;; Defined at:
 14070 ;;		line 394 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14071 ;; Parameters:    Size  Location     Type
 14072 ;;		None
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;		None
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  1    wreg      unsigned char 
 14077 ;; Registers used:
 14078 ;;		wreg
 14079 ;; Tracked objects:
 14080 ;;		On entry : 1F/1
 14081 ;;		On exit  : 1F/4
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14084 ;;      Params:         0       0       0       0       0       0       0       0
 14085 ;;      Locals:         0       0       0       0       0       0       0       0
 14086 ;;      Temps:          0       0       0       0       0       0       0       0
 14087 ;;      Totals:         0       0       0       0       0       0       0       0
 14088 ;;Total ram usage:        0 bytes
 14089 ;; Hardware stack levels used: 1
 14090 ;; This function calls:
 14091 ;;		Nothing
 14092 ;; This function is called by:
 14093 ;;		_I2C1_EVENT_RX
 14094 ;; This function uses a non-reentrant model
 14095 ;;
 14096                           
 14097  0000'                    _I2C1_DataReceive:	
 14098                           ;psect for function _I2C1_DataReceive
 14099                           
 14100                           
 14101                           ;mcc_generated_files/i2c_host/src/mssp.c: 396:     return SSP1BUF;
 14102                           
 14103                           ;incstack = 0
 14104                           ; Regs used in _I2C1_DataReceive: [wreg]
 14105  0000' 0024               	movlb	4	; select bank4
 14106  0001' 0811               	movf	17,w	;volatile
 14107  0002' 0008               	return
 14108  0003'                    __end_of_I2C1_DataReceive:
 14109                           
 14110                           	psect	text85
 14111  0000'                    __ptext85:	
 14112 ;; *************** function _I2C1_AckSend *****************
 14113 ;; Defined at:
 14114 ;;		line 435 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;		None
 14117 ;; Auto vars:     Size  Location     Type
 14118 ;;		None
 14119 ;; Return value:  Size  Location     Type
 14120 ;;                  1    wreg      void 
 14121 ;; Registers used:
 14122 ;;		None
 14123 ;; Tracked objects:
 14124 ;;		On entry : 1F/1
 14125 ;;		On exit  : 1F/4
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14128 ;;      Params:         0       0       0       0       0       0       0       0
 14129 ;;      Locals:         0       0       0       0       0       0       0       0
 14130 ;;      Temps:          0       0       0       0       0       0       0       0
 14131 ;;      Totals:         0       0       0       0       0       0       0       0
 14132 ;;Total ram usage:        0 bytes
 14133 ;; Hardware stack levels used: 1
 14134 ;; This function calls:
 14135 ;;		Nothing
 14136 ;; This function is called by:
 14137 ;;		_I2C1_EVENT_RX
 14138 ;; This function uses a non-reentrant model
 14139 ;;
 14140                           
 14141  0000'                    _I2C1_AckSend:	
 14142                           ;psect for function _I2C1_AckSend
 14143                           
 14144                           
 14145                           ;mcc_generated_files/i2c_host/src/mssp.c: 437:     SSP1CON2bits.ACKDT = 0;
 14146                           
 14147                           ;incstack = 0
 14148                           ; Regs used in _I2C1_AckSend: []
 14149  0000' 0024               	movlb	4	; select bank4
 14150  0001' 1296               	bcf	22,5	;volatile
 14151                           
 14152                           ;mcc_generated_files/i2c_host/src/mssp.c: 438:     SSP1CON2bits.ACKEN = 1;
 14153  0002' 1616               	bsf	22,4	;volatile
 14154  0003' 0008               	return
 14155  0004'                    __end_of_I2C1_AckSend:
 14156                           
 14157                           	psect	text86
 14158  0000'                    __ptext86:	
 14159 ;; *************** function _I2C1_StopSend *****************
 14160 ;; Defined at:
 14161 ;;		line 430 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14162 ;; Parameters:    Size  Location     Type
 14163 ;;		None
 14164 ;; Auto vars:     Size  Location     Type
 14165 ;;		None
 14166 ;; Return value:  Size  Location     Type
 14167 ;;                  1    wreg      void 
 14168 ;; Registers used:
 14169 ;;		None
 14170 ;; Tracked objects:
 14171 ;;		On entry : 1F/1
 14172 ;;		On exit  : 1F/4
 14173 ;;		Unchanged: 0/0
 14174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14175 ;;      Params:         0       0       0       0       0       0       0       0
 14176 ;;      Locals:         0       0       0       0       0       0       0       0
 14177 ;;      Temps:          0       0       0       0       0       0       0       0
 14178 ;;      Totals:         0       0       0       0       0       0       0       0
 14179 ;;Total ram usage:        0 bytes
 14180 ;; Hardware stack levels used: 1
 14181 ;; This function calls:
 14182 ;;		Nothing
 14183 ;; This function is called by:
 14184 ;;		_I2C1_EVENT_STOP
 14185 ;; This function uses a non-reentrant model
 14186 ;;
 14187                           
 14188  0000'                    _I2C1_StopSend:	
 14189                           ;psect for function _I2C1_StopSend
 14190                           
 14191                           
 14192                           ;mcc_generated_files/i2c_host/src/mssp.c: 432:     SSP1CON2bits.PEN = 1;
 14193                           
 14194                           ;incstack = 0
 14195                           ; Regs used in _I2C1_StopSend: []
 14196  0000' 0024               	movlb	4	; select bank4
 14197  0001' 1516               	bsf	22,2	;volatile
 14198  0002' 0008               	return
 14199  0003'                    __end_of_I2C1_StopSend:
 14200                           
 14201                           	psect	text87
 14202  0000'                    __ptext87:	
 14203 ;; *************** function _I2C1_Close *****************
 14204 ;; Defined at:
 14205 ;;		line 244 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;		None
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;		None
 14210 ;; Return value:  Size  Location     Type
 14211 ;;                  1    wreg      void 
 14212 ;; Registers used:
 14213 ;;		status,2, status,0, pclath, cstack
 14214 ;; Tracked objects:
 14215 ;;		On entry : 1F/4
 14216 ;;		On exit  : 1F/4
 14217 ;;		Unchanged: 0/0
 14218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14219 ;;      Params:         0       0       0       0       0       0       0       0
 14220 ;;      Locals:         0       0       0       0       0       0       0       0
 14221 ;;      Temps:          0       0       0       0       0       0       0       0
 14222 ;;      Totals:         0       0       0       0       0       0       0       0
 14223 ;;Total ram usage:        0 bytes
 14224 ;; Hardware stack levels used: 1
 14225 ;; Hardware stack levels required when called: 1
 14226 ;; This function calls:
 14227 ;;		_I2C1_ErrorInterruptClear
 14228 ;;		_I2C1_InterruptClear
 14229 ;;		_I2C1_StatusFlagsClear
 14230 ;; This function is called by:
 14231 ;;		_I2C1_EVENT_STOP
 14232 ;; This function uses a non-reentrant model
 14233 ;;
 14234                           
 14235  0000'                    _I2C1_Close:	
 14236                           ;psect for function _I2C1_Close
 14237                           
 14238                           
 14239                           ;mcc_generated_files/i2c_host/src/mssp.c: 246:     i2c1Status.busy = 0;
 14240                           
 14241                           ;incstack = 0
 14242 ;; hardware stack exceeded
 14243                           ; Regs used in _I2C1_Close: [status,2+status,0+pclath+cstack]
 14244  0000' 0021               	movlb	1	; select bank1
 14245  0001' 0180'              	clrf	_i2c1Status^(0+128)	;volatile
 14246                           
 14247                           ;mcc_generated_files/i2c_host/src/mssp.c: 247:     i2c1Status.address = 0xFF;
 14248  0002' 3000               	movlw	0
 14249  0003' 0081'              	movwf	((_i2c1Status+1)^(0+128)+1)	;volatile
 14250  0004' 30FF               	movlw	255
 14251  0005' 0081'              	movwf	(_i2c1Status^(0+128)+1)	;volatile
 14252                           
 14253                           ;mcc_generated_files/i2c_host/src/mssp.c: 248:     i2c1Status.writePtr = ((void*)0);
 14254  0006' 0180'              	clrf	(low ((_i2c1Status| 0+3)))^(0+128)	;volatile
 14255  0007' 0180'              	clrf	((low ((_i2c1Status| 0+3))+1))^(0+128)	;volatile
 14256                           
 14257                           ;mcc_generated_files/i2c_host/src/mssp.c: 249:     i2c1Status.readPtr = ((void*)0);
 14258  0008' 0180'              	clrf	(low ((_i2c1Status| 0+7)))^(0+128)	;volatile
 14259  0009' 0180'              	clrf	((low ((_i2c1Status| 0+7))+1))^(0+128)	;volatile
 14260                           
 14261                           ;mcc_generated_files/i2c_host/src/mssp.c: 250:     i2c1Status.state = I2C_STATE_IDLE;
 14262  000A' 018D'              	clrf	(_i2c1Status^(0+128)+13)	;volatile
 14263                           
 14264                           ;mcc_generated_files/i2c_host/src/mssp.c: 251:     I2C1_InterruptClear();
 14265  000B' 3180' 2000' 3180'  	fcall	_I2C1_InterruptClear
 14266                           
 14267                           ;mcc_generated_files/i2c_host/src/mssp.c: 252:     I2C1_ErrorInterruptClear();
 14268  000E' 3180' 2000' 3180'  	fcall	_I2C1_ErrorInterruptClear
 14269                           
 14270                           ;mcc_generated_files/i2c_host/src/mssp.c: 253:     I2C1_StatusFlagsClear();
 14271  0011' 3180' 2000'        	fcall	_I2C1_StatusFlagsClear
 14272  0013' 0008               	return
 14273  0014'                    __end_of_I2C1_Close:
 14274                           
 14275                           	psect	text88
 14276  0000'                    __ptext88:	
 14277 ;; *************** function _I2C1_StatusFlagsClear *****************
 14278 ;; Defined at:
 14279 ;;		line 489 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14280 ;; Parameters:    Size  Location     Type
 14281 ;;		None
 14282 ;; Auto vars:     Size  Location     Type
 14283 ;;		None
 14284 ;; Return value:  Size  Location     Type
 14285 ;;                  1    wreg      void 
 14286 ;; Registers used:
 14287 ;;		None
 14288 ;; Tracked objects:
 14289 ;;		On entry : 1F/0
 14290 ;;		On exit  : 1F/4
 14291 ;;		Unchanged: 0/0
 14292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14293 ;;      Params:         0       0       0       0       0       0       0       0
 14294 ;;      Locals:         0       0       0       0       0       0       0       0
 14295 ;;      Temps:          0       0       0       0       0       0       0       0
 14296 ;;      Totals:         0       0       0       0       0       0       0       0
 14297 ;;Total ram usage:        0 bytes
 14298 ;; Hardware stack levels used: 1
 14299 ;; This function calls:
 14300 ;;		Nothing
 14301 ;; This function is called by:
 14302 ;;		_I2C1_Close
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306  0000'                    _I2C1_StatusFlagsClear:	
 14307                           ;psect for function _I2C1_StatusFlagsClear
 14308                           
 14309                           
 14310                           ;mcc_generated_files/i2c_host/src/mssp.c: 491:     SSP1CON1bits.WCOL = 0;
 14311                           
 14312                           ;incstack = 0
 14313 ;; hardware stack exceeded
 14314                           ; Regs used in _I2C1_StatusFlagsClear: []
 14315  0000' 0024               	movlb	4	; select bank4
 14316  0001' 1395               	bcf	21,7	;volatile
 14317                           
 14318                           ;mcc_generated_files/i2c_host/src/mssp.c: 492:     SSP1CON1bits.SSPOV = 0;
 14319  0002' 1315               	bcf	21,6	;volatile
 14320  0003' 0008               	return
 14321  0004'                    __end_of_I2C1_StatusFlagsClear:
 14322                           
 14323                           	psect	text89
 14324  0000'                    __ptext89:	
 14325 ;; *************** function _I2C1_InterruptClear *****************
 14326 ;; Defined at:
 14327 ;;		line 479 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14328 ;; Parameters:    Size  Location     Type
 14329 ;;		None
 14330 ;; Auto vars:     Size  Location     Type
 14331 ;;		None
 14332 ;; Return value:  Size  Location     Type
 14333 ;;                  1    wreg      void 
 14334 ;; Registers used:
 14335 ;;		None
 14336 ;; Tracked objects:
 14337 ;;		On entry : 1E/0
 14338 ;;		On exit  : 1F/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14341 ;;      Params:         0       0       0       0       0       0       0       0
 14342 ;;      Locals:         0       0       0       0       0       0       0       0
 14343 ;;      Temps:          0       0       0       0       0       0       0       0
 14344 ;;      Totals:         0       0       0       0       0       0       0       0
 14345 ;;Total ram usage:        0 bytes
 14346 ;; Hardware stack levels used: 1
 14347 ;; This function calls:
 14348 ;;		Nothing
 14349 ;; This function is called by:
 14350 ;;		_I2C1_Close
 14351 ;;		_I2C1_EventHandler
 14352 ;; This function uses a non-reentrant model
 14353 ;;
 14354                           
 14355  0000'                    _I2C1_InterruptClear:	
 14356                           ;psect for function _I2C1_InterruptClear
 14357                           
 14358                           
 14359                           ;mcc_generated_files/i2c_host/src/mssp.c: 481:     PIR1bits.SSP1IF = 0;
 14360                           
 14361                           ;incstack = 0
 14362                           ; Regs used in _I2C1_InterruptClear: []
 14363  0000' 0020               	movlb	0	; select bank0
 14364  0001' 1190               	bcf	16,3	;volatile
 14365  0002' 0008               	return
 14366  0003'                    __end_of_I2C1_InterruptClear:
 14367                           
 14368                           	psect	text90
 14369  0000'                    __ptext90:	
 14370 ;; *************** function _I2C1_ErrorInterruptClear *****************
 14371 ;; Defined at:
 14372 ;;		line 484 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14373 ;; Parameters:    Size  Location     Type
 14374 ;;		None
 14375 ;; Auto vars:     Size  Location     Type
 14376 ;;		None
 14377 ;; Return value:  Size  Location     Type
 14378 ;;                  1    wreg      void 
 14379 ;; Registers used:
 14380 ;;		None
 14381 ;; Tracked objects:
 14382 ;;		On entry : 1E/1
 14383 ;;		On exit  : 1F/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14386 ;;      Params:         0       0       0       0       0       0       0       0
 14387 ;;      Locals:         0       0       0       0       0       0       0       0
 14388 ;;      Temps:          0       0       0       0       0       0       0       0
 14389 ;;      Totals:         0       0       0       0       0       0       0       0
 14390 ;;Total ram usage:        0 bytes
 14391 ;; Hardware stack levels used: 1
 14392 ;; This function calls:
 14393 ;;		Nothing
 14394 ;; This function is called by:
 14395 ;;		_I2C1_Close
 14396 ;;		_I2C1_ErrorEventHandler
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400  0000'                    _I2C1_ErrorInterruptClear:	
 14401                           ;psect for function _I2C1_ErrorInterruptClear
 14402                           
 14403                           
 14404                           ;mcc_generated_files/i2c_host/src/mssp.c: 486:     PIR2bits.BCL1IF = 0;
 14405                           
 14406                           ;incstack = 0
 14407 ;; hardware stack exceeded
 14408                           ; Regs used in _I2C1_ErrorInterruptClear: []
 14409  0000' 0020               	movlb	0	; select bank0
 14410  0001' 1191               	bcf	17,3	;volatile
 14411  0002' 0008               	return
 14412  0003'                    __end_of_I2C1_ErrorInterruptClear:
 14413                           
 14414                           	psect	text91
 14415  0000'                    __ptext91:	
 14416 ;; *************** function _I2C1_BusReset *****************
 14417 ;; Defined at:
 14418 ;;		line 404 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14419 ;; Parameters:    Size  Location     Type
 14420 ;;		None
 14421 ;; Auto vars:     Size  Location     Type
 14422 ;;		None
 14423 ;; Return value:  Size  Location     Type
 14424 ;;                  1    wreg      void 
 14425 ;; Registers used:
 14426 ;;		None
 14427 ;; Tracked objects:
 14428 ;;		On entry : 1F/1
 14429 ;;		On exit  : 1F/4
 14430 ;;		Unchanged: 0/0
 14431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14432 ;;      Params:         0       0       0       0       0       0       0       0
 14433 ;;      Locals:         0       0       0       0       0       0       0       0
 14434 ;;      Temps:          0       0       0       0       0       0       0       0
 14435 ;;      Totals:         0       0       0       0       0       0       0       0
 14436 ;;Total ram usage:        0 bytes
 14437 ;; Hardware stack levels used: 1
 14438 ;; This function calls:
 14439 ;;		Nothing
 14440 ;; This function is called by:
 14441 ;;		_I2C1_EVENT_RESET
 14442 ;; This function uses a non-reentrant model
 14443 ;;
 14444                           
 14445  0000'                    _I2C1_BusReset:	
 14446                           ;psect for function _I2C1_BusReset
 14447                           
 14448                           
 14449                           ;mcc_generated_files/i2c_host/src/mssp.c: 406:     SSP1CON1bits.SSPEN = 0;
 14450                           
 14451                           ;incstack = 0
 14452                           ; Regs used in _I2C1_BusReset: []
 14453  0000' 0024               	movlb	4	; select bank4
 14454  0001' 1295               	bcf	21,5	;volatile
 14455                           
 14456                           ;mcc_generated_files/i2c_host/src/mssp.c: 407:     SSP1CON1bits.SSPEN = 1;
 14457  0002' 1695               	bsf	21,5	;volatile
 14458  0003' 0008               	return
 14459  0004'                    __end_of_I2C1_BusReset:
 14460                           
 14461                           	psect	text92
 14462  0000'                    __ptext92:	
 14463 ;; *************** function _I2C1_DefaultCallback *****************
 14464 ;; Defined at:
 14465 ;;		line 281 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14466 ;; Parameters:    Size  Location     Type
 14467 ;;		None
 14468 ;; Auto vars:     Size  Location     Type
 14469 ;;		None
 14470 ;; Return value:  Size  Location     Type
 14471 ;;                  1    wreg      void 
 14472 ;; Registers used:
 14473 ;;		None
 14474 ;; Tracked objects:
 14475 ;;		On entry : 1F/1
 14476 ;;		On exit  : 1F/1
 14477 ;;		Unchanged: 1F/0
 14478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14479 ;;      Params:         0       0       0       0       0       0       0       0
 14480 ;;      Locals:         0       0       0       0       0       0       0       0
 14481 ;;      Temps:          0       0       0       0       0       0       0       0
 14482 ;;      Totals:         0       0       0       0       0       0       0       0
 14483 ;;Total ram usage:        0 bytes
 14484 ;; Hardware stack levels used: 1
 14485 ;; This function calls:
 14486 ;;		Nothing
 14487 ;; This function is called by:
 14488 ;;		_I2C1_Initialize
 14489 ;;		_I2C1_Deinitialize
 14490 ;;		_I2C1_ErrorEventHandler
 14491 ;; This function uses a non-reentrant model
 14492 ;;
 14493                           
 14494  0000'                    _I2C1_DefaultCallback:	
 14495                           ;psect for function _I2C1_DefaultCallback
 14496                           
 14497                           
 14498                           ;incstack = 0
 14499                           ; Regs used in _I2C1_DefaultCallback: []
 14500  0000' 0008               	return
 14501  0001'                    __end_of_I2C1_DefaultCallback:
 14502                           
 14503                           	psect	text93
 14504  0000'                    __ptext93:	
 14505 ;; *************** function _ADC_ISR *****************
 14506 ;; Defined at:
 14507 ;;		line 134 in file "mcc_generated_files/adc/src/adc.c"
 14508 ;; Parameters:    Size  Location     Type
 14509 ;;		None
 14510 ;; Auto vars:     Size  Location     Type
 14511 ;;		None
 14512 ;; Return value:  Size  Location     Type
 14513 ;;                  1    wreg      void 
 14514 ;; Registers used:
 14515 ;;		wreg, status,2, status,0, pclath, cstack
 14516 ;; Tracked objects:
 14517 ;;		On entry : 1F/0
 14518 ;;		On exit  : 0/0
 14519 ;;		Unchanged: 0/0
 14520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14521 ;;      Params:         0       0       0       0       0       0       0       0
 14522 ;;      Locals:         0       0       0       0       0       0       0       0
 14523 ;;      Temps:          0       0       0       0       0       0       0       0
 14524 ;;      Totals:         0       0       0       0       0       0       0       0
 14525 ;;Total ram usage:        0 bytes
 14526 ;; Hardware stack levels used: 1
 14527 ;; Hardware stack levels required when called: 1
 14528 ;; This function calls:
 14529 ;;		NULL
 14530 ;;		_ADC_DefaultInterruptHandler
 14531 ;; This function is called by:
 14532 ;;		_INTERRUPT_InterruptManager
 14533 ;; This function uses a non-reentrant model
 14534 ;;
 14535                           
 14536  0000'                    _ADC_ISR:	
 14537                           ;psect for function _ADC_ISR
 14538                           
 14539                           
 14540                           ;mcc_generated_files/adc/src/adc.c: 137:     PIR1bits.ADIF = 0;
 14541                           
 14542                           ;incstack = 0
 14543                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
 14544  0000' 1310               	bcf	16,6	;volatile
 14545                           
 14546                           ;mcc_generated_files/adc/src/adc.c: 139:  if(ADC_InterruptHandler)
 14547  0001' 0021               	movlb	1	; select bank1
 14548  0002' 0800'              	movf	_ADC_InterruptHandler^(0+128),w
 14549  0003' 0400'              	iorwf	(_ADC_InterruptHandler+1)^(0+128),w
 14550  0004' 1903               	btfsc	3,2
 14551  0005' 0008               	return
 14552                           
 14553                           ;mcc_generated_files/adc/src/adc.c: 140:     {;mcc_generated_files/adc/src/adc.c: 141:  
      +                                 ADC_InterruptHandler();
 14554  0006' 0800'              	movf	(_ADC_InterruptHandler+1)^(0+128),w
 14555  0007' 008A               	movwf	10
 14556  0008' 0800'              	movf	_ADC_InterruptHandler^(0+128),w
 14557  0009' 000A               	callw
 14558  000A' 3180'              	pagesel	$
 14559  000B' 0008               	return
 14560  000C'                    __end_of_ADC_ISR:
 14561                           
 14562                           	psect	text94
 14563  0000'                    __ptext94:	
 14564 ;; *************** function _ADC_DefaultInterruptHandler *****************
 14565 ;; Defined at:
 14566 ;;		line 150 in file "mcc_generated_files/adc/src/adc.c"
 14567 ;; Parameters:    Size  Location     Type
 14568 ;;		None
 14569 ;; Auto vars:     Size  Location     Type
 14570 ;;		None
 14571 ;; Return value:  Size  Location     Type
 14572 ;;                  1    wreg      void 
 14573 ;; Registers used:
 14574 ;;		None
 14575 ;; Tracked objects:
 14576 ;;		On entry : 1F/1
 14577 ;;		On exit  : 1F/1
 14578 ;;		Unchanged: 1F/0
 14579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14580 ;;      Params:         0       0       0       0       0       0       0       0
 14581 ;;      Locals:         0       0       0       0       0       0       0       0
 14582 ;;      Temps:          0       0       0       0       0       0       0       0
 14583 ;;      Totals:         0       0       0       0       0       0       0       0
 14584 ;;Total ram usage:        0 bytes
 14585 ;; Hardware stack levels used: 1
 14586 ;; This function calls:
 14587 ;;		Nothing
 14588 ;; This function is called by:
 14589 ;;		_ADC_Initialize
 14590 ;;		_ADC_ISR
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594  0000'                    _ADC_DefaultInterruptHandler:	
 14595                           ;psect for function _ADC_DefaultInterruptHandler
 14596                           
 14597                           
 14598                           ;incstack = 0
 14599                           ; Regs used in _ADC_DefaultInterruptHandler: []
 14600  0000' 0008               	return
 14601  0001'                    __end_of_ADC_DefaultInterruptHandler:
 14602  007E                     btemp	set	126	;btemp
 14603  007E                     int$flags	set	126
 14604  007E                     wtemp0	set	126
 14605                           
 14606                           	psect	config
 14607                           
 14608                           ;Config register CONFIG1 @ 0x8007
 14609                           ;	Oscillator Selection Bits
 14610                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 14611                           ;	Power-up Timer Enable
 14612                           ;	PWRTE = OFF, PWRT disabled
 14613                           ;	MCLR Pin Function Select
 14614                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 14615                           ;	Flash Program Memory Code Protection
 14616                           ;	CP = OFF, Program memory code protection is disabled
 14617                           ;	Brown-out Reset Enable
 14618                           ;	BOREN = ON, Brown-out Reset enabled
 14619                           ;	Clock Out Enable
 14620                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 14621  8007                     	org	32775
 14622  8007  3FFC               	dw	16380
 14623                           
 14624                           ;Config register CONFIG2 @ 0x8008
 14625                           ;	Flash Memory Self-Write Protection
 14626                           ;	WRT = OFF, Write protection off
 14627                           ;	Peripheral Pin Select one-way control
 14628                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
 14629                           ;	Zero Cross Detect Disable Bit
 14630                           ;	ZCD = OFF, ZCD disable. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
 14631                           ;	PLL Enable Bit
 14632                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
 14633                           ;	Stack Overflow/Underflow Reset Enable
 14634                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 14635                           ;	Brown-out Reset Voltage Selection
 14636                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 14637                           ;	Low-Power Brown Out Reset
 14638                           ;	LPBOR = OFF, Low-Power BOR is disabled
 14639                           ;	In-Circuit Debugger Mode
 14640                           ;	DEBUG = 0x1, unprogrammed default
 14641                           ;	Low-Voltage Programming Enable
 14642                           ;	LVP = ON, Low-voltage programming enabled
 14643  8008                     	org	32776
 14644  8008  3EFF               	dw	16127
 14645                           
 14646                           ;Config register CONFIG3 @ 0x8009
 14647                           ;	WDT Period Select
 14648                           ;	WDTCPS = WDTCPS1F, Software Control (WDTPS)
 14649                           ;	Watchdog Timer Enable
 14650                           ;	WDTE = OFF, WDT disabled
 14651                           ;	WDT Window Select
 14652                           ;	WDTCWS = WDTCWSSW, Software WDT window size control (WDTWS bits)
 14653                           ;	WDT Input Clock Selector
 14654                           ;	WDTCCS = SWC, Software control, controlled by WDTCS bits
 14655  8009                     	org	32777
 14656  8009  3F9F               	dw	16287

Data Sizes:
    Strings     214
    Constant    86
    Data        24
    BSS         75
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     80      80
    BANK1            80     37      76
    BANK2            80      0      56
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), NULL(), 

    ADC_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    __assert_fail@expr	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_10(CODE[36]), STR_16(CODE[55]), STR_4(CODE[43]), 

    __assert_fail@file	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_11(CODE[7]), STR_17(CODE[7]), STR_5(CODE[7]), 

    __assert_fail@func	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_12(CODE[13]), STR_18(CODE[13]), STR_6(CODE[12]), 

    EUSART_FramingErrorCallbackRegister@callbackHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorCallback(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorCallback(), NULL(), 

    EUSART_OverrunErrorCallbackRegister@callbackHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorCallback(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorCallback(), NULL(), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    funcs	PTR FTN()void [3] size(2) Largest target is 0

    __funcs_on_exit@func	PTR FTN()void  size(2) Largest target is 0

    I2C1_Callback	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_DefaultCallback(), NULL(), 

    I2C1_CallbackRegister@callbackHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_DefaultCallback(), 

    i2c1_eventTable	const PTR FTN()enum E9544[9] size(2) Largest target is 1
		 -> I2C1_EVENT_ERROR(), I2C1_EVENT_IDLE(), I2C1_EVENT_NACK(), I2C1_EVENT_RESET(), 
		 -> I2C1_EVENT_RX(), I2C1_EVENT_SEND_RD_ADDR(), I2C1_EVENT_SEND_WR_ADDR(), I2C1_EVENT_STOP(), 
		 -> I2C1_EVENT_TX(), 

    i2c1Status$readPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c1Status$writePtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_Host$CallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> I2C1_CallbackRegister(), 

    I2C_Host$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_Deinitialize(), 

    I2C_Host$ErrorGet	PTR FTN()enum E9535 size(2) Largest target is 1
		 -> I2C1_ErrorGet(), 

    I2C_Host$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_Initialize(), 

    I2C_Host$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> I2C1_IsBusy(), 

    I2C_Host$Read	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_Read(), 

    I2C_Host$Tasks	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    I2C_Host$TransferSetup	PTR FTN(PTR struct .,unsigned long ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    I2C_Host$Write	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_Write(), 

    I2C_Host$WriteRead	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_WriteRead(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), NULL(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    KAPS_getIndex@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_getPos@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_getStatus@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_GoToIdx@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_setAbsPos@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_setRelPos@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_StorePos@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    packLong@data	PTR unsigned char  size(1) Largest target is 12
		 -> main@parser(BANK1[12]), 

    Parse@parser	PTR struct . size(1) Largest target is 12
		 -> main@parser(BANK1[12]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    ProcessMsg@data	PTR unsigned char  size(1) Largest target is 12
		 -> main@parser(BANK1[12]), 

    S189$2$1	PTR unsigned char  size(2) Largest target is 0

    S189$3$1	PTR unsigned char  size(2) Largest target is 0

    S189$4$1	PTR unsigned char  size(2) Largest target is 0

    S189$4$3	PTR unsigned char  size(2) Largest target is 0

    S189$8$0	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_DefaultCallback(), 

    S189$CallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> I2C1_CallbackRegister(), 

    S189$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_Deinitialize(), 

    S189$ErrorGet	PTR FTN()enum E9535 size(2) Largest target is 1
		 -> I2C1_ErrorGet(), 

    S189$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_Initialize(), 

    S189$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> I2C1_IsBusy(), 

    S189$Read	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_Read(), 

    S189$Tasks	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    S189$TransferSetup	PTR FTN(PTR struct .,unsigned long ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S189$Write	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_Write(), 

    S189$WriteRead	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_WriteRead(), 

    S1980$buffer	PTR unsigned char  size(2) Largest target is 0

    S1980$source	PTR const unsigned char  size(2) Largest target is 0

    S288$readPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S288$writePtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S996$20$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorCallback(), 

    S996$21$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorCallback(), 

    S996$AutoBaudEventEnableGet	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S996$AutoBaudQuery	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_AutoBaudQuery(), 

    S996$AutoBaudSet	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> EUSART_AutoBaudSet(), 

    S996$BaudRateGet	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> NULL(), 

    S996$BaudRateSet	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$BRGCountGet	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> NULL(), 

    S996$BRGCountSet	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Deinitialize(), 

    S996$ErrorGet	PTR FTN()unsigned int  size(2) Largest target is 2
		 -> EUSART_ErrorGet(), 

    S996$EventCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$FramingErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_FramingErrorCallbackRegister(), 

    S996$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S996$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsRxReady(), 

    S996$IsTxDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsTxDone(), 

    S996$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsTxReady(), 

    S996$OverrunErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_OverrunErrorCallbackRegister(), 

    S996$ParityErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    S996$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$TransmitDisable	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_TransmitDisable(), 

    S996$TransmitEnable	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_TransmitEnable(), 

    S996$TxCollisionCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    SendMsg@data	PTR unsigned char  size(1) Largest target is 12
		 -> main@parser(BANK1[12]), ProcessMsg@payload(BANK1[6]), SendNack@error(BANK0[1]), 

    SSPA_getPOut@sspa	PTR struct . size(1) Largest target is 24
		 -> sppas(BANK2[24]), 

    SSPA_getTemp@sspa	PTR struct . size(1) Largest target is 24
		 -> sppas(BANK2[24]), 

    SSPA_setMute@sspa	PTR struct . size(1) Largest target is 24
		 -> sppas(BANK2[24]), 

    UART$AutoBaudEventEnableGet	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NULL(), 

    UART$AutoBaudQuery	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_AutoBaudQuery(), 

    UART$AutoBaudSet	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> EUSART_AutoBaudSet(), 

    UART$BaudRateGet	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> NULL(), 

    UART$BaudRateSet	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$BRGCountGet	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> NULL(), 

    UART$BRGCountSet	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Deinitialize(), 

    UART$ErrorGet	PTR FTN()unsigned int  size(2) Largest target is 2
		 -> EUSART_ErrorGet(), 

    UART$EventCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$FramingErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_FramingErrorCallbackRegister(), 

    UART$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    UART$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsRxReady(), 

    UART$IsTxDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsTxDone(), 

    UART$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsTxReady(), 

    UART$OverrunErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_OverrunErrorCallbackRegister(), 

    UART$ParityErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    UART$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$TransmitDisable	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_TransmitDisable(), 

    UART$TransmitEnable	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_TransmitEnable(), 

    UART$TxCollisionCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    unpackLong@data	PTR unsigned char  size(1) Largest target is 6
		 -> ProcessMsg@payload(BANK1[6]), 

    unpackWord@data	PTR unsigned char  size(1) Largest target is 6
		 -> ProcessMsg@payload(BANK1[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    vfpfcnvrt@cp_2048	PTR unsigned char  size(2) Largest target is 55
		 -> ?_printf(BANK0[2]), STR_10(CODE[36]), STR_11(CODE[7]), STR_12(CODE[13]), 
		 -> STR_16(CODE[55]), STR_17(CODE[7]), STR_18(CODE[13]), STR_4(CODE[43]), 
		 -> STR_5(CODE[7]), STR_6(CODE[12]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _I2C1_ISR->_I2C1_EventHandler
    _I2C1_EventHandler->_I2C1_EVENT_TX
    _I2C1_ERROR_ISR->_I2C1_ErrorEventHandler
    _I2C1_ErrorEventHandler->_I2C1_EVENT_TX
    _I2C1_EVENT_TX->_I2C1_DataTransmit
    _I2C1_EVENT_SEND_WR_ADDR->_I2C1_DataTransmit

Critical Paths under _main in BANK0

    _INTERRUPT_Initialize->_INT_SetInterruptHandler
    _I2C1_Initialize->_I2C1_CallbackRegister
    _EUSART_Initialize->_EUSART_FramingErrorCallbackRegister
    _EUSART_Initialize->_EUSART_OverrunErrorCallbackRegister
    _ADC_Initialize->_ADC_SetInterruptHandler
    _SendNack->_SendMsg
    _SendMsg->_EUSART_Write
    _SSPA_getTemp->___fltol
    _SSPA_getPOut->___fltol
    _getADCValue->___assert_fail
    ___assert_fail->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _abort->_exit
    _exit->__Exit
    ___fltol->___fldiv
    ___flsub->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flsub
    _KAPS_setRelPos->_packLong
    _KAPS_setAbsPos->_packLong
    _KAPS_StorePos->_packLong

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Parse
    _Parse->_ProcessMsg
    _ProcessMsg->_SSPA_getPOut
    _ProcessMsg->_SSPA_getTemp
    _SSPA_getTemp->___fltol
    _SSPA_getPOut->___fltol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   56960
                                             24 BANK1     13    13      0
                   _EUSART_IsRxReady
                        _EUSART_Read
                              _Parse
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     788
                     _ADC_Initialize
                   _CLOCK_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0     121
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0     242
              _I2C1_CallbackRegister
              _I2C1_InterruptsEnable
 ---------------------------------------------------------------------------------
 (3) _I2C1_InterruptsEnable                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C1_CallbackRegister                                2     0      2     242
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     304
_EUSART_FramingErrorCallbackRegister
_EUSART_OverrunErrorCallbackRegister
 ---------------------------------------------------------------------------------
 (3) _EUSART_OverrunErrorCallbackRegister                  2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_FramingErrorCallbackRegister                  2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0     121
            _ADC_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _ADC_SetInterruptHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Parse                                                4     3      1   55816
                                             20 BANK1      4     3      1
                         _ProcessMsg
                            _SendMsg
                           _SendNack
 ---------------------------------------------------------------------------------
 (2) _SendNack                                             1     1      0    2097
                                              6 BANK0      1     1      0
                            _SendMsg
 ---------------------------------------------------------------------------------
 (2) _ProcessMsg                                           9     8      1   50045
                                             11 BANK1      9     8      1
                       _KAPS_GoToIdx
                      _KAPS_StorePos
                      _KAPS_getIndex
                        _KAPS_getPos
                     _KAPS_getStatus
                     _KAPS_setAbsPos
                     _KAPS_setRelPos
                       _SSPA_getPOut
                       _SSPA_getTemp
                       _SSPA_setMute
                            _SendMsg
                           _packLong
                         _unpackLong
                         _unpackWord
 ---------------------------------------------------------------------------------
 (3) _unpackWord                                           3     0      3     307
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _unpackLong                                           5     0      5     617
                                              0 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (3) _packLong                                            13     9      4     214
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (3) _SendMsg                                              5     3      2    2060
                                              1 BANK0      5     3      2
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     0      1     391
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SSPA_setMute                                         3     1      2     371
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _SSPA_getTemp                                         7     6      1   22163
                                              4 BANK1      7     6      1
                      ___assert_fail
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                        _getADCValue
 ---------------------------------------------------------------------------------
 (3) _SSPA_getPOut                                         7     6      1   22315
                                              4 BANK1      7     6      1
                      ___assert_fail
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                        _getADCValue
 ---------------------------------------------------------------------------------
 (4) _getADCValue                                          8     6      2    6152
                                             56 BANK0      8     6      2
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                      ___assert_fail
 ---------------------------------------------------------------------------------
 (5) ___assert_fail                                        8     0      8    5985
                                             48 BANK0      8     0      8
                              _abort
                             _printf
 ---------------------------------------------------------------------------------
 (6) _printf                                              13     3     10    4567
                                             37 BANK0     11     1     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (7) _vfprintf                                             8     3      5    4390
                                             29 BANK0      8     3      5
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (8) _vfpfcnvrt                                           18    14      4    3905
                                             11 BANK0     18    14      4
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                9     5      4    1137
                                              0 BANK0      9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (9) _abs                                                  4     2      2     142
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              7     3      4     613
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              9     5      4     625
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (6) _abort                                                0     0      0     214
                               _exit
 ---------------------------------------------------------------------------------
 (7) _exit                                                 2     0      2     214
                                              2 BANK0      2     0      2
                              __Exit
                    ___funcs_on_exit
 ---------------------------------------------------------------------------------
 (8) ___funcs_on_exit                                      3     3      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) __Exit                                                2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_SelectChannel                                    2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     626
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     533
                                             74 BANK0      6     2      4
                                              0 BANK1      4     4      0
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    2921
                                             40 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    2136
                                              0 BANK0     20    12      8
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             26    18      8    3896
                                             14 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) __Umul8_16                                            9     7      2     980
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             26    18      8    1729
                                             48 BANK0     26    18      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _KAPS_setRelPos                                       5     1      4     145
                                             13 BANK0      5     1      4
                           _packLong (ARG)
 ---------------------------------------------------------------------------------
 (3) _KAPS_setAbsPos                                       5     1      4     145
                                             13 BANK0      5     1      4
                           _packLong (ARG)
 ---------------------------------------------------------------------------------
 (3) _KAPS_getStatus                                       1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _KAPS_getPos                                          1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _KAPS_getIndex                                        1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _KAPS_StorePos                                        6     1      5     235
                                             13 BANK0      6     1      5
                           _packLong (ARG)
 ---------------------------------------------------------------------------------
 (3) _KAPS_GoToIdx                                         2     1      1     188
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
                                NULL *
 _EUSART_DefaultFramingErrorCallback *
 _EUSART_DefaultOverrunErrorCallback *
 ---------------------------------------------------------------------------------
 (2) _EUSART_DefaultOverrunErrorCallback                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_DefaultFramingErrorCallback                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_IsRxReady                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0     328
                            _ADC_ISR
                     _I2C1_ERROR_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (12) _I2C1_ISR                                            0     0      0     164
                  _I2C1_EventHandler
 ---------------------------------------------------------------------------------
 (13) _I2C1_EventHandler                                   2     2      0     164
                                              4 COMMON     2     2      0
                   _I2C1_EVENT_ERROR *
                    _I2C1_EVENT_IDLE *
                    _I2C1_EVENT_NACK *
                   _I2C1_EVENT_RESET *
                      _I2C1_EVENT_RX *
            _I2C1_EVENT_SEND_RD_ADDR *
            _I2C1_EVENT_SEND_WR_ADDR *
                    _I2C1_EVENT_STOP *
                      _I2C1_EVENT_TX *
                _I2C1_InterruptClear
                        _I2C1_IsAddr
                        _I2C1_IsData
                        _I2C1_IsNack
 ---------------------------------------------------------------------------------
 (14) _I2C1_IsNack                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_IsData                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_IsAddr                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C1_ERROR_ISR                                      0     0      0     164
             _I2C1_ErrorEventHandler
 ---------------------------------------------------------------------------------
 (13) _I2C1_ErrorEventHandler                              2     2      0     164
                                              4 COMMON     2     2      0
                                NULL *
               _I2C1_DefaultCallback *
                   _I2C1_EVENT_ERROR *
                    _I2C1_EVENT_IDLE *
                    _I2C1_EVENT_NACK *
                   _I2C1_EVENT_RESET *
                      _I2C1_EVENT_RX *
            _I2C1_EVENT_SEND_RD_ADDR *
            _I2C1_EVENT_SEND_WR_ADDR *
                    _I2C1_EVENT_STOP *
                      _I2C1_EVENT_TX *
           _I2C1_ErrorInterruptClear
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_TX                                       3     3      0      48
                                              1 COMMON     3     3      0
                  _I2C1_DataTransmit
                    _I2C1_EVENT_STOP
                 _I2C1_RestartEnable
 ---------------------------------------------------------------------------------
 (15) _I2C1_RestartEnable                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_SEND_WR_ADDR                             0     0      0      22
                  _I2C1_DataTransmit
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_SEND_RD_ADDR                             0     0      0      22
                  _I2C1_DataTransmit
 ---------------------------------------------------------------------------------
 (15) _I2C1_DataTransmit                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_RX                                       2     2      0      24
                                              0 COMMON     2     2      0
                       _I2C1_AckSend
                   _I2C1_DataReceive
                   _I2C1_IsRxBufFull
                      _I2C1_NackSend
                 _I2C1_ReceiveEnable
                _I2C1_RestartDisable
 ---------------------------------------------------------------------------------
 (15) _I2C1_RestartDisable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_ReceiveEnable                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_NackSend                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_IsRxBufFull                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_DataReceive                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_AckSend                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_NACK                                     1     1      0      24
                                              0 COMMON     1     1      0
                    _I2C1_EVENT_STOP
 ---------------------------------------------------------------------------------
 (15) _I2C1_EVENT_STOP                                     0     0      0       0
                         _I2C1_Close
                      _I2C1_StopSend
 ---------------------------------------------------------------------------------
 (16) _I2C1_StopSend                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _I2C1_Close                                          0     0      0       0
           _I2C1_ErrorInterruptClear
                _I2C1_InterruptClear
              _I2C1_StatusFlagsClear
 ---------------------------------------------------------------------------------
 (17) _I2C1_StatusFlagsClear                               0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_InterruptClear                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _I2C1_ErrorInterruptClear                            0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_IDLE                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_ERROR                                    1     1      0      24
                                              0 COMMON     1     1      0
                   _I2C1_EVENT_RESET
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_RESET                                    0     0      0       0
                      _I2C1_BusReset
 ---------------------------------------------------------------------------------
 (15) _I2C1_BusReset                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_DefaultCallback                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC_ISR                                             0     0      0       0
                                NULL *
        _ADC_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _ADC_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_IsRxReady
   _EUSART_Read
     NULL(Fake) *
     _EUSART_DefaultFramingErrorCallback *
     _EUSART_DefaultOverrunErrorCallback *
   _Parse
     _ProcessMsg
       _KAPS_GoToIdx
       _KAPS_StorePos
         _packLong (ARG)
       _KAPS_getIndex
       _KAPS_getPos
       _KAPS_getStatus
       _KAPS_setAbsPos
         _packLong (ARG)
       _KAPS_setRelPos
         _packLong (ARG)
       _SSPA_getPOut
         ___assert_fail
           _abort
             _exit
               __Exit
               ___funcs_on_exit
           _printf
             _vfprintf
               _vfpfcnvrt
                 ___awdiv
                 ___awmod
                 _abs
                   ___awmod (ARG)
                 _fputc
                   _putch
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___flsub (ARG)
             ___fladd
             ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
         ___flsub
         ___fltol
           ___fldiv (ARG)
           ___flmul (ARG)
           ___flsub (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _getADCValue
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           ___assert_fail
       _SSPA_getTemp
         ___assert_fail
         ___fldiv
         ___flmul
         ___flsub
         ___fltol
         ___xxtofl
         _getADCValue
       _SSPA_setMute
       _SendMsg
         _EUSART_Write
       _packLong
       _unpackLong
       _unpackWord
     _SendMsg
     _SendNack
       _SendMsg
   _SYSTEM_Initialize
     _ADC_Initialize
       _ADC_SetInterruptHandler
     _CLOCK_Initialize
     _EUSART_Initialize
       _EUSART_FramingErrorCallbackRegister
       _EUSART_OverrunErrorCallbackRegister
     _I2C1_Initialize
       _I2C1_CallbackRegister
       _I2C1_InterruptsEnable
     _INTERRUPT_Initialize
       _INT_SetInterruptHandler
     _PIN_MANAGER_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     NULL(Fake) *
     _ADC_DefaultInterruptHandler *
   _I2C1_ERROR_ISR
     _I2C1_ErrorEventHandler
       NULL(Fake) *
       _I2C1_DefaultCallback *
       _I2C1_EVENT_ERROR *
         _I2C1_EVENT_RESET
           _I2C1_BusReset
       _I2C1_EVENT_IDLE *
       _I2C1_EVENT_NACK *
         _I2C1_EVENT_STOP
           _I2C1_Close
             _I2C1_ErrorInterruptClear
             _I2C1_InterruptClear
             _I2C1_StatusFlagsClear
           _I2C1_StopSend
       _I2C1_EVENT_RESET *
       _I2C1_EVENT_RX *
         _I2C1_AckSend
         _I2C1_DataReceive
         _I2C1_IsRxBufFull
         _I2C1_NackSend
         _I2C1_ReceiveEnable
         _I2C1_RestartDisable
       _I2C1_EVENT_SEND_RD_ADDR *
         _I2C1_DataTransmit
       _I2C1_EVENT_SEND_WR_ADDR *
         _I2C1_DataTransmit
       _I2C1_EVENT_STOP *
       _I2C1_EVENT_TX *
         _I2C1_DataTransmit
         _I2C1_EVENT_STOP
         _I2C1_RestartEnable
       _I2C1_ErrorInterruptClear *
   _I2C1_ISR
     _I2C1_EventHandler
       _I2C1_EVENT_ERROR *
       _I2C1_EVENT_IDLE *
       _I2C1_EVENT_NACK *
       _I2C1_EVENT_RESET *
       _I2C1_EVENT_RX *
       _I2C1_EVENT_SEND_RD_ADDR *
       _I2C1_EVENT_SEND_WR_ADDR *
       _I2C1_EVENT_STOP *
       _I2C1_EVENT_TX *
       _I2C1_InterruptClear *
       _I2C1_IsAddr *
       _I2C1_IsData *
       _I2C1_IsNack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      E0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     25      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      38      10       70.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      E0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Jul 09 15:59:54 2024

                                      ___fldiv@aexp 0049                                        ___fldiv@bexp 0048  
                            ??_I2C1_DefaultCallback 0000                                        ___fldiv@sign 0041  
                                      ___awdiv@sign 0006         __end_of_EUSART_OverrunErrorCallbackRegister 0009  
             ??_EUSART_OverrunErrorCallbackRegister 0002                ?_EUSART_OverrunErrorCallbackRegister 0000  
               _EUSART_OverrunErrorCallbackRegister 0000                                     ??_I2C1_NackSend 0000  
                                   ??_I2C1_BusReset 0000                                       ?_KAPS_GoToIdx 0000  
                                     _KAPS_StorePos 0000                                  ___assert_fail@file 0032  
                                      _SSPA_getPOut 0000                                  ___assert_fail@func 0036  
                                ___assert_fail@line 0034                                  ___assert_fail@expr 0030  
                                      _SSPA_getTemp 0000                                 __Umul8_16@word_mpld 0006  
                                               l709 0001                                                 l690 0012  
                                               l682 0009                                                 l762 0169  
                                               l791 0141                                        ?_KAPS_getPos 0000  
                                               _abs 0000                           __end_of_I2C1_DataTransmit 0005  
                                   __end_of_ADC_ISR 000C                     __end_of_ADC_SetInterruptHandler 0008  
                                      ___awmod@sign 0006                                                 wreg 0009  
                          _I2C1_ErrorInterruptClear 0000                                        _SSPA_setMute 0000  
                                      ___flmul@aexp 001C                                        ___flmul@bexp 001D  
                      ?_ADC_DefaultInterruptHandler 0000                                       SendMsg@msg_id 0005  
                                      ___flmul@sign 001B                                        ___flmul@temp 0026  
                                      ___flmul@prod 0022                                       _KAPS_getIndex 0000  
                                      ?_EUSART_Read 0000                                        _BAUD1CONbits 019F  
                                  __end_of_I2C1_ISR 0003                                        ___fltol@exp1 004F  
                                              l1210 01AB                                                l1202 0193  
                                              ?_abs 0007                                                l1224 0042  
                                              l1321 0065                                                l1322 006F  
                                              l1314 0051                                                l1172 00B3  
                                              l1068 004F                                                l1308 001D  
                                              l1245 0149                                                l1246 0161  
                                              l1174 0098                                                l1248 016C  
                                              l1168 0044                                                l1345 0000  
                                              l1283 0010                                                l1276 01EF  
                                              l1189 0134                                                l3313 003C  
                                              l3411 0146                                                l3403 012C  
                                              l3309 0039                                                l5021 0015  
                                              l5101 002D                                                l3319 004E  
                                              l5023 0020                                                l5015 0003  
                                              l3433 0165                                                l3425 015A  
                                              l5041 002E                                                l5033 0007  
                                              l5017 000C                                                l3603 0018  
                                              l3419 0153                                                l3427 015C  
                                              l3291 0020                                                l5051 0075  
                                              l5035 0012                                                l5027 0002  
                                              l3605 0020                                                l3437 0167  
                                              l3357 009E                                                l3349 006C  
                                              l3285 0015                                                l5029 0004  
                                              l5301 0010                                                l3623 003A  
                                              l3455 01A3                                                l3383 00D1  
                                              l3375 00C1                                                l3359 00A0  
                                              l3367 00AE                                                l5223 005C  
                                              l5215 0021                                                l5311 0035  
                                              l5303 0014                                                l3705 0131  
                                              l3633 0061                                                l3385 00D3  
                                              l3393 00E2                                                l3289 0018  
                                              l3545 0007                                                l4601 001D  
                                              l5065 014F                                                l5233 00AC  
                                              l5209 0002                                                l5321 005C  
                                              l3619 0037                                                l3459 01A7  
                                              l4603 0029                                                l5067 015A  
                                              l5251 00E8                                                l5315 0046  
                                              l5307 0020                                                l3565 003B  
                                              l3549 0010                                                l4613 0044  
                                              l5253 0105                                                l5245 00D9  
                                              l5405 0133                                                l5341 00DE  
                                              l5325 006D                                                l3719 0168  
                                              l3639 006D                                                l3575 005C  
                                              l3567 004B                                                l4711 008F  
                                              l4703 0060                                                l5087 0013  
                                              l5255 010F                                                l5239 00BB  
                                              l5263 0146                                                l5351 0116  
                                              l5335 008F                                                l5281 0011  
                                              l3665 00CD                                                l4801 000A  
                                              l3905 008A                                                l4617 004C  
                                              l4609 003B                                                l4641 0017  
                                              l4633 0011                                                l4721 009E  
                                              l5257 011F                                                l5353 0119  
                                              l5337 00B5                                                l5329 007E  
                                              l3691 0106                                                l3683 00D8  
                                              l3659 00B4                                                l3667 0096  
                                              l4643 0023                                                l4651 0038  
                                              l4731 00D0                                                l4723 00BB  
                                              l5259 012F                                                l5355 011F  
                                              l3685 00EF                                                l3669 00D2  
                                              l4629 000A                                                l4741 010D  
                                              l4709 005D                                                l5349 010A  
                                              l3695 0108                                                l3599 0015  
                                              l3871 0015                                                l4591 0015  
                                              l4655 0040                                                l4647 002F  
                                              l4663 0008                                                l4751 013B  
                                              l5295 0002                                                l5359 0128  
                                              l5289 001F                                                l3881 002E  
                                              l4585 000A                                                l4665 000C  
                                              l4833 001B                                                l3891 0063  
                                              l3883 003E                                                l4755 0145  
                                              l5379 0007                                                l4861 0015  
                                              l3893 0056                                                l3877 002C  
                                              l4669 0033                                                l4749 011C  
                                              l4829 000E                                                l4951 0189  
                                              l4943 015B                                                l4863 0017  
                                              l4679 0000                                                l4695 003B  
                                              l4767 0004                                                l4945 0172  
                                              l4881 0038                                                l4865 001F  
                                              l4769 0017                                                l4955 018B  
                                              l4891 004E                                                l4883 0040  
                                              l4965 01B4                                                l4975 01E0  
                                              l4879 0036                                                l4969 01C9  
                                              STR_1 0000                                                STR_2 0000  
                                              STR_3 0000                                                STR_7 0000  
                                              STR_9 0000                                   _I2C1_Deinitialize 0000  
                                              _LATA 010C                                                _LATB 010D  
                                              _LATC 010E                                                u3045 017E  
                                              u3215 003C                                                u4035 000B  
                                              u3405 00C2                                                u3245 0053  
                                              u4045 0022                                                u4055 003A  
                                              u3185 0020                                                u3435 00DB  
                                              u5035 00BB                                                u3525 011F  
                                              u3365 009E                                                u5045 00E4  
                                              u3535 013A                                                u3455 00E4  
                                              u3375 00A5                                                u5055 012E  
                                              u2903 00F4                                                u3545 0153  
                                              u5065 014A                                                u2825 00A4  
                                              u3395 00AE                                                u5075 015E  
                                              u4515 0020                                                u2780 008B  
                                              u5165 01A2                                                u5325 000D  
                                              u2790 008C                                                u5175 01BD  
                                              u5095 0167                                                u2775 0080  
                                              u4535 002A                                                u4615 001A  
                                              u5335 002C                                                u5185 01D3  
                                              u2945 0147                                                u4545 0034  
                                              u4705 0031                                                u5345 0041  
                                              u4555 003C                                                u4635 0029  
                                              u5355 0067                                                u3925 0077  
                                              u3845 0037                                                u4645 0030  
                                              u5365 007C                                                u4750 005A  
                                              u2895 00D7                                                u5375 008D  
                                              u4760 005B                                                u4905 0011  
                                              u3865 004B                                                u5385 00FC  
                                              u3885 005D                                                u4945 0029  
                                              _UART 0000                                                _WPUA 020C  
                                              _WPUB 020D                                                _WPUC 020E  
                                              abs@a 0007                                     ??_I2C1_StopSend 0000  
                                              _dbuf 0000                                                _main 0000  
                                              _kaps 001E                                                _exit 0000  
                                              _prec 0016                                    __end_of_I2C_Host 0014  
                                              fsr0h 0005                                                fsr1h 0007  
                                              indf0 0000                                                fsr0l 0004  
                                              indf1 0001                                                fsr1l 0006  
                                              btemp 007E                         _INT_DefaultInterruptHandler 0000  
                                              start 0000*         __end_of_EUSART_DefaultOverrunErrorCallback 0004  
              ??_EUSART_DefaultOverrunErrorCallback 0000                 ?_EUSART_DefaultOverrunErrorCallback 0000  
                _EUSART_DefaultOverrunErrorCallback 0000                                     ___fldiv@new_exp 0042  
                   __end_of_INT_SetInterruptHandler 0008                                       ___assert_fail 0000  
                                   _I2C1_EVENT_IDLE 0000                                     _I2C1_EVENT_NACK 0000  
                                        _i2c1Status 0000                                     _I2C1_EVENT_STOP 0000  
                                             ??_abs 0009                                     __end_of_SendMsg 0032  
                                    ??_KAPS_GoToIdx 0001                                      ?_KAPS_StorePos 000D  
                                    _KAPS_getStatus 0000                                       ?_EUSART_Write 0000  
                                     ___fltol@sign1 004E                                     __end_of___fladd 01B1  
                                             ?_main 0000                                               ?_exit 0002  
                                   __end_of___fldiv 016F                                     __end_of___awdiv 0051  
                                             STR_10 0000                                               STR_11 0000  
                                             STR_12 0000                                               STR_13 0000  
                                             STR_15 0000                                               STR_16 0000  
                                             STR_17 0000                                               STR_18 0000  
                                             STR_19 0000                                     __end_of___awmod 0045  
                                   __end_of___flmul 01FC                                     __end_of___flsub 001D  
                                   __end_of___fltol 006B                                     ___awdiv@divisor 0000  
                                             _IOCAF 0393                                               _IOCBF 0396  
                                             _IOCCF 0399                                               _IOCAN 0392  
                                             _IOCAP 0391                                               _IOCBN 0395  
                                             _IOCBP 0394                                               _IOCCN 0398  
                                             _IOCCP 0397                                               i1l450 0018  
                                             i1l455 0020                                               i1l448 000E  
                                   ___awdiv@counter 0005                                        vfpfcnvrt@fmt 000D  
                                             _TRISA 008C                                               _TRISB 008D  
                                             _TRISC 008E                                               _RXPPS 0E24  
                          ?_I2C1_EVENT_SEND_RD_ADDR 0000                                               _Parse 0000  
                                    ?_KAPS_getIndex 0000                                               __Exit 0000  
                                 ??_I2C1_Initialize 0002                                               _abort 0000  
                                             _flags 0004                                     SendMsg@data_len 0002  
                           ??_I2C1_CallbackRegister 0002                                               _count 0005  
                                             _funcs 000E                                               _fputc 0000  
                                 ?_I2C1_IsRxBufFull 0000                                    ProcessMsg@msg_id 000D  
                          ?_I2C1_EVENT_SEND_WR_ADDR 0000                                               _width 0014  
                                             _sppas 0000                                               _putch 0000  
                                             pclath 000A                               I2C1_DataTransmit@data 0000  
                                    _KAPS_setAbsPos 0000                                  ??_I2C1_IsRxBufFull 0000  
                                             status 0003                                               wtemp0 007E  
                                    _KAPS_setRelPos 0000                                      ?___assert_fail 0030  
                                      ??_I2C1_Close 0000                                          SendMsg@sum 0004  
                                      __end_of_UART 0030                                     __initialization 0000  
                          ??_I2C1_ErrorEventHandler 0004                                        __end_of_main 0019  
                            __end_of_KAPS_getStatus 0001                                        __end_of_exit 000A  
                                    getADCValue@avg 003D                                    _I2C1_EVENT_ERROR 0000  
                                    ??_EUSART_Write 0001                                    _I2C1_EVENT_RESET 0000  
                                         ??_ADC_ISR 0000                         ?_INTERRUPT_InterruptManager 0000  
                                  __end_of_SendNack 000A                                              ??_main 0050  
                                            ??_exit 0004                                    SSPA_setMute@band 0000  
                                  SSPA_setMute@mute 0001                                    SSPA_setMute@sspa 0002  
EUSART_OverrunErrorCallbackRegister@callbackHandler 0000  EUSART_FramingErrorCallbackRegister@callbackHandler 0000  
              I2C1_CallbackRegister@callbackHandler 0000                                              ?_Parse 0014  
                                            ?__Exit 0000                                  __end_of_I2C1_Close 0014  
                                            ?_abort 0000                                              _ADCON0 009D  
                                            _ADCON1 009E                                              _ADCON2 009F  
                        _EUSART_OverrunErrorHandler 0000                               _I2C1_InterruptsEnable 0000  
                                            ?_fputc 0000                                              _ADRESH 009C  
                                            _ADRESL 009B                              __end_of_KAPS_setAbsPos 0001  
                                  ___awdiv@dividend 0002                                              _ANSELA 018C  
                                            ?_putch 0000                                              _ANSELB 018D  
                                            _ANSELC 018E                                              _BORCON 0116  
                                 KAPS_setAbsPos@pos 000D                                              _RC1REG 0199  
                                            _RC1STA 019D                                              _RC2PPS 0EA2  
                                            _RB5PPS 0E9D                                              _RB6PPS 0E9E  
                                            _ODCONA 028C                                              _ODCONB 028D  
                                            _ODCONC 028E                                              i1l4173 0025  
                                            i1l4167 0014                                              i1l3965 0023  
                                            i1l3957 0019                                              i1l3967 0026  
                                            i1l3983 0024                                              i1l3991 0035  
                                            i1l3993 0037                                              i1l3987 002C  
                                            _INLVLA 038C                                              _INLVLB 038D  
                                            _INLVLC 038E                                              _OSCCON 0099  
                            __end_of_KAPS_setRelPos 0001                                       vfpfcnvrt@done 0017  
                                            _SPBRGH 019C                                              _SPBRGL 019B  
                                            _TX1REG 019A                                              _TX1STA 019E  
                           __end_of_I2C1_EVENT_IDLE 0003                                    __end_of___xxtofl 0093  
                           __end_of_I2C1_EVENT_NACK 0005                             __end_of_I2C1_EVENT_STOP 0007  
                                KAPS_getStatus@kaps 0000                               SSPA_getPOut@adc_value 0008  
                                         ??_SendMsg 0003                                         Parse@parser 0017  
                       __end_of_I2C1_InterruptClear 0003                                        vfprintf@cfmt 0023  
                                   ??_KAPS_StorePos 0012                                           ??___fladd 0008  
                                   ?_KAPS_getStatus 0000                                           ??___fldiv 0038  
                                         ??___awdiv 0004                                    __end_of_packLong 0057  
                                         ??___awmod 0004                                           ??___flmul 0016  
                                         ??___flsub 0030                                           ??___fltol 0000  
                                _I2C1_RestartEnable 0000                                           ?_I2C1_ISR 0000  
                                  ___awdiv@quotient 0007                                   ?_EUSART_IsRxReady 0000  
                                   ___awmod@divisor 0000                     __end_of_I2C1_EVENT_SEND_RD_ADDR 0006  
                                 ProcessMsg@payload 000E                                     ___awmod@counter 0005  
                                            _printf 0000                                          _ProcessMsg 0000  
                                      packLong@data 000C                                   ?_CLOCK_Initialize 0000  
                                ??_EUSART_IsRxReady 0000                                     ??_KAPS_getIndex 0000  
                                            fputc@c 0000                                  ??_CLOCK_Initialize 0000  
                   __end_of_I2C1_EVENT_SEND_WR_ADDR 0005                                 ?_I2C1_RestartEnable 0000  
                                            putch@c 0000                                    __end_of_vfprintf 001A  
           INT_SetInterruptHandler@InterruptHandler 0000             ADC_SetInterruptHandler@InterruptHandler 0000  
                                   ?_KAPS_setAbsPos 000D                                        ___xxtofl@arg 000A  
                                      ___xxtofl@exp 0009                                __end_of_KAPS_GoToIdx 0008  
                                 _SYSTEM_Initialize 0000                                        ___xxtofl@val 0000  
                           __end_of__initialization 0021                                     ?_KAPS_setRelPos 000D  
                                     ??_I2C1_IsAddr 0000                                       ??_I2C1_IsData 0000  
                                   ??___assert_fail 0038                                       ??_I2C1_IsNack 0000  
                                ?_SYSTEM_Initialize 0000                                         SendMsg@data 0001  
                                getADCValue@channel 003C                                          ___fltol@f1 004A  
                              ??_I2C1_RestartEnable 0000                                      __pcstackCOMMON 0000  
                                     __end_of_Parse 0142                                       __end_of__Exit 0001  
                                      __pidataBANK2 0000                                 ??_SYSTEM_Initialize 0002  
                                     __end_of_abort 0007                                       __end_of_fputc 0055  
                        ??_I2C1_ErrorInterruptClear 0000                                       __end_of_putch 0001  
                                        ??_I2C1_ISR 0006                             _ADC_GetConversionResult 0000  
                                    _OPTION_REGbits 0095                                   ??___funcs_on_exit 0000  
                             __end_of_I2C1_EVENT_RX 0039                               __end_of_I2C1_EVENT_TX 0028  
                                           ??_Parse 0015                                             ??__Exit 0002  
                            ?_I2C1_InterruptsEnable 0000                                             ??_abort 0004  
                                 _I2C1_EventHandler 0000                                             ??_fputc 0004  
                         __end_of_SYSTEM_Initialize 0012                                             ??_putch 0000  
                                        __pbssBANK1 0000                                          __pbssBANK2 0000  
                              __end_of_EUSART_Write 0004                                  ?_I2C1_EventHandler 0000  
                             _I2C1_StatusFlagsClear 0000                                    ?_I2C1_EVENT_IDLE 0000  
                                  ?_I2C1_EVENT_NACK 0000                                           ?_SendNack 0000  
                                  ?_I2C1_EVENT_STOP 0000                                   __end_of__Umul8_16 001F  
                               ??_I2C1_EventHandler 0004                                          __pmaintext 0000  
                               __end_of_I2C1_IsAddr 0007                                 __end_of_I2C1_IsData 0004  
                               __end_of_I2C1_IsNack 0005                                          __pintentry 0000  
                                   _I2C1_Initialize 0000                                _EUSART_AutoBaudQuery 0000  
                                           _ADC_ISR 0000                                         ?_ProcessMsg 000B  
                                           ?_printf 0025                               __end_of_I2C1_NackSend 0003  
                                KAPS_setAbsPos@kaps 0011                               __end_of_I2C1_BusReset 0004  
                                   _EUSART_IsTxDone 0000                                           ?___xxtofl 0000  
                                   _EUSART_ErrorGet 0000                                           _I2C1_Read 0000  
                         __end_of_I2C1_EventHandler 003A                              _I2C1_ErrorEventHandler 0000  
                                           _OSCTUNE 0098                                             _SSP1ADD 0212  
                                           _SLRCONA 030C                                             _SLRCONB 030D  
                                           _SLRCONC 030E                                             _SSP1BUF 0211  
                          __end_of_I2C1_EVENT_ERROR 0005                            __end_of_I2C1_EVENT_RESET 0006  
                                         ?_packLong 0000                       __end_of_I2C1_CallbackRegister 000C  
                                   KAPS_getPos@kaps 0000                               __end_of_I2C1_StopSend 0003  
                                        ??_SendNack 0006                                _ADC_InterruptHandler 0000  
                                           _SendMsg 0000                             _ADC_SetInterruptHandler 0000  
                                     ??_getADCValue 003A                                             ___fladd 0000  
                                           ___fldiv 0000                                    KAPS_StorePos@idx 000D  
                                           ___awdiv 0000                                             ___awmod 0000  
                                  KAPS_StorePos@pos 000E                                             ___flmul 0000  
                                           ___flsub 0000                                             ___fltol 0000  
                                         ?_vfprintf 001D                           ??_ADC_GetConversionResult 0002  
                                           __ptext1 0000                                             __ptext2 0000  
                                           __ptext3 0000                                             __ptext4 0000  
                                           __ptext5 0000                                             __ptext6 0000  
                                           __ptext7 0000                                             __ptext8 0000  
                                           __ptext9 0000                                 _I2C1_RestartDisable 0000  
                                        ??___xxtofl 0004                                    ___awmod@dividend 0002  
                          ??_PIN_MANAGER_Initialize 0000                                       ?_I2C1_AckSend 0000  
                           _INT_SetInterruptHandler 0000                                     _i2c1_eventTable 0000  
                                           clrloop0 0001                                end_of_initialization 0021  
                                        ??_packLong 0004                              ?_I2C1_StatusFlagsClear 0000  
                                           fputc@fp 0002                                             init_ram 0000  
                                           initloop 0001                                         _I2C1_IsAddr 0000  
                                       _I2C1_IsData 0000                                    vfpfcnvrt@cp_2048 0013  
                                       _I2C1_IsNack 0000                                         _I2C1_IsBusy 0000  
                                  ??_KAPS_getStatus 0000                                   _EUSART_Initialize 0000  
                              ?_I2C1_RestartDisable 0000                             __end_of_I2C1_Initialize 0016  
                      __end_of_ADC_IsConversionDone 0007                                  ?_EUSART_Initialize 0000  
                                 __end_of_vfpfcnvrt 015F                                   KAPS_getIndex@kaps 0000  
                                  vfpfcnvrt@convarg 0018                                    _I2C1_DataReceive 0000  
                                        ??_vfprintf 0022                                 __end_of_getADCValue 0032  
                               ??_EUSART_Initialize 0002                                        _KAPS_GoToIdx 0000  
                                         _SSPDATPPS 0E21                                           _SSPCLKPPS 0E20  
                                       ___fladd@grs 0013                                    ??_KAPS_setAbsPos 0011  
                                    ??_I2C1_AckSend 0000                 __end_of_ADC_DefaultInterruptHandler 0001  
                       _ADC_DefaultInterruptHandler 0000                                       ___xxtofl@sign 0008  
                               _ADC_StartConversion 0000                                    ??_KAPS_setRelPos 0011  
                                       ___fldiv@grs 0044                                         ___fldiv@rem 003D  
                               _EUSART_Deinitialize 0000                                          _unpackLong 0000  
                                        _unpackWord 0000                                         ___flmul@grs 001E  
                         __end_of_EUSART_Initialize 001D                       ??_ADC_DefaultInterruptHandler 0000  
                         ??_ADC_SetInterruptHandler 0002                               ??_I2C1_RestartDisable 0000  
                                    ProcessMsg@data 000B                                          main@parser 0019  
                              ?_ADC_StartConversion 0000                                        getADCValue@i 003F  
                                   ___funcs_on_exit 0000                        __end_of_INTERRUPT_Initialize 000B  
                                    _I2C1_ERROR_ISR 0000                               __end_of_KAPS_StorePos 0001  
                                       vfpfcnvrt@ap 000E                                         vfpfcnvrt@cp 0015  
                                       vfpfcnvrt@fp 000B                                           Parse@data 0014  
                                     ?_SSPA_getPOut 0004                          __end_of_I2C1_ReceiveEnable 0002  
                                      _EUSART_Write 0000                                       ?_SSPA_getTemp 0004  
                           __end_of_i2c1_eventTable 0012                                      _ADC_Initialize 0000  
                              KAPS_setRelPos@offset 000D                                 SSPA_getPOut@channel 000A  
                         ??_INT_SetInterruptHandler 0002                             ??_I2C1_InterruptsEnable 0000  
                                     ??_KAPS_getPos 0000                                      __end_of_printf 000E  
                               start_initialization 0000                                       ?_SSPA_setMute 0000  
                             __end_of_KAPS_getIndex 0001                                         __end_of_abs 000E  
                                     ??_EUSART_Read 0000                             _I2C1_EVENT_SEND_RD_ADDR 0000  
                             __end_of___assert_fail 001A                                    ?_I2C1_Initialize 0000  
                             ??_ADC_StartConversion 0000                             _I2C1_EVENT_SEND_WR_ADDR 0000  
                                       _getADCValue 0000                              __end_of_I2C1_ERROR_ISR 0003  
                                       vfprintf@fmt 001F                          _EUSART_FramingErrorHandler 0002  
                                  _I2C1_IsRxBufFull 0000                              __end_of_ADC_Initialize 0012  
                                         __Umul8_16 0000                                         __pdataBANK2 0000  
                                    ??_SSPA_getPOut 0005                                      ??_SSPA_getTemp 0005  
                                          ?_ADC_ISR 0000                                     unpackLong@value 0000  
                                      ??_ProcessMsg 000C                                            ??_printf 002F  
                                         ___fladd@a 0004                                           ___fladd@b 0000  
                           ?_I2C1_ErrorEventHandler 0000                                           ___fldiv@a 0030  
                                         ___fldiv@b 0034                                      ??_SSPA_setMute 0002  
                                         ___flmul@a 0012                                           ___flmul@b 000E  
                                       __pbssCOMMON 0000                                           ___flsub@a 0028  
                                         ___flsub@b 002C                                           ___latbits 0001  
                                     __pcstackBANK0 0000                                       __pcstackBANK1 0000  
                                  KAPS_GoToIdx@kaps 0001                                _ADC_IsConversionDone 0000  
                                KAPS_setRelPos@kaps 0011                                         ?_unpackLong 0000  
                               __end_of_KAPS_getPos 0001                                         ?_unpackWord 0000  
                         ?_I2C1_ErrorInterruptClear 0000                        __end_of_I2C1_DefaultCallback 0001  
                                 ?_I2C1_EVENT_ERROR 0000                                   ?_I2C1_EVENT_RESET 0000  
                               __end_of_EUSART_Read 0022                                  ??_I2C1_EVENT_ERROR 0000  
                           __end_of___funcs_on_exit 000A                                  ??_I2C1_EVENT_RESET 0000  
                                         __pnvBANK1 0000                                  __end_of_ProcessMsg 016A  
                                          ?_SendMsg 0001                                __end_of_I2C1_AckSend 0004  
                            _PIN_MANAGER_Initialize 0000                                     ?_I2C1_ERROR_ISR 0000  
                                 _ADC_SelectChannel 0000                                            ?___fladd 0000  
                                          ?___fldiv 0030                                            ?___awdiv 0000  
                                          ?___awmod 0000                                            ?___flmul 000E  
                                          ?___flsub 0028                                            ?___fltol 004A  
                                        ?__Umul8_16 0000                                     ?_ADC_Initialize 0000  
                                ?_ADC_SelectChannel 0000                                            _I2C1_ISR 0000  
                      ??_INTERRUPT_InterruptManager 0006                      __end_of_I2C1_ErrorEventHandler 0022  
                                          _BAUD1CON 019F                              _EUSART_TransmitDisable 0000  
                                  SSPA_getPOut@band 0004                                            _I2C_Host 0000  
                               ??_ADC_SelectChannel 0000                                    SSPA_getPOut@sspa 0007  
                             ?_ADC_IsConversionDone 0000                       I2C1_EVENT_ERROR@retEventState 0000  
                           ??_I2C1_StatusFlagsClear 0000                            __end_of_I2C1_DataReceive 0003  
                         ??_I2C1_EVENT_SEND_RD_ADDR 0000                                    _EUSART_IsRxReady 0000  
                              _INTERRUPT_Initialize 0000                                     unpackWord@value 0000  
                                  _EUSART_IsTxReady 0000                                    _CLOCK_Initialize 0000  
                                      ?_I2C1_IsAddr 0000                                        ?_I2C1_IsData 0000  
                                          _LATCbits 010E                                        ?_I2C1_IsNack 0000  
                         ??_I2C1_EVENT_SEND_WR_ADDR 0001                               _I2C1_CallbackRegister 0000  
                                         clear_ram0 0000                                            _PIE1bits 0090  
                                          _PIE2bits 0091                                   _eusartRxLastError 0018  
                                        _I2C1_Close 0000                           __end_of_ADC_SelectChannel 000E  
                                          _PIR1bits 0010                                            _PIR2bits 0011  
                                        _I2C1_Write 0000                                      _I2C1_WriteRead 0000  
                                          _SSP1CON1 0215                                            _SSP1CON2 0216  
                                          _SSP1CON3 0217                                            _SSP1STAT 0214  
                                  SSPA_getTemp@band 0004                                           _vfpfcnvrt 0000  
                                  SSPA_getTemp@sspa 0009                                          _ADCON0bits 009D  
                          ADC_SelectChannel@channel 0001                                         _KAPS_getPos 0000  
                      I2C1_EVENT_NACK@retEventState 0000                                       _I2C1_EVENT_RX 0000  
                                     _I2C1_EVENT_TX 0000                                         _EUSART_Read 0000  
                                        vfpfcnvrt@c 001C                               ?_INTERRUPT_Initialize 0000  
                              __end_of_SSPA_getPOut 0179                                __end_of_SSPA_getTemp 009D  
                               _I2C1_InterruptClear 0000                                    ?___funcs_on_exit 0000  
                                          _SendNack 0000                                            __Exit@ec 0000  
                              __end_of_SSPA_setMute 0028                                          vfprintf@ap 0021  
                                        vfprintf@fp 001D                            ?_ADC_GetConversionResult 0000  
                                    unpackLong@data 0004                                       _I2C1_Callback 001C  
                                       ??__Umul8_16 0002                                   KAPS_StorePos@kaps 0012  
                                        ?_vfpfcnvrt 000B                                _I2C1_DefaultCallback 0000  
                                   KAPS_GoToIdx@idx 0000                                ?_I2C1_InterruptClear 0000  
                                     _I2C1_NackSend 0000                              ??_ADC_IsConversionDone 0000  
                                     _I2C1_BusReset 0000                                   ??_I2C1_EVENT_IDLE 0000  
                                 ??_I2C1_EVENT_NACK 0000                                            ___xxtofl 0000  
                                 ??_I2C1_EVENT_STOP 0000                       __end_of_I2C1_InterruptsEnable 0004  
                                    ?_I2C1_EVENT_RX 0000                                      ?_I2C1_EVENT_TX 0000  
                                     _I2C1_ErrorGet 0000                                  _EUSART_AutoBaudSet 0000  
                                          __ptext10 0000                                            __ptext11 0000  
                                          __ptext20 0000                                            __ptext12 0000  
                                          __ptext21 0000                                            __ptext13 0000  
                                          __ptext30 0000                                            __ptext22 0000  
                                          __ptext14 0000                                            __ptext31 0000  
                                          __ptext23 0000                                            __ptext15 0000  
                                          __ptext40 0000                                            __ptext32 0000  
                                          __ptext24 0000                                            __ptext16 0000  
                                          __ptext41 0000                                            __ptext33 0000  
                                          __ptext25 0000                                            __ptext17 0000  
                                          __ptext50 0000                                            __ptext42 0000  
                                          __ptext34 0000                                            __ptext26 0000  
                                          __ptext18 0000                                            __ptext51 0000  
                                          __ptext43 0000                                            __ptext35 0000  
                                          __ptext27 0000                                            __ptext19 0000  
                                          __ptext60 0000                                            __ptext52 0000  
                                          __ptext44 0000                                            __ptext36 0000  
                                          __ptext28 0000                                            __ptext53 0000  
                                          __ptext45 0000                                            __ptext37 0000  
                                          __ptext29 0000                                            __ptext70 0000  
                                          __ptext62 0000                                            __ptext54 0000  
                                          __ptext46 0000                                            __ptext38 0000  
                                          __ptext71 0000                                            __ptext63 0000  
                                          __ptext55 0000                                            __ptext47 0000  
                                          __ptext39 0000                                            __ptext80 0000  
                                          __ptext72 0000                                            __ptext64 0000  
                                          __ptext56 0000                                            __ptext48 0000  
                                          __ptext81 0000                                            __ptext73 0000  
                                          __ptext65 0000                                            __ptext57 0000  
                                          __ptext49 0000                                            __ptext90 0000  
                                          __ptext82 0000                                            __ptext74 0000  
                                          __ptext66 0000                                            __ptext58 0000  
                                          __ptext91 0000                                            __ptext83 0000  
                                          __ptext75 0000                                            __ptext67 0000  
                                          __ptext59 0000                                            __ptext92 0000  
                                          __ptext84 0000                                            __ptext76 0000  
                                          __ptext68 0000                                            __ptext93 0000  
                                          __ptext85 0000                                            __ptext77 0000  
                                          __ptext69 0000                                            __ptext94 0000  
                                          __ptext86 0000                                            __ptext78 0000  
                                          __ptext87 0000                                            __ptext79 0000  
                                          __ptext88 0000                                            __ptext89 0000  
                          __end_of_I2C1_IsRxBufFull 0004                                        _SSP1CON1bits 0215  
                                      _SSP1CON2bits 0216                         __end_of_I2C1_RestartDisable 0003  
                                _I2C1_ReceiveEnable 0000                               _EUSART_TransmitEnable 0000  
                                          _packLong 0000                              ?_I2C1_CallbackRegister 0000  
                                    unpackWord@data 0002                                 ?_I2C1_ReceiveEnable 0000  
                                       ?_I2C1_Close 0000                                       _I2C1_StopSend 0000  
                                      ?_getADCValue 0038                                          _RC1STAbits 019D  
                                          int$flags 007E                                            _vfprintf 0000  
                __end_of_INTERRUPT_InterruptManager 0022                          _INTERRUPT_InterruptManager 0000  
       __end_of_EUSART_FramingErrorCallbackRegister 0009               ??_EUSART_FramingErrorCallbackRegister 0002  
              ?_EUSART_FramingErrorCallbackRegister 0000                 _EUSART_FramingErrorCallbackRegister 0000  
                             ?_I2C1_DefaultCallback 0000                                            main@data 0018  
                                         printf@fmt 0025                                        _SSP1STATbits 0214  
                             ??_I2C1_InterruptClear 0000                    __end_of_I2C1_ErrorInterruptClear 0003  
                             SSPA_getTemp@adc_value 0007                                      ?_I2C1_NackSend 0000  
                                    ?_I2C1_BusReset 0000                                ??_I2C1_ReceiveEnable 0000  
                                    packLong@result 0008                                          _INTCONbits 000B  
                                          exit@code 0002                                        _I2C1_AckSend 0000  
                              _INT_InterruptHandler 001A                                      __pstringtext10 0000  
                                    __pstringtext11 0000                                      __pstringtext12 0000  
                            ??_INTERRUPT_Initialize 0002                                        ??_unpackLong 0005  
                        I2C1_EVENT_RX@retEventState 0001                            ?_ADC_SetInterruptHandler 0000  
                                      ??_unpackWord 0003                                            intlevel1 0000* 
                       __end_of_ADC_StartConversion 0003                                    ??_I2C1_ERROR_ISR 0006  
                           ?_PIN_MANAGER_Initialize 0000                          __end_of_I2C1_RestartEnable 0003  
        __end_of_EUSART_DefaultFramingErrorCallback 0001                ??_EUSART_DefaultFramingErrorCallback 0000  
               ?_EUSART_DefaultFramingErrorCallback 0000                  _EUSART_DefaultFramingErrorCallback 0000  
                   __end_of_ADC_GetConversionResult 0008                                      ?_I2C1_StopSend 0000  
                                  ??_ADC_Initialize 0002                                            printf@ap 002F  
                          ?_INT_SetInterruptHandler 0000                            __end_of_EUSART_IsRxReady 0005  
                                       ??_vfpfcnvrt 000F                                  __end_of_unpackLong 0017  
                          __end_of_CLOCK_Initialize 0007                                  __end_of_unpackWord 000B  
                                     __pstringtext1 0000                                       __pstringtext2 0000  
                                     __pstringtext3 0000                                       __pstringtext4 0000  
                                     __pstringtext5 0000                                       __pstringtext6 0000  
                                     __pstringtext7 0000                                       __pstringtext8 0000  
                                     __pstringtext9 0000                              __Umul8_16@multiplicand 0000  
                                   ??_I2C1_EVENT_RX 0000                                     ??_I2C1_EVENT_TX 0001  
                                 _I2C1_DataTransmit 0000                                          _TX1STAbits 019E  
                                     ___fladd@signs 0010                                  ?_I2C1_DataTransmit 0000  
                               SSPA_getTemp@channel 000A                                   ?_I2C1_DataReceive 0000  
                                EUSART_Write@txData 0000                                       SendNack@error 0006  
                    __end_of_PIN_MANAGER_Initialize 004B                       __end_of_I2C1_StatusFlagsClear 0004  
                                      ___fladd@aexp 0011                                        ___fladd@bexp 0012  
                                ??_I2C1_DataReceive 0000                                __Umul8_16@multiplier 0008  
                        I2C1_EVENT_TX@retEventState 0003                                 ??_I2C1_DataTransmit 0000  
                                 __Umul8_16@product 0004  
