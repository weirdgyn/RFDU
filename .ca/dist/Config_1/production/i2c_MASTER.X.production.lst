

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Jul 09 15:59:51 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16LF1618
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK2,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    15                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    17                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,noexec
    23                           	psect	inittext,global,class=CODE,delta=2
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text27,local,class=CODE,merge=1,delta=2,group=3
    56                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text30,local,class=CODE,merge=1,delta=2,group=3
    59                           	psect	text31,local,class=CODE,merge=1,delta=2,group=3
    60                           	psect	text32,local,class=CODE,merge=1,delta=2,group=3
    61                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2,group=3
    64                           	psect	text36,local,class=CODE,merge=1,delta=2,group=3
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=3
    66                           	psect	text38,local,class=CODE,merge=1,delta=2,group=3
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	intentry,global,class=CODE,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   124                           	dabs	1,0x7E,2
   125  0000                     
   126                           ; Generated 07/09/2023 GMT
   127                           ; 
   128                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   129                           ; All rights reserved.
   130                           ; 
   131                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   132                           ; 
   133                           ; Redistribution and use in source and binary forms, with or without modification, are
   134                           ; permitted provided that the following conditions are met:
   135                           ; 
   136                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   137                           ;        conditions and the following disclaimer.
   138                           ; 
   139                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   140                           ;        of conditions and the following disclaimer in the documentation and/or other
   141                           ;        materials provided with the distribution. Publication is not required when
   142                           ;        this file is used in an embedded application.
   143                           ; 
   144                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   145                           ;        software without specific prior written permission.
   146                           ; 
   147                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   148                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   149                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   150                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   151                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   152                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   153                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   154                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   155                           ; 
   156                           ; 
   157                           ; Code-generator required, PIC16LF1618 Definitions
   158                           ; 
   159                           ; SFR Addresses
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0013                     	;# 
   179  0014                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0093                     	;# 
   201  0094                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  0111                     	;# 
   217  0112                     	;# 
   218  0113                     	;# 
   219  0114                     	;# 
   220  0115                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  0118                     	;# 
   224  0119                     	;# 
   225  011C                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0191                     	;# 
   230  0191                     	;# 
   231  0192                     	;# 
   232  0193                     	;# 
   233  0193                     	;# 
   234  0194                     	;# 
   235  0195                     	;# 
   236  0196                     	;# 
   237  0199                     	;# 
   238  0199                     	;# 
   239  0199                     	;# 
   240  019A                     	;# 
   241  019A                     	;# 
   242  019A                     	;# 
   243  019B                     	;# 
   244  019B                     	;# 
   245  019B                     	;# 
   246  019B                     	;# 
   247  019B                     	;# 
   248  019C                     	;# 
   249  019C                     	;# 
   250  019C                     	;# 
   251  019D                     	;# 
   252  019D                     	;# 
   253  019D                     	;# 
   254  019E                     	;# 
   255  019E                     	;# 
   256  019E                     	;# 
   257  019F                     	;# 
   258  019F                     	;# 
   259  019F                     	;# 
   260  019F                     	;# 
   261  019F                     	;# 
   262  020C                     	;# 
   263  020D                     	;# 
   264  020E                     	;# 
   265  0211                     	;# 
   266  0211                     	;# 
   267  0212                     	;# 
   268  0212                     	;# 
   269  0213                     	;# 
   270  0213                     	;# 
   271  0214                     	;# 
   272  0214                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0215                     	;# 
   276  0215                     	;# 
   277  0216                     	;# 
   278  0216                     	;# 
   279  0217                     	;# 
   280  0217                     	;# 
   281  028C                     	;# 
   282  028D                     	;# 
   283  028E                     	;# 
   284  0291                     	;# 
   285  0291                     	;# 
   286  0292                     	;# 
   287  0293                     	;# 
   288  0294                     	;# 
   289  0298                     	;# 
   290  0298                     	;# 
   291  0299                     	;# 
   292  029A                     	;# 
   293  029B                     	;# 
   294  029E                     	;# 
   295  030C                     	;# 
   296  030D                     	;# 
   297  030E                     	;# 
   298  038C                     	;# 
   299  038D                     	;# 
   300  038E                     	;# 
   301  0391                     	;# 
   302  0392                     	;# 
   303  0393                     	;# 
   304  0394                     	;# 
   305  0395                     	;# 
   306  0396                     	;# 
   307  0397                     	;# 
   308  0398                     	;# 
   309  0399                     	;# 
   310  040E                     	;# 
   311  0413                     	;# 
   312  0413                     	;# 
   313  0414                     	;# 
   314  0414                     	;# 
   315  0415                     	;# 
   316  0416                     	;# 
   317  0417                     	;# 
   318  0418                     	;# 
   319  041A                     	;# 
   320  041A                     	;# 
   321  041B                     	;# 
   322  041B                     	;# 
   323  041C                     	;# 
   324  041D                     	;# 
   325  041E                     	;# 
   326  041F                     	;# 
   327  0493                     	;# 
   328  0494                     	;# 
   329  0495                     	;# 
   330  0496                     	;# 
   331  049A                     	;# 
   332  049B                     	;# 
   333  049C                     	;# 
   334  049D                     	;# 
   335  058C                     	;# 
   336  058C                     	;# 
   337  058D                     	;# 
   338  058E                     	;# 
   339  058E                     	;# 
   340  058F                     	;# 
   341  0590                     	;# 
   342  0590                     	;# 
   343  0591                     	;# 
   344  0592                     	;# 
   345  0592                     	;# 
   346  0593                     	;# 
   347  0594                     	;# 
   348  0594                     	;# 
   349  0595                     	;# 
   350  0596                     	;# 
   351  0596                     	;# 
   352  0597                     	;# 
   353  0598                     	;# 
   354  0599                     	;# 
   355  059A                     	;# 
   356  059B                     	;# 
   357  059B                     	;# 
   358  059C                     	;# 
   359  059D                     	;# 
   360  060C                     	;# 
   361  060C                     	;# 
   362  060D                     	;# 
   363  060E                     	;# 
   364  060F                     	;# 
   365  060F                     	;# 
   366  0610                     	;# 
   367  0611                     	;# 
   368  0612                     	;# 
   369  0613                     	;# 
   370  0614                     	;# 
   371  0617                     	;# 
   372  0617                     	;# 
   373  0618                     	;# 
   374  0619                     	;# 
   375  061A                     	;# 
   376  061A                     	;# 
   377  061B                     	;# 
   378  061C                     	;# 
   379  0691                     	;# 
   380  0692                     	;# 
   381  0693                     	;# 
   382  0694                     	;# 
   383  0695                     	;# 
   384  0696                     	;# 
   385  0697                     	;# 
   386  0699                     	;# 
   387  069A                     	;# 
   388  0711                     	;# 
   389  0712                     	;# 
   390  0713                     	;# 
   391  0714                     	;# 
   392  0715                     	;# 
   393  0718                     	;# 
   394  0718                     	;# 
   395  0719                     	;# 
   396  071A                     	;# 
   397  071A                     	;# 
   398  071B                     	;# 
   399  071C                     	;# 
   400  071D                     	;# 
   401  0791                     	;# 
   402  0791                     	;# 
   403  0792                     	;# 
   404  0793                     	;# 
   405  0793                     	;# 
   406  0794                     	;# 
   407  0795                     	;# 
   408  0795                     	;# 
   409  0796                     	;# 
   410  0797                     	;# 
   411  0797                     	;# 
   412  0798                     	;# 
   413  0799                     	;# 
   414  079A                     	;# 
   415  080C                     	;# 
   416  080C                     	;# 
   417  080D                     	;# 
   418  080E                     	;# 
   419  080E                     	;# 
   420  080F                     	;# 
   421  0810                     	;# 
   422  0810                     	;# 
   423  0811                     	;# 
   424  0812                     	;# 
   425  0812                     	;# 
   426  0813                     	;# 
   427  0814                     	;# 
   428  0815                     	;# 
   429  0816                     	;# 
   430  0817                     	;# 
   431  0818                     	;# 
   432  0819                     	;# 
   433  081A                     	;# 
   434  081A                     	;# 
   435  081B                     	;# 
   436  081C                     	;# 
   437  081C                     	;# 
   438  081D                     	;# 
   439  088C                     	;# 
   440  088D                     	;# 
   441  088E                     	;# 
   442  088F                     	;# 
   443  088F                     	;# 
   444  0890                     	;# 
   445  0891                     	;# 
   446  0892                     	;# 
   447  0893                     	;# 
   448  0893                     	;# 
   449  0894                     	;# 
   450  0895                     	;# 
   451  0896                     	;# 
   452  0897                     	;# 
   453  0897                     	;# 
   454  0898                     	;# 
   455  0899                     	;# 
   456  0D8C                     	;# 
   457  0D8C                     	;# 
   458  0D8D                     	;# 
   459  0D8E                     	;# 
   460  0D8F                     	;# 
   461  0D8F                     	;# 
   462  0D90                     	;# 
   463  0D91                     	;# 
   464  0D92                     	;# 
   465  0D92                     	;# 
   466  0D93                     	;# 
   467  0D94                     	;# 
   468  0D95                     	;# 
   469  0D95                     	;# 
   470  0D96                     	;# 
   471  0D97                     	;# 
   472  0D98                     	;# 
   473  0D99                     	;# 
   474  0D9A                     	;# 
   475  0D9B                     	;# 
   476  0D9C                     	;# 
   477  0D9D                     	;# 
   478  0D9E                     	;# 
   479  0D9E                     	;# 
   480  0D9F                     	;# 
   481  0DA0                     	;# 
   482  0DA1                     	;# 
   483  0DA1                     	;# 
   484  0DA2                     	;# 
   485  0DA3                     	;# 
   486  0DA4                     	;# 
   487  0DA4                     	;# 
   488  0DA5                     	;# 
   489  0DA6                     	;# 
   490  0DA7                     	;# 
   491  0DA7                     	;# 
   492  0DA8                     	;# 
   493  0DA9                     	;# 
   494  0DAA                     	;# 
   495  0DAB                     	;# 
   496  0DAC                     	;# 
   497  0DAD                     	;# 
   498  0DAE                     	;# 
   499  0DAF                     	;# 
   500  0E0F                     	;# 
   501  0E10                     	;# 
   502  0E11                     	;# 
   503  0E12                     	;# 
   504  0E13                     	;# 
   505  0E14                     	;# 
   506  0E15                     	;# 
   507  0E16                     	;# 
   508  0E17                     	;# 
   509  0E17                     	;# 
   510  0E18                     	;# 
   511  0E18                     	;# 
   512  0E19                     	;# 
   513  0E1A                     	;# 
   514  0E1B                     	;# 
   515  0E1B                     	;# 
   516  0E1C                     	;# 
   517  0E1D                     	;# 
   518  0E1E                     	;# 
   519  0E1E                     	;# 
   520  0E1F                     	;# 
   521  0E20                     	;# 
   522  0E21                     	;# 
   523  0E22                     	;# 
   524  0E23                     	;# 
   525  0E24                     	;# 
   526  0E25                     	;# 
   527  0E26                     	;# 
   528  0E27                     	;# 
   529  0E28                     	;# 
   530  0E29                     	;# 
   531  0E2A                     	;# 
   532  0E2B                     	;# 
   533  0E2C                     	;# 
   534  0E2D                     	;# 
   535  0E2E                     	;# 
   536  0E90                     	;# 
   537  0E91                     	;# 
   538  0E92                     	;# 
   539  0E94                     	;# 
   540  0E95                     	;# 
   541  0E9C                     	;# 
   542  0E9D                     	;# 
   543  0E9E                     	;# 
   544  0E9F                     	;# 
   545  0EA0                     	;# 
   546  0EA1                     	;# 
   547  0EA2                     	;# 
   548  0EA3                     	;# 
   549  0EA4                     	;# 
   550  0EA5                     	;# 
   551  0EA6                     	;# 
   552  0EA7                     	;# 
   553  0F0F                     	;# 
   554  0F10                     	;# 
   555  0F11                     	;# 
   556  0F12                     	;# 
   557  0F13                     	;# 
   558  0F14                     	;# 
   559  0F15                     	;# 
   560  0F16                     	;# 
   561  0F17                     	;# 
   562  0F18                     	;# 
   563  0F19                     	;# 
   564  0F1A                     	;# 
   565  0F1B                     	;# 
   566  0F1C                     	;# 
   567  0F1D                     	;# 
   568  0F1E                     	;# 
   569  0F1F                     	;# 
   570  0F20                     	;# 
   571  0F21                     	;# 
   572  0F22                     	;# 
   573  0F23                     	;# 
   574  0FE4                     	;# 
   575  0FE5                     	;# 
   576  0FE6                     	;# 
   577  0FE7                     	;# 
   578  0FE8                     	;# 
   579  0FE9                     	;# 
   580  0FEA                     	;# 
   581  0FEB                     	;# 
   582  0FED                     	;# 
   583  0FEE                     	;# 
   584  0FEF                     	;# 
   585  0000                     	;# 
   586  0001                     	;# 
   587  0002                     	;# 
   588  0003                     	;# 
   589  0004                     	;# 
   590  0005                     	;# 
   591  0006                     	;# 
   592  0007                     	;# 
   593  0008                     	;# 
   594  0009                     	;# 
   595  000A                     	;# 
   596  000B                     	;# 
   597  000C                     	;# 
   598  000D                     	;# 
   599  000E                     	;# 
   600  0010                     	;# 
   601  0011                     	;# 
   602  0012                     	;# 
   603  0013                     	;# 
   604  0014                     	;# 
   605  0015                     	;# 
   606  0016                     	;# 
   607  0016                     	;# 
   608  0017                     	;# 
   609  0018                     	;# 
   610  0019                     	;# 
   611  001A                     	;# 
   612  001A                     	;# 
   613  001B                     	;# 
   614  001B                     	;# 
   615  001C                     	;# 
   616  001D                     	;# 
   617  001E                     	;# 
   618  001F                     	;# 
   619  008C                     	;# 
   620  008D                     	;# 
   621  008E                     	;# 
   622  0090                     	;# 
   623  0091                     	;# 
   624  0092                     	;# 
   625  0093                     	;# 
   626  0094                     	;# 
   627  0095                     	;# 
   628  0096                     	;# 
   629  0098                     	;# 
   630  0099                     	;# 
   631  009A                     	;# 
   632  009B                     	;# 
   633  009B                     	;# 
   634  009C                     	;# 
   635  009D                     	;# 
   636  009E                     	;# 
   637  009F                     	;# 
   638  010C                     	;# 
   639  010D                     	;# 
   640  010E                     	;# 
   641  0111                     	;# 
   642  0112                     	;# 
   643  0113                     	;# 
   644  0114                     	;# 
   645  0115                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  0118                     	;# 
   649  0119                     	;# 
   650  011C                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  018E                     	;# 
   654  0191                     	;# 
   655  0191                     	;# 
   656  0192                     	;# 
   657  0193                     	;# 
   658  0193                     	;# 
   659  0194                     	;# 
   660  0195                     	;# 
   661  0196                     	;# 
   662  0199                     	;# 
   663  0199                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019A                     	;# 
   667  019A                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019C                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019D                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019E                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  019F                     	;# 
   684  019F                     	;# 
   685  019F                     	;# 
   686  019F                     	;# 
   687  020C                     	;# 
   688  020D                     	;# 
   689  020E                     	;# 
   690  0211                     	;# 
   691  0211                     	;# 
   692  0212                     	;# 
   693  0212                     	;# 
   694  0213                     	;# 
   695  0213                     	;# 
   696  0214                     	;# 
   697  0214                     	;# 
   698  0215                     	;# 
   699  0215                     	;# 
   700  0215                     	;# 
   701  0215                     	;# 
   702  0216                     	;# 
   703  0216                     	;# 
   704  0217                     	;# 
   705  0217                     	;# 
   706  028C                     	;# 
   707  028D                     	;# 
   708  028E                     	;# 
   709  0291                     	;# 
   710  0291                     	;# 
   711  0292                     	;# 
   712  0293                     	;# 
   713  0294                     	;# 
   714  0298                     	;# 
   715  0298                     	;# 
   716  0299                     	;# 
   717  029A                     	;# 
   718  029B                     	;# 
   719  029E                     	;# 
   720  030C                     	;# 
   721  030D                     	;# 
   722  030E                     	;# 
   723  038C                     	;# 
   724  038D                     	;# 
   725  038E                     	;# 
   726  0391                     	;# 
   727  0392                     	;# 
   728  0393                     	;# 
   729  0394                     	;# 
   730  0395                     	;# 
   731  0396                     	;# 
   732  0397                     	;# 
   733  0398                     	;# 
   734  0399                     	;# 
   735  040E                     	;# 
   736  0413                     	;# 
   737  0413                     	;# 
   738  0414                     	;# 
   739  0414                     	;# 
   740  0415                     	;# 
   741  0416                     	;# 
   742  0417                     	;# 
   743  0418                     	;# 
   744  041A                     	;# 
   745  041A                     	;# 
   746  041B                     	;# 
   747  041B                     	;# 
   748  041C                     	;# 
   749  041D                     	;# 
   750  041E                     	;# 
   751  041F                     	;# 
   752  0493                     	;# 
   753  0494                     	;# 
   754  0495                     	;# 
   755  0496                     	;# 
   756  049A                     	;# 
   757  049B                     	;# 
   758  049C                     	;# 
   759  049D                     	;# 
   760  058C                     	;# 
   761  058C                     	;# 
   762  058D                     	;# 
   763  058E                     	;# 
   764  058E                     	;# 
   765  058F                     	;# 
   766  0590                     	;# 
   767  0590                     	;# 
   768  0591                     	;# 
   769  0592                     	;# 
   770  0592                     	;# 
   771  0593                     	;# 
   772  0594                     	;# 
   773  0594                     	;# 
   774  0595                     	;# 
   775  0596                     	;# 
   776  0596                     	;# 
   777  0597                     	;# 
   778  0598                     	;# 
   779  0599                     	;# 
   780  059A                     	;# 
   781  059B                     	;# 
   782  059B                     	;# 
   783  059C                     	;# 
   784  059D                     	;# 
   785  060C                     	;# 
   786  060C                     	;# 
   787  060D                     	;# 
   788  060E                     	;# 
   789  060F                     	;# 
   790  060F                     	;# 
   791  0610                     	;# 
   792  0611                     	;# 
   793  0612                     	;# 
   794  0613                     	;# 
   795  0614                     	;# 
   796  0617                     	;# 
   797  0617                     	;# 
   798  0618                     	;# 
   799  0619                     	;# 
   800  061A                     	;# 
   801  061A                     	;# 
   802  061B                     	;# 
   803  061C                     	;# 
   804  0691                     	;# 
   805  0692                     	;# 
   806  0693                     	;# 
   807  0694                     	;# 
   808  0695                     	;# 
   809  0696                     	;# 
   810  0697                     	;# 
   811  0699                     	;# 
   812  069A                     	;# 
   813  0711                     	;# 
   814  0712                     	;# 
   815  0713                     	;# 
   816  0714                     	;# 
   817  0715                     	;# 
   818  0718                     	;# 
   819  0718                     	;# 
   820  0719                     	;# 
   821  071A                     	;# 
   822  071A                     	;# 
   823  071B                     	;# 
   824  071C                     	;# 
   825  071D                     	;# 
   826  0791                     	;# 
   827  0791                     	;# 
   828  0792                     	;# 
   829  0793                     	;# 
   830  0793                     	;# 
   831  0794                     	;# 
   832  0795                     	;# 
   833  0795                     	;# 
   834  0796                     	;# 
   835  0797                     	;# 
   836  0797                     	;# 
   837  0798                     	;# 
   838  0799                     	;# 
   839  079A                     	;# 
   840  080C                     	;# 
   841  080C                     	;# 
   842  080D                     	;# 
   843  080E                     	;# 
   844  080E                     	;# 
   845  080F                     	;# 
   846  0810                     	;# 
   847  0810                     	;# 
   848  0811                     	;# 
   849  0812                     	;# 
   850  0812                     	;# 
   851  0813                     	;# 
   852  0814                     	;# 
   853  0815                     	;# 
   854  0816                     	;# 
   855  0817                     	;# 
   856  0818                     	;# 
   857  0819                     	;# 
   858  081A                     	;# 
   859  081A                     	;# 
   860  081B                     	;# 
   861  081C                     	;# 
   862  081C                     	;# 
   863  081D                     	;# 
   864  088C                     	;# 
   865  088D                     	;# 
   866  088E                     	;# 
   867  088F                     	;# 
   868  088F                     	;# 
   869  0890                     	;# 
   870  0891                     	;# 
   871  0892                     	;# 
   872  0893                     	;# 
   873  0893                     	;# 
   874  0894                     	;# 
   875  0895                     	;# 
   876  0896                     	;# 
   877  0897                     	;# 
   878  0897                     	;# 
   879  0898                     	;# 
   880  0899                     	;# 
   881  0D8C                     	;# 
   882  0D8C                     	;# 
   883  0D8D                     	;# 
   884  0D8E                     	;# 
   885  0D8F                     	;# 
   886  0D8F                     	;# 
   887  0D90                     	;# 
   888  0D91                     	;# 
   889  0D92                     	;# 
   890  0D92                     	;# 
   891  0D93                     	;# 
   892  0D94                     	;# 
   893  0D95                     	;# 
   894  0D95                     	;# 
   895  0D96                     	;# 
   896  0D97                     	;# 
   897  0D98                     	;# 
   898  0D99                     	;# 
   899  0D9A                     	;# 
   900  0D9B                     	;# 
   901  0D9C                     	;# 
   902  0D9D                     	;# 
   903  0D9E                     	;# 
   904  0D9E                     	;# 
   905  0D9F                     	;# 
   906  0DA0                     	;# 
   907  0DA1                     	;# 
   908  0DA1                     	;# 
   909  0DA2                     	;# 
   910  0DA3                     	;# 
   911  0DA4                     	;# 
   912  0DA4                     	;# 
   913  0DA5                     	;# 
   914  0DA6                     	;# 
   915  0DA7                     	;# 
   916  0DA7                     	;# 
   917  0DA8                     	;# 
   918  0DA9                     	;# 
   919  0DAA                     	;# 
   920  0DAB                     	;# 
   921  0DAC                     	;# 
   922  0DAD                     	;# 
   923  0DAE                     	;# 
   924  0DAF                     	;# 
   925  0E0F                     	;# 
   926  0E10                     	;# 
   927  0E11                     	;# 
   928  0E12                     	;# 
   929  0E13                     	;# 
   930  0E14                     	;# 
   931  0E15                     	;# 
   932  0E16                     	;# 
   933  0E17                     	;# 
   934  0E17                     	;# 
   935  0E18                     	;# 
   936  0E18                     	;# 
   937  0E19                     	;# 
   938  0E1A                     	;# 
   939  0E1B                     	;# 
   940  0E1B                     	;# 
   941  0E1C                     	;# 
   942  0E1D                     	;# 
   943  0E1E                     	;# 
   944  0E1E                     	;# 
   945  0E1F                     	;# 
   946  0E20                     	;# 
   947  0E21                     	;# 
   948  0E22                     	;# 
   949  0E23                     	;# 
   950  0E24                     	;# 
   951  0E25                     	;# 
   952  0E26                     	;# 
   953  0E27                     	;# 
   954  0E28                     	;# 
   955  0E29                     	;# 
   956  0E2A                     	;# 
   957  0E2B                     	;# 
   958  0E2C                     	;# 
   959  0E2D                     	;# 
   960  0E2E                     	;# 
   961  0E90                     	;# 
   962  0E91                     	;# 
   963  0E92                     	;# 
   964  0E94                     	;# 
   965  0E95                     	;# 
   966  0E9C                     	;# 
   967  0E9D                     	;# 
   968  0E9E                     	;# 
   969  0E9F                     	;# 
   970  0EA0                     	;# 
   971  0EA1                     	;# 
   972  0EA2                     	;# 
   973  0EA3                     	;# 
   974  0EA4                     	;# 
   975  0EA5                     	;# 
   976  0EA6                     	;# 
   977  0EA7                     	;# 
   978  0F0F                     	;# 
   979  0F10                     	;# 
   980  0F11                     	;# 
   981  0F12                     	;# 
   982  0F13                     	;# 
   983  0F14                     	;# 
   984  0F15                     	;# 
   985  0F16                     	;# 
   986  0F17                     	;# 
   987  0F18                     	;# 
   988  0F19                     	;# 
   989  0F1A                     	;# 
   990  0F1B                     	;# 
   991  0F1C                     	;# 
   992  0F1D                     	;# 
   993  0F1E                     	;# 
   994  0F1F                     	;# 
   995  0F20                     	;# 
   996  0F21                     	;# 
   997  0F22                     	;# 
   998  0F23                     	;# 
   999  0FE4                     	;# 
  1000  0FE5                     	;# 
  1001  0FE6                     	;# 
  1002  0FE7                     	;# 
  1003  0FE8                     	;# 
  1004  0FE9                     	;# 
  1005  0FEA                     	;# 
  1006  0FEB                     	;# 
  1007  0FED                     	;# 
  1008  0FEE                     	;# 
  1009  0FEF                     	;# 
  1010  0000                     	;# 
  1011  0001                     	;# 
  1012  0002                     	;# 
  1013  0003                     	;# 
  1014  0004                     	;# 
  1015  0005                     	;# 
  1016  0006                     	;# 
  1017  0007                     	;# 
  1018  0008                     	;# 
  1019  0009                     	;# 
  1020  000A                     	;# 
  1021  000B                     	;# 
  1022  000C                     	;# 
  1023  000D                     	;# 
  1024  000E                     	;# 
  1025  0010                     	;# 
  1026  0011                     	;# 
  1027  0012                     	;# 
  1028  0013                     	;# 
  1029  0014                     	;# 
  1030  0015                     	;# 
  1031  0016                     	;# 
  1032  0016                     	;# 
  1033  0017                     	;# 
  1034  0018                     	;# 
  1035  0019                     	;# 
  1036  001A                     	;# 
  1037  001A                     	;# 
  1038  001B                     	;# 
  1039  001B                     	;# 
  1040  001C                     	;# 
  1041  001D                     	;# 
  1042  001E                     	;# 
  1043  001F                     	;# 
  1044  008C                     	;# 
  1045  008D                     	;# 
  1046  008E                     	;# 
  1047  0090                     	;# 
  1048  0091                     	;# 
  1049  0092                     	;# 
  1050  0093                     	;# 
  1051  0094                     	;# 
  1052  0095                     	;# 
  1053  0096                     	;# 
  1054  0098                     	;# 
  1055  0099                     	;# 
  1056  009A                     	;# 
  1057  009B                     	;# 
  1058  009B                     	;# 
  1059  009C                     	;# 
  1060  009D                     	;# 
  1061  009E                     	;# 
  1062  009F                     	;# 
  1063  010C                     	;# 
  1064  010D                     	;# 
  1065  010E                     	;# 
  1066  0111                     	;# 
  1067  0112                     	;# 
  1068  0113                     	;# 
  1069  0114                     	;# 
  1070  0115                     	;# 
  1071  0116                     	;# 
  1072  0117                     	;# 
  1073  0118                     	;# 
  1074  0119                     	;# 
  1075  011C                     	;# 
  1076  018C                     	;# 
  1077  018D                     	;# 
  1078  018E                     	;# 
  1079  0191                     	;# 
  1080  0191                     	;# 
  1081  0192                     	;# 
  1082  0193                     	;# 
  1083  0193                     	;# 
  1084  0194                     	;# 
  1085  0195                     	;# 
  1086  0196                     	;# 
  1087  0199                     	;# 
  1088  0199                     	;# 
  1089  0199                     	;# 
  1090  019A                     	;# 
  1091  019A                     	;# 
  1092  019A                     	;# 
  1093  019B                     	;# 
  1094  019B                     	;# 
  1095  019B                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019C                     	;# 
  1099  019C                     	;# 
  1100  019C                     	;# 
  1101  019D                     	;# 
  1102  019D                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019E                     	;# 
  1106  019E                     	;# 
  1107  019F                     	;# 
  1108  019F                     	;# 
  1109  019F                     	;# 
  1110  019F                     	;# 
  1111  019F                     	;# 
  1112  020C                     	;# 
  1113  020D                     	;# 
  1114  020E                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0216                     	;# 
  1128  0216                     	;# 
  1129  0217                     	;# 
  1130  0217                     	;# 
  1131  028C                     	;# 
  1132  028D                     	;# 
  1133  028E                     	;# 
  1134  0291                     	;# 
  1135  0291                     	;# 
  1136  0292                     	;# 
  1137  0293                     	;# 
  1138  0294                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  029B                     	;# 
  1144  029E                     	;# 
  1145  030C                     	;# 
  1146  030D                     	;# 
  1147  030E                     	;# 
  1148  038C                     	;# 
  1149  038D                     	;# 
  1150  038E                     	;# 
  1151  0391                     	;# 
  1152  0392                     	;# 
  1153  0393                     	;# 
  1154  0394                     	;# 
  1155  0395                     	;# 
  1156  0396                     	;# 
  1157  0397                     	;# 
  1158  0398                     	;# 
  1159  0399                     	;# 
  1160  040E                     	;# 
  1161  0413                     	;# 
  1162  0413                     	;# 
  1163  0414                     	;# 
  1164  0414                     	;# 
  1165  0415                     	;# 
  1166  0416                     	;# 
  1167  0417                     	;# 
  1168  0418                     	;# 
  1169  041A                     	;# 
  1170  041A                     	;# 
  1171  041B                     	;# 
  1172  041B                     	;# 
  1173  041C                     	;# 
  1174  041D                     	;# 
  1175  041E                     	;# 
  1176  041F                     	;# 
  1177  0493                     	;# 
  1178  0494                     	;# 
  1179  0495                     	;# 
  1180  0496                     	;# 
  1181  049A                     	;# 
  1182  049B                     	;# 
  1183  049C                     	;# 
  1184  049D                     	;# 
  1185  058C                     	;# 
  1186  058C                     	;# 
  1187  058D                     	;# 
  1188  058E                     	;# 
  1189  058E                     	;# 
  1190  058F                     	;# 
  1191  0590                     	;# 
  1192  0590                     	;# 
  1193  0591                     	;# 
  1194  0592                     	;# 
  1195  0592                     	;# 
  1196  0593                     	;# 
  1197  0594                     	;# 
  1198  0594                     	;# 
  1199  0595                     	;# 
  1200  0596                     	;# 
  1201  0596                     	;# 
  1202  0597                     	;# 
  1203  0598                     	;# 
  1204  0599                     	;# 
  1205  059A                     	;# 
  1206  059B                     	;# 
  1207  059B                     	;# 
  1208  059C                     	;# 
  1209  059D                     	;# 
  1210  060C                     	;# 
  1211  060C                     	;# 
  1212  060D                     	;# 
  1213  060E                     	;# 
  1214  060F                     	;# 
  1215  060F                     	;# 
  1216  0610                     	;# 
  1217  0611                     	;# 
  1218  0612                     	;# 
  1219  0613                     	;# 
  1220  0614                     	;# 
  1221  0617                     	;# 
  1222  0617                     	;# 
  1223  0618                     	;# 
  1224  0619                     	;# 
  1225  061A                     	;# 
  1226  061A                     	;# 
  1227  061B                     	;# 
  1228  061C                     	;# 
  1229  0691                     	;# 
  1230  0692                     	;# 
  1231  0693                     	;# 
  1232  0694                     	;# 
  1233  0695                     	;# 
  1234  0696                     	;# 
  1235  0697                     	;# 
  1236  0699                     	;# 
  1237  069A                     	;# 
  1238  0711                     	;# 
  1239  0712                     	;# 
  1240  0713                     	;# 
  1241  0714                     	;# 
  1242  0715                     	;# 
  1243  0718                     	;# 
  1244  0718                     	;# 
  1245  0719                     	;# 
  1246  071A                     	;# 
  1247  071A                     	;# 
  1248  071B                     	;# 
  1249  071C                     	;# 
  1250  071D                     	;# 
  1251  0791                     	;# 
  1252  0791                     	;# 
  1253  0792                     	;# 
  1254  0793                     	;# 
  1255  0793                     	;# 
  1256  0794                     	;# 
  1257  0795                     	;# 
  1258  0795                     	;# 
  1259  0796                     	;# 
  1260  0797                     	;# 
  1261  0797                     	;# 
  1262  0798                     	;# 
  1263  0799                     	;# 
  1264  079A                     	;# 
  1265  080C                     	;# 
  1266  080C                     	;# 
  1267  080D                     	;# 
  1268  080E                     	;# 
  1269  080E                     	;# 
  1270  080F                     	;# 
  1271  0810                     	;# 
  1272  0810                     	;# 
  1273  0811                     	;# 
  1274  0812                     	;# 
  1275  0812                     	;# 
  1276  0813                     	;# 
  1277  0814                     	;# 
  1278  0815                     	;# 
  1279  0816                     	;# 
  1280  0817                     	;# 
  1281  0818                     	;# 
  1282  0819                     	;# 
  1283  081A                     	;# 
  1284  081A                     	;# 
  1285  081B                     	;# 
  1286  081C                     	;# 
  1287  081C                     	;# 
  1288  081D                     	;# 
  1289  088C                     	;# 
  1290  088D                     	;# 
  1291  088E                     	;# 
  1292  088F                     	;# 
  1293  088F                     	;# 
  1294  0890                     	;# 
  1295  0891                     	;# 
  1296  0892                     	;# 
  1297  0893                     	;# 
  1298  0893                     	;# 
  1299  0894                     	;# 
  1300  0895                     	;# 
  1301  0896                     	;# 
  1302  0897                     	;# 
  1303  0897                     	;# 
  1304  0898                     	;# 
  1305  0899                     	;# 
  1306  0D8C                     	;# 
  1307  0D8C                     	;# 
  1308  0D8D                     	;# 
  1309  0D8E                     	;# 
  1310  0D8F                     	;# 
  1311  0D8F                     	;# 
  1312  0D90                     	;# 
  1313  0D91                     	;# 
  1314  0D92                     	;# 
  1315  0D92                     	;# 
  1316  0D93                     	;# 
  1317  0D94                     	;# 
  1318  0D95                     	;# 
  1319  0D95                     	;# 
  1320  0D96                     	;# 
  1321  0D97                     	;# 
  1322  0D98                     	;# 
  1323  0D99                     	;# 
  1324  0D9A                     	;# 
  1325  0D9B                     	;# 
  1326  0D9C                     	;# 
  1327  0D9D                     	;# 
  1328  0D9E                     	;# 
  1329  0D9E                     	;# 
  1330  0D9F                     	;# 
  1331  0DA0                     	;# 
  1332  0DA1                     	;# 
  1333  0DA1                     	;# 
  1334  0DA2                     	;# 
  1335  0DA3                     	;# 
  1336  0DA4                     	;# 
  1337  0DA4                     	;# 
  1338  0DA5                     	;# 
  1339  0DA6                     	;# 
  1340  0DA7                     	;# 
  1341  0DA7                     	;# 
  1342  0DA8                     	;# 
  1343  0DA9                     	;# 
  1344  0DAA                     	;# 
  1345  0DAB                     	;# 
  1346  0DAC                     	;# 
  1347  0DAD                     	;# 
  1348  0DAE                     	;# 
  1349  0DAF                     	;# 
  1350  0E0F                     	;# 
  1351  0E10                     	;# 
  1352  0E11                     	;# 
  1353  0E12                     	;# 
  1354  0E13                     	;# 
  1355  0E14                     	;# 
  1356  0E15                     	;# 
  1357  0E16                     	;# 
  1358  0E17                     	;# 
  1359  0E17                     	;# 
  1360  0E18                     	;# 
  1361  0E18                     	;# 
  1362  0E19                     	;# 
  1363  0E1A                     	;# 
  1364  0E1B                     	;# 
  1365  0E1B                     	;# 
  1366  0E1C                     	;# 
  1367  0E1D                     	;# 
  1368  0E1E                     	;# 
  1369  0E1E                     	;# 
  1370  0E1F                     	;# 
  1371  0E20                     	;# 
  1372  0E21                     	;# 
  1373  0E22                     	;# 
  1374  0E23                     	;# 
  1375  0E24                     	;# 
  1376  0E25                     	;# 
  1377  0E26                     	;# 
  1378  0E27                     	;# 
  1379  0E28                     	;# 
  1380  0E29                     	;# 
  1381  0E2A                     	;# 
  1382  0E2B                     	;# 
  1383  0E2C                     	;# 
  1384  0E2D                     	;# 
  1385  0E2E                     	;# 
  1386  0E90                     	;# 
  1387  0E91                     	;# 
  1388  0E92                     	;# 
  1389  0E94                     	;# 
  1390  0E95                     	;# 
  1391  0E9C                     	;# 
  1392  0E9D                     	;# 
  1393  0E9E                     	;# 
  1394  0E9F                     	;# 
  1395  0EA0                     	;# 
  1396  0EA1                     	;# 
  1397  0EA2                     	;# 
  1398  0EA3                     	;# 
  1399  0EA4                     	;# 
  1400  0EA5                     	;# 
  1401  0EA6                     	;# 
  1402  0EA7                     	;# 
  1403  0F0F                     	;# 
  1404  0F10                     	;# 
  1405  0F11                     	;# 
  1406  0F12                     	;# 
  1407  0F13                     	;# 
  1408  0F14                     	;# 
  1409  0F15                     	;# 
  1410  0F16                     	;# 
  1411  0F17                     	;# 
  1412  0F18                     	;# 
  1413  0F19                     	;# 
  1414  0F1A                     	;# 
  1415  0F1B                     	;# 
  1416  0F1C                     	;# 
  1417  0F1D                     	;# 
  1418  0F1E                     	;# 
  1419  0F1F                     	;# 
  1420  0F20                     	;# 
  1421  0F21                     	;# 
  1422  0F22                     	;# 
  1423  0F23                     	;# 
  1424  0FE4                     	;# 
  1425  0FE5                     	;# 
  1426  0FE6                     	;# 
  1427  0FE7                     	;# 
  1428  0FE8                     	;# 
  1429  0FE9                     	;# 
  1430  0FEA                     	;# 
  1431  0FEB                     	;# 
  1432  0FED                     	;# 
  1433  0FEE                     	;# 
  1434  0FEF                     	;# 
  1435  0000                     	;# 
  1436  0001                     	;# 
  1437  0002                     	;# 
  1438  0003                     	;# 
  1439  0004                     	;# 
  1440  0005                     	;# 
  1441  0006                     	;# 
  1442  0007                     	;# 
  1443  0008                     	;# 
  1444  0009                     	;# 
  1445  000A                     	;# 
  1446  000B                     	;# 
  1447  000C                     	;# 
  1448  000D                     	;# 
  1449  000E                     	;# 
  1450  0010                     	;# 
  1451  0011                     	;# 
  1452  0012                     	;# 
  1453  0013                     	;# 
  1454  0014                     	;# 
  1455  0015                     	;# 
  1456  0016                     	;# 
  1457  0016                     	;# 
  1458  0017                     	;# 
  1459  0018                     	;# 
  1460  0019                     	;# 
  1461  001A                     	;# 
  1462  001A                     	;# 
  1463  001B                     	;# 
  1464  001B                     	;# 
  1465  001C                     	;# 
  1466  001D                     	;# 
  1467  001E                     	;# 
  1468  001F                     	;# 
  1469  008C                     	;# 
  1470  008D                     	;# 
  1471  008E                     	;# 
  1472  0090                     	;# 
  1473  0091                     	;# 
  1474  0092                     	;# 
  1475  0093                     	;# 
  1476  0094                     	;# 
  1477  0095                     	;# 
  1478  0096                     	;# 
  1479  0098                     	;# 
  1480  0099                     	;# 
  1481  009A                     	;# 
  1482  009B                     	;# 
  1483  009B                     	;# 
  1484  009C                     	;# 
  1485  009D                     	;# 
  1486  009E                     	;# 
  1487  009F                     	;# 
  1488  010C                     	;# 
  1489  010D                     	;# 
  1490  010E                     	;# 
  1491  0111                     	;# 
  1492  0112                     	;# 
  1493  0113                     	;# 
  1494  0114                     	;# 
  1495  0115                     	;# 
  1496  0116                     	;# 
  1497  0117                     	;# 
  1498  0118                     	;# 
  1499  0119                     	;# 
  1500  011C                     	;# 
  1501  018C                     	;# 
  1502  018D                     	;# 
  1503  018E                     	;# 
  1504  0191                     	;# 
  1505  0191                     	;# 
  1506  0192                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0199                     	;# 
  1513  0199                     	;# 
  1514  0199                     	;# 
  1515  019A                     	;# 
  1516  019A                     	;# 
  1517  019A                     	;# 
  1518  019B                     	;# 
  1519  019B                     	;# 
  1520  019B                     	;# 
  1521  019B                     	;# 
  1522  019B                     	;# 
  1523  019C                     	;# 
  1524  019C                     	;# 
  1525  019C                     	;# 
  1526  019D                     	;# 
  1527  019D                     	;# 
  1528  019D                     	;# 
  1529  019E                     	;# 
  1530  019E                     	;# 
  1531  019E                     	;# 
  1532  019F                     	;# 
  1533  019F                     	;# 
  1534  019F                     	;# 
  1535  019F                     	;# 
  1536  019F                     	;# 
  1537  020C                     	;# 
  1538  020D                     	;# 
  1539  020E                     	;# 
  1540  0211                     	;# 
  1541  0211                     	;# 
  1542  0212                     	;# 
  1543  0212                     	;# 
  1544  0213                     	;# 
  1545  0213                     	;# 
  1546  0214                     	;# 
  1547  0214                     	;# 
  1548  0215                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  028C                     	;# 
  1557  028D                     	;# 
  1558  028E                     	;# 
  1559  0291                     	;# 
  1560  0291                     	;# 
  1561  0292                     	;# 
  1562  0293                     	;# 
  1563  0294                     	;# 
  1564  0298                     	;# 
  1565  0298                     	;# 
  1566  0299                     	;# 
  1567  029A                     	;# 
  1568  029B                     	;# 
  1569  029E                     	;# 
  1570  030C                     	;# 
  1571  030D                     	;# 
  1572  030E                     	;# 
  1573  038C                     	;# 
  1574  038D                     	;# 
  1575  038E                     	;# 
  1576  0391                     	;# 
  1577  0392                     	;# 
  1578  0393                     	;# 
  1579  0394                     	;# 
  1580  0395                     	;# 
  1581  0396                     	;# 
  1582  0397                     	;# 
  1583  0398                     	;# 
  1584  0399                     	;# 
  1585  040E                     	;# 
  1586  0413                     	;# 
  1587  0413                     	;# 
  1588  0414                     	;# 
  1589  0414                     	;# 
  1590  0415                     	;# 
  1591  0416                     	;# 
  1592  0417                     	;# 
  1593  0418                     	;# 
  1594  041A                     	;# 
  1595  041A                     	;# 
  1596  041B                     	;# 
  1597  041B                     	;# 
  1598  041C                     	;# 
  1599  041D                     	;# 
  1600  041E                     	;# 
  1601  041F                     	;# 
  1602  0493                     	;# 
  1603  0494                     	;# 
  1604  0495                     	;# 
  1605  0496                     	;# 
  1606  049A                     	;# 
  1607  049B                     	;# 
  1608  049C                     	;# 
  1609  049D                     	;# 
  1610  058C                     	;# 
  1611  058C                     	;# 
  1612  058D                     	;# 
  1613  058E                     	;# 
  1614  058E                     	;# 
  1615  058F                     	;# 
  1616  0590                     	;# 
  1617  0590                     	;# 
  1618  0591                     	;# 
  1619  0592                     	;# 
  1620  0592                     	;# 
  1621  0593                     	;# 
  1622  0594                     	;# 
  1623  0594                     	;# 
  1624  0595                     	;# 
  1625  0596                     	;# 
  1626  0596                     	;# 
  1627  0597                     	;# 
  1628  0598                     	;# 
  1629  0599                     	;# 
  1630  059A                     	;# 
  1631  059B                     	;# 
  1632  059B                     	;# 
  1633  059C                     	;# 
  1634  059D                     	;# 
  1635  060C                     	;# 
  1636  060C                     	;# 
  1637  060D                     	;# 
  1638  060E                     	;# 
  1639  060F                     	;# 
  1640  060F                     	;# 
  1641  0610                     	;# 
  1642  0611                     	;# 
  1643  0612                     	;# 
  1644  0613                     	;# 
  1645  0614                     	;# 
  1646  0617                     	;# 
  1647  0617                     	;# 
  1648  0618                     	;# 
  1649  0619                     	;# 
  1650  061A                     	;# 
  1651  061A                     	;# 
  1652  061B                     	;# 
  1653  061C                     	;# 
  1654  0691                     	;# 
  1655  0692                     	;# 
  1656  0693                     	;# 
  1657  0694                     	;# 
  1658  0695                     	;# 
  1659  0696                     	;# 
  1660  0697                     	;# 
  1661  0699                     	;# 
  1662  069A                     	;# 
  1663  0711                     	;# 
  1664  0712                     	;# 
  1665  0713                     	;# 
  1666  0714                     	;# 
  1667  0715                     	;# 
  1668  0718                     	;# 
  1669  0718                     	;# 
  1670  0719                     	;# 
  1671  071A                     	;# 
  1672  071A                     	;# 
  1673  071B                     	;# 
  1674  071C                     	;# 
  1675  071D                     	;# 
  1676  0791                     	;# 
  1677  0791                     	;# 
  1678  0792                     	;# 
  1679  0793                     	;# 
  1680  0793                     	;# 
  1681  0794                     	;# 
  1682  0795                     	;# 
  1683  0795                     	;# 
  1684  0796                     	;# 
  1685  0797                     	;# 
  1686  0797                     	;# 
  1687  0798                     	;# 
  1688  0799                     	;# 
  1689  079A                     	;# 
  1690  080C                     	;# 
  1691  080C                     	;# 
  1692  080D                     	;# 
  1693  080E                     	;# 
  1694  080E                     	;# 
  1695  080F                     	;# 
  1696  0810                     	;# 
  1697  0810                     	;# 
  1698  0811                     	;# 
  1699  0812                     	;# 
  1700  0812                     	;# 
  1701  0813                     	;# 
  1702  0814                     	;# 
  1703  0815                     	;# 
  1704  0816                     	;# 
  1705  0817                     	;# 
  1706  0818                     	;# 
  1707  0819                     	;# 
  1708  081A                     	;# 
  1709  081A                     	;# 
  1710  081B                     	;# 
  1711  081C                     	;# 
  1712  081C                     	;# 
  1713  081D                     	;# 
  1714  088C                     	;# 
  1715  088D                     	;# 
  1716  088E                     	;# 
  1717  088F                     	;# 
  1718  088F                     	;# 
  1719  0890                     	;# 
  1720  0891                     	;# 
  1721  0892                     	;# 
  1722  0893                     	;# 
  1723  0893                     	;# 
  1724  0894                     	;# 
  1725  0895                     	;# 
  1726  0896                     	;# 
  1727  0897                     	;# 
  1728  0897                     	;# 
  1729  0898                     	;# 
  1730  0899                     	;# 
  1731  0D8C                     	;# 
  1732  0D8C                     	;# 
  1733  0D8D                     	;# 
  1734  0D8E                     	;# 
  1735  0D8F                     	;# 
  1736  0D8F                     	;# 
  1737  0D90                     	;# 
  1738  0D91                     	;# 
  1739  0D92                     	;# 
  1740  0D92                     	;# 
  1741  0D93                     	;# 
  1742  0D94                     	;# 
  1743  0D95                     	;# 
  1744  0D95                     	;# 
  1745  0D96                     	;# 
  1746  0D97                     	;# 
  1747  0D98                     	;# 
  1748  0D99                     	;# 
  1749  0D9A                     	;# 
  1750  0D9B                     	;# 
  1751  0D9C                     	;# 
  1752  0D9D                     	;# 
  1753  0D9E                     	;# 
  1754  0D9E                     	;# 
  1755  0D9F                     	;# 
  1756  0DA0                     	;# 
  1757  0DA1                     	;# 
  1758  0DA1                     	;# 
  1759  0DA2                     	;# 
  1760  0DA3                     	;# 
  1761  0DA4                     	;# 
  1762  0DA4                     	;# 
  1763  0DA5                     	;# 
  1764  0DA6                     	;# 
  1765  0DA7                     	;# 
  1766  0DA7                     	;# 
  1767  0DA8                     	;# 
  1768  0DA9                     	;# 
  1769  0DAA                     	;# 
  1770  0DAB                     	;# 
  1771  0DAC                     	;# 
  1772  0DAD                     	;# 
  1773  0DAE                     	;# 
  1774  0DAF                     	;# 
  1775  0E0F                     	;# 
  1776  0E10                     	;# 
  1777  0E11                     	;# 
  1778  0E12                     	;# 
  1779  0E13                     	;# 
  1780  0E14                     	;# 
  1781  0E15                     	;# 
  1782  0E16                     	;# 
  1783  0E17                     	;# 
  1784  0E17                     	;# 
  1785  0E18                     	;# 
  1786  0E18                     	;# 
  1787  0E19                     	;# 
  1788  0E1A                     	;# 
  1789  0E1B                     	;# 
  1790  0E1B                     	;# 
  1791  0E1C                     	;# 
  1792  0E1D                     	;# 
  1793  0E1E                     	;# 
  1794  0E1E                     	;# 
  1795  0E1F                     	;# 
  1796  0E20                     	;# 
  1797  0E21                     	;# 
  1798  0E22                     	;# 
  1799  0E23                     	;# 
  1800  0E24                     	;# 
  1801  0E25                     	;# 
  1802  0E26                     	;# 
  1803  0E27                     	;# 
  1804  0E28                     	;# 
  1805  0E29                     	;# 
  1806  0E2A                     	;# 
  1807  0E2B                     	;# 
  1808  0E2C                     	;# 
  1809  0E2D                     	;# 
  1810  0E2E                     	;# 
  1811  0E90                     	;# 
  1812  0E91                     	;# 
  1813  0E92                     	;# 
  1814  0E94                     	;# 
  1815  0E95                     	;# 
  1816  0E9C                     	;# 
  1817  0E9D                     	;# 
  1818  0E9E                     	;# 
  1819  0E9F                     	;# 
  1820  0EA0                     	;# 
  1821  0EA1                     	;# 
  1822  0EA2                     	;# 
  1823  0EA3                     	;# 
  1824  0EA4                     	;# 
  1825  0EA5                     	;# 
  1826  0EA6                     	;# 
  1827  0EA7                     	;# 
  1828  0F0F                     	;# 
  1829  0F10                     	;# 
  1830  0F11                     	;# 
  1831  0F12                     	;# 
  1832  0F13                     	;# 
  1833  0F14                     	;# 
  1834  0F15                     	;# 
  1835  0F16                     	;# 
  1836  0F17                     	;# 
  1837  0F18                     	;# 
  1838  0F19                     	;# 
  1839  0F1A                     	;# 
  1840  0F1B                     	;# 
  1841  0F1C                     	;# 
  1842  0F1D                     	;# 
  1843  0F1E                     	;# 
  1844  0F1F                     	;# 
  1845  0F20                     	;# 
  1846  0F21                     	;# 
  1847  0F22                     	;# 
  1848  0F23                     	;# 
  1849  0FE4                     	;# 
  1850  0FE5                     	;# 
  1851  0FE6                     	;# 
  1852  0FE7                     	;# 
  1853  0FE8                     	;# 
  1854  0FE9                     	;# 
  1855  0FEA                     	;# 
  1856  0FEB                     	;# 
  1857  0FED                     	;# 
  1858  0FEE                     	;# 
  1859  0FEF                     	;# 
  1860  0000                     	;# 
  1861  0001                     	;# 
  1862  0002                     	;# 
  1863  0003                     	;# 
  1864  0004                     	;# 
  1865  0005                     	;# 
  1866  0006                     	;# 
  1867  0007                     	;# 
  1868  0008                     	;# 
  1869  0009                     	;# 
  1870  000A                     	;# 
  1871  000B                     	;# 
  1872  000C                     	;# 
  1873  000D                     	;# 
  1874  000E                     	;# 
  1875  0010                     	;# 
  1876  0011                     	;# 
  1877  0012                     	;# 
  1878  0013                     	;# 
  1879  0014                     	;# 
  1880  0015                     	;# 
  1881  0016                     	;# 
  1882  0016                     	;# 
  1883  0017                     	;# 
  1884  0018                     	;# 
  1885  0019                     	;# 
  1886  001A                     	;# 
  1887  001A                     	;# 
  1888  001B                     	;# 
  1889  001B                     	;# 
  1890  001C                     	;# 
  1891  001D                     	;# 
  1892  001E                     	;# 
  1893  001F                     	;# 
  1894  008C                     	;# 
  1895  008D                     	;# 
  1896  008E                     	;# 
  1897  0090                     	;# 
  1898  0091                     	;# 
  1899  0092                     	;# 
  1900  0093                     	;# 
  1901  0094                     	;# 
  1902  0095                     	;# 
  1903  0096                     	;# 
  1904  0098                     	;# 
  1905  0099                     	;# 
  1906  009A                     	;# 
  1907  009B                     	;# 
  1908  009B                     	;# 
  1909  009C                     	;# 
  1910  009D                     	;# 
  1911  009E                     	;# 
  1912  009F                     	;# 
  1913  010C                     	;# 
  1914  010D                     	;# 
  1915  010E                     	;# 
  1916  0111                     	;# 
  1917  0112                     	;# 
  1918  0113                     	;# 
  1919  0114                     	;# 
  1920  0115                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  0118                     	;# 
  1924  0119                     	;# 
  1925  011C                     	;# 
  1926  018C                     	;# 
  1927  018D                     	;# 
  1928  018E                     	;# 
  1929  0191                     	;# 
  1930  0191                     	;# 
  1931  0192                     	;# 
  1932  0193                     	;# 
  1933  0193                     	;# 
  1934  0194                     	;# 
  1935  0195                     	;# 
  1936  0196                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  0199                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019E                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  019F                     	;# 
  1960  019F                     	;# 
  1961  019F                     	;# 
  1962  020C                     	;# 
  1963  020D                     	;# 
  1964  020E                     	;# 
  1965  0211                     	;# 
  1966  0211                     	;# 
  1967  0212                     	;# 
  1968  0212                     	;# 
  1969  0213                     	;# 
  1970  0213                     	;# 
  1971  0214                     	;# 
  1972  0214                     	;# 
  1973  0215                     	;# 
  1974  0215                     	;# 
  1975  0215                     	;# 
  1976  0215                     	;# 
  1977  0216                     	;# 
  1978  0216                     	;# 
  1979  0217                     	;# 
  1980  0217                     	;# 
  1981  028C                     	;# 
  1982  028D                     	;# 
  1983  028E                     	;# 
  1984  0291                     	;# 
  1985  0291                     	;# 
  1986  0292                     	;# 
  1987  0293                     	;# 
  1988  0294                     	;# 
  1989  0298                     	;# 
  1990  0298                     	;# 
  1991  0299                     	;# 
  1992  029A                     	;# 
  1993  029B                     	;# 
  1994  029E                     	;# 
  1995  030C                     	;# 
  1996  030D                     	;# 
  1997  030E                     	;# 
  1998  038C                     	;# 
  1999  038D                     	;# 
  2000  038E                     	;# 
  2001  0391                     	;# 
  2002  0392                     	;# 
  2003  0393                     	;# 
  2004  0394                     	;# 
  2005  0395                     	;# 
  2006  0396                     	;# 
  2007  0397                     	;# 
  2008  0398                     	;# 
  2009  0399                     	;# 
  2010  040E                     	;# 
  2011  0413                     	;# 
  2012  0413                     	;# 
  2013  0414                     	;# 
  2014  0414                     	;# 
  2015  0415                     	;# 
  2016  0416                     	;# 
  2017  0417                     	;# 
  2018  0418                     	;# 
  2019  041A                     	;# 
  2020  041A                     	;# 
  2021  041B                     	;# 
  2022  041B                     	;# 
  2023  041C                     	;# 
  2024  041D                     	;# 
  2025  041E                     	;# 
  2026  041F                     	;# 
  2027  0493                     	;# 
  2028  0494                     	;# 
  2029  0495                     	;# 
  2030  0496                     	;# 
  2031  049A                     	;# 
  2032  049B                     	;# 
  2033  049C                     	;# 
  2034  049D                     	;# 
  2035  058C                     	;# 
  2036  058C                     	;# 
  2037  058D                     	;# 
  2038  058E                     	;# 
  2039  058E                     	;# 
  2040  058F                     	;# 
  2041  0590                     	;# 
  2042  0590                     	;# 
  2043  0591                     	;# 
  2044  0592                     	;# 
  2045  0592                     	;# 
  2046  0593                     	;# 
  2047  0594                     	;# 
  2048  0594                     	;# 
  2049  0595                     	;# 
  2050  0596                     	;# 
  2051  0596                     	;# 
  2052  0597                     	;# 
  2053  0598                     	;# 
  2054  0599                     	;# 
  2055  059A                     	;# 
  2056  059B                     	;# 
  2057  059B                     	;# 
  2058  059C                     	;# 
  2059  059D                     	;# 
  2060  060C                     	;# 
  2061  060C                     	;# 
  2062  060D                     	;# 
  2063  060E                     	;# 
  2064  060F                     	;# 
  2065  060F                     	;# 
  2066  0610                     	;# 
  2067  0611                     	;# 
  2068  0612                     	;# 
  2069  0613                     	;# 
  2070  0614                     	;# 
  2071  0617                     	;# 
  2072  0617                     	;# 
  2073  0618                     	;# 
  2074  0619                     	;# 
  2075  061A                     	;# 
  2076  061A                     	;# 
  2077  061B                     	;# 
  2078  061C                     	;# 
  2079  0691                     	;# 
  2080  0692                     	;# 
  2081  0693                     	;# 
  2082  0694                     	;# 
  2083  0695                     	;# 
  2084  0696                     	;# 
  2085  0697                     	;# 
  2086  0699                     	;# 
  2087  069A                     	;# 
  2088  0711                     	;# 
  2089  0712                     	;# 
  2090  0713                     	;# 
  2091  0714                     	;# 
  2092  0715                     	;# 
  2093  0718                     	;# 
  2094  0718                     	;# 
  2095  0719                     	;# 
  2096  071A                     	;# 
  2097  071A                     	;# 
  2098  071B                     	;# 
  2099  071C                     	;# 
  2100  071D                     	;# 
  2101  0791                     	;# 
  2102  0791                     	;# 
  2103  0792                     	;# 
  2104  0793                     	;# 
  2105  0793                     	;# 
  2106  0794                     	;# 
  2107  0795                     	;# 
  2108  0795                     	;# 
  2109  0796                     	;# 
  2110  0797                     	;# 
  2111  0797                     	;# 
  2112  0798                     	;# 
  2113  0799                     	;# 
  2114  079A                     	;# 
  2115  080C                     	;# 
  2116  080C                     	;# 
  2117  080D                     	;# 
  2118  080E                     	;# 
  2119  080E                     	;# 
  2120  080F                     	;# 
  2121  0810                     	;# 
  2122  0810                     	;# 
  2123  0811                     	;# 
  2124  0812                     	;# 
  2125  0812                     	;# 
  2126  0813                     	;# 
  2127  0814                     	;# 
  2128  0815                     	;# 
  2129  0816                     	;# 
  2130  0817                     	;# 
  2131  0818                     	;# 
  2132  0819                     	;# 
  2133  081A                     	;# 
  2134  081A                     	;# 
  2135  081B                     	;# 
  2136  081C                     	;# 
  2137  081C                     	;# 
  2138  081D                     	;# 
  2139  088C                     	;# 
  2140  088D                     	;# 
  2141  088E                     	;# 
  2142  088F                     	;# 
  2143  088F                     	;# 
  2144  0890                     	;# 
  2145  0891                     	;# 
  2146  0892                     	;# 
  2147  0893                     	;# 
  2148  0893                     	;# 
  2149  0894                     	;# 
  2150  0895                     	;# 
  2151  0896                     	;# 
  2152  0897                     	;# 
  2153  0897                     	;# 
  2154  0898                     	;# 
  2155  0899                     	;# 
  2156  0D8C                     	;# 
  2157  0D8C                     	;# 
  2158  0D8D                     	;# 
  2159  0D8E                     	;# 
  2160  0D8F                     	;# 
  2161  0D8F                     	;# 
  2162  0D90                     	;# 
  2163  0D91                     	;# 
  2164  0D92                     	;# 
  2165  0D92                     	;# 
  2166  0D93                     	;# 
  2167  0D94                     	;# 
  2168  0D95                     	;# 
  2169  0D95                     	;# 
  2170  0D96                     	;# 
  2171  0D97                     	;# 
  2172  0D98                     	;# 
  2173  0D99                     	;# 
  2174  0D9A                     	;# 
  2175  0D9B                     	;# 
  2176  0D9C                     	;# 
  2177  0D9D                     	;# 
  2178  0D9E                     	;# 
  2179  0D9E                     	;# 
  2180  0D9F                     	;# 
  2181  0DA0                     	;# 
  2182  0DA1                     	;# 
  2183  0DA1                     	;# 
  2184  0DA2                     	;# 
  2185  0DA3                     	;# 
  2186  0DA4                     	;# 
  2187  0DA4                     	;# 
  2188  0DA5                     	;# 
  2189  0DA6                     	;# 
  2190  0DA7                     	;# 
  2191  0DA7                     	;# 
  2192  0DA8                     	;# 
  2193  0DA9                     	;# 
  2194  0DAA                     	;# 
  2195  0DAB                     	;# 
  2196  0DAC                     	;# 
  2197  0DAD                     	;# 
  2198  0DAE                     	;# 
  2199  0DAF                     	;# 
  2200  0E0F                     	;# 
  2201  0E10                     	;# 
  2202  0E11                     	;# 
  2203  0E12                     	;# 
  2204  0E13                     	;# 
  2205  0E14                     	;# 
  2206  0E15                     	;# 
  2207  0E16                     	;# 
  2208  0E17                     	;# 
  2209  0E17                     	;# 
  2210  0E18                     	;# 
  2211  0E18                     	;# 
  2212  0E19                     	;# 
  2213  0E1A                     	;# 
  2214  0E1B                     	;# 
  2215  0E1B                     	;# 
  2216  0E1C                     	;# 
  2217  0E1D                     	;# 
  2218  0E1E                     	;# 
  2219  0E1E                     	;# 
  2220  0E1F                     	;# 
  2221  0E20                     	;# 
  2222  0E21                     	;# 
  2223  0E22                     	;# 
  2224  0E23                     	;# 
  2225  0E24                     	;# 
  2226  0E25                     	;# 
  2227  0E26                     	;# 
  2228  0E27                     	;# 
  2229  0E28                     	;# 
  2230  0E29                     	;# 
  2231  0E2A                     	;# 
  2232  0E2B                     	;# 
  2233  0E2C                     	;# 
  2234  0E2D                     	;# 
  2235  0E2E                     	;# 
  2236  0E90                     	;# 
  2237  0E91                     	;# 
  2238  0E92                     	;# 
  2239  0E94                     	;# 
  2240  0E95                     	;# 
  2241  0E9C                     	;# 
  2242  0E9D                     	;# 
  2243  0E9E                     	;# 
  2244  0E9F                     	;# 
  2245  0EA0                     	;# 
  2246  0EA1                     	;# 
  2247  0EA2                     	;# 
  2248  0EA3                     	;# 
  2249  0EA4                     	;# 
  2250  0EA5                     	;# 
  2251  0EA6                     	;# 
  2252  0EA7                     	;# 
  2253  0F0F                     	;# 
  2254  0F10                     	;# 
  2255  0F11                     	;# 
  2256  0F12                     	;# 
  2257  0F13                     	;# 
  2258  0F14                     	;# 
  2259  0F15                     	;# 
  2260  0F16                     	;# 
  2261  0F17                     	;# 
  2262  0F18                     	;# 
  2263  0F19                     	;# 
  2264  0F1A                     	;# 
  2265  0F1B                     	;# 
  2266  0F1C                     	;# 
  2267  0F1D                     	;# 
  2268  0F1E                     	;# 
  2269  0F1F                     	;# 
  2270  0F20                     	;# 
  2271  0F21                     	;# 
  2272  0F22                     	;# 
  2273  0F23                     	;# 
  2274  0FE4                     	;# 
  2275  0FE5                     	;# 
  2276  0FE6                     	;# 
  2277  0FE7                     	;# 
  2278  0FE8                     	;# 
  2279  0FE9                     	;# 
  2280  0FEA                     	;# 
  2281  0FEB                     	;# 
  2282  0FED                     	;# 
  2283  0FEE                     	;# 
  2284  0FEF                     	;# 
  2285  0000                     	;# 
  2286  0001                     	;# 
  2287  0002                     	;# 
  2288  0003                     	;# 
  2289  0004                     	;# 
  2290  0005                     	;# 
  2291  0006                     	;# 
  2292  0007                     	;# 
  2293  0008                     	;# 
  2294  0009                     	;# 
  2295  000A                     	;# 
  2296  000B                     	;# 
  2297  000C                     	;# 
  2298  000D                     	;# 
  2299  000E                     	;# 
  2300  0010                     	;# 
  2301  0011                     	;# 
  2302  0012                     	;# 
  2303  0013                     	;# 
  2304  0014                     	;# 
  2305  0015                     	;# 
  2306  0016                     	;# 
  2307  0016                     	;# 
  2308  0017                     	;# 
  2309  0018                     	;# 
  2310  0019                     	;# 
  2311  001A                     	;# 
  2312  001A                     	;# 
  2313  001B                     	;# 
  2314  001B                     	;# 
  2315  001C                     	;# 
  2316  001D                     	;# 
  2317  001E                     	;# 
  2318  001F                     	;# 
  2319  008C                     	;# 
  2320  008D                     	;# 
  2321  008E                     	;# 
  2322  0090                     	;# 
  2323  0091                     	;# 
  2324  0092                     	;# 
  2325  0093                     	;# 
  2326  0094                     	;# 
  2327  0095                     	;# 
  2328  0096                     	;# 
  2329  0098                     	;# 
  2330  0099                     	;# 
  2331  009A                     	;# 
  2332  009B                     	;# 
  2333  009B                     	;# 
  2334  009C                     	;# 
  2335  009D                     	;# 
  2336  009E                     	;# 
  2337  009F                     	;# 
  2338  010C                     	;# 
  2339  010D                     	;# 
  2340  010E                     	;# 
  2341  0111                     	;# 
  2342  0112                     	;# 
  2343  0113                     	;# 
  2344  0114                     	;# 
  2345  0115                     	;# 
  2346  0116                     	;# 
  2347  0117                     	;# 
  2348  0118                     	;# 
  2349  0119                     	;# 
  2350  011C                     	;# 
  2351  018C                     	;# 
  2352  018D                     	;# 
  2353  018E                     	;# 
  2354  0191                     	;# 
  2355  0191                     	;# 
  2356  0192                     	;# 
  2357  0193                     	;# 
  2358  0193                     	;# 
  2359  0194                     	;# 
  2360  0195                     	;# 
  2361  0196                     	;# 
  2362  0199                     	;# 
  2363  0199                     	;# 
  2364  0199                     	;# 
  2365  019A                     	;# 
  2366  019A                     	;# 
  2367  019A                     	;# 
  2368  019B                     	;# 
  2369  019B                     	;# 
  2370  019B                     	;# 
  2371  019B                     	;# 
  2372  019B                     	;# 
  2373  019C                     	;# 
  2374  019C                     	;# 
  2375  019C                     	;# 
  2376  019D                     	;# 
  2377  019D                     	;# 
  2378  019D                     	;# 
  2379  019E                     	;# 
  2380  019E                     	;# 
  2381  019E                     	;# 
  2382  019F                     	;# 
  2383  019F                     	;# 
  2384  019F                     	;# 
  2385  019F                     	;# 
  2386  019F                     	;# 
  2387  020C                     	;# 
  2388  020D                     	;# 
  2389  020E                     	;# 
  2390  0211                     	;# 
  2391  0211                     	;# 
  2392  0212                     	;# 
  2393  0212                     	;# 
  2394  0213                     	;# 
  2395  0213                     	;# 
  2396  0214                     	;# 
  2397  0214                     	;# 
  2398  0215                     	;# 
  2399  0215                     	;# 
  2400  0215                     	;# 
  2401  0215                     	;# 
  2402  0216                     	;# 
  2403  0216                     	;# 
  2404  0217                     	;# 
  2405  0217                     	;# 
  2406  028C                     	;# 
  2407  028D                     	;# 
  2408  028E                     	;# 
  2409  0291                     	;# 
  2410  0291                     	;# 
  2411  0292                     	;# 
  2412  0293                     	;# 
  2413  0294                     	;# 
  2414  0298                     	;# 
  2415  0298                     	;# 
  2416  0299                     	;# 
  2417  029A                     	;# 
  2418  029B                     	;# 
  2419  029E                     	;# 
  2420  030C                     	;# 
  2421  030D                     	;# 
  2422  030E                     	;# 
  2423  038C                     	;# 
  2424  038D                     	;# 
  2425  038E                     	;# 
  2426  0391                     	;# 
  2427  0392                     	;# 
  2428  0393                     	;# 
  2429  0394                     	;# 
  2430  0395                     	;# 
  2431  0396                     	;# 
  2432  0397                     	;# 
  2433  0398                     	;# 
  2434  0399                     	;# 
  2435  040E                     	;# 
  2436  0413                     	;# 
  2437  0413                     	;# 
  2438  0414                     	;# 
  2439  0414                     	;# 
  2440  0415                     	;# 
  2441  0416                     	;# 
  2442  0417                     	;# 
  2443  0418                     	;# 
  2444  041A                     	;# 
  2445  041A                     	;# 
  2446  041B                     	;# 
  2447  041B                     	;# 
  2448  041C                     	;# 
  2449  041D                     	;# 
  2450  041E                     	;# 
  2451  041F                     	;# 
  2452  0493                     	;# 
  2453  0494                     	;# 
  2454  0495                     	;# 
  2455  0496                     	;# 
  2456  049A                     	;# 
  2457  049B                     	;# 
  2458  049C                     	;# 
  2459  049D                     	;# 
  2460  058C                     	;# 
  2461  058C                     	;# 
  2462  058D                     	;# 
  2463  058E                     	;# 
  2464  058E                     	;# 
  2465  058F                     	;# 
  2466  0590                     	;# 
  2467  0590                     	;# 
  2468  0591                     	;# 
  2469  0592                     	;# 
  2470  0592                     	;# 
  2471  0593                     	;# 
  2472  0594                     	;# 
  2473  0594                     	;# 
  2474  0595                     	;# 
  2475  0596                     	;# 
  2476  0596                     	;# 
  2477  0597                     	;# 
  2478  0598                     	;# 
  2479  0599                     	;# 
  2480  059A                     	;# 
  2481  059B                     	;# 
  2482  059B                     	;# 
  2483  059C                     	;# 
  2484  059D                     	;# 
  2485  060C                     	;# 
  2486  060C                     	;# 
  2487  060D                     	;# 
  2488  060E                     	;# 
  2489  060F                     	;# 
  2490  060F                     	;# 
  2491  0610                     	;# 
  2492  0611                     	;# 
  2493  0612                     	;# 
  2494  0613                     	;# 
  2495  0614                     	;# 
  2496  0617                     	;# 
  2497  0617                     	;# 
  2498  0618                     	;# 
  2499  0619                     	;# 
  2500  061A                     	;# 
  2501  061A                     	;# 
  2502  061B                     	;# 
  2503  061C                     	;# 
  2504  0691                     	;# 
  2505  0692                     	;# 
  2506  0693                     	;# 
  2507  0694                     	;# 
  2508  0695                     	;# 
  2509  0696                     	;# 
  2510  0697                     	;# 
  2511  0699                     	;# 
  2512  069A                     	;# 
  2513  0711                     	;# 
  2514  0712                     	;# 
  2515  0713                     	;# 
  2516  0714                     	;# 
  2517  0715                     	;# 
  2518  0718                     	;# 
  2519  0718                     	;# 
  2520  0719                     	;# 
  2521  071A                     	;# 
  2522  071A                     	;# 
  2523  071B                     	;# 
  2524  071C                     	;# 
  2525  071D                     	;# 
  2526  0791                     	;# 
  2527  0791                     	;# 
  2528  0792                     	;# 
  2529  0793                     	;# 
  2530  0793                     	;# 
  2531  0794                     	;# 
  2532  0795                     	;# 
  2533  0795                     	;# 
  2534  0796                     	;# 
  2535  0797                     	;# 
  2536  0797                     	;# 
  2537  0798                     	;# 
  2538  0799                     	;# 
  2539  079A                     	;# 
  2540  080C                     	;# 
  2541  080C                     	;# 
  2542  080D                     	;# 
  2543  080E                     	;# 
  2544  080E                     	;# 
  2545  080F                     	;# 
  2546  0810                     	;# 
  2547  0810                     	;# 
  2548  0811                     	;# 
  2549  0812                     	;# 
  2550  0812                     	;# 
  2551  0813                     	;# 
  2552  0814                     	;# 
  2553  0815                     	;# 
  2554  0816                     	;# 
  2555  0817                     	;# 
  2556  0818                     	;# 
  2557  0819                     	;# 
  2558  081A                     	;# 
  2559  081A                     	;# 
  2560  081B                     	;# 
  2561  081C                     	;# 
  2562  081C                     	;# 
  2563  081D                     	;# 
  2564  088C                     	;# 
  2565  088D                     	;# 
  2566  088E                     	;# 
  2567  088F                     	;# 
  2568  088F                     	;# 
  2569  0890                     	;# 
  2570  0891                     	;# 
  2571  0892                     	;# 
  2572  0893                     	;# 
  2573  0893                     	;# 
  2574  0894                     	;# 
  2575  0895                     	;# 
  2576  0896                     	;# 
  2577  0897                     	;# 
  2578  0897                     	;# 
  2579  0898                     	;# 
  2580  0899                     	;# 
  2581  0D8C                     	;# 
  2582  0D8C                     	;# 
  2583  0D8D                     	;# 
  2584  0D8E                     	;# 
  2585  0D8F                     	;# 
  2586  0D8F                     	;# 
  2587  0D90                     	;# 
  2588  0D91                     	;# 
  2589  0D92                     	;# 
  2590  0D92                     	;# 
  2591  0D93                     	;# 
  2592  0D94                     	;# 
  2593  0D95                     	;# 
  2594  0D95                     	;# 
  2595  0D96                     	;# 
  2596  0D97                     	;# 
  2597  0D98                     	;# 
  2598  0D99                     	;# 
  2599  0D9A                     	;# 
  2600  0D9B                     	;# 
  2601  0D9C                     	;# 
  2602  0D9D                     	;# 
  2603  0D9E                     	;# 
  2604  0D9E                     	;# 
  2605  0D9F                     	;# 
  2606  0DA0                     	;# 
  2607  0DA1                     	;# 
  2608  0DA1                     	;# 
  2609  0DA2                     	;# 
  2610  0DA3                     	;# 
  2611  0DA4                     	;# 
  2612  0DA4                     	;# 
  2613  0DA5                     	;# 
  2614  0DA6                     	;# 
  2615  0DA7                     	;# 
  2616  0DA7                     	;# 
  2617  0DA8                     	;# 
  2618  0DA9                     	;# 
  2619  0DAA                     	;# 
  2620  0DAB                     	;# 
  2621  0DAC                     	;# 
  2622  0DAD                     	;# 
  2623  0DAE                     	;# 
  2624  0DAF                     	;# 
  2625  0E0F                     	;# 
  2626  0E10                     	;# 
  2627  0E11                     	;# 
  2628  0E12                     	;# 
  2629  0E13                     	;# 
  2630  0E14                     	;# 
  2631  0E15                     	;# 
  2632  0E16                     	;# 
  2633  0E17                     	;# 
  2634  0E17                     	;# 
  2635  0E18                     	;# 
  2636  0E18                     	;# 
  2637  0E19                     	;# 
  2638  0E1A                     	;# 
  2639  0E1B                     	;# 
  2640  0E1B                     	;# 
  2641  0E1C                     	;# 
  2642  0E1D                     	;# 
  2643  0E1E                     	;# 
  2644  0E1E                     	;# 
  2645  0E1F                     	;# 
  2646  0E20                     	;# 
  2647  0E21                     	;# 
  2648  0E22                     	;# 
  2649  0E23                     	;# 
  2650  0E24                     	;# 
  2651  0E25                     	;# 
  2652  0E26                     	;# 
  2653  0E27                     	;# 
  2654  0E28                     	;# 
  2655  0E29                     	;# 
  2656  0E2A                     	;# 
  2657  0E2B                     	;# 
  2658  0E2C                     	;# 
  2659  0E2D                     	;# 
  2660  0E2E                     	;# 
  2661  0E90                     	;# 
  2662  0E91                     	;# 
  2663  0E92                     	;# 
  2664  0E94                     	;# 
  2665  0E95                     	;# 
  2666  0E9C                     	;# 
  2667  0E9D                     	;# 
  2668  0E9E                     	;# 
  2669  0E9F                     	;# 
  2670  0EA0                     	;# 
  2671  0EA1                     	;# 
  2672  0EA2                     	;# 
  2673  0EA3                     	;# 
  2674  0EA4                     	;# 
  2675  0EA5                     	;# 
  2676  0EA6                     	;# 
  2677  0EA7                     	;# 
  2678  0F0F                     	;# 
  2679  0F10                     	;# 
  2680  0F11                     	;# 
  2681  0F12                     	;# 
  2682  0F13                     	;# 
  2683  0F14                     	;# 
  2684  0F15                     	;# 
  2685  0F16                     	;# 
  2686  0F17                     	;# 
  2687  0F18                     	;# 
  2688  0F19                     	;# 
  2689  0F1A                     	;# 
  2690  0F1B                     	;# 
  2691  0F1C                     	;# 
  2692  0F1D                     	;# 
  2693  0F1E                     	;# 
  2694  0F1F                     	;# 
  2695  0F20                     	;# 
  2696  0F21                     	;# 
  2697  0F22                     	;# 
  2698  0F23                     	;# 
  2699  0FE4                     	;# 
  2700  0FE5                     	;# 
  2701  0FE6                     	;# 
  2702  0FE7                     	;# 
  2703  0FE8                     	;# 
  2704  0FE9                     	;# 
  2705  0FEA                     	;# 
  2706  0FEB                     	;# 
  2707  0FED                     	;# 
  2708  0FEE                     	;# 
  2709  0FEF                     	;# 
  2710  0000                     	;# 
  2711  0001                     	;# 
  2712  0002                     	;# 
  2713  0003                     	;# 
  2714  0004                     	;# 
  2715  0005                     	;# 
  2716  0006                     	;# 
  2717  0007                     	;# 
  2718  0008                     	;# 
  2719  0009                     	;# 
  2720  000A                     	;# 
  2721  000B                     	;# 
  2722  000C                     	;# 
  2723  000D                     	;# 
  2724  000E                     	;# 
  2725  0010                     	;# 
  2726  0011                     	;# 
  2727  0012                     	;# 
  2728  0013                     	;# 
  2729  0014                     	;# 
  2730  0015                     	;# 
  2731  0016                     	;# 
  2732  0016                     	;# 
  2733  0017                     	;# 
  2734  0018                     	;# 
  2735  0019                     	;# 
  2736  001A                     	;# 
  2737  001A                     	;# 
  2738  001B                     	;# 
  2739  001B                     	;# 
  2740  001C                     	;# 
  2741  001D                     	;# 
  2742  001E                     	;# 
  2743  001F                     	;# 
  2744  008C                     	;# 
  2745  008D                     	;# 
  2746  008E                     	;# 
  2747  0090                     	;# 
  2748  0091                     	;# 
  2749  0092                     	;# 
  2750  0093                     	;# 
  2751  0094                     	;# 
  2752  0095                     	;# 
  2753  0096                     	;# 
  2754  0098                     	;# 
  2755  0099                     	;# 
  2756  009A                     	;# 
  2757  009B                     	;# 
  2758  009B                     	;# 
  2759  009C                     	;# 
  2760  009D                     	;# 
  2761  009E                     	;# 
  2762  009F                     	;# 
  2763  010C                     	;# 
  2764  010D                     	;# 
  2765  010E                     	;# 
  2766  0111                     	;# 
  2767  0112                     	;# 
  2768  0113                     	;# 
  2769  0114                     	;# 
  2770  0115                     	;# 
  2771  0116                     	;# 
  2772  0117                     	;# 
  2773  0118                     	;# 
  2774  0119                     	;# 
  2775  011C                     	;# 
  2776  018C                     	;# 
  2777  018D                     	;# 
  2778  018E                     	;# 
  2779  0191                     	;# 
  2780  0191                     	;# 
  2781  0192                     	;# 
  2782  0193                     	;# 
  2783  0193                     	;# 
  2784  0194                     	;# 
  2785  0195                     	;# 
  2786  0196                     	;# 
  2787  0199                     	;# 
  2788  0199                     	;# 
  2789  0199                     	;# 
  2790  019A                     	;# 
  2791  019A                     	;# 
  2792  019A                     	;# 
  2793  019B                     	;# 
  2794  019B                     	;# 
  2795  019B                     	;# 
  2796  019B                     	;# 
  2797  019B                     	;# 
  2798  019C                     	;# 
  2799  019C                     	;# 
  2800  019C                     	;# 
  2801  019D                     	;# 
  2802  019D                     	;# 
  2803  019D                     	;# 
  2804  019E                     	;# 
  2805  019E                     	;# 
  2806  019E                     	;# 
  2807  019F                     	;# 
  2808  019F                     	;# 
  2809  019F                     	;# 
  2810  019F                     	;# 
  2811  019F                     	;# 
  2812  020C                     	;# 
  2813  020D                     	;# 
  2814  020E                     	;# 
  2815  0211                     	;# 
  2816  0211                     	;# 
  2817  0212                     	;# 
  2818  0212                     	;# 
  2819  0213                     	;# 
  2820  0213                     	;# 
  2821  0214                     	;# 
  2822  0214                     	;# 
  2823  0215                     	;# 
  2824  0215                     	;# 
  2825  0215                     	;# 
  2826  0215                     	;# 
  2827  0216                     	;# 
  2828  0216                     	;# 
  2829  0217                     	;# 
  2830  0217                     	;# 
  2831  028C                     	;# 
  2832  028D                     	;# 
  2833  028E                     	;# 
  2834  0291                     	;# 
  2835  0291                     	;# 
  2836  0292                     	;# 
  2837  0293                     	;# 
  2838  0294                     	;# 
  2839  0298                     	;# 
  2840  0298                     	;# 
  2841  0299                     	;# 
  2842  029A                     	;# 
  2843  029B                     	;# 
  2844  029E                     	;# 
  2845  030C                     	;# 
  2846  030D                     	;# 
  2847  030E                     	;# 
  2848  038C                     	;# 
  2849  038D                     	;# 
  2850  038E                     	;# 
  2851  0391                     	;# 
  2852  0392                     	;# 
  2853  0393                     	;# 
  2854  0394                     	;# 
  2855  0395                     	;# 
  2856  0396                     	;# 
  2857  0397                     	;# 
  2858  0398                     	;# 
  2859  0399                     	;# 
  2860  040E                     	;# 
  2861  0413                     	;# 
  2862  0413                     	;# 
  2863  0414                     	;# 
  2864  0414                     	;# 
  2865  0415                     	;# 
  2866  0416                     	;# 
  2867  0417                     	;# 
  2868  0418                     	;# 
  2869  041A                     	;# 
  2870  041A                     	;# 
  2871  041B                     	;# 
  2872  041B                     	;# 
  2873  041C                     	;# 
  2874  041D                     	;# 
  2875  041E                     	;# 
  2876  041F                     	;# 
  2877  0493                     	;# 
  2878  0494                     	;# 
  2879  0495                     	;# 
  2880  0496                     	;# 
  2881  049A                     	;# 
  2882  049B                     	;# 
  2883  049C                     	;# 
  2884  049D                     	;# 
  2885  058C                     	;# 
  2886  058C                     	;# 
  2887  058D                     	;# 
  2888  058E                     	;# 
  2889  058E                     	;# 
  2890  058F                     	;# 
  2891  0590                     	;# 
  2892  0590                     	;# 
  2893  0591                     	;# 
  2894  0592                     	;# 
  2895  0592                     	;# 
  2896  0593                     	;# 
  2897  0594                     	;# 
  2898  0594                     	;# 
  2899  0595                     	;# 
  2900  0596                     	;# 
  2901  0596                     	;# 
  2902  0597                     	;# 
  2903  0598                     	;# 
  2904  0599                     	;# 
  2905  059A                     	;# 
  2906  059B                     	;# 
  2907  059B                     	;# 
  2908  059C                     	;# 
  2909  059D                     	;# 
  2910  060C                     	;# 
  2911  060C                     	;# 
  2912  060D                     	;# 
  2913  060E                     	;# 
  2914  060F                     	;# 
  2915  060F                     	;# 
  2916  0610                     	;# 
  2917  0611                     	;# 
  2918  0612                     	;# 
  2919  0613                     	;# 
  2920  0614                     	;# 
  2921  0617                     	;# 
  2922  0617                     	;# 
  2923  0618                     	;# 
  2924  0619                     	;# 
  2925  061A                     	;# 
  2926  061A                     	;# 
  2927  061B                     	;# 
  2928  061C                     	;# 
  2929  0691                     	;# 
  2930  0692                     	;# 
  2931  0693                     	;# 
  2932  0694                     	;# 
  2933  0695                     	;# 
  2934  0696                     	;# 
  2935  0697                     	;# 
  2936  0699                     	;# 
  2937  069A                     	;# 
  2938  0711                     	;# 
  2939  0712                     	;# 
  2940  0713                     	;# 
  2941  0714                     	;# 
  2942  0715                     	;# 
  2943  0718                     	;# 
  2944  0718                     	;# 
  2945  0719                     	;# 
  2946  071A                     	;# 
  2947  071A                     	;# 
  2948  071B                     	;# 
  2949  071C                     	;# 
  2950  071D                     	;# 
  2951  0791                     	;# 
  2952  0791                     	;# 
  2953  0792                     	;# 
  2954  0793                     	;# 
  2955  0793                     	;# 
  2956  0794                     	;# 
  2957  0795                     	;# 
  2958  0795                     	;# 
  2959  0796                     	;# 
  2960  0797                     	;# 
  2961  0797                     	;# 
  2962  0798                     	;# 
  2963  0799                     	;# 
  2964  079A                     	;# 
  2965  080C                     	;# 
  2966  080C                     	;# 
  2967  080D                     	;# 
  2968  080E                     	;# 
  2969  080E                     	;# 
  2970  080F                     	;# 
  2971  0810                     	;# 
  2972  0810                     	;# 
  2973  0811                     	;# 
  2974  0812                     	;# 
  2975  0812                     	;# 
  2976  0813                     	;# 
  2977  0814                     	;# 
  2978  0815                     	;# 
  2979  0816                     	;# 
  2980  0817                     	;# 
  2981  0818                     	;# 
  2982  0819                     	;# 
  2983  081A                     	;# 
  2984  081A                     	;# 
  2985  081B                     	;# 
  2986  081C                     	;# 
  2987  081C                     	;# 
  2988  081D                     	;# 
  2989  088C                     	;# 
  2990  088D                     	;# 
  2991  088E                     	;# 
  2992  088F                     	;# 
  2993  088F                     	;# 
  2994  0890                     	;# 
  2995  0891                     	;# 
  2996  0892                     	;# 
  2997  0893                     	;# 
  2998  0893                     	;# 
  2999  0894                     	;# 
  3000  0895                     	;# 
  3001  0896                     	;# 
  3002  0897                     	;# 
  3003  0897                     	;# 
  3004  0898                     	;# 
  3005  0899                     	;# 
  3006  0D8C                     	;# 
  3007  0D8C                     	;# 
  3008  0D8D                     	;# 
  3009  0D8E                     	;# 
  3010  0D8F                     	;# 
  3011  0D8F                     	;# 
  3012  0D90                     	;# 
  3013  0D91                     	;# 
  3014  0D92                     	;# 
  3015  0D92                     	;# 
  3016  0D93                     	;# 
  3017  0D94                     	;# 
  3018  0D95                     	;# 
  3019  0D95                     	;# 
  3020  0D96                     	;# 
  3021  0D97                     	;# 
  3022  0D98                     	;# 
  3023  0D99                     	;# 
  3024  0D9A                     	;# 
  3025  0D9B                     	;# 
  3026  0D9C                     	;# 
  3027  0D9D                     	;# 
  3028  0D9E                     	;# 
  3029  0D9E                     	;# 
  3030  0D9F                     	;# 
  3031  0DA0                     	;# 
  3032  0DA1                     	;# 
  3033  0DA1                     	;# 
  3034  0DA2                     	;# 
  3035  0DA3                     	;# 
  3036  0DA4                     	;# 
  3037  0DA4                     	;# 
  3038  0DA5                     	;# 
  3039  0DA6                     	;# 
  3040  0DA7                     	;# 
  3041  0DA7                     	;# 
  3042  0DA8                     	;# 
  3043  0DA9                     	;# 
  3044  0DAA                     	;# 
  3045  0DAB                     	;# 
  3046  0DAC                     	;# 
  3047  0DAD                     	;# 
  3048  0DAE                     	;# 
  3049  0DAF                     	;# 
  3050  0E0F                     	;# 
  3051  0E10                     	;# 
  3052  0E11                     	;# 
  3053  0E12                     	;# 
  3054  0E13                     	;# 
  3055  0E14                     	;# 
  3056  0E15                     	;# 
  3057  0E16                     	;# 
  3058  0E17                     	;# 
  3059  0E17                     	;# 
  3060  0E18                     	;# 
  3061  0E18                     	;# 
  3062  0E19                     	;# 
  3063  0E1A                     	;# 
  3064  0E1B                     	;# 
  3065  0E1B                     	;# 
  3066  0E1C                     	;# 
  3067  0E1D                     	;# 
  3068  0E1E                     	;# 
  3069  0E1E                     	;# 
  3070  0E1F                     	;# 
  3071  0E20                     	;# 
  3072  0E21                     	;# 
  3073  0E22                     	;# 
  3074  0E23                     	;# 
  3075  0E24                     	;# 
  3076  0E25                     	;# 
  3077  0E26                     	;# 
  3078  0E27                     	;# 
  3079  0E28                     	;# 
  3080  0E29                     	;# 
  3081  0E2A                     	;# 
  3082  0E2B                     	;# 
  3083  0E2C                     	;# 
  3084  0E2D                     	;# 
  3085  0E2E                     	;# 
  3086  0E90                     	;# 
  3087  0E91                     	;# 
  3088  0E92                     	;# 
  3089  0E94                     	;# 
  3090  0E95                     	;# 
  3091  0E9C                     	;# 
  3092  0E9D                     	;# 
  3093  0E9E                     	;# 
  3094  0E9F                     	;# 
  3095  0EA0                     	;# 
  3096  0EA1                     	;# 
  3097  0EA2                     	;# 
  3098  0EA3                     	;# 
  3099  0EA4                     	;# 
  3100  0EA5                     	;# 
  3101  0EA6                     	;# 
  3102  0EA7                     	;# 
  3103  0F0F                     	;# 
  3104  0F10                     	;# 
  3105  0F11                     	;# 
  3106  0F12                     	;# 
  3107  0F13                     	;# 
  3108  0F14                     	;# 
  3109  0F15                     	;# 
  3110  0F16                     	;# 
  3111  0F17                     	;# 
  3112  0F18                     	;# 
  3113  0F19                     	;# 
  3114  0F1A                     	;# 
  3115  0F1B                     	;# 
  3116  0F1C                     	;# 
  3117  0F1D                     	;# 
  3118  0F1E                     	;# 
  3119  0F1F                     	;# 
  3120  0F20                     	;# 
  3121  0F21                     	;# 
  3122  0F22                     	;# 
  3123  0F23                     	;# 
  3124  0FE4                     	;# 
  3125  0FE5                     	;# 
  3126  0FE6                     	;# 
  3127  0FE7                     	;# 
  3128  0FE8                     	;# 
  3129  0FE9                     	;# 
  3130  0FEA                     	;# 
  3131  0FEB                     	;# 
  3132  0FED                     	;# 
  3133  0FEE                     	;# 
  3134  0FEF                     	;# 
  3135  0000                     	;# 
  3136  0001                     	;# 
  3137  0002                     	;# 
  3138  0003                     	;# 
  3139  0004                     	;# 
  3140  0005                     	;# 
  3141  0006                     	;# 
  3142  0007                     	;# 
  3143  0008                     	;# 
  3144  0009                     	;# 
  3145  000A                     	;# 
  3146  000B                     	;# 
  3147  000C                     	;# 
  3148  000D                     	;# 
  3149  000E                     	;# 
  3150  0010                     	;# 
  3151  0011                     	;# 
  3152  0012                     	;# 
  3153  0013                     	;# 
  3154  0014                     	;# 
  3155  0015                     	;# 
  3156  0016                     	;# 
  3157  0016                     	;# 
  3158  0017                     	;# 
  3159  0018                     	;# 
  3160  0019                     	;# 
  3161  001A                     	;# 
  3162  001A                     	;# 
  3163  001B                     	;# 
  3164  001B                     	;# 
  3165  001C                     	;# 
  3166  001D                     	;# 
  3167  001E                     	;# 
  3168  001F                     	;# 
  3169  008C                     	;# 
  3170  008D                     	;# 
  3171  008E                     	;# 
  3172  0090                     	;# 
  3173  0091                     	;# 
  3174  0092                     	;# 
  3175  0093                     	;# 
  3176  0094                     	;# 
  3177  0095                     	;# 
  3178  0096                     	;# 
  3179  0098                     	;# 
  3180  0099                     	;# 
  3181  009A                     	;# 
  3182  009B                     	;# 
  3183  009B                     	;# 
  3184  009C                     	;# 
  3185  009D                     	;# 
  3186  009E                     	;# 
  3187  009F                     	;# 
  3188  010C                     	;# 
  3189  010D                     	;# 
  3190  010E                     	;# 
  3191  0111                     	;# 
  3192  0112                     	;# 
  3193  0113                     	;# 
  3194  0114                     	;# 
  3195  0115                     	;# 
  3196  0116                     	;# 
  3197  0117                     	;# 
  3198  0118                     	;# 
  3199  0119                     	;# 
  3200  011C                     	;# 
  3201  018C                     	;# 
  3202  018D                     	;# 
  3203  018E                     	;# 
  3204  0191                     	;# 
  3205  0191                     	;# 
  3206  0192                     	;# 
  3207  0193                     	;# 
  3208  0193                     	;# 
  3209  0194                     	;# 
  3210  0195                     	;# 
  3211  0196                     	;# 
  3212  0199                     	;# 
  3213  0199                     	;# 
  3214  0199                     	;# 
  3215  019A                     	;# 
  3216  019A                     	;# 
  3217  019A                     	;# 
  3218  019B                     	;# 
  3219  019B                     	;# 
  3220  019B                     	;# 
  3221  019B                     	;# 
  3222  019B                     	;# 
  3223  019C                     	;# 
  3224  019C                     	;# 
  3225  019C                     	;# 
  3226  019D                     	;# 
  3227  019D                     	;# 
  3228  019D                     	;# 
  3229  019E                     	;# 
  3230  019E                     	;# 
  3231  019E                     	;# 
  3232  019F                     	;# 
  3233  019F                     	;# 
  3234  019F                     	;# 
  3235  019F                     	;# 
  3236  019F                     	;# 
  3237  020C                     	;# 
  3238  020D                     	;# 
  3239  020E                     	;# 
  3240  0211                     	;# 
  3241  0211                     	;# 
  3242  0212                     	;# 
  3243  0212                     	;# 
  3244  0213                     	;# 
  3245  0213                     	;# 
  3246  0214                     	;# 
  3247  0214                     	;# 
  3248  0215                     	;# 
  3249  0215                     	;# 
  3250  0215                     	;# 
  3251  0215                     	;# 
  3252  0216                     	;# 
  3253  0216                     	;# 
  3254  0217                     	;# 
  3255  0217                     	;# 
  3256  028C                     	;# 
  3257  028D                     	;# 
  3258  028E                     	;# 
  3259  0291                     	;# 
  3260  0291                     	;# 
  3261  0292                     	;# 
  3262  0293                     	;# 
  3263  0294                     	;# 
  3264  0298                     	;# 
  3265  0298                     	;# 
  3266  0299                     	;# 
  3267  029A                     	;# 
  3268  029B                     	;# 
  3269  029E                     	;# 
  3270  030C                     	;# 
  3271  030D                     	;# 
  3272  030E                     	;# 
  3273  038C                     	;# 
  3274  038D                     	;# 
  3275  038E                     	;# 
  3276  0391                     	;# 
  3277  0392                     	;# 
  3278  0393                     	;# 
  3279  0394                     	;# 
  3280  0395                     	;# 
  3281  0396                     	;# 
  3282  0397                     	;# 
  3283  0398                     	;# 
  3284  0399                     	;# 
  3285  040E                     	;# 
  3286  0413                     	;# 
  3287  0413                     	;# 
  3288  0414                     	;# 
  3289  0414                     	;# 
  3290  0415                     	;# 
  3291  0416                     	;# 
  3292  0417                     	;# 
  3293  0418                     	;# 
  3294  041A                     	;# 
  3295  041A                     	;# 
  3296  041B                     	;# 
  3297  041B                     	;# 
  3298  041C                     	;# 
  3299  041D                     	;# 
  3300  041E                     	;# 
  3301  041F                     	;# 
  3302  0493                     	;# 
  3303  0494                     	;# 
  3304  0495                     	;# 
  3305  0496                     	;# 
  3306  049A                     	;# 
  3307  049B                     	;# 
  3308  049C                     	;# 
  3309  049D                     	;# 
  3310  058C                     	;# 
  3311  058C                     	;# 
  3312  058D                     	;# 
  3313  058E                     	;# 
  3314  058E                     	;# 
  3315  058F                     	;# 
  3316  0590                     	;# 
  3317  0590                     	;# 
  3318  0591                     	;# 
  3319  0592                     	;# 
  3320  0592                     	;# 
  3321  0593                     	;# 
  3322  0594                     	;# 
  3323  0594                     	;# 
  3324  0595                     	;# 
  3325  0596                     	;# 
  3326  0596                     	;# 
  3327  0597                     	;# 
  3328  0598                     	;# 
  3329  0599                     	;# 
  3330  059A                     	;# 
  3331  059B                     	;# 
  3332  059B                     	;# 
  3333  059C                     	;# 
  3334  059D                     	;# 
  3335  060C                     	;# 
  3336  060C                     	;# 
  3337  060D                     	;# 
  3338  060E                     	;# 
  3339  060F                     	;# 
  3340  060F                     	;# 
  3341  0610                     	;# 
  3342  0611                     	;# 
  3343  0612                     	;# 
  3344  0613                     	;# 
  3345  0614                     	;# 
  3346  0617                     	;# 
  3347  0617                     	;# 
  3348  0618                     	;# 
  3349  0619                     	;# 
  3350  061A                     	;# 
  3351  061A                     	;# 
  3352  061B                     	;# 
  3353  061C                     	;# 
  3354  0691                     	;# 
  3355  0692                     	;# 
  3356  0693                     	;# 
  3357  0694                     	;# 
  3358  0695                     	;# 
  3359  0696                     	;# 
  3360  0697                     	;# 
  3361  0699                     	;# 
  3362  069A                     	;# 
  3363  0711                     	;# 
  3364  0712                     	;# 
  3365  0713                     	;# 
  3366  0714                     	;# 
  3367  0715                     	;# 
  3368  0718                     	;# 
  3369  0718                     	;# 
  3370  0719                     	;# 
  3371  071A                     	;# 
  3372  071A                     	;# 
  3373  071B                     	;# 
  3374  071C                     	;# 
  3375  071D                     	;# 
  3376  0791                     	;# 
  3377  0791                     	;# 
  3378  0792                     	;# 
  3379  0793                     	;# 
  3380  0793                     	;# 
  3381  0794                     	;# 
  3382  0795                     	;# 
  3383  0795                     	;# 
  3384  0796                     	;# 
  3385  0797                     	;# 
  3386  0797                     	;# 
  3387  0798                     	;# 
  3388  0799                     	;# 
  3389  079A                     	;# 
  3390  080C                     	;# 
  3391  080C                     	;# 
  3392  080D                     	;# 
  3393  080E                     	;# 
  3394  080E                     	;# 
  3395  080F                     	;# 
  3396  0810                     	;# 
  3397  0810                     	;# 
  3398  0811                     	;# 
  3399  0812                     	;# 
  3400  0812                     	;# 
  3401  0813                     	;# 
  3402  0814                     	;# 
  3403  0815                     	;# 
  3404  0816                     	;# 
  3405  0817                     	;# 
  3406  0818                     	;# 
  3407  0819                     	;# 
  3408  081A                     	;# 
  3409  081A                     	;# 
  3410  081B                     	;# 
  3411  081C                     	;# 
  3412  081C                     	;# 
  3413  081D                     	;# 
  3414  088C                     	;# 
  3415  088D                     	;# 
  3416  088E                     	;# 
  3417  088F                     	;# 
  3418  088F                     	;# 
  3419  0890                     	;# 
  3420  0891                     	;# 
  3421  0892                     	;# 
  3422  0893                     	;# 
  3423  0893                     	;# 
  3424  0894                     	;# 
  3425  0895                     	;# 
  3426  0896                     	;# 
  3427  0897                     	;# 
  3428  0897                     	;# 
  3429  0898                     	;# 
  3430  0899                     	;# 
  3431  0D8C                     	;# 
  3432  0D8C                     	;# 
  3433  0D8D                     	;# 
  3434  0D8E                     	;# 
  3435  0D8F                     	;# 
  3436  0D8F                     	;# 
  3437  0D90                     	;# 
  3438  0D91                     	;# 
  3439  0D92                     	;# 
  3440  0D92                     	;# 
  3441  0D93                     	;# 
  3442  0D94                     	;# 
  3443  0D95                     	;# 
  3444  0D95                     	;# 
  3445  0D96                     	;# 
  3446  0D97                     	;# 
  3447  0D98                     	;# 
  3448  0D99                     	;# 
  3449  0D9A                     	;# 
  3450  0D9B                     	;# 
  3451  0D9C                     	;# 
  3452  0D9D                     	;# 
  3453  0D9E                     	;# 
  3454  0D9E                     	;# 
  3455  0D9F                     	;# 
  3456  0DA0                     	;# 
  3457  0DA1                     	;# 
  3458  0DA1                     	;# 
  3459  0DA2                     	;# 
  3460  0DA3                     	;# 
  3461  0DA4                     	;# 
  3462  0DA4                     	;# 
  3463  0DA5                     	;# 
  3464  0DA6                     	;# 
  3465  0DA7                     	;# 
  3466  0DA7                     	;# 
  3467  0DA8                     	;# 
  3468  0DA9                     	;# 
  3469  0DAA                     	;# 
  3470  0DAB                     	;# 
  3471  0DAC                     	;# 
  3472  0DAD                     	;# 
  3473  0DAE                     	;# 
  3474  0DAF                     	;# 
  3475  0E0F                     	;# 
  3476  0E10                     	;# 
  3477  0E11                     	;# 
  3478  0E12                     	;# 
  3479  0E13                     	;# 
  3480  0E14                     	;# 
  3481  0E15                     	;# 
  3482  0E16                     	;# 
  3483  0E17                     	;# 
  3484  0E17                     	;# 
  3485  0E18                     	;# 
  3486  0E18                     	;# 
  3487  0E19                     	;# 
  3488  0E1A                     	;# 
  3489  0E1B                     	;# 
  3490  0E1B                     	;# 
  3491  0E1C                     	;# 
  3492  0E1D                     	;# 
  3493  0E1E                     	;# 
  3494  0E1E                     	;# 
  3495  0E1F                     	;# 
  3496  0E20                     	;# 
  3497  0E21                     	;# 
  3498  0E22                     	;# 
  3499  0E23                     	;# 
  3500  0E24                     	;# 
  3501  0E25                     	;# 
  3502  0E26                     	;# 
  3503  0E27                     	;# 
  3504  0E28                     	;# 
  3505  0E29                     	;# 
  3506  0E2A                     	;# 
  3507  0E2B                     	;# 
  3508  0E2C                     	;# 
  3509  0E2D                     	;# 
  3510  0E2E                     	;# 
  3511  0E90                     	;# 
  3512  0E91                     	;# 
  3513  0E92                     	;# 
  3514  0E94                     	;# 
  3515  0E95                     	;# 
  3516  0E9C                     	;# 
  3517  0E9D                     	;# 
  3518  0E9E                     	;# 
  3519  0E9F                     	;# 
  3520  0EA0                     	;# 
  3521  0EA1                     	;# 
  3522  0EA2                     	;# 
  3523  0EA3                     	;# 
  3524  0EA4                     	;# 
  3525  0EA5                     	;# 
  3526  0EA6                     	;# 
  3527  0EA7                     	;# 
  3528  0F0F                     	;# 
  3529  0F10                     	;# 
  3530  0F11                     	;# 
  3531  0F12                     	;# 
  3532  0F13                     	;# 
  3533  0F14                     	;# 
  3534  0F15                     	;# 
  3535  0F16                     	;# 
  3536  0F17                     	;# 
  3537  0F18                     	;# 
  3538  0F19                     	;# 
  3539  0F1A                     	;# 
  3540  0F1B                     	;# 
  3541  0F1C                     	;# 
  3542  0F1D                     	;# 
  3543  0F1E                     	;# 
  3544  0F1F                     	;# 
  3545  0F20                     	;# 
  3546  0F21                     	;# 
  3547  0F22                     	;# 
  3548  0F23                     	;# 
  3549  0FE4                     	;# 
  3550  0FE5                     	;# 
  3551  0FE6                     	;# 
  3552  0FE7                     	;# 
  3553  0FE8                     	;# 
  3554  0FE9                     	;# 
  3555  0FEA                     	;# 
  3556  0FEB                     	;# 
  3557  0FED                     	;# 
  3558  0FEE                     	;# 
  3559  0FEF                     	;# 
  3560                           
  3561 ;; Function _I2C1_Deinitialize is unused but had its address taken
  3562  0000                     
  3563 ;; Function _I2C1_Write is unused but had its address taken
  3564  0000                     
  3565 ;; Function _I2C1_Read is unused but had its address taken
  3566  0000                     
  3567 ;; Function _I2C1_WriteRead is unused but had its address taken
  3568  0000                     
  3569 ;; Function _I2C1_ErrorGet is unused but had its address taken
  3570  0000                     
  3571 ;; Function _I2C1_IsBusy is unused but had its address taken
  3572  0000                     
  3573 ;; Function _INT_DefaultInterruptHandler is unused but had its address taken
  3574  0000                     
  3575 ;; Function _EUSART_Deinitialize is unused but had its address taken
  3576  0000                     
  3577 ;; Function _EUSART_TransmitEnable is unused but had its address taken
  3578  0000                     
  3579 ;; Function _EUSART_TransmitDisable is unused but had its address taken
  3580  0000                     
  3581 ;; Function _EUSART_AutoBaudSet is unused but had its address taken
  3582  0000                     
  3583 ;; Function _EUSART_AutoBaudQuery is unused but had its address taken
  3584  0000                     
  3585 ;; Function _EUSART_IsTxReady is unused but had its address taken
  3586  0000                     
  3587 ;; Function _EUSART_IsTxDone is unused but had its address taken
  3588  0000                     
  3589 ;; Function _EUSART_ErrorGet is unused but had its address taken
  3590  0000                     
  3591                           	psect	idataBANK2
  3592  0000'                    __pidataBANK2:
  3593                           
  3594                           ;initializer for _sppas
  3595  0000' 3401               	retlw	1
  3596  0001' 3400               	retlw	0
  3597  0002' 3400               	retlw	0
  3598  0003' 3400               	retlw	0
  3599  0004' 3400               	retlw	0
  3600  0005' 3400               	retlw	0
  3601  0006' 3400               	retlw	0
  3602  0007' 3400               	retlw	0
  3603  0008' 3401               	retlw	1
  3604  0009' 3400               	retlw	0
  3605  000A' 3400               	retlw	0
  3606  000B' 3400               	retlw	0
  3607  000C' 3400               	retlw	0
  3608  000D' 3400               	retlw	0
  3609  000E' 3400               	retlw	0
  3610  000F' 3400               	retlw	0
  3611  0010' 3401               	retlw	1
  3612  0011' 3400               	retlw	0
  3613  0012' 3400               	retlw	0
  3614  0013' 3400               	retlw	0
  3615  0014' 3400               	retlw	0
  3616  0015' 3400               	retlw	0
  3617  0016' 3400               	retlw	0
  3618  0017' 3400               	retlw	0
  3619                           
  3620                           	psect	stringtext1
  3621  0000'                    __pstringtext1:
  3622  0000'                    _UART:
  3623  0000' 3400'              	retlw	low _EUSART_Initialize
  3624  0001' 3400'              	retlw	high _EUSART_Initialize
  3625  0002' 3400               	retlw	0
  3626  0003' 3400               	retlw	0
  3627  0004' 3400'              	retlw	low _EUSART_Read
  3628  0005' 3400'              	retlw	high _EUSART_Read
  3629  0006' 3400'              	retlw	low _EUSART_Write
  3630  0007' 3400'              	retlw	high _EUSART_Write
  3631  0008' 3400'              	retlw	low _EUSART_IsRxReady
  3632  0009' 3400'              	retlw	high _EUSART_IsRxReady
  3633  000A' 3400               	retlw	0
  3634  000B' 3400               	retlw	0
  3635  000C' 3400               	retlw	0
  3636  000D' 3400               	retlw	0
  3637  000E' 3400               	retlw	0
  3638  000F' 3400               	retlw	0
  3639  0010' 3400               	retlw	0
  3640  0011' 3400               	retlw	0
  3641  0012' 3400               	retlw	0
  3642  0013' 3400               	retlw	0
  3643  0014' 3400               	retlw	0
  3644  0015' 3400               	retlw	0
  3645  0016' 3400               	retlw	0
  3646  0017' 3400               	retlw	0
  3647  0018' 3400               	retlw	0
  3648  0019' 3400               	retlw	0
  3649  001A' 3400               	retlw	0
  3650  001B' 3400               	retlw	0
  3651  001C' 3400               	retlw	0
  3652  001D' 3400               	retlw	0
  3653  001E' 3400               	retlw	0
  3654  001F' 3400               	retlw	0
  3655  0020' 3400               	retlw	0
  3656  0021' 3400               	retlw	0
  3657  0022' 3400               	retlw	0
  3658  0023' 3400               	retlw	0
  3659  0024' 3400               	retlw	0
  3660  0025' 3400               	retlw	0
  3661  0026' 3400               	retlw	0
  3662  0027' 3400               	retlw	0
  3663  0028' 3400'              	retlw	low _EUSART_FramingErrorCallbackRegister
  3664  0029' 3400'              	retlw	high _EUSART_FramingErrorCallbackRegister
  3665  002A' 3400'              	retlw	low _EUSART_OverrunErrorCallbackRegister
  3666  002B' 3400'              	retlw	high _EUSART_OverrunErrorCallbackRegister
  3667  002C' 3400               	retlw	0
  3668  002D' 3400               	retlw	0
  3669  002E' 3400               	retlw	0
  3670  002F' 3400               	retlw	0
  3671  0030'                    __end_of_UART:
  3672                           
  3673                           	psect	stringtext2
  3674  0000'                    __pstringtext2:
  3675  0000'                    _I2C_Host:
  3676  0000' 3400'              	retlw	low _I2C1_Initialize
  3677  0001' 3400'              	retlw	high _I2C1_Initialize
  3678  0002' 3400               	retlw	0
  3679  0003' 3400               	retlw	0
  3680  0004' 3400               	retlw	0
  3681  0005' 3400               	retlw	0
  3682  0006' 3400               	retlw	0
  3683  0007' 3400               	retlw	0
  3684  0008' 3400               	retlw	0
  3685  0009' 3400               	retlw	0
  3686  000A' 3400               	retlw	0
  3687  000B' 3400               	retlw	0
  3688  000C' 3400               	retlw	0
  3689  000D' 3400               	retlw	0
  3690  000E' 3400               	retlw	0
  3691  000F' 3400               	retlw	0
  3692  0010' 3400'              	retlw	low _I2C1_CallbackRegister
  3693  0011' 3400'              	retlw	high _I2C1_CallbackRegister
  3694  0012' 3400               	retlw	0
  3695  0013' 3400               	retlw	0
  3696  0014'                    __end_of_I2C_Host:
  3697                           
  3698                           	psect	stringtext3
  3699  0000'                    __pstringtext3:
  3700  0000'                    _i2c1_eventTable:
  3701  0000' 3400'              	retlw	low _I2C1_EVENT_IDLE
  3702  0001' 3400'              	retlw	high _I2C1_EVENT_IDLE
  3703  0002' 3400'              	retlw	low _I2C1_EVENT_SEND_RD_ADDR
  3704  0003' 3400'              	retlw	high _I2C1_EVENT_SEND_RD_ADDR
  3705  0004' 3400'              	retlw	low _I2C1_EVENT_SEND_WR_ADDR
  3706  0005' 3400'              	retlw	high _I2C1_EVENT_SEND_WR_ADDR
  3707  0006' 3400'              	retlw	low _I2C1_EVENT_TX
  3708  0007' 3400'              	retlw	high _I2C1_EVENT_TX
  3709  0008' 3400'              	retlw	low _I2C1_EVENT_RX
  3710  0009' 3400'              	retlw	high _I2C1_EVENT_RX
  3711  000A' 3400'              	retlw	low _I2C1_EVENT_NACK
  3712  000B' 3400'              	retlw	high _I2C1_EVENT_NACK
  3713  000C' 3400'              	retlw	low _I2C1_EVENT_ERROR
  3714  000D' 3400'              	retlw	high _I2C1_EVENT_ERROR
  3715  000E' 3400'              	retlw	low _I2C1_EVENT_STOP
  3716  000F' 3400'              	retlw	high _I2C1_EVENT_STOP
  3717  0010' 3400'              	retlw	low _I2C1_EVENT_RESET
  3718  0011' 3400'              	retlw	high _I2C1_EVENT_RESET
  3719  0012'                    __end_of_i2c1_eventTable:
  3720                           
  3721                           	psect	nvBANK1
  3722  0000'                    __pnvBANK1:
  3723  0000'                    _ADC_InterruptHandler:
  3724  0000'                    	ds	2
  3725  000B                     _INTCONbits	set	11
  3726  0011                     _PIR2bits	set	17
  3727  0010                     _PIR1bits	set	16
  3728  0095                     _OPTION_REGbits	set	149
  3729  008E                     _TRISC	set	142
  3730  008D                     _TRISB	set	141
  3731  008C                     _TRISA	set	140
  3732  0098                     _OSCTUNE	set	152
  3733  0099                     _OSCCON	set	153
  3734  0091                     _PIE2bits	set	145
  3735  009D                     _ADCON0bits	set	157
  3736  0090                     _PIE1bits	set	144
  3737  009D                     _ADCON0	set	157
  3738  009F                     _ADCON2	set	159
  3739  009C                     _ADRESH	set	156
  3740  009B                     _ADRESL	set	155
  3741  009E                     _ADCON1	set	158
  3742  010E                     _LATCbits	set	270
  3743  010E                     _LATC	set	270
  3744  010D                     _LATB	set	269
  3745  010C                     _LATA	set	268
  3746  0116                     _BORCON	set	278
  3747  019A                     _TX1REG	set	410
  3748  0199                     _RC1REG	set	409
  3749  019F                     _BAUD1CONbits	set	415
  3750  019E                     _TX1STAbits	set	414
  3751  019D                     _RC1STAbits	set	413
  3752  019C                     _SPBRGH	set	412
  3753  019B                     _SPBRGL	set	411
  3754  019E                     _TX1STA	set	414
  3755  019D                     _RC1STA	set	413
  3756  019F                     _BAUD1CON	set	415
  3757  018E                     _ANSELC	set	398
  3758  018D                     _ANSELB	set	397
  3759  018C                     _ANSELA	set	396
  3760  020E                     _WPUC	set	526
  3761  020D                     _WPUB	set	525
  3762  020C                     _WPUA	set	524
  3763  0216                     _SSP1CON2bits	set	534
  3764  0211                     _SSP1BUF	set	529
  3765  0214                     _SSP1STATbits	set	532
  3766  0215                     _SSP1CON1bits	set	533
  3767  0212                     _SSP1ADD	set	530
  3768  0217                     _SSP1CON3	set	535
  3769  0216                     _SSP1CON2	set	534
  3770  0215                     _SSP1CON1	set	533
  3771  0214                     _SSP1STAT	set	532
  3772  028E                     _ODCONC	set	654
  3773  028D                     _ODCONB	set	653
  3774  028C                     _ODCONA	set	652
  3775  030E                     _SLRCONC	set	782
  3776  030D                     _SLRCONB	set	781
  3777  030C                     _SLRCONA	set	780
  3778  0399                     _IOCCF	set	921
  3779  0398                     _IOCCN	set	920
  3780  0397                     _IOCCP	set	919
  3781  0396                     _IOCBF	set	918
  3782  0395                     _IOCBN	set	917
  3783  0394                     _IOCBP	set	916
  3784  0393                     _IOCAF	set	915
  3785  0392                     _IOCAN	set	914
  3786  0391                     _IOCAP	set	913
  3787  038E                     _INLVLC	set	910
  3788  038D                     _INLVLB	set	909
  3789  038C                     _INLVLA	set	908
  3790  0E21                     _SSPDATPPS	set	3617
  3791  0E20                     _SSPCLKPPS	set	3616
  3792  0E24                     _RXPPS	set	3620
  3793  0E9D                     _RB5PPS	set	3741
  3794  0E9E                     _RB6PPS	set	3742
  3795  0EA2                     _RC2PPS	set	3746
  3796                           
  3797                           	psect	stringtext4
  3798  0000'                    __pstringtext4:
  3799  0000'                    STR_13:
  3800  0000' 3463               	retlw	99	;'c'
  3801  0001' 3468               	retlw	104	;'h'
  3802  0002' 3461               	retlw	97	;'a'
  3803  0003' 346E               	retlw	110	;'n'
  3804  0004' 346E               	retlw	110	;'n'
  3805  0005' 3465               	retlw	101	;'e'
  3806  0006' 346C               	retlw	108	;'l'
  3807  0007' 3420               	retlw	32	;' '
  3808  0008' 343D               	retlw	61	;'='
  3809  0009' 343D               	retlw	61	;'='
  3810  000A' 3420               	retlw	32	;' '
  3811  000B' 3450               	retlw	80	;'P'
  3812  000C' 3444               	retlw	68	;'D'
  3813  000D' 345F               	retlw	95	;'_'
  3814  000E' 3458               	retlw	88	;'X'
  3815  000F' 3420               	retlw	32	;' '
  3816  0010' 347C               	retlw	124	;'|'
  3817  0011' 347C               	retlw	124	;'|'
  3818  0012' 3420               	retlw	32	;' '
  3819  0013' 3463               	retlw	99	;'c'
  3820  0014' 3468               	retlw	104	;'h'
  3821  0015' 3461               	retlw	97	;'a'
  3822  0016' 346E               	retlw	110	;'n'
  3823  0017' 346E               	retlw	110	;'n'
  3824  0018' 3465               	retlw	101	;'e'
  3825  0019' 346C               	retlw	108	;'l'
  3826  001A' 3420               	retlw	32	;' '
  3827  001B' 343D               	retlw	61	;'='
  3828  001C' 343D               	retlw	61	;'='
  3829  001D' 3420               	retlw	32	;' '
  3830  001E' 3443               	retlw	67	;'C'
  3831  001F' 3453               	retlw	83	;'S'
  3832  0020' 345F               	retlw	95	;'_'
  3833  0021' 344B               	retlw	75	;'K'
  3834  0022' 3461               	retlw	97	;'a'
  3835  0023' 3420               	retlw	32	;' '
  3836  0024' 347C               	retlw	124	;'|'
  3837  0025' 347C               	retlw	124	;'|'
  3838  0026' 3420               	retlw	32	;' '
  3839  0027' 3463               	retlw	99	;'c'
  3840  0028' 3468               	retlw	104	;'h'
  3841  0029' 3461               	retlw	97	;'a'
  3842  002A' 346E               	retlw	110	;'n'
  3843  002B' 346E               	retlw	110	;'n'
  3844  002C' 3465               	retlw	101	;'e'
  3845  002D' 346C               	retlw	108	;'l'
  3846  002E' 3420               	retlw	32	;' '
  3847  002F' 343D               	retlw	61	;'='
  3848  0030' 343D               	retlw	61	;'='
  3849  0031' 3420               	retlw	32	;' '
  3850  0032' 3443               	retlw	67	;'C'
  3851  0033' 3453               	retlw	83	;'S'
  3852  0034' 345F               	retlw	95	;'_'
  3853  0035' 3458               	retlw	88	;'X'
  3854  0036' 3400               	retlw	0
  3855                           
  3856                           	psect	stringtext5
  3857  0000'                    __pstringtext5:
  3858  0000'                    STR_1:
  3859  0000' 3473               	retlw	115	;'s'
  3860  0001' 3469               	retlw	105	;'i'
  3861  0002' 347A               	retlw	122	;'z'
  3862  0003' 3465               	retlw	101	;'e'
  3863  0004' 346F               	retlw	111	;'o'
  3864  0005' 3466               	retlw	102	;'f'
  3865  0006' 3420               	retlw	32	;' '
  3866  0007' 3428               	retlw	40	;'('
  3867  0008' 3461               	retlw	97	;'a'
  3868  0009' 3464               	retlw	100	;'d'
  3869  000A' 3463               	retlw	99	;'c'
  3870  000B' 345F               	retlw	95	;'_'
  3871  000C' 3472               	retlw	114	;'r'
  3872  000D' 3465               	retlw	101	;'e'
  3873  000E' 3473               	retlw	115	;'s'
  3874  000F' 3475               	retlw	117	;'u'
  3875  0010' 346C               	retlw	108	;'l'
  3876  0011' 3474               	retlw	116	;'t'
  3877  0012' 345F               	retlw	95	;'_'
  3878  0013' 3474               	retlw	116	;'t'
  3879  0014' 3429               	retlw	41	;')'
  3880  0015' 3420               	retlw	32	;' '
  3881  0016' 343D               	retlw	61	;'='
  3882  0017' 343D               	retlw	61	;'='
  3883  0018' 3420               	retlw	32	;' '
  3884  0019' 3473               	retlw	115	;'s'
  3885  001A' 3469               	retlw	105	;'i'
  3886  001B' 347A               	retlw	122	;'z'
  3887  001C' 3465               	retlw	101	;'e'
  3888  001D' 346F               	retlw	111	;'o'
  3889  001E' 3466               	retlw	102	;'f'
  3890  001F' 3420               	retlw	32	;' '
  3891  0020' 3428               	retlw	40	;'('
  3892  0021' 3475               	retlw	117	;'u'
  3893  0022' 3469               	retlw	105	;'i'
  3894  0023' 346E               	retlw	110	;'n'
  3895  0024' 3474               	retlw	116	;'t'
  3896  0025' 3431               	retlw	49	;'1'
  3897  0026' 3436               	retlw	54	;'6'
  3898  0027' 345F               	retlw	95	;'_'
  3899  0028' 3474               	retlw	116	;'t'
  3900  0029' 3429               	retlw	41	;')'
  3901  002A' 3400               	retlw	0
  3902                           
  3903                           	psect	stringtext6
  3904  0000'                    __pstringtext6:
  3905  0000'                    STR_7:
  3906  0000' 3463               	retlw	99	;'c'
  3907  0001' 3468               	retlw	104	;'h'
  3908  0002' 3461               	retlw	97	;'a'
  3909  0003' 346E               	retlw	110	;'n'
  3910  0004' 346E               	retlw	110	;'n'
  3911  0005' 3465               	retlw	101	;'e'
  3912  0006' 346C               	retlw	108	;'l'
  3913  0007' 3420               	retlw	32	;' '
  3914  0008' 343D               	retlw	61	;'='
  3915  0009' 343D               	retlw	61	;'='
  3916  000A' 3420               	retlw	32	;' '
  3917  000B' 3454               	retlw	84	;'T'
  3918  000C' 344D               	retlw	77	;'M'
  3919  000D' 345F               	retlw	95	;'_'
  3920  000E' 344B               	retlw	75	;'K'
  3921  000F' 3461               	retlw	97	;'a'
  3922  0010' 3420               	retlw	32	;' '
  3923  0011' 347C               	retlw	124	;'|'
  3924  0012' 347C               	retlw	124	;'|'
  3925  0013' 3420               	retlw	32	;' '
  3926  0014' 3463               	retlw	99	;'c'
  3927  0015' 3468               	retlw	104	;'h'
  3928  0016' 3461               	retlw	97	;'a'
  3929  0017' 346E               	retlw	110	;'n'
  3930  0018' 346E               	retlw	110	;'n'
  3931  0019' 3465               	retlw	101	;'e'
  3932  001A' 346C               	retlw	108	;'l'
  3933  001B' 3420               	retlw	32	;' '
  3934  001C' 343D               	retlw	61	;'='
  3935  001D' 343D               	retlw	61	;'='
  3936  001E' 3420               	retlw	32	;' '
  3937  001F' 3454               	retlw	84	;'T'
  3938  0020' 344D               	retlw	77	;'M'
  3939  0021' 345F               	retlw	95	;'_'
  3940  0022' 3458               	retlw	88	;'X'
  3941  0023' 3400               	retlw	0
  3942                           
  3943                           	psect	stringtext7
  3944  0000'                    __pstringtext7:
  3945  0000'                    STR_19:
  3946  0000' 3441               	retlw	65	;'A'
  3947  0001' 3473               	retlw	115	;'s'
  3948  0002' 3473               	retlw	115	;'s'
  3949  0003' 3465               	retlw	101	;'e'
  3950  0004' 3472               	retlw	114	;'r'
  3951  0005' 3474               	retlw	116	;'t'
  3952  0006' 3469               	retlw	105	;'i'
  3953  0007' 346F               	retlw	111	;'o'
  3954  0008' 346E               	retlw	110	;'n'
  3955  0009' 3420               	retlw	32	;' '
  3956  000A' 3466               	retlw	102	;'f'
  3957  000B' 3461               	retlw	97	;'a'
  3958  000C' 3469               	retlw	105	;'i'
  3959  000D' 346C               	retlw	108	;'l'
  3960  000E' 3465               	retlw	101	;'e'
  3961  000F' 3464               	retlw	100	;'d'
  3962  0010' 343A               	retlw	58	;':'
  3963  0011' 3420               	retlw	32	;' '
  3964  0012' 3425               	retlw	37	;'%'
  3965  0013' 3473               	retlw	115	;'s'
  3966  0014' 3420               	retlw	32	;' '
  3967  0015' 3428               	retlw	40	;'('
  3968  0016' 3425               	retlw	37	;'%'
  3969  0017' 3473               	retlw	115	;'s'
  3970  0018' 343A               	retlw	58	;':'
  3971  0019' 3420               	retlw	32	;' '
  3972  001A' 3425               	retlw	37	;'%'
  3973  001B' 3473               	retlw	115	;'s'
  3974  001C' 343A               	retlw	58	;':'
  3975  001D' 3420               	retlw	32	;' '
  3976  001E' 3425               	retlw	37	;'%'
  3977  001F' 3464               	retlw	100	;'d'
  3978  0020' 3429               	retlw	41	;')'
  3979  0021' 340A               	retlw	10
  3980  0022' 3400               	retlw	0
  3981                           
  3982                           	psect	stringtext8
  3983  0000'                    __pstringtext8:
  3984  0000'                    STR_9:
  3985  0000' 3453               	retlw	83	;'S'
  3986  0001' 3453               	retlw	83	;'S'
  3987  0002' 3450               	retlw	80	;'P'
  3988  0003' 3441               	retlw	65	;'A'
  3989  0004' 345F               	retlw	95	;'_'
  3990  0005' 3467               	retlw	103	;'g'
  3991  0006' 3465               	retlw	101	;'e'
  3992  0007' 3474               	retlw	116	;'t'
  3993  0008' 3454               	retlw	84	;'T'
  3994  0009' 3465               	retlw	101	;'e'
  3995  000A' 346D               	retlw	109	;'m'
  3996  000B' 3470               	retlw	112	;'p'
  3997  000C' 3400               	retlw	0
  3998                           
  3999                           	psect	stringtext9
  4000  0000'                    __pstringtext9:
  4001  0000'                    STR_15:
  4002  0000' 3453               	retlw	83	;'S'
  4003  0001' 3453               	retlw	83	;'S'
  4004  0002' 3450               	retlw	80	;'P'
  4005  0003' 3441               	retlw	65	;'A'
  4006  0004' 345F               	retlw	95	;'_'
  4007  0005' 3467               	retlw	103	;'g'
  4008  0006' 3465               	retlw	101	;'e'
  4009  0007' 3474               	retlw	116	;'t'
  4010  0008' 3450               	retlw	80	;'P'
  4011  0009' 344F               	retlw	79	;'O'
  4012  000A' 3475               	retlw	117	;'u'
  4013  000B' 3474               	retlw	116	;'t'
  4014  000C' 3400               	retlw	0
  4015                           
  4016                           	psect	stringtext10
  4017  0000'                    __pstringtext10:
  4018  0000'                    STR_3:
  4019  0000' 3467               	retlw	103	;'g'
  4020  0001' 3465               	retlw	101	;'e'
  4021  0002' 3474               	retlw	116	;'t'
  4022  0003' 3441               	retlw	65	;'A'
  4023  0004' 3444               	retlw	68	;'D'
  4024  0005' 3443               	retlw	67	;'C'
  4025  0006' 3456               	retlw	86	;'V'
  4026  0007' 3461               	retlw	97	;'a'
  4027  0008' 346C               	retlw	108	;'l'
  4028  0009' 3475               	retlw	117	;'u'
  4029  000A' 3465               	retlw	101	;'e'
  4030  000B' 3400               	retlw	0
  4031                           
  4032                           	psect	stringtext11
  4033  0000'                    __pstringtext11:
  4034  0000'                    STR_2:
  4035  0000' 346D               	retlw	109	;'m'
  4036  0001' 3461               	retlw	97	;'a'
  4037  0002' 3469               	retlw	105	;'i'
  4038  0003' 346E               	retlw	110	;'n'
  4039  0004' 342E               	retlw	46	;'.'
  4040  0005' 3463               	retlw	99	;'c'
  4041  0006' 3400               	retlw	0
  4042                           
  4043                           	psect	stringtext12
  4044  0000'                    __pstringtext12:
  4045  0000'                    
  4046                           	psect	cinit
  4047  0000'                    start_initialization:	
  4048                           ; #config settings
  4049                           
  4050  0000'                    __initialization:
  4051                           
  4052                           ; Initialize objects allocated to BANK2
  4053  0000' 3000'              	movlw	low __pidataBANK2
  4054  0001' 0084               	movwf	4
  4055  0002' 3000'              	movlw	(high __pidataBANK2)| (0+128)
  4056  0003' 0085               	movwf	5
  4057  0004' 3000'              	movlw	low __pdataBANK2
  4058  0005' 0086               	movwf	6
  4059  0006' 3000'              	movlw	high __pdataBANK2
  4060  0007' 0087               	movwf	7
  4061  0008' 3018               	movlw	24
  4062  0009' 3180' 2000' 3180'  	fcall	init_ram
  4063                           
  4064                           ; Clear objects allocated to COMMON
  4065  000C' 0180'              	clrf	__pbssCOMMON& (0+127)
  4066  000D' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
  4067  000E' 0180'              	clrf	(__pbssCOMMON+2)& (0+127)
  4068  000F' 0180'              	clrf	(__pbssCOMMON+3)& (0+127)
  4069  0010' 0180'              	clrf	(__pbssCOMMON+4)& (0+127)
  4070  0011' 0180'              	clrf	(__pbssCOMMON+5)& (0+127)
  4071                           
  4072                           ; Clear objects allocated to BANK1
  4073  0012' 3000'              	movlw	low __pbssBANK1
  4074  0013' 0084               	movwf	4
  4075  0014' 3000'              	movlw	high __pbssBANK1
  4076  0015' 0085               	movwf	5
  4077  0016' 3025               	movlw	37
  4078  0017' 3180' 2000' 3180'  	fcall	clear_ram0
  4079                           
  4080                           ; Clear objects allocated to BANK2
  4081  001A' 3000'              	movlw	low __pbssBANK2
  4082  001B' 0084               	movwf	4
  4083  001C' 3000'              	movlw	high __pbssBANK2
  4084  001D' 0085               	movwf	5
  4085  001E' 3020               	movlw	32
  4086  001F' 3180' 2000'        	fcall	clear_ram0
  4087  0021'                    end_of_initialization:	
  4088                           ;End of C runtime variable initialization code
  4089                           
  4090  0021'                    __end_of__initialization:
  4091  0021' 107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4092  0022' 0020               	movlb	0
  4093  0023' 3180' 2800'        	ljmp	_main	;jump to C main() function
  4094                           
  4095                           	psect	bssCOMMON
  4096  0000'                    __pbssCOMMON:
  4097  0000'                    _EUSART_FramingErrorHandler:
  4098  0000'                    	ds	2
  4099  0002'                    _INT_InterruptHandler:
  4100  0002'                    	ds	2
  4101  0004'                    _flags:
  4102  0004'                    	ds	1
  4103  0005'                    _count:
  4104  0005'                    	ds	1
  4105                           
  4106                           	psect	bssBANK1
  4107  0000'                    __pbssBANK1:
  4108  0000'                    _i2c1Status:
  4109  0000'                    	ds	14
  4110  000E'                    _funcs:
  4111  000E'                    	ds	6
  4112  0014'                    _width:
  4113  0014'                    	ds	2
  4114  0016'                    _prec:
  4115  0016'                    	ds	2
  4116  0018'                    _EUSART_OverrunErrorHandler:
  4117  0018'                    	ds	2
  4118  001A'                    _eusartRxLastError:
  4119  001A'                    	ds	2
  4120  001C'                    _I2C1_Callback:
  4121  001C'                    	ds	2
  4122  001E'                    _kaps:
  4123  001E'                    	ds	7
  4124                           
  4125                           	psect	bssBANK2
  4126  0000'                    __pbssBANK2:
  4127  0000'                    _dbuf:
  4128  0000'                    	ds	32
  4129                           
  4130                           	psect	dataBANK2
  4131  0000'                    __pdataBANK2:
  4132  0000'                    _sppas:
  4133  0000'                    	ds	24
  4134                           
  4135                           	psect	inittext
  4136  0000'                    init_ram:
  4137  0000' 00FE               	movwf	126
  4138  0001'                    initloop:
  4139  0001' 0012               	moviw fsr0++
  4140  0002' 001E               	movwi fsr1++
  4141  0003' 0BFE               	decfsz	126,f
  4142  0004' 2800'              	goto	initloop
  4143  0005' 3400               	retlw	0
  4144                           
  4145                           	psect	clrtext
  4146  0000'                    clear_ram0:	
  4147                           ;	Called with FSR0 containing the base address, and
  4148                           ;	WREG with the size to clear
  4149                           
  4150  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
  4151  0001'                    clrloop0:
  4152  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
  4153  0002' 3101               	addfsr 0,1
  4154  0003' 0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4155  0004' 2800'              	goto	clrloop0	;have we reached the end yet?
  4156  0005' 3400               	retlw	0	;all done for this memory range, return
  4157                           
  4158                           	psect	cstackBANK1
  4159  0000'                    __pcstackBANK1:
  4160  0000'                    ??___fltol:
  4161                           
  4162                           ; 1 bytes @ 0x0
  4163  0000'                    	ds	4
  4164  0004'                    ?_SSPA_getTemp:
  4165  0004'                    ?_SSPA_getPOut:	
  4166                           ; 1 bytes @ 0x4
  4167                           
  4168  0004'                    SSPA_getTemp@band:	
  4169                           ; 1 bytes @ 0x4
  4170                           
  4171  0004'                    SSPA_getPOut@band:	
  4172                           ; 1 bytes @ 0x4
  4173                           
  4174                           
  4175                           ; 1 bytes @ 0x4
  4176  0004'                    	ds	1
  4177  0005'                    ??_SSPA_getTemp:
  4178  0005'                    ??_SSPA_getPOut:	
  4179                           ; 1 bytes @ 0x5
  4180                           
  4181                           
  4182                           ; 1 bytes @ 0x5
  4183  0005'                    	ds	2
  4184  0007'                    SSPA_getPOut@sspa:
  4185  0007'                    SSPA_getTemp@adc_value:	
  4186                           ; 1 bytes @ 0x7
  4187                           
  4188                           
  4189                           ; 2 bytes @ 0x7
  4190  0007'                    	ds	1
  4191  0008'                    SSPA_getPOut@adc_value:
  4192                           
  4193                           ; 2 bytes @ 0x8
  4194  0008'                    	ds	1
  4195  0009'                    SSPA_getTemp@sspa:
  4196                           
  4197                           ; 1 bytes @ 0x9
  4198  0009'                    	ds	1
  4199  000A'                    SSPA_getTemp@channel:
  4200  000A'                    SSPA_getPOut@channel:	
  4201                           ; 1 bytes @ 0xA
  4202                           
  4203                           
  4204                           ; 1 bytes @ 0xA
  4205  000A'                    	ds	1
  4206  000B'                    ?_ProcessMsg:
  4207  000B'                    ProcessMsg@data:	
  4208                           ; 1 bytes @ 0xB
  4209                           
  4210                           
  4211                           ; 1 bytes @ 0xB
  4212  000B'                    	ds	1
  4213  000C'                    ??_ProcessMsg:
  4214                           
  4215                           ; 1 bytes @ 0xC
  4216  000C'                    	ds	1
  4217  000D'                    ProcessMsg@msg_id:
  4218                           
  4219                           ; 1 bytes @ 0xD
  4220  000D'                    	ds	1
  4221  000E'                    ProcessMsg@payload:
  4222                           
  4223                           ; 6 bytes @ 0xE
  4224  000E'                    	ds	6
  4225  0014'                    ?_Parse:
  4226  0014'                    Parse@data:	
  4227                           ; 1 bytes @ 0x14
  4228                           
  4229                           
  4230                           ; 1 bytes @ 0x14
  4231  0014'                    	ds	1
  4232  0015'                    ??_Parse:
  4233                           
  4234                           ; 1 bytes @ 0x15
  4235  0015'                    	ds	2
  4236  0017'                    Parse@parser:
  4237                           
  4238                           ; 1 bytes @ 0x17
  4239  0017'                    	ds	1
  4240  0018'                    main@data:
  4241                           
  4242                           ; 1 bytes @ 0x18
  4243  0018'                    	ds	1
  4244  0019'                    main@parser:
  4245                           
  4246                           ; 12 bytes @ 0x19
  4247  0019'                    	ds	12
  4248                           
  4249                           	psect	cstackCOMMON
  4250  0000'                    __pcstackCOMMON:
  4251  0000'                    ?_ADC_DefaultInterruptHandler:
  4252  0000'                    ??_ADC_DefaultInterruptHandler:	
  4253                           ; 1 bytes @ 0x0
  4254                           
  4255  0000'                    ?_I2C1_Initialize:	
  4256                           ; 1 bytes @ 0x0
  4257                           
  4258  0000'                    ?_I2C1_EVENT_IDLE:	
  4259                           ; 1 bytes @ 0x0
  4260                           
  4261  0000'                    ??_I2C1_EVENT_IDLE:	
  4262                           ; 1 bytes @ 0x0
  4263                           
  4264  0000'                    ?_I2C1_EVENT_SEND_RD_ADDR:	
  4265                           ; 1 bytes @ 0x0
  4266                           
  4267  0000'                    ??_I2C1_EVENT_SEND_RD_ADDR:	
  4268                           ; 1 bytes @ 0x0
  4269                           
  4270  0000'                    ?_I2C1_EVENT_SEND_WR_ADDR:	
  4271                           ; 1 bytes @ 0x0
  4272                           
  4273  0000'                    ?_I2C1_EVENT_TX:	
  4274                           ; 1 bytes @ 0x0
  4275                           
  4276  0000'                    ?_I2C1_EVENT_RX:	
  4277                           ; 1 bytes @ 0x0
  4278                           
  4279  0000'                    ??_I2C1_EVENT_RX:	
  4280                           ; 1 bytes @ 0x0
  4281                           
  4282  0000'                    ?_I2C1_EVENT_NACK:	
  4283                           ; 1 bytes @ 0x0
  4284                           
  4285  0000'                    ??_I2C1_EVENT_NACK:	
  4286                           ; 1 bytes @ 0x0
  4287                           
  4288  0000'                    ?_I2C1_EVENT_ERROR:	
  4289                           ; 1 bytes @ 0x0
  4290                           
  4291  0000'                    ??_I2C1_EVENT_ERROR:	
  4292                           ; 1 bytes @ 0x0
  4293                           
  4294  0000'                    ?_I2C1_EVENT_STOP:	
  4295                           ; 1 bytes @ 0x0
  4296                           
  4297  0000'                    ??_I2C1_EVENT_STOP:	
  4298                           ; 1 bytes @ 0x0
  4299                           
  4300  0000'                    ?_I2C1_EVENT_RESET:	
  4301                           ; 1 bytes @ 0x0
  4302                           
  4303  0000'                    ??_I2C1_EVENT_RESET:	
  4304                           ; 1 bytes @ 0x0
  4305                           
  4306  0000'                    ?_I2C1_InterruptsEnable:	
  4307                           ; 1 bytes @ 0x0
  4308                           
  4309  0000'                    ?_I2C1_DefaultCallback:	
  4310                           ; 1 bytes @ 0x0
  4311                           
  4312  0000'                    ??_I2C1_DefaultCallback:	
  4313                           ; 1 bytes @ 0x0
  4314                           
  4315  0000'                    ?_I2C1_EventHandler:	
  4316                           ; 1 bytes @ 0x0
  4317                           
  4318  0000'                    ?_I2C1_ErrorEventHandler:	
  4319                           ; 1 bytes @ 0x0
  4320                           
  4321  0000'                    ?_I2C1_InterruptClear:	
  4322                           ; 1 bytes @ 0x0
  4323                           
  4324  0000'                    ??_I2C1_InterruptClear:	
  4325                           ; 1 bytes @ 0x0
  4326                           
  4327  0000'                    ?_I2C1_ErrorInterruptClear:	
  4328                           ; 1 bytes @ 0x0
  4329                           
  4330  0000'                    ??_I2C1_ErrorInterruptClear:	
  4331                           ; 1 bytes @ 0x0
  4332                           
  4333  0000'                    ?_I2C1_StatusFlagsClear:	
  4334                           ; 1 bytes @ 0x0
  4335                           
  4336  0000'                    ??_I2C1_StatusFlagsClear:	
  4337                           ; 1 bytes @ 0x0
  4338                           
  4339  0000'                    ?_I2C1_IsAddr:	
  4340                           ; 1 bytes @ 0x0
  4341                           
  4342  0000'                    ??_I2C1_IsAddr:	
  4343                           ; 1 bytes @ 0x0
  4344                           
  4345  0000'                    ?_I2C1_IsNack:	
  4346                           ; 1 bytes @ 0x0
  4347                           
  4348  0000'                    ??_I2C1_IsNack:	
  4349                           ; 1 bytes @ 0x0
  4350                           
  4351  0000'                    ?_I2C1_IsData:	
  4352                           ; 1 bytes @ 0x0
  4353                           
  4354  0000'                    ??_I2C1_IsData:	
  4355                           ; 1 bytes @ 0x0
  4356                           
  4357  0000'                    ?_I2C1_DataTransmit:	
  4358                           ; 1 bytes @ 0x0
  4359                           
  4360  0000'                    ??_I2C1_DataTransmit:	
  4361                           ; 1 bytes @ 0x0
  4362                           
  4363  0000'                    ?_I2C1_RestartEnable:	
  4364                           ; 1 bytes @ 0x0
  4365                           
  4366  0000'                    ??_I2C1_RestartEnable:	
  4367                           ; 1 bytes @ 0x0
  4368                           
  4369  0000'                    ?_I2C1_IsRxBufFull:	
  4370                           ; 1 bytes @ 0x0
  4371                           
  4372  0000'                    ??_I2C1_IsRxBufFull:	
  4373                           ; 1 bytes @ 0x0
  4374                           
  4375  0000'                    ?_I2C1_DataReceive:	
  4376                           ; 1 bytes @ 0x0
  4377                           
  4378  0000'                    ??_I2C1_DataReceive:	
  4379                           ; 1 bytes @ 0x0
  4380                           
  4381  0000'                    ?_I2C1_AckSend:	
  4382                           ; 1 bytes @ 0x0
  4383                           
  4384  0000'                    ??_I2C1_AckSend:	
  4385                           ; 1 bytes @ 0x0
  4386                           
  4387  0000'                    ?_I2C1_RestartDisable:	
  4388                           ; 1 bytes @ 0x0
  4389                           
  4390  0000'                    ??_I2C1_RestartDisable:	
  4391                           ; 1 bytes @ 0x0
  4392                           
  4393  0000'                    ?_I2C1_NackSend:	
  4394                           ; 1 bytes @ 0x0
  4395                           
  4396  0000'                    ??_I2C1_NackSend:	
  4397                           ; 1 bytes @ 0x0
  4398                           
  4399  0000'                    ?_I2C1_ReceiveEnable:	
  4400                           ; 1 bytes @ 0x0
  4401                           
  4402  0000'                    ??_I2C1_ReceiveEnable:	
  4403                           ; 1 bytes @ 0x0
  4404                           
  4405  0000'                    ?_I2C1_StopSend:	
  4406                           ; 1 bytes @ 0x0
  4407                           
  4408  0000'                    ??_I2C1_StopSend:	
  4409                           ; 1 bytes @ 0x0
  4410                           
  4411  0000'                    ?_I2C1_BusReset:	
  4412                           ; 1 bytes @ 0x0
  4413                           
  4414  0000'                    ??_I2C1_BusReset:	
  4415                           ; 1 bytes @ 0x0
  4416                           
  4417  0000'                    ?_EUSART_Initialize:	
  4418                           ; 1 bytes @ 0x0
  4419                           
  4420  0000'                    ?_EUSART_Read:	
  4421                           ; 1 bytes @ 0x0
  4422                           
  4423  0000'                    ?_EUSART_IsRxReady:	
  4424                           ; 1 bytes @ 0x0
  4425                           
  4426  0000'                    ?_EUSART_DefaultFramingErrorCallback:	
  4427                           ; 1 bytes @ 0x0
  4428                           
  4429  0000'                    ?_EUSART_DefaultOverrunErrorCallback:	
  4430                           ; 1 bytes @ 0x0
  4431                           
  4432  0000'                    ?_abort:	
  4433                           ; 1 bytes @ 0x0
  4434                           
  4435  0000'                    ?___funcs_on_exit:	
  4436                           ; 1 bytes @ 0x0
  4437                           
  4438  0000'                    ?_putch:	
  4439                           ; 1 bytes @ 0x0
  4440                           
  4441  0000'                    ?_ADC_Initialize:	
  4442                           ; 1 bytes @ 0x0
  4443                           
  4444  0000'                    ?_ADC_SelectChannel:	
  4445                           ; 1 bytes @ 0x0
  4446                           
  4447  0000'                    ?_ADC_StartConversion:	
  4448                           ; 1 bytes @ 0x0
  4449                           
  4450  0000'                    ?_ADC_IsConversionDone:	
  4451                           ; 1 bytes @ 0x0
  4452                           
  4453  0000'                    ?_ADC_ISR:	
  4454                           ; 1 bytes @ 0x0
  4455                           
  4456  0000'                    ??_ADC_ISR:	
  4457                           ; 1 bytes @ 0x0
  4458                           
  4459  0000'                    ?_I2C1_ISR:	
  4460                           ; 1 bytes @ 0x0
  4461                           
  4462  0000'                    ?_I2C1_ERROR_ISR:	
  4463                           ; 1 bytes @ 0x0
  4464                           
  4465  0000'                    ?_I2C1_Close:	
  4466                           ; 1 bytes @ 0x0
  4467                           
  4468  0000'                    ??_I2C1_Close:	
  4469                           ; 1 bytes @ 0x0
  4470                           
  4471  0000'                    ?_CLOCK_Initialize:	
  4472                           ; 1 bytes @ 0x0
  4473                           
  4474  0000'                    ?_PIN_MANAGER_Initialize:	
  4475                           ; 1 bytes @ 0x0
  4476                           
  4477  0000'                    ?_INTERRUPT_Initialize:	
  4478                           ; 1 bytes @ 0x0
  4479                           
  4480  0000'                    ?_INTERRUPT_InterruptManager:	
  4481                           ; 1 bytes @ 0x0
  4482                           
  4483  0000'                    ?_SYSTEM_Initialize:	
  4484                           ; 1 bytes @ 0x0
  4485                           
  4486  0000'                    ?_KAPS_getStatus:	
  4487                           ; 1 bytes @ 0x0
  4488                           
  4489  0000'                    ?_KAPS_getIndex:	
  4490                           ; 1 bytes @ 0x0
  4491                           
  4492  0000'                    ?_KAPS_getPos:	
  4493                           ; 1 bytes @ 0x0
  4494                           
  4495  0000'                    ?_SendNack:	
  4496                           ; 1 bytes @ 0x0
  4497                           
  4498  0000'                    ?_main:	
  4499                           ; 1 bytes @ 0x0
  4500                           
  4501  0000'                    I2C1_EVENT_NACK@retEventState:	
  4502                           ; 2 bytes @ 0x0
  4503                           
  4504  0000'                    I2C1_EVENT_ERROR@retEventState:	
  4505                           ; 1 bytes @ 0x0
  4506                           
  4507  0000'                    I2C1_DataTransmit@data:	
  4508                           ; 1 bytes @ 0x0
  4509                           
  4510  0000'                    putch@c:	
  4511                           ; 1 bytes @ 0x0
  4512                           
  4513                           
  4514                           ; 1 bytes @ 0x0
  4515  0000'                    	ds	1
  4516  0001'                    ??_I2C1_EVENT_SEND_WR_ADDR:
  4517  0001'                    ??_I2C1_EVENT_TX:	
  4518                           ; 1 bytes @ 0x1
  4519                           
  4520  0001'                    I2C1_EVENT_RX@retEventState:	
  4521                           ; 1 bytes @ 0x1
  4522                           
  4523                           
  4524                           ; 1 bytes @ 0x1
  4525  0001'                    	ds	2
  4526  0003'                    I2C1_EVENT_TX@retEventState:
  4527                           
  4528                           ; 1 bytes @ 0x3
  4529  0003'                    	ds	1
  4530  0004'                    ??_I2C1_EventHandler:
  4531  0004'                    ??_I2C1_ErrorEventHandler:	
  4532                           ; 1 bytes @ 0x4
  4533                           
  4534                           
  4535                           ; 1 bytes @ 0x4
  4536  0004'                    	ds	2
  4537  0006'                    ??_I2C1_ISR:
  4538  0006'                    ??_I2C1_ERROR_ISR:	
  4539                           ; 1 bytes @ 0x6
  4540                           
  4541  0006'                    ??_INTERRUPT_InterruptManager:	
  4542                           ; 1 bytes @ 0x6
  4543                           
  4544                           
  4545                           	psect	cstackBANK0
  4546  0000'                    __pcstackBANK0:	
  4547                           ; 1 bytes @ 0x6
  4548                           
  4549  0000'                    ?_ADC_SetInterruptHandler:
  4550  0000'                    ?_I2C1_CallbackRegister:	
  4551                           ; 1 bytes @ 0x0
  4552                           
  4553  0000'                    ??_I2C1_InterruptsEnable:	
  4554                           ; 1 bytes @ 0x0
  4555                           
  4556  0000'                    ?_INT_SetInterruptHandler:	
  4557                           ; 1 bytes @ 0x0
  4558                           
  4559  0000'                    ??_EUSART_Read:	
  4560                           ; 1 bytes @ 0x0
  4561                           
  4562  0000'                    ?_EUSART_Write:	
  4563                           ; 1 bytes @ 0x0
  4564                           
  4565  0000'                    ??_EUSART_IsRxReady:	
  4566                           ; 1 bytes @ 0x0
  4567                           
  4568  0000'                    ?_EUSART_FramingErrorCallbackRegister:	
  4569                           ; 1 bytes @ 0x0
  4570                           
  4571  0000'                    ?_EUSART_OverrunErrorCallbackRegister:	
  4572                           ; 1 bytes @ 0x0
  4573                           
  4574  0000'                    ??_EUSART_DefaultFramingErrorCallback:	
  4575                           ; 1 bytes @ 0x0
  4576                           
  4577  0000'                    ??_EUSART_DefaultOverrunErrorCallback:	
  4578                           ; 1 bytes @ 0x0
  4579                           
  4580  0000'                    ??___funcs_on_exit:	
  4581                           ; 1 bytes @ 0x0
  4582                           
  4583  0000'                    ?__Exit:	
  4584                           ; 1 bytes @ 0x0
  4585                           
  4586  0000'                    ??_putch:	
  4587                           ; 1 bytes @ 0x0
  4588                           
  4589  0000'                    ??_ADC_SelectChannel:	
  4590                           ; 1 bytes @ 0x0
  4591                           
  4592  0000'                    ??_ADC_StartConversion:	
  4593                           ; 1 bytes @ 0x0
  4594                           
  4595  0000'                    ??_ADC_IsConversionDone:	
  4596                           ; 1 bytes @ 0x0
  4597                           
  4598  0000'                    ??_CLOCK_Initialize:	
  4599                           ; 1 bytes @ 0x0
  4600                           
  4601  0000'                    ??_PIN_MANAGER_Initialize:	
  4602                           ; 1 bytes @ 0x0
  4603                           
  4604  0000'                    ?_unpackLong:	
  4605                           ; 1 bytes @ 0x0
  4606                           
  4607  0000'                    ?_unpackWord:	
  4608                           ; 1 bytes @ 0x0
  4609                           
  4610  0000'                    ?_SSPA_setMute:	
  4611                           ; 1 bytes @ 0x0
  4612                           
  4613  0000'                    ?_KAPS_GoToIdx:	
  4614                           ; 1 bytes @ 0x0
  4615                           
  4616  0000'                    ??_KAPS_getStatus:	
  4617                           ; 1 bytes @ 0x0
  4618                           
  4619  0000'                    ??_KAPS_getIndex:	
  4620                           ; 1 bytes @ 0x0
  4621                           
  4622  0000'                    ??_KAPS_getPos:	
  4623                           ; 1 bytes @ 0x0
  4624                           
  4625  0000'                    ?__Umul8_16:	
  4626                           ; 1 bytes @ 0x0
  4627                           
  4628  0000'                    ?_fputc:	
  4629                           ; 2 bytes @ 0x0
  4630                           
  4631  0000'                    ?_ADC_GetConversionResult:	
  4632                           ; 2 bytes @ 0x0
  4633                           
  4634  0000'                    ?___awdiv:	
  4635                           ; 2 bytes @ 0x0
  4636                           
  4637  0000'                    ?___awmod:	
  4638                           ; 2 bytes @ 0x0
  4639                           
  4640  0000'                    ?_packLong:	
  4641                           ; 2 bytes @ 0x0
  4642                           
  4643  0000'                    ?___fladd:	
  4644                           ; 4 bytes @ 0x0
  4645                           
  4646  0000'                    ?___xxtofl:	
  4647                           ; 4 bytes @ 0x0
  4648                           
  4649  0000'                    EUSART_Write@txData:	
  4650                           ; 4 bytes @ 0x0
  4651                           
  4652  0000'                    SSPA_setMute@band:	
  4653                           ; 1 bytes @ 0x0
  4654                           
  4655  0000'                    KAPS_GoToIdx@idx:	
  4656                           ; 1 bytes @ 0x0
  4657                           
  4658  0000'                    KAPS_getStatus@kaps:	
  4659                           ; 1 bytes @ 0x0
  4660                           
  4661  0000'                    KAPS_getIndex@kaps:	
  4662                           ; 1 bytes @ 0x0
  4663                           
  4664  0000'                    KAPS_getPos@kaps:	
  4665                           ; 1 bytes @ 0x0
  4666                           
  4667  0000'                    __Umul8_16@multiplicand:	
  4668                           ; 1 bytes @ 0x0
  4669                           
  4670  0000'                    ADC_SetInterruptHandler@InterruptHandler:	
  4671                           ; 1 bytes @ 0x0
  4672                           
  4673  0000'                    I2C1_CallbackRegister@callbackHandler:	
  4674                           ; 2 bytes @ 0x0
  4675                           
  4676  0000'                    INT_SetInterruptHandler@InterruptHandler:	
  4677                           ; 2 bytes @ 0x0
  4678                           
  4679  0000'                    EUSART_FramingErrorCallbackRegister@callbackHandler:	
  4680                           ; 2 bytes @ 0x0
  4681                           
  4682  0000'                    EUSART_OverrunErrorCallbackRegister@callbackHandler:	
  4683                           ; 2 bytes @ 0x0
  4684                           
  4685  0000'                    unpackWord@value:	
  4686                           ; 2 bytes @ 0x0
  4687                           
  4688  0000'                    ___awdiv@divisor:	
  4689                           ; 2 bytes @ 0x0
  4690                           
  4691  0000'                    ___awmod@divisor:	
  4692                           ; 2 bytes @ 0x0
  4693                           
  4694  0000'                    __Exit@ec:	
  4695                           ; 2 bytes @ 0x0
  4696                           
  4697  0000'                    fputc@c:	
  4698                           ; 2 bytes @ 0x0
  4699                           
  4700  0000'                    unpackLong@value:	
  4701                           ; 2 bytes @ 0x0
  4702                           
  4703  0000'                    ___fladd@b:	
  4704                           ; 4 bytes @ 0x0
  4705                           
  4706  0000'                    ___xxtofl@val:	
  4707                           ; 4 bytes @ 0x0
  4708                           
  4709                           
  4710                           ; 4 bytes @ 0x0
  4711  0000'                    	ds	1
  4712  0001'                    ??_EUSART_Write:
  4713  0001'                    ??_KAPS_GoToIdx:	
  4714                           ; 1 bytes @ 0x1
  4715                           
  4716  0001'                    ?_SendMsg:	
  4717                           ; 1 bytes @ 0x1
  4718                           
  4719  0001'                    ADC_SelectChannel@channel:	
  4720                           ; 1 bytes @ 0x1
  4721                           
  4722  0001'                    SSPA_setMute@mute:	
  4723                           ; 1 bytes @ 0x1
  4724                           
  4725  0001'                    KAPS_GoToIdx@kaps:	
  4726                           ; 1 bytes @ 0x1
  4727                           
  4728  0001'                    SendMsg@data:	
  4729                           ; 1 bytes @ 0x1
  4730                           
  4731                           
  4732                           ; 1 bytes @ 0x1
  4733  0001'                    	ds	1
  4734  0002'                    ??_ADC_SetInterruptHandler:
  4735  0002'                    ??_I2C1_Initialize:	
  4736                           ; 1 bytes @ 0x2
  4737                           
  4738  0002'                    ??_I2C1_CallbackRegister:	
  4739                           ; 1 bytes @ 0x2
  4740                           
  4741  0002'                    ??_INT_SetInterruptHandler:	
  4742                           ; 1 bytes @ 0x2
  4743                           
  4744  0002'                    ??_EUSART_Initialize:	
  4745                           ; 1 bytes @ 0x2
  4746                           
  4747  0002'                    ??_EUSART_FramingErrorCallbackRegister:	
  4748                           ; 1 bytes @ 0x2
  4749                           
  4750  0002'                    ??_EUSART_OverrunErrorCallbackRegister:	
  4751                           ; 1 bytes @ 0x2
  4752                           
  4753  0002'                    ??__Umul8_16:	
  4754                           ; 1 bytes @ 0x2
  4755                           
  4756  0002'                    ?_exit:	
  4757                           ; 1 bytes @ 0x2
  4758                           
  4759  0002'                    ??__Exit:	
  4760                           ; 1 bytes @ 0x2
  4761                           
  4762  0002'                    ??_ADC_Initialize:	
  4763                           ; 1 bytes @ 0x2
  4764                           
  4765  0002'                    ??_ADC_GetConversionResult:	
  4766                           ; 1 bytes @ 0x2
  4767                           
  4768  0002'                    ??_INTERRUPT_Initialize:	
  4769                           ; 1 bytes @ 0x2
  4770                           
  4771  0002'                    ??_SYSTEM_Initialize:	
  4772                           ; 1 bytes @ 0x2
  4773                           
  4774  0002'                    ??_SSPA_setMute:	
  4775                           ; 1 bytes @ 0x2
  4776                           
  4777  0002'                    unpackWord@data:	
  4778                           ; 1 bytes @ 0x2
  4779                           
  4780  0002'                    SSPA_setMute@sspa:	
  4781                           ; 1 bytes @ 0x2
  4782                           
  4783  0002'                    SendMsg@data_len:	
  4784                           ; 1 bytes @ 0x2
  4785                           
  4786  0002'                    ___awdiv@dividend:	
  4787                           ; 1 bytes @ 0x2
  4788                           
  4789  0002'                    ___awmod@dividend:	
  4790                           ; 2 bytes @ 0x2
  4791                           
  4792  0002'                    exit@code:	
  4793                           ; 2 bytes @ 0x2
  4794                           
  4795  0002'                    fputc@fp:	
  4796                           ; 2 bytes @ 0x2
  4797                           
  4798                           
  4799                           ; 2 bytes @ 0x2
  4800  0002'                    	ds	1
  4801  0003'                    ??_unpackWord:
  4802  0003'                    ??_SendMsg:	
  4803                           ; 1 bytes @ 0x3
  4804                           
  4805                           
  4806                           ; 1 bytes @ 0x3
  4807  0003'                    	ds	1
  4808  0004'                    ??_abort:
  4809  0004'                    ??_exit:	
  4810                           ; 1 bytes @ 0x4
  4811                           
  4812  0004'                    ??_fputc:	
  4813                           ; 1 bytes @ 0x4
  4814                           
  4815  0004'                    ??_packLong:	
  4816                           ; 1 bytes @ 0x4
  4817                           
  4818  0004'                    ??___awdiv:	
  4819                           ; 1 bytes @ 0x4
  4820                           
  4821  0004'                    ??___awmod:	
  4822                           ; 1 bytes @ 0x4
  4823                           
  4824  0004'                    ??___xxtofl:	
  4825                           ; 1 bytes @ 0x4
  4826                           
  4827  0004'                    unpackLong@data:	
  4828                           ; 1 bytes @ 0x4
  4829                           
  4830  0004'                    SendMsg@sum:	
  4831                           ; 1 bytes @ 0x4
  4832                           
  4833  0004'                    __Umul8_16@product:	
  4834                           ; 1 bytes @ 0x4
  4835                           
  4836  0004'                    ___fladd@a:	
  4837                           ; 2 bytes @ 0x4
  4838                           
  4839                           
  4840                           ; 4 bytes @ 0x4
  4841  0004'                    	ds	1
  4842  0005'                    ??_unpackLong:
  4843  0005'                    SendMsg@msg_id:	
  4844                           ; 1 bytes @ 0x5
  4845                           
  4846  0005'                    ___awdiv@counter:	
  4847                           ; 1 bytes @ 0x5
  4848                           
  4849  0005'                    ___awmod@counter:	
  4850                           ; 1 bytes @ 0x5
  4851                           
  4852                           
  4853                           ; 1 bytes @ 0x5
  4854  0005'                    	ds	1
  4855  0006'                    ??_SendNack:
  4856  0006'                    SendNack@error:	
  4857                           ; 1 bytes @ 0x6
  4858                           
  4859  0006'                    ___awdiv@sign:	
  4860                           ; 1 bytes @ 0x6
  4861                           
  4862  0006'                    ___awmod@sign:	
  4863                           ; 1 bytes @ 0x6
  4864                           
  4865  0006'                    __Umul8_16@word_mpld:	
  4866                           ; 1 bytes @ 0x6
  4867                           
  4868                           
  4869                           ; 2 bytes @ 0x6
  4870  0006'                    	ds	1
  4871  0007'                    ?_abs:
  4872  0007'                    ___awdiv@quotient:	
  4873                           ; 2 bytes @ 0x7
  4874                           
  4875  0007'                    abs@a:	
  4876                           ; 2 bytes @ 0x7
  4877                           
  4878                           
  4879                           ; 2 bytes @ 0x7
  4880  0007'                    	ds	1
  4881  0008'                    ??___fladd:
  4882  0008'                    __Umul8_16@multiplier:	
  4883                           ; 1 bytes @ 0x8
  4884                           
  4885  0008'                    ___xxtofl@sign:	
  4886                           ; 1 bytes @ 0x8
  4887                           
  4888  0008'                    packLong@result:	
  4889                           ; 1 bytes @ 0x8
  4890                           
  4891                           
  4892                           ; 4 bytes @ 0x8
  4893  0008'                    	ds	1
  4894  0009'                    ??_abs:
  4895  0009'                    ___xxtofl@exp:	
  4896                           ; 1 bytes @ 0x9
  4897                           
  4898                           
  4899                           ; 1 bytes @ 0x9
  4900  0009'                    	ds	1
  4901  000A'                    ___xxtofl@arg:
  4902                           
  4903                           ; 4 bytes @ 0xA
  4904  000A'                    	ds	1
  4905  000B'                    ?_vfpfcnvrt:
  4906  000B'                    vfpfcnvrt@fp:	
  4907                           ; 1 bytes @ 0xB
  4908                           
  4909                           
  4910                           ; 2 bytes @ 0xB
  4911  000B'                    	ds	1
  4912  000C'                    packLong@data:
  4913                           
  4914                           ; 1 bytes @ 0xC
  4915  000C'                    	ds	1
  4916  000D'                    ?_KAPS_setAbsPos:
  4917  000D'                    ?_KAPS_setRelPos:	
  4918                           ; 1 bytes @ 0xD
  4919                           
  4920  000D'                    ?_KAPS_StorePos:	
  4921                           ; 1 bytes @ 0xD
  4922                           
  4923  000D'                    KAPS_StorePos@idx:	
  4924                           ; 1 bytes @ 0xD
  4925                           
  4926  000D'                    vfpfcnvrt@fmt:	
  4927                           ; 1 bytes @ 0xD
  4928                           
  4929  000D'                    KAPS_setAbsPos@pos:	
  4930                           ; 1 bytes @ 0xD
  4931                           
  4932  000D'                    KAPS_setRelPos@offset:	
  4933                           ; 4 bytes @ 0xD
  4934                           
  4935                           
  4936                           ; 4 bytes @ 0xD
  4937  000D'                    	ds	1
  4938  000E'                    ?___flmul:
  4939  000E'                    vfpfcnvrt@ap:	
  4940                           ; 4 bytes @ 0xE
  4941                           
  4942  000E'                    KAPS_StorePos@pos:	
  4943                           ; 1 bytes @ 0xE
  4944                           
  4945  000E'                    ___flmul@b:	
  4946                           ; 4 bytes @ 0xE
  4947                           
  4948                           
  4949                           ; 4 bytes @ 0xE
  4950  000E'                    	ds	1
  4951  000F'                    ??_vfpfcnvrt:
  4952                           
  4953                           ; 1 bytes @ 0xF
  4954  000F'                    	ds	1
  4955  0010'                    ___fladd@signs:
  4956                           
  4957                           ; 1 bytes @ 0x10
  4958  0010'                    	ds	1
  4959  0011'                    ??_KAPS_setAbsPos:
  4960  0011'                    ??_KAPS_setRelPos:	
  4961                           ; 1 bytes @ 0x11
  4962                           
  4963  0011'                    KAPS_setAbsPos@kaps:	
  4964                           ; 1 bytes @ 0x11
  4965                           
  4966  0011'                    KAPS_setRelPos@kaps:	
  4967                           ; 1 bytes @ 0x11
  4968                           
  4969  0011'                    ___fladd@aexp:	
  4970                           ; 1 bytes @ 0x11
  4971                           
  4972                           
  4973                           ; 1 bytes @ 0x11
  4974  0011'                    	ds	1
  4975  0012'                    ??_KAPS_StorePos:
  4976  0012'                    KAPS_StorePos@kaps:	
  4977                           ; 1 bytes @ 0x12
  4978                           
  4979  0012'                    ___fladd@bexp:	
  4980                           ; 1 bytes @ 0x12
  4981                           
  4982  0012'                    ___flmul@a:	
  4983                           ; 1 bytes @ 0x12
  4984                           
  4985                           
  4986                           ; 4 bytes @ 0x12
  4987  0012'                    	ds	1
  4988  0013'                    ___fladd@grs:
  4989  0013'                    vfpfcnvrt@cp_2048:	
  4990                           ; 1 bytes @ 0x13
  4991                           
  4992                           
  4993                           ; 2 bytes @ 0x13
  4994  0013'                    	ds	2
  4995  0015'                    vfpfcnvrt@cp:
  4996                           
  4997                           ; 2 bytes @ 0x15
  4998  0015'                    	ds	1
  4999  0016'                    ??___flmul:
  5000                           
  5001                           ; 1 bytes @ 0x16
  5002  0016'                    	ds	1
  5003  0017'                    vfpfcnvrt@done:
  5004                           
  5005                           ; 1 bytes @ 0x17
  5006  0017'                    	ds	1
  5007  0018'                    vfpfcnvrt@convarg:
  5008                           
  5009                           ; 4 bytes @ 0x18
  5010  0018'                    	ds	3
  5011  001B'                    ___flmul@sign:
  5012                           
  5013                           ; 1 bytes @ 0x1B
  5014  001B'                    	ds	1
  5015  001C'                    ___flmul@aexp:
  5016  001C'                    vfpfcnvrt@c:	
  5017                           ; 1 bytes @ 0x1C
  5018                           
  5019                           
  5020                           ; 1 bytes @ 0x1C
  5021  001C'                    	ds	1
  5022  001D'                    ?_vfprintf:
  5023  001D'                    vfprintf@fp:	
  5024                           ; 2 bytes @ 0x1D
  5025                           
  5026  001D'                    ___flmul@grs:	
  5027                           ; 2 bytes @ 0x1D
  5028                           
  5029                           
  5030                           ; 4 bytes @ 0x1D
  5031  001D'                    	ds	2
  5032  001F'                    vfprintf@fmt:
  5033                           
  5034                           ; 2 bytes @ 0x1F
  5035  001F'                    	ds	2
  5036  0021'                    ___flmul@bexp:
  5037  0021'                    vfprintf@ap:	
  5038                           ; 1 bytes @ 0x21
  5039                           
  5040                           
  5041                           ; 1 bytes @ 0x21
  5042  0021'                    	ds	1
  5043  0022'                    ??_vfprintf:
  5044  0022'                    ___flmul@prod:	
  5045                           ; 1 bytes @ 0x22
  5046                           
  5047                           
  5048                           ; 4 bytes @ 0x22
  5049  0022'                    	ds	1
  5050  0023'                    vfprintf@cfmt:
  5051                           
  5052                           ; 2 bytes @ 0x23
  5053  0023'                    	ds	2
  5054  0025'                    ?_printf:
  5055  0025'                    printf@fmt:	
  5056                           ; 2 bytes @ 0x25
  5057                           
  5058                           
  5059                           ; 2 bytes @ 0x25
  5060  0025'                    	ds	1
  5061  0026'                    ___flmul@temp:
  5062                           
  5063                           ; 2 bytes @ 0x26
  5064  0026'                    	ds	2
  5065  0028'                    ?___flsub:
  5066  0028'                    ___flsub@a:	
  5067                           ; 4 bytes @ 0x28
  5068                           
  5069                           
  5070                           ; 4 bytes @ 0x28
  5071  0028'                    	ds	4
  5072  002C'                    ___flsub@b:
  5073                           
  5074                           ; 4 bytes @ 0x2C
  5075  002C'                    	ds	3
  5076  002F'                    ??_printf:
  5077  002F'                    printf@ap:	
  5078                           ; 1 bytes @ 0x2F
  5079                           
  5080                           
  5081                           ; 1 bytes @ 0x2F
  5082  002F'                    	ds	1
  5083  0030'                    ?___assert_fail:
  5084  0030'                    ??___flsub:	
  5085                           ; 1 bytes @ 0x30
  5086                           
  5087  0030'                    ?___fldiv:	
  5088                           ; 1 bytes @ 0x30
  5089                           
  5090  0030'                    ___assert_fail@expr:	
  5091                           ; 4 bytes @ 0x30
  5092                           
  5093  0030'                    ___fldiv@a:	
  5094                           ; 2 bytes @ 0x30
  5095                           
  5096                           
  5097                           ; 4 bytes @ 0x30
  5098  0030'                    	ds	2
  5099  0032'                    ___assert_fail@file:
  5100                           
  5101                           ; 2 bytes @ 0x32
  5102  0032'                    	ds	2
  5103  0034'                    ___assert_fail@line:
  5104  0034'                    ___fldiv@b:	
  5105                           ; 2 bytes @ 0x34
  5106                           
  5107                           
  5108                           ; 4 bytes @ 0x34
  5109  0034'                    	ds	2
  5110  0036'                    ___assert_fail@func:
  5111                           
  5112                           ; 2 bytes @ 0x36
  5113  0036'                    	ds	2
  5114  0038'                    ??___assert_fail:
  5115  0038'                    ??___fldiv:	
  5116                           ; 1 bytes @ 0x38
  5117                           
  5118  0038'                    ?_getADCValue:	
  5119                           ; 1 bytes @ 0x38
  5120                           
  5121                           
  5122                           ; 2 bytes @ 0x38
  5123  0038'                    	ds	2
  5124  003A'                    ??_getADCValue:
  5125                           
  5126                           ; 1 bytes @ 0x3A
  5127  003A'                    	ds	2
  5128  003C'                    getADCValue@channel:
  5129                           
  5130                           ; 1 bytes @ 0x3C
  5131  003C'                    	ds	1
  5132  003D'                    getADCValue@avg:
  5133  003D'                    ___fldiv@rem:	
  5134                           ; 2 bytes @ 0x3D
  5135                           
  5136                           
  5137                           ; 4 bytes @ 0x3D
  5138  003D'                    	ds	2
  5139  003F'                    getADCValue@i:
  5140                           
  5141                           ; 1 bytes @ 0x3F
  5142  003F'                    	ds	2
  5143  0041'                    ___fldiv@sign:
  5144                           
  5145                           ; 1 bytes @ 0x41
  5146  0041'                    	ds	1
  5147  0042'                    ___fldiv@new_exp:
  5148                           
  5149                           ; 2 bytes @ 0x42
  5150  0042'                    	ds	2
  5151  0044'                    ___fldiv@grs:
  5152                           
  5153                           ; 4 bytes @ 0x44
  5154  0044'                    	ds	4
  5155  0048'                    ___fldiv@bexp:
  5156                           
  5157                           ; 1 bytes @ 0x48
  5158  0048'                    	ds	1
  5159  0049'                    ___fldiv@aexp:
  5160                           
  5161                           ; 1 bytes @ 0x49
  5162  0049'                    	ds	1
  5163  004A'                    ?___fltol:
  5164  004A'                    ___fltol@f1:	
  5165                           ; 4 bytes @ 0x4A
  5166                           
  5167                           
  5168                           ; 4 bytes @ 0x4A
  5169  004A'                    	ds	4
  5170  004E'                    ___fltol@sign1:
  5171                           
  5172                           ; 1 bytes @ 0x4E
  5173  004E'                    	ds	1
  5174  004F'                    ___fltol@exp1:
  5175                           
  5176                           ; 1 bytes @ 0x4F
  5177  004F'                    	ds	1
  5178  0050'                    ??_main:
  5179                           
  5180                           	psect	maintext
  5181  0000'                    __pmaintext:	
  5182                           ; 1 bytes @ 0x50
  5183 ;;
  5184 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  5185 ;;
  5186 ;; *************** function _main *****************
  5187 ;; Defined at:
  5188 ;;		line 608 in file "main.c"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;		None
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;  parser         12   25[BANK1 ] struct .
  5193 ;;  data            1   24[BANK1 ] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  2  795[None  ] int 
  5196 ;; Registers used:
  5197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : B1F/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5203 ;;      Params:         0       0       0       0       0       0       0       0
  5204 ;;      Locals:         0       0      13       0       0       0       0       0
  5205 ;;      Temps:          0       0       0       0       0       0       0       0
  5206 ;;      Totals:         0       0      13       0       0       0       0       0
  5207 ;;Total ram usage:       13 bytes
  5208 ;; Hardware stack levels required when called: 17
  5209 ;; This function calls:
  5210 ;;		_EUSART_IsRxReady
  5211 ;;		_EUSART_Read
  5212 ;;		_Parse
  5213 ;;		_SYSTEM_Initialize
  5214 ;; This function is called by:
  5215 ;;		Startup code after reset
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219  0000'                    _main:	
  5220                           ;psect for function _main
  5221                           
  5222                           
  5223                           ;main.c: 610:     Parser parser;;main.c: 612:     parser.m_State = IDLE;
  5224                           
  5225                           ;incstack = 0
  5226 ;; hardware stack exceeded
  5227                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5228  0000' 0021               	movlb	1	; select bank1
  5229  0001' 0180'              	clrf	main@parser^(0+128)
  5230                           
  5231                           ;main.c: 614:     SYSTEM_Initialize();
  5232  0002' 3180' 2000' 3180'  	fcall	_SYSTEM_Initialize
  5233                           
  5234                           ;main.c: 621:     (INTCONbits.GIE = 1);
  5235  0005' 178B               	bsf	11,7	;volatile
  5236                           
  5237                           ;main.c: 627:     (INTCONbits.PEIE = 1);
  5238  0006' 170B               	bsf	11,6	;volatile
  5239  0007'                    l5465:
  5240                           
  5241                           ;main.c: 633:         if (EUSART_IsRxReady()) {
  5242  0007' 3180' 2000' 3180'  	fcall	_EUSART_IsRxReady
  5243  000A' 3A00               	xorlw	0
  5244  000B' 1903               	skipnz
  5245  000C' 2800'              	goto	l5465
  5246                           
  5247                           ;main.c: 634:             data = EUSART_Read();
  5248  000D' 3180' 2000' 3180'  	fcall	_EUSART_Read
  5249  0010' 0021               	movlb	1	; select bank1
  5250  0011' 0080'              	movwf	main@data^(0+128)
  5251                           
  5252                           ;main.c: 636:             Parse(&parser, data);
  5253  0012' 0800'              	movf	main@data^(0+128),w
  5254  0013' 0080'              	movwf	Parse@data^(0+128)
  5255  0014' 3000'              	movlw	(low (main@parser| 0))& (0+255)
  5256  0015' 3180' 2000' 3180'  	fcall	_Parse
  5257  0018' 2800'              	goto	l5465
  5258  0019'                    __end_of_main:
  5259                           
  5260                           	psect	text1
  5261  0000'                    __ptext1:	
  5262 ;; *************** function _SYSTEM_Initialize *****************
  5263 ;; Defined at:
  5264 ;;		line 40 in file "mcc_generated_files/system/src/system.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;		None
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;                  1    wreg      void 
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, pclath, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5278 ;;      Params:         0       0       0       0       0       0       0       0
  5279 ;;      Locals:         0       0       0       0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0       0
  5281 ;;      Totals:         0       0       0       0       0       0       0       0
  5282 ;;Total ram usage:        0 bytes
  5283 ;; Hardware stack levels used: 1
  5284 ;; Hardware stack levels required when called: 9
  5285 ;; This function calls:
  5286 ;;		_ADC_Initialize
  5287 ;;		_CLOCK_Initialize
  5288 ;;		_EUSART_Initialize
  5289 ;;		_I2C1_Initialize
  5290 ;;		_INTERRUPT_Initialize
  5291 ;;		_PIN_MANAGER_Initialize
  5292 ;; This function is called by:
  5293 ;;		_main
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297  0000'                    _SYSTEM_Initialize:	
  5298                           ;psect for function _SYSTEM_Initialize
  5299                           
  5300                           
  5301                           ;mcc_generated_files/system/src/system.c: 42:     CLOCK_Initialize();
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5305  0000' 3180' 2000' 3180'  	fcall	_CLOCK_Initialize
  5306                           
  5307                           ;mcc_generated_files/system/src/system.c: 43:     PIN_MANAGER_Initialize();
  5308  0003' 3180' 2000' 3180'  	fcall	_PIN_MANAGER_Initialize
  5309                           
  5310                           ;mcc_generated_files/system/src/system.c: 44:     ADC_Initialize();
  5311  0006' 3180' 2000' 3180'  	fcall	_ADC_Initialize
  5312                           
  5313                           ;mcc_generated_files/system/src/system.c: 45:     EUSART_Initialize();
  5314  0009' 3180' 2000' 3180'  	fcall	_EUSART_Initialize
  5315                           
  5316                           ;mcc_generated_files/system/src/system.c: 46:     I2C1_Initialize();
  5317  000C' 3180' 2000' 3180'  	fcall	_I2C1_Initialize
  5318                           
  5319                           ;mcc_generated_files/system/src/system.c: 47:     INTERRUPT_Initialize();
  5320  000F' 3180' 2000'        	fcall	_INTERRUPT_Initialize
  5321  0011' 0008               	return
  5322  0012'                    __end_of_SYSTEM_Initialize:
  5323                           
  5324                           	psect	text2
  5325  0000'                    __ptext2:	
  5326 ;; *************** function _PIN_MANAGER_Initialize *****************
  5327 ;; Defined at:
  5328 ;;		line 38 in file "mcc_generated_files/system/src/pins.c"
  5329 ;; Parameters:    Size  Location     Type
  5330 ;;		None
  5331 ;; Auto vars:     Size  Location     Type
  5332 ;;		None
  5333 ;; Return value:  Size  Location     Type
  5334 ;;                  1    wreg      void 
  5335 ;; Registers used:
  5336 ;;		wreg, status,2
  5337 ;; Tracked objects:
  5338 ;;		On entry : 0/0
  5339 ;;		On exit  : 0/0
  5340 ;;		Unchanged: 0/0
  5341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5342 ;;      Params:         0       0       0       0       0       0       0       0
  5343 ;;      Locals:         0       0       0       0       0       0       0       0
  5344 ;;      Temps:          0       0       0       0       0       0       0       0
  5345 ;;      Totals:         0       0       0       0       0       0       0       0
  5346 ;;Total ram usage:        0 bytes
  5347 ;; Hardware stack levels used: 1
  5348 ;; Hardware stack levels required when called: 7
  5349 ;; This function calls:
  5350 ;;		Nothing
  5351 ;; This function is called by:
  5352 ;;		_SYSTEM_Initialize
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356  0000'                    _PIN_MANAGER_Initialize:	
  5357                           ;psect for function _PIN_MANAGER_Initialize
  5358                           
  5359                           
  5360                           ;mcc_generated_files/system/src/pins.c: 43:     LATA = 0x0;
  5361                           
  5362                           ;incstack = 0
  5363                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5364  0000' 0022               	movlb	2	; select bank2
  5365  0001' 018C               	clrf	12	;volatile
  5366                           
  5367                           ;mcc_generated_files/system/src/pins.c: 44:     LATB = 0x60;
  5368  0002' 3060               	movlw	96
  5369  0003' 008D               	movwf	13	;volatile
  5370                           
  5371                           ;mcc_generated_files/system/src/pins.c: 45:     LATC = 0x0;
  5372  0004' 018E               	clrf	14	;volatile
  5373                           
  5374                           ;mcc_generated_files/system/src/pins.c: 50:     TRISA = 0x3F;
  5375  0005' 303F               	movlw	63
  5376  0006' 0021               	movlb	1	; select bank1
  5377  0007' 008C               	movwf	12	;volatile
  5378                           
  5379                           ;mcc_generated_files/system/src/pins.c: 51:     TRISB = 0xF0;
  5380  0008' 30F0               	movlw	240
  5381  0009' 008D               	movwf	13	;volatile
  5382                           
  5383                           ;mcc_generated_files/system/src/pins.c: 52:     TRISC = 0x3B;
  5384  000A' 303B               	movlw	59
  5385  000B' 008E               	movwf	14	;volatile
  5386                           
  5387                           ;mcc_generated_files/system/src/pins.c: 57:     ANSELA = 0x17;
  5388  000C' 3017               	movlw	23
  5389  000D' 0023               	movlb	3	; select bank3
  5390  000E' 008C               	movwf	12	;volatile
  5391                           
  5392                           ;mcc_generated_files/system/src/pins.c: 58:     ANSELB = 0x10;
  5393  000F' 3010               	movlw	16
  5394  0010' 008D               	movwf	13	;volatile
  5395                           
  5396                           ;mcc_generated_files/system/src/pins.c: 59:     ANSELC = 0xD;
  5397  0011' 300D               	movlw	13
  5398  0012' 008E               	movwf	14	;volatile
  5399                           
  5400                           ;mcc_generated_files/system/src/pins.c: 64:     WPUA = 0x2C;
  5401  0013' 302C               	movlw	44
  5402  0014' 0024               	movlb	4	; select bank4
  5403  0015' 008C               	movwf	12	;volatile
  5404                           
  5405                           ;mcc_generated_files/system/src/pins.c: 65:     WPUB = 0xE0;
  5406  0016' 30E0               	movlw	224
  5407  0017' 008D               	movwf	13	;volatile
  5408                           
  5409                           ;mcc_generated_files/system/src/pins.c: 66:     WPUC = 0xF7;
  5410  0018' 30F7               	movlw	247
  5411  0019' 008E               	movwf	14	;volatile
  5412                           
  5413                           ;mcc_generated_files/system/src/pins.c: 67:     OPTION_REGbits.nWPUEN = 0x0;
  5414  001A' 0021               	movlb	1	; select bank1
  5415  001B' 1395               	bcf	21,7	;volatile
  5416                           
  5417                           ;mcc_generated_files/system/src/pins.c: 73:     ODCONA = 0x0;
  5418  001C' 0025               	movlb	5	; select bank5
  5419  001D' 018C               	clrf	12	;volatile
  5420                           
  5421                           ;mcc_generated_files/system/src/pins.c: 74:     ODCONB = 0x0;
  5422  001E' 018D               	clrf	13	;volatile
  5423                           
  5424                           ;mcc_generated_files/system/src/pins.c: 75:     ODCONC = 0x0;
  5425  001F' 018E               	clrf	14	;volatile
  5426                           
  5427                           ;mcc_generated_files/system/src/pins.c: 79:     SLRCONA = 0x37;
  5428  0020' 3037               	movlw	55
  5429  0021' 0026               	movlb	6	; select bank6
  5430  0022' 008C               	movwf	12	;volatile
  5431                           
  5432                           ;mcc_generated_files/system/src/pins.c: 80:     SLRCONB = 0xF0;
  5433  0023' 30F0               	movlw	240
  5434  0024' 008D               	movwf	13	;volatile
  5435                           
  5436                           ;mcc_generated_files/system/src/pins.c: 81:     SLRCONC = 0xFF;
  5437  0025' 30FF               	movlw	255
  5438  0026' 008E               	movwf	14	;volatile
  5439                           
  5440                           ;mcc_generated_files/system/src/pins.c: 85:     INLVLA = 0x3F;
  5441  0027' 303F               	movlw	63
  5442  0028' 0027               	movlb	7	; select bank7
  5443  0029' 008C               	movwf	12	;volatile
  5444                           
  5445                           ;mcc_generated_files/system/src/pins.c: 86:     INLVLB = 0xF0;
  5446  002A' 30F0               	movlw	240
  5447  002B' 008D               	movwf	13	;volatile
  5448                           
  5449                           ;mcc_generated_files/system/src/pins.c: 87:     INLVLC = 0xFF;
  5450  002C' 30FF               	movlw	255
  5451  002D' 008E               	movwf	14	;volatile
  5452                           
  5453                           ;mcc_generated_files/system/src/pins.c: 92:     RXPPS = 0x11;
  5454  002E' 3011               	movlw	17
  5455  002F' 003C               	movlb	28	; select bank28
  5456  0030' 00A4               	movwf	36	;volatile
  5457                           
  5458                           ;mcc_generated_files/system/src/pins.c: 93:     RC2PPS = 6;
  5459  0031' 3006               	movlw	6
  5460  0032' 003D               	movlb	29	; select bank29
  5461  0033' 00A2               	movwf	34	;volatile
  5462                           
  5463                           ;mcc_generated_files/system/src/pins.c: 94:     SSPCLKPPS = 0xE;
  5464  0034' 300E               	movlw	14
  5465  0035' 003C               	movlb	28	; select bank28
  5466  0036' 00A0               	movwf	32	;volatile
  5467                           
  5468                           ;mcc_generated_files/system/src/pins.c: 95:     RB6PPS = 16;
  5469  0037' 3010               	movlw	16
  5470  0038' 003D               	movlb	29	; select bank29
  5471  0039' 009E               	movwf	30	;volatile
  5472                           
  5473                           ;mcc_generated_files/system/src/pins.c: 96:     SSPDATPPS = 0xD;
  5474  003A' 300D               	movlw	13
  5475  003B' 003C               	movlb	28	; select bank28
  5476  003C' 00A1               	movwf	33	;volatile
  5477                           
  5478                           ;mcc_generated_files/system/src/pins.c: 97:     RB5PPS = 17;
  5479  003D' 3011               	movlw	17
  5480  003E' 003D               	movlb	29	; select bank29
  5481  003F' 009D               	movwf	29	;volatile
  5482                           
  5483                           ;mcc_generated_files/system/src/pins.c: 106:     IOCAP = 0x0;
  5484  0040' 0027               	movlb	7	; select bank7
  5485  0041' 0191               	clrf	17	;volatile
  5486                           
  5487                           ;mcc_generated_files/system/src/pins.c: 107:     IOCAN = 0x0;
  5488  0042' 0192               	clrf	18	;volatile
  5489                           
  5490                           ;mcc_generated_files/system/src/pins.c: 108:     IOCAF = 0x0;
  5491  0043' 0193               	clrf	19	;volatile
  5492                           
  5493                           ;mcc_generated_files/system/src/pins.c: 109:     IOCBP = 0x0;
  5494  0044' 0194               	clrf	20	;volatile
  5495                           
  5496                           ;mcc_generated_files/system/src/pins.c: 110:     IOCBN = 0x0;
  5497  0045' 0195               	clrf	21	;volatile
  5498                           
  5499                           ;mcc_generated_files/system/src/pins.c: 111:     IOCBF = 0x0;
  5500  0046' 0196               	clrf	22	;volatile
  5501                           
  5502                           ;mcc_generated_files/system/src/pins.c: 112:     IOCCP = 0x0;
  5503  0047' 0197               	clrf	23	;volatile
  5504                           
  5505                           ;mcc_generated_files/system/src/pins.c: 113:     IOCCN = 0x0;
  5506  0048' 0198               	clrf	24	;volatile
  5507                           
  5508                           ;mcc_generated_files/system/src/pins.c: 114:     IOCCF = 0x0;
  5509  0049' 0199               	clrf	25	;volatile
  5510  004A' 0008               	return
  5511  004B'                    __end_of_PIN_MANAGER_Initialize:
  5512                           
  5513                           	psect	text3
  5514  0000'                    __ptext3:	
  5515 ;; *************** function _INTERRUPT_Initialize *****************
  5516 ;; Defined at:
  5517 ;;		line 40 in file "mcc_generated_files/system/src/interrupt.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;		None
  5520 ;; Auto vars:     Size  Location     Type
  5521 ;;		None
  5522 ;; Return value:  Size  Location     Type
  5523 ;;                  1    wreg      void 
  5524 ;; Registers used:
  5525 ;;		wreg, status,2, status,0, pclath, cstack
  5526 ;; Tracked objects:
  5527 ;;		On entry : 0/0
  5528 ;;		On exit  : 0/0
  5529 ;;		Unchanged: 0/0
  5530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5531 ;;      Params:         0       0       0       0       0       0       0       0
  5532 ;;      Locals:         0       0       0       0       0       0       0       0
  5533 ;;      Temps:          0       0       0       0       0       0       0       0
  5534 ;;      Totals:         0       0       0       0       0       0       0       0
  5535 ;;Total ram usage:        0 bytes
  5536 ;; Hardware stack levels used: 1
  5537 ;; Hardware stack levels required when called: 8
  5538 ;; This function calls:
  5539 ;;		_INT_SetInterruptHandler
  5540 ;; This function is called by:
  5541 ;;		_SYSTEM_Initialize
  5542 ;; This function uses a non-reentrant model
  5543 ;;
  5544                           
  5545  0000'                    _INTERRUPT_Initialize:	
  5546                           ;psect for function _INTERRUPT_Initialize
  5547                           
  5548                           
  5549                           ;mcc_generated_files/system/src/interrupt.c: 44:     (INTCONbits.INTF = 0);
  5550                           
  5551                           ;incstack = 0
  5552                           ; Regs used in _INTERRUPT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5553  0000' 108B               	bcf	11,1	;volatile
  5554                           
  5555                           ;mcc_generated_files/system/src/interrupt.c: 45:     (OPTION_REGbits.INTEDG = 1);
  5556  0001' 0021               	movlb	1	; select bank1
  5557  0002' 1715               	bsf	21,6	;volatile
  5558                           
  5559                           ;mcc_generated_files/system/src/interrupt.c: 47:     INT_SetInterruptHandler(INT_Default
      +                          InterruptHandler);
  5560  0003' 3000               	movlw	0
  5561  0004' 0020               	movlb	0	; select bank0
  5562  0005' 0080'              	movwf	INT_SetInterruptHandler@InterruptHandler
  5563  0006' 3000               	movlw	0
  5564  0007' 0081'              	movwf	INT_SetInterruptHandler@InterruptHandler+1
  5565  0008' 3180' 2000'        	fcall	_INT_SetInterruptHandler
  5566  000A' 0008               	return
  5567  000B'                    __end_of_INTERRUPT_Initialize:
  5568                           
  5569                           	psect	text4
  5570  0000'                    __ptext4:	
  5571 ;; *************** function _INT_SetInterruptHandler *****************
  5572 ;; Defined at:
  5573 ;;		line 105 in file "mcc_generated_files/system/src/interrupt.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  5576 ;;		 -> INT_DefaultInterruptHandler(1), 
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;		None
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  1    wreg      void 
  5581 ;; Registers used:
  5582 ;;		wreg
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5588 ;;      Params:         0       2       0       0       0       0       0       0
  5589 ;;      Locals:         0       0       0       0       0       0       0       0
  5590 ;;      Temps:          0       0       0       0       0       0       0       0
  5591 ;;      Totals:         0       2       0       0       0       0       0       0
  5592 ;;Total ram usage:        2 bytes
  5593 ;; Hardware stack levels used: 1
  5594 ;; Hardware stack levels required when called: 7
  5595 ;; This function calls:
  5596 ;;		Nothing
  5597 ;; This function is called by:
  5598 ;;		_INTERRUPT_Initialize
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602  0000'                    _INT_SetInterruptHandler:	
  5603                           ;psect for function _INT_SetInterruptHandler
  5604                           
  5605                           
  5606                           ;mcc_generated_files/system/src/interrupt.c: 106:     INT_InterruptHandler = InterruptHa
      +                          ndler;
  5607                           
  5608                           ;incstack = 0
  5609                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  5610  0000' 0020               	movlb	0	; select bank0
  5611  0001' 0801'              	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  5612  0002' 0083'              	movwf	_INT_InterruptHandler+1
  5613  0003' 0800'              	movf	INT_SetInterruptHandler@InterruptHandler,w
  5614  0004' 0082'              	movwf	_INT_InterruptHandler
  5615  0005' 0008               	return
  5616  0006'                    __end_of_INT_SetInterruptHandler:
  5617                           
  5618                           	psect	text5
  5619  0000'                    __ptext5:	
  5620 ;; *************** function _I2C1_Initialize *****************
  5621 ;; Defined at:
  5622 ;;		line 114 in file "mcc_generated_files/i2c_host/src/mssp.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;		None
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0, pclath, cstack
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5636 ;;      Params:         0       0       0       0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0       0
  5639 ;;      Totals:         0       0       0       0       0       0       0       0
  5640 ;;Total ram usage:        0 bytes
  5641 ;; Hardware stack levels used: 1
  5642 ;; Hardware stack levels required when called: 8
  5643 ;; This function calls:
  5644 ;;		_I2C1_CallbackRegister
  5645 ;;		_I2C1_InterruptsEnable
  5646 ;; This function is called by:
  5647 ;;		_SYSTEM_Initialize
  5648 ;; This function uses a non-reentrant model
  5649 ;;
  5650                           
  5651  0000'                    _I2C1_Initialize:	
  5652                           ;psect for function _I2C1_Initialize
  5653                           
  5654                           
  5655                           ;mcc_generated_files/i2c_host/src/mssp.c: 117:     SSP1STAT = 0x80;
  5656                           
  5657                           ;incstack = 0
  5658                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5659  0000' 3080               	movlw	128
  5660  0001' 0024               	movlb	4	; select bank4
  5661  0002' 0094               	movwf	20	;volatile
  5662                           
  5663                           ;mcc_generated_files/i2c_host/src/mssp.c: 119:     SSP1CON1 = 0x8;
  5664  0003' 3008               	movlw	8
  5665  0004' 0095               	movwf	21	;volatile
  5666                           
  5667                           ;mcc_generated_files/i2c_host/src/mssp.c: 121:     SSP1CON2 = 0x0;
  5668  0005' 0196               	clrf	22	;volatile
  5669                           
  5670                           ;mcc_generated_files/i2c_host/src/mssp.c: 123:     SSP1CON3 = 0x0;
  5671  0006' 0197               	clrf	23	;volatile
  5672                           
  5673                           ;mcc_generated_files/i2c_host/src/mssp.c: 125:     SSP1ADD = 0x27;
  5674  0007' 3027               	movlw	39
  5675  0008' 0092               	movwf	18	;volatile
  5676                           
  5677                           ;mcc_generated_files/i2c_host/src/mssp.c: 126:     I2C1_InterruptsEnable();
  5678  0009' 3180' 2000' 3180'  	fcall	_I2C1_InterruptsEnable
  5679                           
  5680                           ;mcc_generated_files/i2c_host/src/mssp.c: 127:     I2C1_CallbackRegister(I2C1_DefaultCal
      +                          lback);
  5681  000C' 3000'              	movlw	low _I2C1_DefaultCallback
  5682  000D' 0020               	movlb	0	; select bank0
  5683  000E' 0080'              	movwf	I2C1_CallbackRegister@callbackHandler
  5684  000F' 3000'              	movlw	high _I2C1_DefaultCallback
  5685  0010' 0081'              	movwf	I2C1_CallbackRegister@callbackHandler+1
  5686  0011' 3180' 2000'        	fcall	_I2C1_CallbackRegister
  5687                           
  5688                           ;mcc_generated_files/i2c_host/src/mssp.c: 128:     SSP1CON1bits.SSPEN = 1;
  5689  0013' 0024               	movlb	4	; select bank4
  5690  0014' 1695               	bsf	21,5	;volatile
  5691  0015' 0008               	return
  5692  0016'                    __end_of_I2C1_Initialize:
  5693                           
  5694                           	psect	text6
  5695  0000'                    __ptext6:	
  5696 ;; *************** function _I2C1_InterruptsEnable *****************
  5697 ;; Defined at:
  5698 ;;		line 467 in file "mcc_generated_files/i2c_host/src/mssp.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;		None
  5701 ;; Auto vars:     Size  Location     Type
  5702 ;;		None
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  1    wreg      void 
  5705 ;; Registers used:
  5706 ;;		None
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5712 ;;      Params:         0       0       0       0       0       0       0       0
  5713 ;;      Locals:         0       0       0       0       0       0       0       0
  5714 ;;      Temps:          0       0       0       0       0       0       0       0
  5715 ;;      Totals:         0       0       0       0       0       0       0       0
  5716 ;;Total ram usage:        0 bytes
  5717 ;; Hardware stack levels used: 1
  5718 ;; Hardware stack levels required when called: 7
  5719 ;; This function calls:
  5720 ;;		Nothing
  5721 ;; This function is called by:
  5722 ;;		_I2C1_Initialize
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726  0000'                    _I2C1_InterruptsEnable:	
  5727                           ;psect for function _I2C1_InterruptsEnable
  5728                           
  5729                           
  5730                           ;mcc_generated_files/i2c_host/src/mssp.c: 469:     PIE1bits.SSP1IE = 1;
  5731                           
  5732                           ;incstack = 0
  5733                           ; Regs used in _I2C1_InterruptsEnable: []
  5734  0000' 0021               	movlb	1	; select bank1
  5735  0001' 1590               	bsf	16,3	;volatile
  5736                           
  5737                           ;mcc_generated_files/i2c_host/src/mssp.c: 470:     PIE2bits.BCL1IE = 1;
  5738  0002' 1591               	bsf	17,3	;volatile
  5739  0003' 0008               	return
  5740  0004'                    __end_of_I2C1_InterruptsEnable:
  5741                           
  5742                           	psect	text7
  5743  0000'                    __ptext7:	
  5744 ;; *************** function _I2C1_CallbackRegister *****************
  5745 ;; Defined at:
  5746 ;;		line 211 in file "mcc_generated_files/i2c_host/src/mssp.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;  callbackHand    2    0[BANK0 ] PTR FTN()void 
  5749 ;;		 -> I2C1_DefaultCallback(1), 
  5750 ;; Auto vars:     Size  Location     Type
  5751 ;;		None
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, status,2, status,0
  5756 ;; Tracked objects:
  5757 ;;		On entry : 0/0
  5758 ;;		On exit  : 0/0
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5761 ;;      Params:         0       2       0       0       0       0       0       0
  5762 ;;      Locals:         0       0       0       0       0       0       0       0
  5763 ;;      Temps:          0       0       0       0       0       0       0       0
  5764 ;;      Totals:         0       2       0       0       0       0       0       0
  5765 ;;Total ram usage:        2 bytes
  5766 ;; Hardware stack levels used: 1
  5767 ;; Hardware stack levels required when called: 7
  5768 ;; This function calls:
  5769 ;;		Nothing
  5770 ;; This function is called by:
  5771 ;;		_I2C1_Initialize
  5772 ;;		_I2C1_Deinitialize
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776  0000'                    _I2C1_CallbackRegister:	
  5777                           ;psect for function _I2C1_CallbackRegister
  5778                           
  5779                           
  5780                           ;mcc_generated_files/i2c_host/src/mssp.c: 211: void I2C1_CallbackRegister(void (*callbac
      +                          kHandler)(void));mcc_generated_files/i2c_host/src/mssp.c: 212: {;mcc_generated_files/i2c
      +                          _host/src/mssp.c: 213:     if (callbackHandler != ((void*)0))
  5781                           
  5782                           ;incstack = 0
  5783                           ; Regs used in _I2C1_CallbackRegister: [wreg+status,2+status,0]
  5784  0000' 0020               	movlb	0	; select bank0
  5785  0001' 0800'              	movf	I2C1_CallbackRegister@callbackHandler,w
  5786  0002' 0401'              	iorwf	I2C1_CallbackRegister@callbackHandler+1,w
  5787  0003' 1903               	btfsc	3,2
  5788  0004' 0008               	return
  5789                           
  5790                           ;mcc_generated_files/i2c_host/src/mssp.c: 214:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 215:         I2C1_Callback = callbackHandler;
  5791  0005' 0801'              	movf	I2C1_CallbackRegister@callbackHandler+1,w
  5792  0006' 0021               	movlb	1	; select bank1
  5793  0007' 0080'              	movwf	(_I2C1_Callback+1)^(0+128)
  5794  0008' 0020               	movlb	0	; select bank0
  5795  0009' 0800'              	movf	I2C1_CallbackRegister@callbackHandler,w
  5796  000A' 0021               	movlb	1	; select bank1
  5797  000B' 0080'              	movwf	_I2C1_Callback^(0+128)
  5798  000C' 0008               	return
  5799  000D'                    __end_of_I2C1_CallbackRegister:
  5800                           
  5801                           	psect	text8
  5802  0000'                    __ptext8:	
  5803 ;; *************** function _EUSART_Initialize *****************
  5804 ;; Defined at:
  5805 ;;		line 94 in file "mcc_generated_files/uart/src/eusart.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;		None
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg, status,2, status,0, pclath, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5819 ;;      Params:         0       0       0       0       0       0       0       0
  5820 ;;      Locals:         0       0       0       0       0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0       0
  5822 ;;      Totals:         0       0       0       0       0       0       0       0
  5823 ;;Total ram usage:        0 bytes
  5824 ;; Hardware stack levels used: 1
  5825 ;; Hardware stack levels required when called: 8
  5826 ;; This function calls:
  5827 ;;		_EUSART_FramingErrorCallbackRegister
  5828 ;;		_EUSART_OverrunErrorCallbackRegister
  5829 ;; This function is called by:
  5830 ;;		_SYSTEM_Initialize
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834  0000'                    _EUSART_Initialize:	
  5835                           ;psect for function _EUSART_Initialize
  5836                           
  5837                           
  5838                           ;mcc_generated_files/uart/src/eusart.c: 99:     BAUD1CON = 0x48;
  5839                           
  5840                           ;incstack = 0
  5841                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5842  0000' 3048               	movlw	72
  5843  0001' 0023               	movlb	3	; select bank3
  5844  0002' 009F               	movwf	31	;volatile
  5845                           
  5846                           ;mcc_generated_files/uart/src/eusart.c: 101:     RC1STA = 0x90;
  5847  0003' 3090               	movlw	144
  5848  0004' 009D               	movwf	29	;volatile
  5849                           
  5850                           ;mcc_generated_files/uart/src/eusart.c: 103:     TX1STA = 0x26;
  5851  0005' 3026               	movlw	38
  5852  0006' 009E               	movwf	30	;volatile
  5853                           
  5854                           ;mcc_generated_files/uart/src/eusart.c: 105:     SPBRGL = 0xA0;
  5855  0007' 30A0               	movlw	160
  5856  0008' 009B               	movwf	27	;volatile
  5857                           
  5858                           ;mcc_generated_files/uart/src/eusart.c: 107:     SPBRGH = 0x1;
  5859  0009' 3001               	movlw	1
  5860  000A' 009C               	movwf	28	;volatile
  5861                           
  5862                           ;mcc_generated_files/uart/src/eusart.c: 109:     EUSART_FramingErrorCallbackRegister(EUS
      +                          ART_DefaultFramingErrorCallback);
  5863  000B' 3000'              	movlw	low _EUSART_DefaultFramingErrorCallback
  5864  000C' 0020               	movlb	0	; select bank0
  5865  000D' 0080'              	movwf	EUSART_FramingErrorCallbackRegister@callbackHandler
  5866  000E' 3000'              	movlw	high _EUSART_DefaultFramingErrorCallback
  5867  000F' 0081'              	movwf	EUSART_FramingErrorCallbackRegister@callbackHandler+1
  5868  0010' 3180' 2000' 3180'  	fcall	_EUSART_FramingErrorCallbackRegister
  5869                           
  5870                           ;mcc_generated_files/uart/src/eusart.c: 110:     EUSART_OverrunErrorCallbackRegister(EUS
      +                          ART_DefaultOverrunErrorCallback);
  5871  0013' 3000'              	movlw	low _EUSART_DefaultOverrunErrorCallback
  5872  0014' 0020               	movlb	0	; select bank0
  5873  0015' 0080'              	movwf	EUSART_OverrunErrorCallbackRegister@callbackHandler
  5874  0016' 3000'              	movlw	high _EUSART_DefaultOverrunErrorCallback
  5875  0017' 0081'              	movwf	EUSART_OverrunErrorCallbackRegister@callbackHandler+1
  5876  0018' 3180' 2000'        	fcall	_EUSART_OverrunErrorCallbackRegister
  5877                           
  5878                           ;mcc_generated_files/uart/src/eusart.c: 111:     eusartRxLastError.status = 0;
  5879  001A' 0021               	movlb	1	; select bank1
  5880  001B' 0180'              	clrf	_eusartRxLastError^(0+128)	;volatile
  5881  001C' 0180'              	clrf	(_eusartRxLastError+1)^(0+128)	;volatile
  5882  001D' 0008               	return
  5883  001E'                    __end_of_EUSART_Initialize:
  5884                           
  5885                           	psect	text9
  5886  0000'                    __ptext9:	
  5887 ;; *************** function _EUSART_OverrunErrorCallbackRegister *****************
  5888 ;; Defined at:
  5889 ;;		line 260 in file "mcc_generated_files/uart/src/eusart.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  callbackHand    2    0[BANK0 ] PTR FTN()void 
  5892 ;;		 -> EUSART_DefaultOverrunErrorCallback(1), 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;		None
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5904 ;;      Params:         0       2       0       0       0       0       0       0
  5905 ;;      Locals:         0       0       0       0       0       0       0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0
  5907 ;;      Totals:         0       2       0       0       0       0       0       0
  5908 ;;Total ram usage:        2 bytes
  5909 ;; Hardware stack levels used: 1
  5910 ;; Hardware stack levels required when called: 7
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_EUSART_Initialize
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918  0000'                    _EUSART_OverrunErrorCallbackRegister:	
  5919                           ;psect for function _EUSART_OverrunErrorCallbackRegister
  5920                           
  5921                           
  5922                           ;mcc_generated_files/uart/src/eusart.c: 260: void EUSART_OverrunErrorCallbackRegister(vo
      +                          id (* callbackHandler)(void));mcc_generated_files/uart/src/eusart.c: 261: {;mcc_generate
      +                          d_files/uart/src/eusart.c: 262:     if(((void*)0) != callbackHandler)
  5923                           
  5924                           ;incstack = 0
  5925                           ; Regs used in _EUSART_OverrunErrorCallbackRegister: [wreg+status,2+status,0]
  5926  0000' 0020               	movlb	0	; select bank0
  5927  0001' 0800'              	movf	EUSART_OverrunErrorCallbackRegister@callbackHandler,w
  5928  0002' 0401'              	iorwf	EUSART_OverrunErrorCallbackRegister@callbackHandler+1,w
  5929  0003' 1903               	btfsc	3,2
  5930  0004' 0008               	return
  5931                           
  5932                           ;mcc_generated_files/uart/src/eusart.c: 263:     {;mcc_generated_files/uart/src/eusart.c
      +                          : 264:         EUSART_OverrunErrorHandler = callbackHandler;
  5933  0005' 0801'              	movf	EUSART_OverrunErrorCallbackRegister@callbackHandler+1,w
  5934  0006' 0021               	movlb	1	; select bank1
  5935  0007' 0080'              	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  5936  0008' 0020               	movlb	0	; select bank0
  5937  0009' 0800'              	movf	EUSART_OverrunErrorCallbackRegister@callbackHandler,w
  5938  000A' 0021               	movlb	1	; select bank1
  5939  000B' 0080'              	movwf	_EUSART_OverrunErrorHandler^(0+128)
  5940  000C' 0008               	return
  5941  000D'                    __end_of_EUSART_OverrunErrorCallbackRegister:
  5942                           
  5943                           	psect	text10
  5944  0000'                    __ptext10:	
  5945 ;; *************** function _EUSART_FramingErrorCallbackRegister *****************
  5946 ;; Defined at:
  5947 ;;		line 252 in file "mcc_generated_files/uart/src/eusart.c"
  5948 ;; Parameters:    Size  Location     Type
  5949 ;;  callbackHand    2    0[BANK0 ] PTR FTN()void 
  5950 ;;		 -> EUSART_DefaultFramingErrorCallback(1), 
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;		None
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      void 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5962 ;;      Params:         0       2       0       0       0       0       0       0
  5963 ;;      Locals:         0       0       0       0       0       0       0       0
  5964 ;;      Temps:          0       0       0       0       0       0       0       0
  5965 ;;      Totals:         0       2       0       0       0       0       0       0
  5966 ;;Total ram usage:        2 bytes
  5967 ;; Hardware stack levels used: 1
  5968 ;; Hardware stack levels required when called: 7
  5969 ;; This function calls:
  5970 ;;		Nothing
  5971 ;; This function is called by:
  5972 ;;		_EUSART_Initialize
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976  0000'                    _EUSART_FramingErrorCallbackRegister:	
  5977                           ;psect for function _EUSART_FramingErrorCallbackRegister
  5978                           
  5979                           
  5980                           ;mcc_generated_files/uart/src/eusart.c: 252: void EUSART_FramingErrorCallbackRegister(vo
      +                          id (* callbackHandler)(void));mcc_generated_files/uart/src/eusart.c: 253: {;mcc_generate
      +                          d_files/uart/src/eusart.c: 254:     if(((void*)0) != callbackHandler)
  5981                           
  5982                           ;incstack = 0
  5983                           ; Regs used in _EUSART_FramingErrorCallbackRegister: [wreg+status,2+status,0]
  5984  0000' 0020               	movlb	0	; select bank0
  5985  0001' 0800'              	movf	EUSART_FramingErrorCallbackRegister@callbackHandler,w
  5986  0002' 0401'              	iorwf	EUSART_FramingErrorCallbackRegister@callbackHandler+1,w
  5987  0003' 1903               	btfsc	3,2
  5988  0004' 0008               	return
  5989                           
  5990                           ;mcc_generated_files/uart/src/eusart.c: 255:     {;mcc_generated_files/uart/src/eusart.c
      +                          : 256:         EUSART_FramingErrorHandler = callbackHandler;
  5991  0005' 0801'              	movf	EUSART_FramingErrorCallbackRegister@callbackHandler+1,w
  5992  0006' 0081'              	movwf	_EUSART_FramingErrorHandler+1
  5993  0007' 0800'              	movf	EUSART_FramingErrorCallbackRegister@callbackHandler,w
  5994  0008' 0080'              	movwf	_EUSART_FramingErrorHandler
  5995  0009' 0008               	return
  5996  000A'                    __end_of_EUSART_FramingErrorCallbackRegister:
  5997                           
  5998                           	psect	text11
  5999  0000'                    __ptext11:	
  6000 ;; *************** function _CLOCK_Initialize *****************
  6001 ;; Defined at:
  6002 ;;		line 39 in file "mcc_generated_files/system/src/clock.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;		None
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;		None
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      void 
  6009 ;; Registers used:
  6010 ;;		wreg, status,2
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6016 ;;      Params:         0       0       0       0       0       0       0       0
  6017 ;;      Locals:         0       0       0       0       0       0       0       0
  6018 ;;      Temps:          0       0       0       0       0       0       0       0
  6019 ;;      Totals:         0       0       0       0       0       0       0       0
  6020 ;;Total ram usage:        0 bytes
  6021 ;; Hardware stack levels used: 1
  6022 ;; Hardware stack levels required when called: 7
  6023 ;; This function calls:
  6024 ;;		Nothing
  6025 ;; This function is called by:
  6026 ;;		_SYSTEM_Initialize
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030  0000'                    _CLOCK_Initialize:	
  6031                           ;psect for function _CLOCK_Initialize
  6032                           
  6033                           
  6034                           ;mcc_generated_files/system/src/clock.c: 41:     OSCCON = (15 << 0x3)
  6035                           
  6036                           ;incstack = 0
  6037                           ; Regs used in _CLOCK_Initialize: [wreg+status,2]
  6038  0000' 307A               	movlw	122
  6039  0001' 0021               	movlb	1	; select bank1
  6040  0002' 0099               	movwf	25	;volatile
  6041                           
  6042                           ;mcc_generated_files/system/src/clock.c: 44:     BORCON = (0 << 0x7)
  6043  0003' 0022               	movlb	2	; select bank2
  6044  0004' 0196               	clrf	22	;volatile
  6045                           
  6046                           ;mcc_generated_files/system/src/clock.c: 46:     OSCTUNE = (0 << 0x0);
  6047  0005' 0021               	movlb	1	; select bank1
  6048  0006' 0198               	clrf	24	;volatile
  6049  0007' 0008               	return
  6050  0008'                    __end_of_CLOCK_Initialize:
  6051                           
  6052                           	psect	text12
  6053  0000'                    __ptext12:	
  6054 ;; *************** function _ADC_Initialize *****************
  6055 ;; Defined at:
  6056 ;;		line 55 in file "mcc_generated_files/adc/src/adc.c"
  6057 ;; Parameters:    Size  Location     Type
  6058 ;;		None
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;		None
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		wreg, status,2, status,0, pclath, cstack
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6070 ;;      Params:         0       0       0       0       0       0       0       0
  6071 ;;      Locals:         0       0       0       0       0       0       0       0
  6072 ;;      Temps:          0       0       0       0       0       0       0       0
  6073 ;;      Totals:         0       0       0       0       0       0       0       0
  6074 ;;Total ram usage:        0 bytes
  6075 ;; Hardware stack levels used: 1
  6076 ;; Hardware stack levels required when called: 8
  6077 ;; This function calls:
  6078 ;;		_ADC_SetInterruptHandler
  6079 ;; This function is called by:
  6080 ;;		_SYSTEM_Initialize
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084  0000'                    _ADC_Initialize:	
  6085                           ;psect for function _ADC_Initialize
  6086                           
  6087                           
  6088                           ;mcc_generated_files/adc/src/adc.c: 58:     ADCON1 = 0x60;
  6089                           
  6090                           ;incstack = 0
  6091                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6092  0000' 3060               	movlw	96
  6093  0001' 0021               	movlb	1	; select bank1
  6094  0002' 009E               	movwf	30	;volatile
  6095                           
  6096                           ;mcc_generated_files/adc/src/adc.c: 61:     ADRESL = 0x0;
  6097  0003' 019B               	clrf	27	;volatile
  6098                           
  6099                           ;mcc_generated_files/adc/src/adc.c: 64:     ADRESH = 0x0;
  6100  0004' 019C               	clrf	28	;volatile
  6101                           
  6102                           ;mcc_generated_files/adc/src/adc.c: 67:     ADCON2 = 0x0;
  6103  0005' 019F               	clrf	31	;volatile
  6104                           
  6105                           ;mcc_generated_files/adc/src/adc.c: 70:     ADCON0 = 0x1;
  6106  0006' 3001               	movlw	1
  6107  0007' 009D               	movwf	29	;volatile
  6108                           
  6109                           ;mcc_generated_files/adc/src/adc.c: 73:     PIR1bits.ADIF = 0;
  6110  0008' 0020               	movlb	0	; select bank0
  6111  0009' 1310               	bcf	16,6	;volatile
  6112                           
  6113                           ;mcc_generated_files/adc/src/adc.c: 76:     ADC_SetInterruptHandler(ADC_DefaultInterrupt
      +                          Handler);
  6114  000A' 3000'              	movlw	low _ADC_DefaultInterruptHandler
  6115  000B' 0080'              	movwf	ADC_SetInterruptHandler@InterruptHandler
  6116  000C' 3000'              	movlw	high _ADC_DefaultInterruptHandler
  6117  000D' 0081'              	movwf	ADC_SetInterruptHandler@InterruptHandler+1
  6118  000E' 3180' 2000'        	fcall	_ADC_SetInterruptHandler
  6119                           
  6120                           ;mcc_generated_files/adc/src/adc.c: 79:     PIE1bits.ADIE = 1;
  6121  0010' 0021               	movlb	1	; select bank1
  6122  0011' 1710               	bsf	16,6	;volatile
  6123  0012' 0008               	return
  6124  0013'                    __end_of_ADC_Initialize:
  6125                           
  6126                           	psect	text13
  6127  0000'                    __ptext13:	
  6128 ;; *************** function _ADC_SetInterruptHandler *****************
  6129 ;; Defined at:
  6130 ;;		line 145 in file "mcc_generated_files/adc/src/adc.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  6133 ;;		 -> ADC_DefaultInterruptHandler(1), 
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;		None
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  1    wreg      void 
  6138 ;; Registers used:
  6139 ;;		wreg
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6145 ;;      Params:         0       2       0       0       0       0       0       0
  6146 ;;      Locals:         0       0       0       0       0       0       0       0
  6147 ;;      Temps:          0       0       0       0       0       0       0       0
  6148 ;;      Totals:         0       2       0       0       0       0       0       0
  6149 ;;Total ram usage:        2 bytes
  6150 ;; Hardware stack levels used: 1
  6151 ;; Hardware stack levels required when called: 7
  6152 ;; This function calls:
  6153 ;;		Nothing
  6154 ;; This function is called by:
  6155 ;;		_ADC_Initialize
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159  0000'                    _ADC_SetInterruptHandler:	
  6160                           ;psect for function _ADC_SetInterruptHandler
  6161                           
  6162                           
  6163                           ;mcc_generated_files/adc/src/adc.c: 145: void ADC_SetInterruptHandler(void (* InterruptH
      +                          andler)(void));mcc_generated_files/adc/src/adc.c: 146: {;mcc_generated_files/adc/src/adc
      +                          .c: 147:     ADC_InterruptHandler = InterruptHandler;
  6164                           
  6165                           ;incstack = 0
  6166                           ; Regs used in _ADC_SetInterruptHandler: [wreg]
  6167  0000' 0020               	movlb	0	; select bank0
  6168  0001' 0801'              	movf	ADC_SetInterruptHandler@InterruptHandler+1,w
  6169  0002' 0021               	movlb	1	; select bank1
  6170  0003' 0080'              	movwf	(_ADC_InterruptHandler+1)^(0+128)
  6171  0004' 0020               	movlb	0	; select bank0
  6172  0005' 0800'              	movf	ADC_SetInterruptHandler@InterruptHandler,w
  6173  0006' 0021               	movlb	1	; select bank1
  6174  0007' 0080'              	movwf	_ADC_InterruptHandler^(0+128)
  6175  0008' 0008               	return
  6176  0009'                    __end_of_ADC_SetInterruptHandler:
  6177                           
  6178                           	psect	text14
  6179  0000'                    __ptext14:	
  6180 ;; *************** function _Parse *****************
  6181 ;; Defined at:
  6182 ;;		line 522 in file "main.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;  parser          1    wreg     PTR struct .
  6185 ;;		 -> main@parser(12), 
  6186 ;;  data            1   20[BANK1 ] unsigned char 
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;  parser          1   23[BANK1 ] PTR struct .
  6189 ;;		 -> main@parser(12), 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      void 
  6192 ;; Registers used:
  6193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6199 ;;      Params:         0       0       1       0       0       0       0       0
  6200 ;;      Locals:         0       0       1       0       0       0       0       0
  6201 ;;      Temps:          0       0       2       0       0       0       0       0
  6202 ;;      Totals:         0       0       4       0       0       0       0       0
  6203 ;;Total ram usage:        4 bytes
  6204 ;; Hardware stack levels used: 1
  6205 ;; Hardware stack levels required when called: 16
  6206 ;; This function calls:
  6207 ;;		_ProcessMsg
  6208 ;;		_SendMsg
  6209 ;;		_SendNack
  6210 ;; This function is called by:
  6211 ;;		_main
  6212 ;; This function uses a non-reentrant model
  6213 ;;
  6214                           
  6215  0000'                    _Parse:	
  6216                           ;psect for function _Parse
  6217                           
  6218                           
  6219                           ;incstack = 0
  6220 ;; hardware stack exceeded
  6221                           ; Regs used in _Parse: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6222                           ;Parse@parser stored from wreg
  6223  0000' 0021               	movlb	1	; select bank1
  6224  0001' 0080'              	movwf	Parse@parser^(0+128)
  6225                           
  6226                           ;main.c: 523:     switch (parser->m_State) {
  6227  0002' 2800'              	goto	l5443
  6228  0003'                    l5379:
  6229                           
  6230                           ;main.c: 525:             if (data == 0x01) {
  6231  0003' 0300'              	decf	Parse@data^(0+128),w
  6232  0004' 1D03               	btfss	3,2
  6233  0005' 2800'              	goto	l5385
  6234                           
  6235                           ;main.c: 526:                 parser->m_State = WAIT_ID;
  6236  0006' 0800'              	movf	Parse@parser^(0+128),w
  6237  0007' 0086               	movwf	6
  6238  0008' 0187               	clrf	7
  6239  0009' 0181               	clrf	1
  6240  000A' 0A81               	incf	1,f
  6241                           
  6242                           ;main.c: 527:                 parser->m_bSum = 0x00;
  6243  000B' 0800'              	movf	Parse@parser^(0+128),w
  6244  000C' 3E05               	addlw	5
  6245  000D' 0086               	movwf	6
  6246  000E' 0187               	clrf	7
  6247  000F' 0181               	clrf	1
  6248                           
  6249                           ;main.c: 528:             } else
  6250  0010' 0008               	return
  6251  0011'                    l5385:
  6252                           
  6253                           ;main.c: 529:                 SendNack(WRONG_MESSAGE);
  6254  0011' 3002               	movlw	2
  6255  0012' 3180' 2000'        	fcall	_SendNack
  6256  0014' 0008               	return
  6257  0015'                    l5387:
  6258                           
  6259                           ;main.c: 533:             parser->m_MsgID = data;
  6260  0015' 0A00'              	incf	Parse@parser^(0+128),w
  6261  0016' 0086               	movwf	6
  6262  0017' 0187               	clrf	7
  6263  0018' 0800'              	movf	Parse@data^(0+128),w
  6264  0019' 0081               	movwf	1
  6265                           
  6266                           ;main.c: 534:             parser->m_bEcho = 1;
  6267  001A' 0800'              	movf	Parse@parser^(0+128),w
  6268  001B' 3E0B               	addlw	11
  6269  001C' 0086               	movwf	6
  6270  001D' 0187               	clrf	7
  6271  001E' 0181               	clrf	1
  6272  001F' 0A81               	incf	1,f
  6273                           
  6274                           ;main.c: 536:             switch ((uint8_t) parser->m_MsgID) {
  6275  0020' 2800'              	goto	l5419
  6276  0021'                    l5391:
  6277                           
  6278                           ;main.c: 540:                     parser->m_bEcho = 0;
  6279  0021' 0800'              	movf	Parse@parser^(0+128),w
  6280  0022' 3E0B               	addlw	11
  6281  0023' 0086               	movwf	6
  6282  0024' 0187               	clrf	7
  6283  0025' 0181               	clrf	1
  6284                           
  6285                           ;main.c: 541:                     parser->m_bReplySize = parser->m_bDataSize = 0;
  6286  0026' 0800'              	movf	Parse@parser^(0+128),w
  6287  0027' 3E02               	addlw	2
  6288  0028' 0086               	movwf	6
  6289  0029' 0187               	clrf	7
  6290  002A' 0181               	clrf	1
  6291  002B' 0800'              	movf	Parse@parser^(0+128),w
  6292  002C' 3E03               	addlw	3
  6293  002D' 0086               	movwf	6
  6294  002E' 0187               	clrf	7
  6295  002F' 0181               	clrf	1
  6296                           
  6297                           ;main.c: 542:                     parser->m_State = WAIT_CKSUM;
  6298  0030' 0800'              	movf	Parse@parser^(0+128),w
  6299  0031' 0086               	movwf	6
  6300  0032' 0187               	clrf	7
  6301  0033' 3003               	movlw	3
  6302  0034' 0081               	movwf	1
  6303                           
  6304                           ;main.c: 543:                     break;
  6305  0035' 0008               	return
  6306  0036'                    l5395:
  6307                           
  6308                           ;main.c: 546:                     parser->m_bReplySize = parser->m_bDataSize = 1;
  6309  0036' 0800'              	movf	Parse@parser^(0+128),w
  6310  0037' 3E03               	addlw	3
  6311  0038' 0086               	movwf	6
  6312  0039' 0187               	clrf	7
  6313  003A' 0800'              	movf	Parse@parser^(0+128),w
  6314  003B' 3E02               	addlw	2
  6315  003C' 0084               	movwf	4
  6316  003D' 0185               	clrf	5
  6317  003E' 3001               	movlw	1
  6318  003F' 3F80               	movwi [0]fsr0
  6319  0040' 0081               	movwf	1
  6320                           
  6321                           ;main.c: 547:                     parser->m_State = WAIT_VALUE;
  6322  0041' 0800'              	movf	Parse@parser^(0+128),w
  6323  0042' 0086               	movwf	6
  6324  0043' 0187               	clrf	7
  6325  0044' 3002               	movlw	2
  6326  0045' 0081               	movwf	1
  6327                           
  6328                           ;main.c: 548:                     break;
  6329  0046' 0008               	return
  6330  0047'                    l5399:
  6331                           
  6332                           ;main.c: 553:                     parser->m_bEcho = 0;
  6333  0047' 0800'              	movf	Parse@parser^(0+128),w
  6334  0048' 3E0B               	addlw	11
  6335  0049' 0086               	movwf	6
  6336  004A' 0187               	clrf	7
  6337  004B' 0181               	clrf	1
  6338                           
  6339                           ;main.c: 554:                     parser->m_bReplySize = parser->m_bDataSize = 1;
  6340  004C' 0800'              	movf	Parse@parser^(0+128),w
  6341  004D' 3E03               	addlw	3
  6342  004E' 0086               	movwf	6
  6343  004F' 0187               	clrf	7
  6344  0050' 0800'              	movf	Parse@parser^(0+128),w
  6345  0051' 3E02               	addlw	2
  6346  0052' 0084               	movwf	4
  6347  0053' 0185               	clrf	5
  6348  0054' 3001               	movlw	1
  6349  0055' 3F80               	movwi [0]fsr0
  6350  0056' 0081               	movwf	1
  6351                           
  6352                           ;main.c: 555:                     parser->m_State = WAIT_VALUE;
  6353  0057' 0800'              	movf	Parse@parser^(0+128),w
  6354  0058' 0086               	movwf	6
  6355  0059' 0187               	clrf	7
  6356  005A' 3002               	movlw	2
  6357  005B' 0081               	movwf	1
  6358                           
  6359                           ;main.c: 556:                     break;
  6360  005C' 0008               	return
  6361  005D'                    l5405:
  6362                           
  6363                           ;main.c: 559:                     parser->m_bReplySize = parser->m_bDataSize = 2;
  6364  005D' 0800'              	movf	Parse@parser^(0+128),w
  6365  005E' 3E03               	addlw	3
  6366  005F' 0086               	movwf	6
  6367  0060' 0187               	clrf	7
  6368  0061' 0800'              	movf	Parse@parser^(0+128),w
  6369  0062' 3E02               	addlw	2
  6370  0063' 0084               	movwf	4
  6371  0064' 0185               	clrf	5
  6372  0065' 3002               	movlw	2
  6373  0066' 3F80               	movwi [0]fsr0
  6374  0067' 0081               	movwf	1
  6375                           
  6376                           ;main.c: 560:                     parser->m_State = WAIT_VALUE;
  6377  0068' 0800'              	movf	Parse@parser^(0+128),w
  6378  0069' 0086               	movwf	6
  6379  006A' 0187               	clrf	7
  6380  006B' 3002               	movlw	2
  6381  006C' 0081               	movwf	1
  6382                           
  6383                           ;main.c: 561:                     break;
  6384  006D' 0008               	return
  6385  006E'                    l5409:
  6386                           
  6387                           ;main.c: 565:                     parser->m_bReplySize = parser->m_bDataSize = 4;
  6388  006E' 0800'              	movf	Parse@parser^(0+128),w
  6389  006F' 3E03               	addlw	3
  6390  0070' 0086               	movwf	6
  6391  0071' 0187               	clrf	7
  6392  0072' 0800'              	movf	Parse@parser^(0+128),w
  6393  0073' 3E02               	addlw	2
  6394  0074' 0084               	movwf	4
  6395  0075' 0185               	clrf	5
  6396  0076' 3004               	movlw	4
  6397  0077' 3F80               	movwi [0]fsr0
  6398  0078' 0081               	movwf	1
  6399                           
  6400                           ;main.c: 566:                     parser->m_State = WAIT_VALUE;
  6401  0079' 0800'              	movf	Parse@parser^(0+128),w
  6402  007A' 0086               	movwf	6
  6403  007B' 0187               	clrf	7
  6404  007C' 3002               	movlw	2
  6405  007D' 0081               	movwf	1
  6406                           
  6407                           ;main.c: 567:                     break;
  6408  007E' 0008               	return
  6409  007F'                    l5413:
  6410                           
  6411                           ;main.c: 570:                     parser->m_bReplySize = parser->m_bDataSize = 5;
  6412  007F' 0800'              	movf	Parse@parser^(0+128),w
  6413  0080' 3E03               	addlw	3
  6414  0081' 0086               	movwf	6
  6415  0082' 0187               	clrf	7
  6416  0083' 0800'              	movf	Parse@parser^(0+128),w
  6417  0084' 3E02               	addlw	2
  6418  0085' 0084               	movwf	4
  6419  0086' 0185               	clrf	5
  6420  0087' 3005               	movlw	5
  6421  0088' 3F80               	movwi [0]fsr0
  6422  0089' 0081               	movwf	1
  6423                           
  6424                           ;main.c: 571:                     parser->m_State = WAIT_VALUE;
  6425  008A' 0800'              	movf	Parse@parser^(0+128),w
  6426  008B' 0086               	movwf	6
  6427  008C' 0187               	clrf	7
  6428  008D' 3002               	movlw	2
  6429  008E' 0081               	movwf	1
  6430                           
  6431                           ;main.c: 572:                     break;
  6432  008F' 0008               	return
  6433  0090'                    l5419:
  6434  0090' 0A00'              	incf	Parse@parser^(0+128),w
  6435  0091' 0086               	movwf	6
  6436  0092' 0187               	clrf	7
  6437  0093' 0801               	movf	1,w
  6438                           
  6439                           ; Switch size 1, requested type "simple"
  6440                           ; Number of cases is 11, Range of values is 1 to 17
  6441                           ; switch strategies available:
  6442                           ; Name         Instructions Cycles
  6443                           ; simple_byte           34    18 (average)
  6444                           ; direct_byte           43     9 (fixed)
  6445                           ; jumptable            263     9 (fixed)
  6446                           ;	Chosen strategy is simple_byte
  6447  0094' 3A01               	xorlw	1	; case 1
  6448  0095' 1903               	skipnz
  6449  0096' 2800'              	goto	l5405
  6450  0097' 3A03               	xorlw	3	; case 2
  6451  0098' 1903               	skipnz
  6452  0099' 2800'              	goto	l5399
  6453  009A' 3A01               	xorlw	1	; case 3
  6454  009B' 1903               	skipnz
  6455  009C' 2800'              	goto	l5399
  6456  009D' 3A07               	xorlw	7	; case 4
  6457  009E' 1903               	skipnz
  6458  009F' 2800'              	goto	l5399
  6459  00A0' 3A01               	xorlw	1	; case 5
  6460  00A1' 1903               	skipnz
  6461  00A2' 2800'              	goto	l5391
  6462  00A3' 3A03               	xorlw	3	; case 6
  6463  00A4' 1903               	skipnz
  6464  00A5' 2800'              	goto	l5391
  6465  00A6' 3A01               	xorlw	1	; case 7
  6466  00A7' 1903               	skipnz
  6467  00A8' 2800'              	goto	l5395
  6468  00A9' 3A0F               	xorlw	15	; case 8
  6469  00AA' 1903               	skipnz
  6470  00AB' 2800'              	goto	l5409
  6471  00AC' 3A01               	xorlw	1	; case 9
  6472  00AD' 1903               	skipnz
  6473  00AE' 2800'              	goto	l5409
  6474  00AF' 3A03               	xorlw	3	; case 10
  6475  00B0' 1903               	skipnz
  6476  00B1' 2800'              	goto	l5413
  6477  00B2' 3A1B               	xorlw	27	; case 17
  6478  00B3' 1903               	skipnz
  6479  00B4' 2800'              	goto	l5391
  6480  00B5' 2800'              	goto	l791
  6481  00B6'                    l5421:
  6482                           
  6483                           ;main.c: 577:             parser->m_bDataBuffer[5 - parser->m_bDataSize] = data;
  6484  00B6' 0800'              	movf	Parse@parser^(0+128),w
  6485  00B7' 3E02               	addlw	2
  6486  00B8' 0086               	movwf	6
  6487  00B9' 0187               	clrf	7
  6488  00BA' 0800'              	movf	Parse@parser^(0+128),w
  6489  00BB' 0080'              	movwf	??_Parse^(0+128)
  6490  00BC' 0801               	movf	1,w
  6491  00BD' 0280'              	subwf	??_Parse^(0+128),f
  6492  00BE' 0800'              	movf	??_Parse^(0+128),w
  6493  00BF' 3E0B               	addlw	11
  6494  00C0' 0086               	movwf	6
  6495  00C1' 0187               	clrf	7
  6496  00C2' 0800'              	movf	Parse@data^(0+128),w
  6497  00C3' 0081               	movwf	1
  6498                           
  6499                           ;main.c: 578:             parser->m_bSum += data;
  6500  00C4' 0800'              	movf	Parse@data^(0+128),w
  6501  00C5' 0080'              	movwf	??_Parse^(0+128)
  6502  00C6' 0800'              	movf	Parse@parser^(0+128),w
  6503  00C7' 3E05               	addlw	5
  6504  00C8' 0086               	movwf	6
  6505  00C9' 0187               	clrf	7
  6506  00CA' 0800'              	movf	??_Parse^(0+128),w
  6507  00CB' 0781               	addwf	1,f
  6508                           
  6509                           ;main.c: 579:             parser->m_bDataSize--;
  6510  00CC' 0800'              	movf	Parse@parser^(0+128),w
  6511  00CD' 3E02               	addlw	2
  6512  00CE' 0086               	movwf	6
  6513  00CF' 0187               	clrf	7
  6514  00D0' 3001               	movlw	1
  6515  00D1' 0281               	subwf	1,f
  6516                           
  6517                           ;main.c: 580:             if (parser->m_bDataSize == 0)
  6518  00D2' 0800'              	movf	Parse@parser^(0+128),w
  6519  00D3' 3E02               	addlw	2
  6520  00D4' 0086               	movwf	6
  6521  00D5' 0187               	clrf	7
  6522  00D6' 0801               	movf	1,w
  6523  00D7' 1D03               	btfss	3,2
  6524  00D8' 0008               	return
  6525                           
  6526                           ;main.c: 581:                 parser->m_State = WAIT_CKSUM;
  6527  00D9' 0800'              	movf	Parse@parser^(0+128),w
  6528  00DA' 0086               	movwf	6
  6529  00DB' 0187               	clrf	7
  6530  00DC' 3003               	movlw	3
  6531  00DD' 0081               	movwf	1
  6532  00DE' 0008               	return
  6533  00DF'                    l5425:
  6534                           
  6535                           ;main.c: 585:             parser->m_bCkSum = data;
  6536  00DF' 0800'              	movf	Parse@parser^(0+128),w
  6537  00E0' 3E04               	addlw	4
  6538  00E1' 0086               	movwf	6
  6539  00E2' 0187               	clrf	7
  6540  00E3' 0800'              	movf	Parse@data^(0+128),w
  6541  00E4' 0081               	movwf	1
  6542                           
  6543                           ;main.c: 587:             if (parser->m_bSum == parser->m_bCkSum) {
  6544  00E5' 0800'              	movf	Parse@parser^(0+128),w
  6545  00E6' 3E04               	addlw	4
  6546  00E7' 0086               	movwf	6
  6547  00E8' 0187               	clrf	7
  6548  00E9' 0800'              	movf	Parse@parser^(0+128),w
  6549  00EA' 3E05               	addlw	5
  6550  00EB' 0084               	movwf	4
  6551  00EC' 0185               	clrf	5
  6552  00ED' 0800               	movf	0,w
  6553  00EE' 0601               	xorwf	1,w
  6554  00EF' 1D03               	skipz
  6555  00F0' 2800'              	goto	l5435
  6556                           
  6557                           ;main.c: 588:                 if (parser->m_bEcho)
  6558  00F1' 0800'              	movf	Parse@parser^(0+128),w
  6559  00F2' 3E0B               	addlw	11
  6560  00F3' 0086               	movwf	6
  6561  00F4' 0187               	clrf	7
  6562  00F5' 0801               	movf	1,w
  6563  00F6' 1903               	btfsc	3,2
  6564  00F7' 2800'              	goto	l5433
  6565                           
  6566                           ;main.c: 589:                     SendMsg(parser->m_MsgID, parser->m_bDataBuffer, parser
      +                          ->m_bReplySize);
  6567  00F8' 0800'              	movf	Parse@parser^(0+128),w
  6568  00F9' 3E06               	addlw	6
  6569  00FA' 0020               	movlb	0	; select bank0
  6570  00FB' 0081'              	movwf	SendMsg@data
  6571  00FC' 0021               	movlb	1	; select bank1
  6572  00FD' 0800'              	movf	Parse@parser^(0+128),w
  6573  00FE' 0086               	movwf	6
  6574  00FF' 0187               	clrf	7
  6575  0100' 3F43               	moviw [3]fsr1
  6576  0101' 0020               	movlb	0	; select bank0
  6577  0102' 0082'              	movwf	SendMsg@data_len
  6578  0103' 0021               	movlb	1	; select bank1
  6579  0104' 0A00'              	incf	Parse@parser^(0+128),w
  6580  0105' 0086               	movwf	6
  6581  0106' 0187               	clrf	7
  6582  0107' 0801               	movf	1,w
  6583  0108' 3180' 2000' 3180'  	fcall	_SendMsg
  6584  010B'                    l5433:
  6585                           
  6586                           ;main.c: 591:                 ProcessMsg(parser->m_MsgID, parser->m_bDataBuffer);
  6587  010B' 0021               	movlb	1	; select bank1
  6588  010C' 0800'              	movf	Parse@parser^(0+128),w
  6589  010D' 3E06               	addlw	6
  6590  010E' 0080'              	movwf	ProcessMsg@data^(0+128)
  6591  010F' 0A00'              	incf	Parse@parser^(0+128),w
  6592  0110' 0086               	movwf	6
  6593  0111' 0187               	clrf	7
  6594  0112' 0801               	movf	1,w
  6595  0113' 3180' 2000' 3180'  	fcall	_ProcessMsg
  6596                           
  6597                           ;main.c: 592:             } else
  6598  0116' 2800'              	goto	l5437
  6599  0117'                    l5435:
  6600                           
  6601                           ;main.c: 593:                 SendNack(CKSUM_ERR);
  6602  0117' 3001               	movlw	1
  6603  0118' 3180' 2000'        	fcall	_SendNack
  6604  011A'                    l5437:
  6605                           
  6606                           ;main.c: 595:             parser->m_State = IDLE;
  6607  011A' 0021               	movlb	1	; select bank1
  6608  011B' 0800'              	movf	Parse@parser^(0+128),w
  6609  011C' 0086               	movwf	6
  6610  011D' 0187               	clrf	7
  6611  011E' 0181               	clrf	1
  6612                           
  6613                           ;main.c: 596:             break;
  6614  011F' 0008               	return
  6615  0120'                    l5439:
  6616                           
  6617                           ;main.c: 599:             SendNack(WRONG_MESSAGE);
  6618  0120' 3002               	movlw	2
  6619  0121' 3180' 2000'        	fcall	_SendNack
  6620                           
  6621                           ;main.c: 600:             parser->m_State = IDLE;
  6622  0123' 0021               	movlb	1	; select bank1
  6623  0124' 0800'              	movf	Parse@parser^(0+128),w
  6624  0125' 0086               	movwf	6
  6625  0126' 0187               	clrf	7
  6626  0127' 0181               	clrf	1
  6627                           
  6628                           ;main.c: 601:     }
  6629  0128' 0008               	return
  6630  0129'                    l5443:
  6631  0129' 0800'              	movf	Parse@parser^(0+128),w
  6632  012A' 0086               	movwf	6
  6633  012B' 0187               	clrf	7
  6634  012C' 0801               	movf	1,w
  6635  012D' 0080'              	movwf	??_Parse^(0+128)
  6636  012E' 0181'              	clrf	(??_Parse^(0+128)+1)
  6637                           
  6638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6639                           ; Switch size 1, requested type "simple"
  6640                           ; Number of cases is 1, Range of values is 0 to 0
  6641                           ; switch strategies available:
  6642                           ; Name         Instructions Cycles
  6643                           ; simple_byte            4     3 (average)
  6644                           ; direct_byte            8     6 (fixed)
  6645                           ; jumptable            260     6 (fixed)
  6646                           ;	Chosen strategy is simple_byte
  6647  012F' 0800'              	movf	(??_Parse+1)^(0+128),w
  6648  0130' 3A00               	xorlw	0	; case 0
  6649  0131' 1903               	skipnz
  6650  0132' 2800'              	goto	l5501
  6651  0133' 2800'              	goto	l5439
  6652  0134'                    l5501:
  6653                           
  6654                           ; Switch size 1, requested type "simple"
  6655                           ; Number of cases is 4, Range of values is 0 to 3
  6656                           ; switch strategies available:
  6657                           ; Name         Instructions Cycles
  6658                           ; simple_byte           13     7 (average)
  6659                           ; direct_byte           14     6 (fixed)
  6660                           ; jumptable            260     6 (fixed)
  6661                           ;	Chosen strategy is simple_byte
  6662  0134' 0800'              	movf	??_Parse^(0+128),w
  6663  0135' 3A00               	xorlw	0	; case 0
  6664  0136' 1903               	skipnz
  6665  0137' 2800'              	goto	l5379
  6666  0138' 3A01               	xorlw	1	; case 1
  6667  0139' 1903               	skipnz
  6668  013A' 2800'              	goto	l5387
  6669  013B' 3A03               	xorlw	3	; case 2
  6670  013C' 1903               	skipnz
  6671  013D' 2800'              	goto	l5421
  6672  013E' 3A01               	xorlw	1	; case 3
  6673  013F' 1903               	skipnz
  6674  0140' 2800'              	goto	l5425
  6675  0141' 2800'              	goto	l5439
  6676  0142'                    l791:
  6677  0142' 0008               	return
  6678  0143'                    __end_of_Parse:
  6679                           
  6680                           	psect	text15
  6681  0000'                    __ptext15:	
  6682 ;; *************** function _SendNack *****************
  6683 ;; Defined at:
  6684 ;;		line 440 in file "main.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;  error           1    wreg     unsigned char 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  error           1    6[BANK0 ] unsigned char 
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      void 
  6691 ;; Registers used:
  6692 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6698 ;;      Params:         0       0       0       0       0       0       0       0
  6699 ;;      Locals:         0       1       0       0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0       0       0       0
  6701 ;;      Totals:         0       1       0       0       0       0       0       0
  6702 ;;Total ram usage:        1 bytes
  6703 ;; Hardware stack levels used: 1
  6704 ;; Hardware stack levels required when called: 9
  6705 ;; This function calls:
  6706 ;;		_SendMsg
  6707 ;; This function is called by:
  6708 ;;		_Parse
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712  0000'                    _SendNack:	
  6713                           ;psect for function _SendNack
  6714                           
  6715                           
  6716                           ;incstack = 0
  6717                           ; Regs used in _SendNack: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6718                           ;SendNack@error stored from wreg
  6719  0000' 0020               	movlb	0	; select bank0
  6720  0001' 0086'              	movwf	SendNack@error
  6721                           
  6722                           ;main.c: 441:     SendMsg(RFDU_NVT_NACK, &error, 1);
  6723  0002' 3000'              	movlw	(low (SendNack@error| 0))& (0+255)
  6724  0003' 0081'              	movwf	SendMsg@data
  6725  0004' 0182'              	clrf	SendMsg@data_len
  6726  0005' 0A82'              	incf	SendMsg@data_len,f
  6727  0006' 300B               	movlw	11
  6728  0007' 3180' 2000'        	fcall	_SendMsg
  6729  0009' 0008               	return
  6730  000A'                    __end_of_SendNack:
  6731                           
  6732                           	psect	text16
  6733  0000'                    __ptext16:	
  6734 ;; *************** function _ProcessMsg *****************
  6735 ;; Defined at:
  6736 ;;		line 449 in file "main.c"
  6737 ;; Parameters:    Size  Location     Type
  6738 ;;  msg_id          1    wreg     unsigned char 
  6739 ;;  data            1   11[BANK1 ] PTR unsigned char 
  6740 ;;		 -> main@parser(12), 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  msg_id          1   13[BANK1 ] unsigned char 
  6743 ;;  payload         6   14[BANK1 ] unsigned char [6]
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      void 
  6746 ;; Registers used:
  6747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6753 ;;      Params:         0       0       1       0       0       0       0       0
  6754 ;;      Locals:         0       0       7       0       0       0       0       0
  6755 ;;      Temps:          0       0       1       0       0       0       0       0
  6756 ;;      Totals:         0       0       9       0       0       0       0       0
  6757 ;;Total ram usage:        9 bytes
  6758 ;; Hardware stack levels used: 1
  6759 ;; Hardware stack levels required when called: 15
  6760 ;; This function calls:
  6761 ;;		_KAPS_GoToIdx
  6762 ;;		_KAPS_StorePos
  6763 ;;		_KAPS_getIndex
  6764 ;;		_KAPS_getPos
  6765 ;;		_KAPS_getStatus
  6766 ;;		_KAPS_setAbsPos
  6767 ;;		_KAPS_setRelPos
  6768 ;;		_SSPA_getPOut
  6769 ;;		_SSPA_getTemp
  6770 ;;		_SSPA_setMute
  6771 ;;		_SendMsg
  6772 ;;		_packLong
  6773 ;;		_unpackLong
  6774 ;;		_unpackWord
  6775 ;; This function is called by:
  6776 ;;		_Parse
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780  0000'                    _ProcessMsg:	
  6781                           ;psect for function _ProcessMsg
  6782                           
  6783                           
  6784                           ;incstack = 0
  6785 ;; hardware stack exceeded
  6786                           ; Regs used in _ProcessMsg: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6787                           ;ProcessMsg@msg_id stored from wreg
  6788  0000' 0021               	movlb	1	; select bank1
  6789  0001' 0080'              	movwf	ProcessMsg@msg_id^(0+128)
  6790                           
  6791                           ;main.c: 450:     uint8_t payload[6];;main.c: 452:     switch (msg_id) {
  6792  0002' 2800'              	goto	l5347
  6793  0003'                    l5293:
  6794                           
  6795                           ;main.c: 454:             payload[0] = data[0];
  6796  0003' 0800'              	movf	ProcessMsg@data^(0+128),w
  6797  0004' 0086               	movwf	6
  6798  0005' 0187               	clrf	7
  6799  0006' 0801               	movf	1,w
  6800  0007' 0080'              	movwf	ProcessMsg@payload^(0+128)
  6801                           
  6802                           ;main.c: 455:             payload[1] = (uint8_t) sppas[data[0]].m_Mute;
  6803  0008' 0800'              	movf	ProcessMsg@data^(0+128),w
  6804  0009' 0086               	movwf	6
  6805  000A' 0187               	clrf	7
  6806  000B' 0801               	movf	1,w
  6807  000C' 0080'              	movwf	??_ProcessMsg^(0+128)
  6808  000D' 3002               	movlw	2
  6809  000E'                    u5435:
  6810  000E' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6811  000F' 3EFF               	addlw	-1
  6812  0010' 1D03               	skipz
  6813  0011' 2800'              	goto	u5435
  6814  0012' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6815  0013' 3E00'              	addlw	(low (_sppas| (0+256)))& (0+255)
  6816  0014' 0086               	movwf	6
  6817  0015' 3001               	movlw	1	; select bank2/3
  6818  0016' 0087               	movwf	7
  6819  0017' 0801               	movf	1,w
  6820  0018' 0081'              	movwf	(ProcessMsg@payload^(0+128)+1)
  6821                           
  6822                           ;main.c: 456:             SendMsg(RFDU_NVT_MuteStatus, payload, 2);
  6823  0019' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  6824  001A' 0020               	movlb	0	; select bank0
  6825  001B' 0081'              	movwf	SendMsg@data
  6826  001C' 3002               	movlw	2
  6827  001D' 0082'              	movwf	SendMsg@data_len
  6828  001E' 300C               	movlw	12
  6829  001F' 3180' 2000'        	fcall	_SendMsg
  6830                           
  6831                           ;main.c: 457:             break;
  6832  0021' 0008               	return
  6833  0022'                    l5299:
  6834                           
  6835                           ;main.c: 460:             SSPA_getTemp(&sppas[data[0]], data[0]);
  6836  0022' 0800'              	movf	ProcessMsg@data^(0+128),w
  6837  0023' 0086               	movwf	6
  6838  0024' 0187               	clrf	7
  6839  0025' 0801               	movf	1,w
  6840  0026' 0080'              	movwf	SSPA_getTemp@band^(0+128)
  6841  0027' 0800'              	movf	ProcessMsg@data^(0+128),w
  6842  0028' 0086               	movwf	6
  6843  0029' 0187               	clrf	7
  6844  002A' 0801               	movf	1,w
  6845  002B' 0080'              	movwf	??_ProcessMsg^(0+128)
  6846  002C' 3002               	movlw	2
  6847  002D'                    u5445:
  6848  002D' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6849  002E' 3EFF               	addlw	-1
  6850  002F' 1D03               	skipz
  6851  0030' 2800'              	goto	u5445
  6852  0031' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6853  0032' 3E00'              	addlw	(low (_sppas| (0+256)))& (0+255)
  6854  0033' 3180' 2000' 3180'  	fcall	_SSPA_getTemp
  6855                           
  6856                           ;main.c: 461:             payload[0] = data[0];
  6857  0036' 0021               	movlb	1	; select bank1
  6858  0037' 0800'              	movf	ProcessMsg@data^(0+128),w
  6859  0038' 0086               	movwf	6
  6860  0039' 0187               	clrf	7
  6861  003A' 0801               	movf	1,w
  6862  003B' 0080'              	movwf	ProcessMsg@payload^(0+128)
  6863                           
  6864                           ;main.c: 462:             unpackWord(sppas[data[0]].m_wTemp, &payload[1]);
  6865  003C' 0800'              	movf	ProcessMsg@data^(0+128),w
  6866  003D' 0086               	movwf	6
  6867  003E' 0187               	clrf	7
  6868  003F' 0801               	movf	1,w
  6869  0040' 0080'              	movwf	??_ProcessMsg^(0+128)
  6870  0041' 3002               	movlw	2
  6871  0042'                    u5455:
  6872  0042' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6873  0043' 3EFF               	addlw	-1
  6874  0044' 1D03               	skipz
  6875  0045' 2800'              	goto	u5455
  6876  0046' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6877  0047' 3E00'              	addlw	(low ((_sppas| (0+256)+1)))& (0+255)
  6878  0048' 0086               	movwf	6
  6879  0049' 3001               	movlw	1	; select bank2/3
  6880  004A' 0087               	movwf	7
  6881  004B' 3F40               	moviw [0]fsr1
  6882  004C' 0020               	movlb	0	; select bank0
  6883  004D' 0080'              	movwf	unpackWord@value
  6884  004E' 3F41               	moviw [1]fsr1
  6885  004F' 0081'              	movwf	unpackWord@value+1
  6886  0050' 3000'              	movlw	(low ((ProcessMsg@payload| 0+1)))& (0+255)
  6887  0051' 0082'              	movwf	unpackWord@data
  6888  0052' 3180' 2000' 3180'  	fcall	_unpackWord
  6889                           
  6890                           ;main.c: 463:             SendMsg(RFDU_NVT_SSPATemp, payload, 3);
  6891  0055' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  6892  0056' 0020               	movlb	0	; select bank0
  6893  0057' 0081'              	movwf	SendMsg@data
  6894  0058' 3003               	movlw	3
  6895  0059' 0082'              	movwf	SendMsg@data_len
  6896  005A' 300D               	movlw	13
  6897  005B' 3180' 2000'        	fcall	_SendMsg
  6898                           
  6899                           ;main.c: 464:             break;
  6900  005D' 0008               	return
  6901  005E'                    l5307:
  6902                           
  6903                           ;main.c: 467:             SSPA_getPOut(&sppas[data[0]], data[0]);
  6904  005E' 0800'              	movf	ProcessMsg@data^(0+128),w
  6905  005F' 0086               	movwf	6
  6906  0060' 0187               	clrf	7
  6907  0061' 0801               	movf	1,w
  6908  0062' 0080'              	movwf	SSPA_getPOut@band^(0+128)
  6909  0063' 0800'              	movf	ProcessMsg@data^(0+128),w
  6910  0064' 0086               	movwf	6
  6911  0065' 0187               	clrf	7
  6912  0066' 0801               	movf	1,w
  6913  0067' 0080'              	movwf	??_ProcessMsg^(0+128)
  6914  0068' 3002               	movlw	2
  6915  0069'                    u5465:
  6916  0069' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6917  006A' 3EFF               	addlw	-1
  6918  006B' 1D03               	skipz
  6919  006C' 2800'              	goto	u5465
  6920  006D' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6921  006E' 3E00'              	addlw	(low (_sppas| (0+256)))& (0+255)
  6922  006F' 3180' 2000' 3180'  	fcall	_SSPA_getPOut
  6923                           
  6924                           ;main.c: 468:             payload[0] = data[0];
  6925  0072' 0021               	movlb	1	; select bank1
  6926  0073' 0800'              	movf	ProcessMsg@data^(0+128),w
  6927  0074' 0086               	movwf	6
  6928  0075' 0187               	clrf	7
  6929  0076' 0801               	movf	1,w
  6930  0077' 0080'              	movwf	ProcessMsg@payload^(0+128)
  6931                           
  6932                           ;main.c: 469:             payload[1] = sppas[data[0]].m_bPOut;
  6933  0078' 0800'              	movf	ProcessMsg@data^(0+128),w
  6934  0079' 0086               	movwf	6
  6935  007A' 0187               	clrf	7
  6936  007B' 0801               	movf	1,w
  6937  007C' 0080'              	movwf	??_ProcessMsg^(0+128)
  6938  007D' 3002               	movlw	2
  6939  007E'                    u5475:
  6940  007E' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6941  007F' 3EFF               	addlw	-1
  6942  0080' 1D03               	skipz
  6943  0081' 2800'              	goto	u5475
  6944  0082' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6945  0083' 3E00'              	addlw	(low ((_sppas| (0+256)+3)))& (0+255)
  6946  0084' 0086               	movwf	6
  6947  0085' 3001               	movlw	1	; select bank2/3
  6948  0086' 0087               	movwf	7
  6949  0087' 0801               	movf	1,w
  6950  0088' 0081'              	movwf	(ProcessMsg@payload^(0+128)+1)
  6951                           
  6952                           ;main.c: 470:             unpackLong(sppas[data[0]].m_lCurrent, &payload[2]);
  6953  0089' 0800'              	movf	ProcessMsg@data^(0+128),w
  6954  008A' 0086               	movwf	6
  6955  008B' 0187               	clrf	7
  6956  008C' 0801               	movf	1,w
  6957  008D' 0080'              	movwf	??_ProcessMsg^(0+128)
  6958  008E' 3002               	movlw	2
  6959  008F'                    u5485:
  6960  008F' 3580'              	lslf	??_ProcessMsg^(0+128),f
  6961  0090' 3EFF               	addlw	-1
  6962  0091' 1D03               	skipz
  6963  0092' 2800'              	goto	u5485
  6964  0093' 3500'              	lslf	??_ProcessMsg^(0+128),w
  6965  0094' 3E00'              	addlw	(low ((_sppas| (0+256)+4)))& (0+255)
  6966  0095' 0086               	movwf	6
  6967  0096' 3001               	movlw	1	; select bank2/3
  6968  0097' 0087               	movwf	7
  6969  0098' 3F40               	moviw [0]fsr1
  6970  0099' 0020               	movlb	0	; select bank0
  6971  009A' 0080'              	movwf	unpackLong@value
  6972  009B' 3F41               	moviw [1]fsr1
  6973  009C' 0081'              	movwf	unpackLong@value+1
  6974  009D' 3F42               	moviw [2]fsr1
  6975  009E' 0082'              	movwf	unpackLong@value+2
  6976  009F' 3F43               	moviw [3]fsr1
  6977  00A0' 0083'              	movwf	unpackLong@value+3
  6978  00A1' 3000'              	movlw	(low ((ProcessMsg@payload| 0+2)))& (0+255)
  6979  00A2' 0084'              	movwf	unpackLong@data
  6980  00A3' 3180' 2000' 3180'  	fcall	_unpackLong
  6981                           
  6982                           ;main.c: 471:             SendMsg(RFDU_NVT_SSPAPout, payload, 6);
  6983  00A6' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  6984  00A7' 0020               	movlb	0	; select bank0
  6985  00A8' 0081'              	movwf	SendMsg@data
  6986  00A9' 3006               	movlw	6
  6987  00AA' 0082'              	movwf	SendMsg@data_len
  6988  00AB' 300E               	movlw	14
  6989  00AC' 3180' 2000'        	fcall	_SendMsg
  6990                           
  6991                           ;main.c: 472:             break;
  6992  00AE' 0008               	return
  6993  00AF'                    l5317:
  6994                           
  6995                           ;main.c: 475:             KAPS_getStatus(&kaps);
  6996  00AF' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  6997  00B0' 3180' 2000' 3180'  	fcall	_KAPS_getStatus
  6998                           
  6999                           ;main.c: 476:             payload[0] = (uint8_t) kaps.m_Status;
  7000  00B3' 0021               	movlb	1	; select bank1
  7001  00B4' 0801'              	movf	(_kaps^(0+128)+1),w
  7002  00B5' 0080'              	movwf	ProcessMsg@payload^(0+128)
  7003                           
  7004                           ;main.c: 477:             SendMsg(RFDU_NVT_KapsStatus, payload, 1);
  7005  00B6' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  7006  00B7' 0020               	movlb	0	; select bank0
  7007  00B8' 0081'              	movwf	SendMsg@data
  7008  00B9' 0182'              	clrf	SendMsg@data_len
  7009  00BA' 0A82'              	incf	SendMsg@data_len,f
  7010  00BB' 300F               	movlw	15
  7011  00BC' 3180' 2000'        	fcall	_SendMsg
  7012                           
  7013                           ;main.c: 478:             break;
  7014  00BE' 0008               	return
  7015  00BF'                    l5323:
  7016                           
  7017                           ;main.c: 481:             KAPS_getPos(&kaps);
  7018  00BF' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7019  00C0' 3180' 2000' 3180'  	fcall	_KAPS_getPos
  7020                           
  7021                           ;main.c: 482:             unpackLong(kaps.m_lAbsPos, payload);
  7022  00C3' 3002               	movlw	2
  7023  00C4' 3E00'              	addlw	(low (_kaps| 0))& (0+255)
  7024  00C5' 0086               	movwf	6
  7025  00C6' 0187               	clrf	7
  7026  00C7' 3F40               	moviw [0]fsr1
  7027  00C8' 0020               	movlb	0	; select bank0
  7028  00C9' 0080'              	movwf	unpackLong@value
  7029  00CA' 3F41               	moviw [1]fsr1
  7030  00CB' 0081'              	movwf	unpackLong@value+1
  7031  00CC' 3F42               	moviw [2]fsr1
  7032  00CD' 0082'              	movwf	unpackLong@value+2
  7033  00CE' 3F43               	moviw [3]fsr1
  7034  00CF' 0083'              	movwf	unpackLong@value+3
  7035  00D0' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  7036  00D1' 0084'              	movwf	unpackLong@data
  7037  00D2' 3180' 2000' 3180'  	fcall	_unpackLong
  7038                           
  7039                           ;main.c: 483:             SendMsg(RFDU_NVT_KapsAbsPos, payload, 4);
  7040  00D5' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  7041  00D6' 0020               	movlb	0	; select bank0
  7042  00D7' 0081'              	movwf	SendMsg@data
  7043  00D8' 3004               	movlw	4
  7044  00D9' 0082'              	movwf	SendMsg@data_len
  7045  00DA' 3010               	movlw	16
  7046  00DB' 3180' 2000'        	fcall	_SendMsg
  7047                           
  7048                           ;main.c: 484:             break;
  7049  00DD' 0008               	return
  7050  00DE'                    l5329:
  7051                           
  7052                           ;main.c: 487:             KAPS_getIndex(&kaps);
  7053  00DE' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7054  00DF' 3180' 2000' 3180'  	fcall	_KAPS_getIndex
  7055                           
  7056                           ;main.c: 488:             payload[0] = kaps.m_bIdxPos;
  7057  00E2' 0021               	movlb	1	; select bank1
  7058  00E3' 0806'              	movf	(_kaps^(0+128)+6),w
  7059  00E4' 0080'              	movwf	ProcessMsg@payload^(0+128)
  7060                           
  7061                           ;main.c: 489:             SendMsg(RFDU_NVT_KapsIdxPos, payload, 1);
  7062  00E5' 3000'              	movlw	(low (ProcessMsg@payload| 0))& (0+255)
  7063  00E6' 0020               	movlb	0	; select bank0
  7064  00E7' 0081'              	movwf	SendMsg@data
  7065  00E8' 0182'              	clrf	SendMsg@data_len
  7066  00E9' 0A82'              	incf	SendMsg@data_len,f
  7067  00EA' 3012               	movlw	18
  7068  00EB' 3180' 2000'        	fcall	_SendMsg
  7069                           
  7070                           ;main.c: 490:             break;
  7071  00ED' 0008               	return
  7072  00EE'                    l5335:
  7073                           
  7074                           ;main.c: 493:             SSPA_setMute(&sppas[data[0]], data[0], (mute_t) data[1]);
  7075  00EE' 0800'              	movf	ProcessMsg@data^(0+128),w
  7076  00EF' 0086               	movwf	6
  7077  00F0' 0187               	clrf	7
  7078  00F1' 0801               	movf	1,w
  7079  00F2' 0020               	movlb	0	; select bank0
  7080  00F3' 0080'              	movwf	SSPA_setMute@band
  7081  00F4' 0021               	movlb	1	; select bank1
  7082  00F5' 0800'              	movf	ProcessMsg@data^(0+128),w
  7083  00F6' 0086               	movwf	6
  7084  00F7' 0187               	clrf	7
  7085  00F8' 3F41               	moviw [1]fsr1
  7086  00F9' 0020               	movlb	0	; select bank0
  7087  00FA' 0081'              	movwf	SSPA_setMute@mute
  7088  00FB' 0021               	movlb	1	; select bank1
  7089  00FC' 0800'              	movf	ProcessMsg@data^(0+128),w
  7090  00FD' 0086               	movwf	6
  7091  00FE' 0187               	clrf	7
  7092  00FF' 0801               	movf	1,w
  7093  0100' 0080'              	movwf	??_ProcessMsg^(0+128)
  7094  0101' 3002               	movlw	2
  7095  0102'                    u5495:
  7096  0102' 3580'              	lslf	??_ProcessMsg^(0+128),f
  7097  0103' 3EFF               	addlw	-1
  7098  0104' 1D03               	skipz
  7099  0105' 2800'              	goto	u5495
  7100  0106' 3500'              	lslf	??_ProcessMsg^(0+128),w
  7101  0107' 3E00'              	addlw	(low (_sppas| (0+256)))& (0+255)
  7102  0108' 3180' 2000'        	fcall	_SSPA_setMute
  7103                           
  7104                           ;main.c: 494:             break;
  7105  010A' 0008               	return
  7106  010B'                    l5337:
  7107                           
  7108                           ;main.c: 497:             KAPS_GoToIdx(&kaps, data[0]);
  7109  010B' 0800'              	movf	ProcessMsg@data^(0+128),w
  7110  010C' 0086               	movwf	6
  7111  010D' 0187               	clrf	7
  7112  010E' 0801               	movf	1,w
  7113  010F' 0020               	movlb	0	; select bank0
  7114  0110' 0080'              	movwf	KAPS_GoToIdx@idx
  7115  0111' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7116  0112' 3180' 2000'        	fcall	_KAPS_GoToIdx
  7117                           
  7118                           ;main.c: 498:             break;
  7119  0114' 0008               	return
  7120  0115'                    l5339:
  7121                           
  7122                           ;main.c: 501:             KAPS_setAbsPos(&kaps, packLong(data));
  7123  0115' 0800'              	movf	ProcessMsg@data^(0+128),w
  7124  0116' 3180' 2000' 3180'  	fcall	_packLong
  7125  0119' 0020               	movlb	0	; select bank0
  7126  011A' 0803'              	movf	?_packLong+3,w
  7127  011B' 0090'              	movwf	KAPS_setAbsPos@pos+3
  7128  011C' 0802'              	movf	?_packLong+2,w
  7129  011D' 008F'              	movwf	KAPS_setAbsPos@pos+2
  7130  011E' 0801'              	movf	?_packLong+1,w
  7131  011F' 008E'              	movwf	KAPS_setAbsPos@pos+1
  7132  0120' 0800'              	movf	?_packLong,w
  7133  0121' 008D'              	movwf	KAPS_setAbsPos@pos
  7134  0122' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7135  0123' 3180' 2000'        	fcall	_KAPS_setAbsPos
  7136                           
  7137                           ;main.c: 502:             break;
  7138  0125' 0008               	return
  7139  0126'                    l5341:
  7140                           
  7141                           ;main.c: 505:             KAPS_setRelPos(&kaps, packLong(data));
  7142  0126' 0800'              	movf	ProcessMsg@data^(0+128),w
  7143  0127' 3180' 2000' 3180'  	fcall	_packLong
  7144  012A' 0020               	movlb	0	; select bank0
  7145  012B' 0803'              	movf	?_packLong+3,w
  7146  012C' 0090'              	movwf	KAPS_setRelPos@offset+3
  7147  012D' 0802'              	movf	?_packLong+2,w
  7148  012E' 008F'              	movwf	KAPS_setRelPos@offset+2
  7149  012F' 0801'              	movf	?_packLong+1,w
  7150  0130' 008E'              	movwf	KAPS_setRelPos@offset+1
  7151  0131' 0800'              	movf	?_packLong,w
  7152  0132' 008D'              	movwf	KAPS_setRelPos@offset
  7153  0133' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7154  0134' 3180' 2000'        	fcall	_KAPS_setRelPos
  7155                           
  7156                           ;main.c: 506:             break;
  7157  0136' 0008               	return
  7158  0137'                    l5343:
  7159                           
  7160                           ;main.c: 509:             KAPS_StorePos(&kaps, data[4], packLong(data));
  7161  0137' 0800'              	movf	ProcessMsg@data^(0+128),w
  7162  0138' 0086               	movwf	6
  7163  0139' 0187               	clrf	7
  7164  013A' 3F44               	moviw [4]fsr1
  7165  013B' 0020               	movlb	0	; select bank0
  7166  013C' 008D'              	movwf	KAPS_StorePos@idx
  7167  013D' 0021               	movlb	1	; select bank1
  7168  013E' 0800'              	movf	ProcessMsg@data^(0+128),w
  7169  013F' 3180' 2000' 3180'  	fcall	_packLong
  7170  0142' 0020               	movlb	0	; select bank0
  7171  0143' 0803'              	movf	?_packLong+3,w
  7172  0144' 0091'              	movwf	KAPS_StorePos@pos+3
  7173  0145' 0802'              	movf	?_packLong+2,w
  7174  0146' 0090'              	movwf	KAPS_StorePos@pos+2
  7175  0147' 0801'              	movf	?_packLong+1,w
  7176  0148' 008F'              	movwf	KAPS_StorePos@pos+1
  7177  0149' 0800'              	movf	?_packLong,w
  7178  014A' 008E'              	movwf	KAPS_StorePos@pos
  7179  014B' 3000'              	movlw	(low (_kaps| 0))& (0+255)
  7180  014C' 3180' 2000'        	fcall	_KAPS_StorePos
  7181                           
  7182                           ;main.c: 510:             break;
  7183  014E' 0008               	return
  7184  014F'                    l5347:
  7185  014F' 0800'              	movf	ProcessMsg@msg_id^(0+128),w
  7186                           
  7187                           ; Switch size 1, requested type "simple"
  7188                           ; Number of cases is 11, Range of values is 1 to 17
  7189                           ; switch strategies available:
  7190                           ; Name         Instructions Cycles
  7191                           ; simple_byte           34    18 (average)
  7192                           ; direct_byte           43     9 (fixed)
  7193                           ; jumptable            263     9 (fixed)
  7194                           ;	Chosen strategy is simple_byte
  7195  0150' 3A01               	xorlw	1	; case 1
  7196  0151' 1903               	skipnz
  7197  0152' 2800'              	goto	l5335
  7198  0153' 3A03               	xorlw	3	; case 2
  7199  0154' 1903               	skipnz
  7200  0155' 2800'              	goto	l5293
  7201  0156' 3A01               	xorlw	1	; case 3
  7202  0157' 1903               	skipnz
  7203  0158' 2800'              	goto	l5299
  7204  0159' 3A07               	xorlw	7	; case 4
  7205  015A' 1903               	skipnz
  7206  015B' 2800'              	goto	l5307
  7207  015C' 3A01               	xorlw	1	; case 5
  7208  015D' 1903               	skipnz
  7209  015E' 2800'              	goto	l5317
  7210  015F' 3A03               	xorlw	3	; case 6
  7211  0160' 1903               	skipnz
  7212  0161' 2800'              	goto	l5323
  7213  0162' 3A01               	xorlw	1	; case 7
  7214  0163' 1903               	skipnz
  7215  0164' 2800'              	goto	l5337
  7216  0165' 3A0F               	xorlw	15	; case 8
  7217  0166' 1903               	skipnz
  7218  0167' 2800'              	goto	l5339
  7219  0168' 3A01               	xorlw	1	; case 9
  7220  0169' 1903               	skipnz
  7221  016A' 2800'              	goto	l5341
  7222  016B' 3A03               	xorlw	3	; case 10
  7223  016C' 1903               	skipnz
  7224  016D' 2800'              	goto	l5343
  7225  016E' 3A1B               	xorlw	27	; case 17
  7226  016F' 1903               	skipnz
  7227  0170' 2800'              	goto	l5329
  7228  0171' 2800'              	goto	l762
  7229  0172'                    l762:
  7230  0172' 0008               	return
  7231  0173'                    __end_of_ProcessMsg:
  7232                           
  7233                           	psect	text17
  7234  0000'                    __ptext17:	
  7235 ;; *************** function _unpackWord *****************
  7236 ;; Defined at:
  7237 ;;		line 214 in file "main.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  value           2    0[BANK0 ] unsigned short 
  7240 ;;  data            1    2[BANK0 ] PTR unsigned char 
  7241 ;;		 -> ProcessMsg@payload(6), 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr1l, fsr1h, status,2
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7253 ;;      Params:         0       3       0       0       0       0       0       0
  7254 ;;      Locals:         0       0       0       0       0       0       0       0
  7255 ;;      Temps:          0       0       0       0       0       0       0       0
  7256 ;;      Totals:         0       3       0       0       0       0       0       0
  7257 ;;Total ram usage:        3 bytes
  7258 ;; Hardware stack levels used: 1
  7259 ;; Hardware stack levels required when called: 7
  7260 ;; This function calls:
  7261 ;;		Nothing
  7262 ;; This function is called by:
  7263 ;;		_ProcessMsg
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267  0000'                    _unpackWord:	
  7268                           ;psect for function _unpackWord
  7269                           
  7270                           
  7271                           ;main.c: 216:     data[0] = value & 0xFF;
  7272                           
  7273                           ;incstack = 0
  7274                           ; Regs used in _unpackWord: [wreg+fsr1l+fsr1h+status,2]
  7275  0000' 0020               	movlb	0	; select bank0
  7276  0001' 0802'              	movf	unpackWord@data,w
  7277  0002' 0086               	movwf	6
  7278  0003' 0187               	clrf	7
  7279  0004' 0800'              	movf	unpackWord@value,w
  7280  0005' 0081               	movwf	1
  7281                           
  7282                           ;main.c: 217:     data[1] = (value >> 8) & 0xFF;
  7283  0006' 0A02'              	incf	unpackWord@data,w
  7284  0007' 0086               	movwf	6
  7285  0008' 0187               	clrf	7
  7286  0009' 0801'              	movf	unpackWord@value+1,w
  7287  000A' 0081               	movwf	1
  7288  000B' 0008               	return
  7289  000C'                    __end_of_unpackWord:
  7290                           
  7291                           	psect	text18
  7292  0000'                    __ptext18:	
  7293 ;; *************** function _unpackLong *****************
  7294 ;; Defined at:
  7295 ;;		line 200 in file "main.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;  value           4    0[BANK0 ] unsigned long 
  7298 ;;  data            1    4[BANK0 ] PTR unsigned char 
  7299 ;;		 -> ProcessMsg@payload(6), 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;		None
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  1    wreg      void 
  7304 ;; Registers used:
  7305 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7311 ;;      Params:         0       5       0       0       0       0       0       0
  7312 ;;      Locals:         0       0       0       0       0       0       0       0
  7313 ;;      Temps:          0       4       0       0       0       0       0       0
  7314 ;;      Totals:         0       9       0       0       0       0       0       0
  7315 ;;Total ram usage:        9 bytes
  7316 ;; Hardware stack levels used: 1
  7317 ;; Hardware stack levels required when called: 7
  7318 ;; This function calls:
  7319 ;;		Nothing
  7320 ;; This function is called by:
  7321 ;;		_ProcessMsg
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325  0000'                    _unpackLong:	
  7326                           ;psect for function _unpackLong
  7327                           
  7328                           
  7329                           ;main.c: 202:     data[0] = (value & 0XFF);
  7330                           
  7331                           ;incstack = 0
  7332                           ; Regs used in _unpackLong: [wreg+fsr1l+fsr1h+status,2+status,0]
  7333  0000' 0020               	movlb	0	; select bank0
  7334  0001' 0804'              	movf	unpackLong@data,w
  7335  0002' 0086               	movwf	6
  7336  0003' 0187               	clrf	7
  7337  0004' 0800'              	movf	unpackLong@value,w
  7338  0005' 0081               	movwf	1
  7339                           
  7340                           ;main.c: 203:     data[1] = (value >> 8) & 0xFF;
  7341  0006' 0A04'              	incf	unpackLong@data,w
  7342  0007' 0086               	movwf	6
  7343  0008' 0187               	clrf	7
  7344  0009' 0800'              	movf	unpackLong@value,w
  7345  000A' 0085'              	movwf	??_unpackLong
  7346  000B' 0801'              	movf	unpackLong@value+1,w
  7347  000C' 0086'              	movwf	??_unpackLong+1
  7348  000D' 0802'              	movf	unpackLong@value+2,w
  7349  000E' 0087'              	movwf	??_unpackLong+2
  7350  000F' 0803'              	movf	unpackLong@value+3,w
  7351  0010' 0088'              	movwf	??_unpackLong+3
  7352  0011' 3008               	movlw	8
  7353  0012'                    u4135:
  7354  0012' 3688'              	lsrf	??_unpackLong+3,f
  7355  0013' 0C87'              	rrf	??_unpackLong+2,f
  7356  0014' 0C86'              	rrf	??_unpackLong+1,f
  7357  0015' 0C85'              	rrf	??_unpackLong,f
  7358  0016' 0B89               	decfsz	9,f
  7359  0017' 2800'              	goto	u4135
  7360  0018' 0805'              	movf	??_unpackLong,w
  7361  0019' 0081               	movwf	1
  7362                           
  7363                           ;main.c: 204:     data[2] = (value >> 16) & 0xFF;
  7364  001A' 0804'              	movf	unpackLong@data,w
  7365  001B' 3E02               	addlw	2
  7366  001C' 0086               	movwf	6
  7367  001D' 0187               	clrf	7
  7368  001E' 0800'              	movf	unpackLong@value,w
  7369  001F' 0085'              	movwf	??_unpackLong
  7370  0020' 0801'              	movf	unpackLong@value+1,w
  7371  0021' 0086'              	movwf	??_unpackLong+1
  7372  0022' 0802'              	movf	unpackLong@value+2,w
  7373  0023' 0087'              	movwf	??_unpackLong+2
  7374  0024' 0803'              	movf	unpackLong@value+3,w
  7375  0025' 0088'              	movwf	??_unpackLong+3
  7376  0026' 3010               	movlw	16
  7377  0027'                    u4145:
  7378  0027' 3688'              	lsrf	??_unpackLong+3,f
  7379  0028' 0C87'              	rrf	??_unpackLong+2,f
  7380  0029' 0C86'              	rrf	??_unpackLong+1,f
  7381  002A' 0C85'              	rrf	??_unpackLong,f
  7382  002B' 0B89               	decfsz	9,f
  7383  002C' 2800'              	goto	u4145
  7384  002D' 0805'              	movf	??_unpackLong,w
  7385  002E' 0081               	movwf	1
  7386                           
  7387                           ;main.c: 205:     data[3] = (value >> 24) & 0xFF;
  7388  002F' 0804'              	movf	unpackLong@data,w
  7389  0030' 3E03               	addlw	3
  7390  0031' 0086               	movwf	6
  7391  0032' 0187               	clrf	7
  7392  0033' 0800'              	movf	unpackLong@value,w
  7393  0034' 0085'              	movwf	??_unpackLong
  7394  0035' 0801'              	movf	unpackLong@value+1,w
  7395  0036' 0086'              	movwf	??_unpackLong+1
  7396  0037' 0802'              	movf	unpackLong@value+2,w
  7397  0038' 0087'              	movwf	??_unpackLong+2
  7398  0039' 0803'              	movf	unpackLong@value+3,w
  7399  003A' 0088'              	movwf	??_unpackLong+3
  7400  003B' 3018               	movlw	24
  7401  003C'                    u4155:
  7402  003C' 3688'              	lsrf	??_unpackLong+3,f
  7403  003D' 0C87'              	rrf	??_unpackLong+2,f
  7404  003E' 0C86'              	rrf	??_unpackLong+1,f
  7405  003F' 0C85'              	rrf	??_unpackLong,f
  7406  0040' 0B89               	decfsz	9,f
  7407  0041' 2800'              	goto	u4155
  7408  0042' 0805'              	movf	??_unpackLong,w
  7409  0043' 0081               	movwf	1
  7410  0044' 0008               	return
  7411  0045'                    __end_of_unpackLong:
  7412                           
  7413                           	psect	text19
  7414  0000'                    __ptext19:	
  7415 ;; *************** function _packLong *****************
  7416 ;; Defined at:
  7417 ;;		line 167 in file "main.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;  data            1    wreg     PTR unsigned char 
  7420 ;;		 -> main@parser(12), 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  data            1   12[BANK0 ] PTR unsigned char 
  7423 ;;		 -> main@parser(12), 
  7424 ;;  result          4    8[BANK0 ] unsigned long 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  4    0[BANK0 ] unsigned long 
  7427 ;; Registers used:
  7428 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7434 ;;      Params:         0       4       0       0       0       0       0       0
  7435 ;;      Locals:         0       5       0       0       0       0       0       0
  7436 ;;      Temps:          0       4       0       0       0       0       0       0
  7437 ;;      Totals:         0      13       0       0       0       0       0       0
  7438 ;;Total ram usage:       13 bytes
  7439 ;; Hardware stack levels used: 1
  7440 ;; Hardware stack levels required when called: 7
  7441 ;; This function calls:
  7442 ;;		Nothing
  7443 ;; This function is called by:
  7444 ;;		_ProcessMsg
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448  0000'                    _packLong:	
  7449                           ;psect for function _packLong
  7450                           
  7451                           
  7452                           ;incstack = 0
  7453                           ; Regs used in _packLong: [wreg+fsr1l+fsr1h+status,2+status,0]
  7454                           ;packLong@data stored from wreg
  7455  0000' 0020               	movlb	0	; select bank0
  7456  0001' 008C'              	movwf	packLong@data
  7457                           
  7458                           ;main.c: 171:     result = (uint32_t) data[0] << 24;
  7459  0002' 080C'              	movf	packLong@data,w
  7460  0003' 0086               	movwf	6
  7461  0004' 0187               	clrf	7
  7462  0005' 0801               	movf	1,w
  7463  0006' 0084'              	movwf	??_packLong
  7464  0007' 0185'              	clrf	??_packLong+1
  7465  0008' 0186'              	clrf	??_packLong+2
  7466  0009' 0187'              	clrf	??_packLong+3
  7467  000A' 3018               	movlw	24
  7468  000B'                    u4105:
  7469  000B' 3584'              	lslf	??_packLong,f
  7470  000C' 0D85'              	rlf	??_packLong+1,f
  7471  000D' 0D86'              	rlf	??_packLong+2,f
  7472  000E' 0D87'              	rlf	??_packLong+3,f
  7473  000F' 0B89               	decfsz	9,f
  7474  0010' 2800'              	goto	u4105
  7475  0011' 0807'              	movf	??_packLong+3,w
  7476  0012' 008B'              	movwf	packLong@result+3
  7477  0013' 0806'              	movf	??_packLong+2,w
  7478  0014' 008A'              	movwf	packLong@result+2
  7479  0015' 0805'              	movf	??_packLong+1,w
  7480  0016' 0089'              	movwf	packLong@result+1
  7481  0017' 0804'              	movf	??_packLong,w
  7482  0018' 0088'              	movwf	packLong@result
  7483                           
  7484                           ;main.c: 172:     result |= (uint32_t) data[1] << 16;
  7485  0019' 0A0C'              	incf	packLong@data,w
  7486  001A' 0086               	movwf	6
  7487  001B' 0187               	clrf	7
  7488  001C' 0801               	movf	1,w
  7489  001D' 0084'              	movwf	??_packLong
  7490  001E' 0185'              	clrf	??_packLong+1
  7491  001F' 0186'              	clrf	??_packLong+2
  7492  0020' 0187'              	clrf	??_packLong+3
  7493  0021' 3010               	movlw	16
  7494  0022'                    u4115:
  7495  0022' 3584'              	lslf	??_packLong,f
  7496  0023' 0D85'              	rlf	??_packLong+1,f
  7497  0024' 0D86'              	rlf	??_packLong+2,f
  7498  0025' 0D87'              	rlf	??_packLong+3,f
  7499  0026' 0B89               	decfsz	9,f
  7500  0027' 2800'              	goto	u4115
  7501  0028' 0804'              	movf	??_packLong,w
  7502  0029' 0488'              	iorwf	packLong@result,f
  7503  002A' 0805'              	movf	??_packLong+1,w
  7504  002B' 0489'              	iorwf	packLong@result+1,f
  7505  002C' 0806'              	movf	??_packLong+2,w
  7506  002D' 048A'              	iorwf	packLong@result+2,f
  7507  002E' 0807'              	movf	??_packLong+3,w
  7508  002F' 048B'              	iorwf	packLong@result+3,f
  7509                           
  7510                           ;main.c: 173:     result |= (uint32_t) data[2] << 8;
  7511  0030' 080C'              	movf	packLong@data,w
  7512  0031' 3E02               	addlw	2
  7513  0032' 0086               	movwf	6
  7514  0033' 0187               	clrf	7
  7515  0034' 0801               	movf	1,w
  7516  0035' 0084'              	movwf	??_packLong
  7517  0036' 0185'              	clrf	??_packLong+1
  7518  0037' 0186'              	clrf	??_packLong+2
  7519  0038' 0187'              	clrf	??_packLong+3
  7520  0039' 3008               	movlw	8
  7521  003A'                    u4125:
  7522  003A' 3584'              	lslf	??_packLong,f
  7523  003B' 0D85'              	rlf	??_packLong+1,f
  7524  003C' 0D86'              	rlf	??_packLong+2,f
  7525  003D' 0D87'              	rlf	??_packLong+3,f
  7526  003E' 0B89               	decfsz	9,f
  7527  003F' 2800'              	goto	u4125
  7528  0040' 0804'              	movf	??_packLong,w
  7529  0041' 0488'              	iorwf	packLong@result,f
  7530  0042' 0805'              	movf	??_packLong+1,w
  7531  0043' 0489'              	iorwf	packLong@result+1,f
  7532  0044' 0806'              	movf	??_packLong+2,w
  7533  0045' 048A'              	iorwf	packLong@result+2,f
  7534  0046' 0807'              	movf	??_packLong+3,w
  7535  0047' 048B'              	iorwf	packLong@result+3,f
  7536                           
  7537                           ;main.c: 174:     result |= (uint32_t) data[3];
  7538  0048' 080C'              	movf	packLong@data,w
  7539  0049' 3E03               	addlw	3
  7540  004A' 0086               	movwf	6
  7541  004B' 0187               	clrf	7
  7542  004C' 0801               	movf	1,w
  7543  004D' 0488'              	iorwf	packLong@result,f
  7544                           
  7545                           ;main.c: 176:     return result;
  7546  004E' 080B'              	movf	packLong@result+3,w
  7547  004F' 0083'              	movwf	?_packLong+3
  7548  0050' 080A'              	movf	packLong@result+2,w
  7549  0051' 0082'              	movwf	?_packLong+2
  7550  0052' 0809'              	movf	packLong@result+1,w
  7551  0053' 0081'              	movwf	?_packLong+1
  7552  0054' 0808'              	movf	packLong@result,w
  7553  0055' 0080'              	movwf	?_packLong
  7554  0056' 0008               	return
  7555  0057'                    __end_of_packLong:
  7556                           
  7557                           	psect	text20
  7558  0000'                    __ptext20:	
  7559 ;; *************** function _SendMsg *****************
  7560 ;; Defined at:
  7561 ;;		line 418 in file "main.c"
  7562 ;; Parameters:    Size  Location     Type
  7563 ;;  msg_id          1    wreg     unsigned char 
  7564 ;;  data            1    1[BANK0 ] PTR unsigned char 
  7565 ;;		 -> main@parser(12), ProcessMsg@payload(6), SendNack@error(1), 
  7566 ;;  data_len        1    2[BANK0 ] unsigned char 
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;  msg_id          1    5[BANK0 ] unsigned char 
  7569 ;;  sum             1    4[BANK0 ] unsigned char 
  7570 ;; Return value:  Size  Location     Type
  7571 ;;                  1    wreg      void 
  7572 ;; Registers used:
  7573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7574 ;; Tracked objects:
  7575 ;;		On entry : 0/0
  7576 ;;		On exit  : 0/0
  7577 ;;		Unchanged: 0/0
  7578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7579 ;;      Params:         0       2       0       0       0       0       0       0
  7580 ;;      Locals:         0       2       0       0       0       0       0       0
  7581 ;;      Temps:          0       1       0       0       0       0       0       0
  7582 ;;      Totals:         0       5       0       0       0       0       0       0
  7583 ;;Total ram usage:        5 bytes
  7584 ;; Hardware stack levels used: 1
  7585 ;; Hardware stack levels required when called: 8
  7586 ;; This function calls:
  7587 ;;		_EUSART_Write
  7588 ;; This function is called by:
  7589 ;;		_SendNack
  7590 ;;		_ProcessMsg
  7591 ;;		_Parse
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595  0000'                    _SendMsg:	
  7596                           ;psect for function _SendMsg
  7597                           
  7598                           
  7599                           ;incstack = 0
  7600                           ; Regs used in _SendMsg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7601                           ;SendMsg@msg_id stored from wreg
  7602  0000' 0020               	movlb	0	; select bank0
  7603  0001' 0085'              	movwf	SendMsg@msg_id
  7604                           
  7605                           ;main.c: 419:     uint8_t sum = 0x00;
  7606  0002' 0184'              	clrf	SendMsg@sum
  7607                           
  7608                           ;main.c: 421:     EUSART_Write(0x01);
  7609  0003' 0180'              	clrf	EUSART_Write@txData
  7610  0004' 0A80'              	incf	EUSART_Write@txData,f
  7611  0005' 3180' 2000' 3180'  	fcall	_EUSART_Write
  7612                           
  7613                           ;main.c: 422:     EUSART_Write(msg_id);
  7614  0008' 0020               	movlb	0	; select bank0
  7615  0009' 0805'              	movf	SendMsg@msg_id,w
  7616  000A' 0080'              	movwf	EUSART_Write@txData
  7617  000B' 3180' 2000' 3180'  	fcall	_EUSART_Write
  7618                           
  7619                           ;main.c: 424:     if (msg_id == RFDU_NVT_NACK)
  7620  000E' 300B               	movlw	11
  7621  000F' 0020               	movlb	0	; select bank0
  7622  0010' 0605'              	xorwf	SendMsg@msg_id,w
  7623  0011' 1903               	btfsc	3,2
  7624  0012' 0008               	return
  7625  0013'                    l5171:
  7626                           
  7627                           ;main.c: 427:     for (; data_len > 0; data_len--) {
  7628  0013' 0802'              	movf	SendMsg@data_len,w
  7629  0014' 1903               	btfsc	3,2
  7630  0015' 2800'              	goto	l5185
  7631                           
  7632                           ;main.c: 428:         EUSART_Write(*data);
  7633  0016' 0801'              	movf	SendMsg@data,w
  7634  0017' 0086               	movwf	6
  7635  0018' 0187               	clrf	7
  7636  0019' 0801               	movf	1,w
  7637  001A' 0080'              	movwf	EUSART_Write@txData
  7638  001B' 3180' 2000' 3180'  	fcall	_EUSART_Write
  7639                           
  7640                           ;main.c: 429:         sum += *data;
  7641  001E' 0020               	movlb	0	; select bank0
  7642  001F' 0801'              	movf	SendMsg@data,w
  7643  0020' 0086               	movwf	6
  7644  0021' 0187               	clrf	7
  7645  0022' 0801               	movf	1,w
  7646  0023' 0083'              	movwf	??_SendMsg
  7647  0024' 0803'              	movf	??_SendMsg,w
  7648  0025' 0784'              	addwf	SendMsg@sum,f
  7649                           
  7650                           ;main.c: 430:         data++;
  7651  0026' 3001               	movlw	1
  7652  0027' 0083'              	movwf	??_SendMsg
  7653  0028' 0803'              	movf	??_SendMsg,w
  7654  0029' 0781'              	addwf	SendMsg@data,f
  7655                           
  7656                           ;main.c: 431:     }
  7657  002A' 3001               	movlw	1
  7658  002B' 0282'              	subwf	SendMsg@data_len,f
  7659  002C' 2800'              	goto	l5171
  7660  002D'                    l5185:
  7661                           
  7662                           ;main.c: 433:     EUSART_Write(sum);
  7663  002D' 0804'              	movf	SendMsg@sum,w
  7664  002E' 0080'              	movwf	EUSART_Write@txData
  7665  002F' 3180' 2000'        	fcall	_EUSART_Write
  7666  0031' 0008               	return
  7667  0032'                    __end_of_SendMsg:
  7668                           
  7669                           	psect	text21
  7670  0000'                    __ptext21:	
  7671 ;; *************** function _EUSART_Write *****************
  7672 ;; Defined at:
  7673 ;;		line 235 in file "mcc_generated_files/uart/src/eusart.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;  txData          1    0[BANK0 ] unsigned char 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;		None
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      void 
  7680 ;; Registers used:
  7681 ;;		wreg
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7687 ;;      Params:         0       1       0       0       0       0       0       0
  7688 ;;      Locals:         0       0       0       0       0       0       0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0       0
  7690 ;;      Totals:         0       1       0       0       0       0       0       0
  7691 ;;Total ram usage:        1 bytes
  7692 ;; Hardware stack levels used: 1
  7693 ;; Hardware stack levels required when called: 7
  7694 ;; This function calls:
  7695 ;;		Nothing
  7696 ;; This function is called by:
  7697 ;;		_SendMsg
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701  0000'                    _EUSART_Write:	
  7702                           ;psect for function _EUSART_Write
  7703                           
  7704                           
  7705                           ;mcc_generated_files/uart/src/eusart.c: 235: void EUSART_Write(uint8_t txData);mcc_gener
      +                          ated_files/uart/src/eusart.c: 236: {;mcc_generated_files/uart/src/eusart.c: 237:     TX1
      +                          REG = txData;
  7706                           
  7707                           ;incstack = 0
  7708                           ; Regs used in _EUSART_Write: [wreg]
  7709  0000' 0020               	movlb	0	; select bank0
  7710  0001' 0800'              	movf	EUSART_Write@txData,w
  7711  0002' 0023               	movlb	3	; select bank3
  7712  0003' 009A               	movwf	26	;volatile
  7713  0004' 0008               	return
  7714  0005'                    __end_of_EUSART_Write:
  7715                           
  7716                           	psect	text22
  7717  0000'                    __ptext22:	
  7718 ;; *************** function _SSPA_setMute *****************
  7719 ;; Defined at:
  7720 ;;		line 254 in file "main.c"
  7721 ;; Parameters:    Size  Location     Type
  7722 ;;  sspa            1    wreg     PTR struct .
  7723 ;;		 -> sppas(24), 
  7724 ;;  band            1    0[BANK0 ] unsigned char 
  7725 ;;  mute            1    1[BANK0 ] enum E9987
  7726 ;; Auto vars:     Size  Location     Type
  7727 ;;  sspa            1    2[BANK0 ] PTR struct .
  7728 ;;		 -> sppas(24), 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      void 
  7731 ;; Registers used:
  7732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7738 ;;      Params:         0       2       0       0       0       0       0       0
  7739 ;;      Locals:         0       1       0       0       0       0       0       0
  7740 ;;      Temps:          0       0       0       0       0       0       0       0
  7741 ;;      Totals:         0       3       0       0       0       0       0       0
  7742 ;;Total ram usage:        3 bytes
  7743 ;; Hardware stack levels used: 1
  7744 ;; Hardware stack levels required when called: 7
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_ProcessMsg
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752  0000'                    _SSPA_setMute:	
  7753                           ;psect for function _SSPA_setMute
  7754                           
  7755                           
  7756                           ;incstack = 0
  7757                           ; Regs used in _SSPA_setMute: [wreg-fsr1h+status,2+status,0]
  7758                           ;SSPA_setMute@sspa stored from wreg
  7759  0000' 0020               	movlb	0	; select bank0
  7760  0001' 0082'              	movwf	SSPA_setMute@sspa
  7761                           
  7762                           ;main.c: 256:     switch (band) {
  7763  0002' 2800'              	goto	l5105
  7764  0003'                    l5099:
  7765                           
  7766                           ;main.c: 258:             if (mute == UNMUTE)
  7767  0003' 0801'              	movf	SSPA_setMute@mute,w
  7768  0004' 1D03               	btfss	3,2
  7769  0005' 2800'              	goto	l682
  7770                           
  7771                           ;main.c: 259:                 do { LATCbits.LATC7 = 1; } while(0);
  7772  0006' 0022               	movlb	2	; select bank2
  7773  0007' 178E               	bsf	14,7	;volatile
  7774  0008' 2800'              	goto	l5107
  7775  0009'                    l682:	
  7776                           ;main.c: 261:                 do { LATCbits.LATC7 = 0; } while(0);
  7777                           
  7778  0009' 0022               	movlb	2	; select bank2
  7779  000A' 138E               	bcf	14,7	;volatile
  7780  000B' 2800'              	goto	l5107
  7781  000C'                    l5101:
  7782                           
  7783                           ;main.c: 265:             if (mute == UNMUTE)
  7784  000C' 0801'              	movf	SSPA_setMute@mute,w
  7785  000D' 1D03               	btfss	3,2
  7786  000E' 2800'              	goto	l690
  7787                           
  7788                           ;main.c: 266:                 do { LATCbits.LATC6 = 1; } while(0);
  7789  000F' 0022               	movlb	2	; select bank2
  7790  0010' 170E               	bsf	14,6	;volatile
  7791  0011' 2800'              	goto	l5107
  7792  0012'                    l690:	
  7793                           ;main.c: 268:                 do { LATCbits.LATC6 = 0; } while(0);
  7794                           
  7795  0012' 0022               	movlb	2	; select bank2
  7796  0013' 130E               	bcf	14,6	;volatile
  7797  0014' 2800'              	goto	l5107
  7798  0015'                    l5105:
  7799  0015' 0800'              	movf	SSPA_setMute@band,w
  7800                           
  7801                           ; Switch size 1, requested type "simple"
  7802                           ; Number of cases is 3, Range of values is 0 to 2
  7803                           ; switch strategies available:
  7804                           ; Name         Instructions Cycles
  7805                           ; simple_byte           10     6 (average)
  7806                           ; direct_byte           12     6 (fixed)
  7807                           ; jumptable            260     6 (fixed)
  7808                           ;	Chosen strategy is simple_byte
  7809  0016' 3A00               	xorlw	0	; case 0
  7810  0017' 1903               	skipnz
  7811  0018' 2800'              	goto	l5107
  7812  0019' 3A01               	xorlw	1	; case 1
  7813  001A' 1903               	skipnz
  7814  001B' 2800'              	goto	l5099
  7815  001C' 3A03               	xorlw	3	; case 2
  7816  001D' 1903               	skipnz
  7817  001E' 2800'              	goto	l5101
  7818  001F' 2800'              	goto	l5107
  7819  0020'                    l5107:
  7820                           
  7821                           ;main.c: 276:     sspa->m_Mute = mute;
  7822  0020' 0020               	movlb	0	; select bank0
  7823  0021' 0802'              	movf	SSPA_setMute@sspa,w
  7824  0022' 0086               	movwf	6
  7825  0023' 3001               	movlw	1	; select bank2/3
  7826  0024' 0087               	movwf	7
  7827  0025' 0801'              	movf	SSPA_setMute@mute,w
  7828  0026' 0081               	movwf	1
  7829  0027' 0008               	return
  7830  0028'                    __end_of_SSPA_setMute:
  7831                           
  7832                           	psect	text23
  7833  0000'                    __ptext23:	
  7834 ;; *************** function _SSPA_getTemp *****************
  7835 ;; Defined at:
  7836 ;;		line 284 in file "main.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;  sspa            1    wreg     PTR struct .
  7839 ;;		 -> sppas(24), 
  7840 ;;  band            1    4[BANK1 ] unsigned char 
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;  sspa            1    9[BANK1 ] PTR struct .
  7843 ;;		 -> sppas(24), 
  7844 ;;  adc_value       2    7[BANK1 ] unsigned short 
  7845 ;;  channel         1   10[BANK1 ] enum E9222
  7846 ;; Return value:  Size  Location     Type
  7847 ;;                  1    wreg      void 
  7848 ;; Registers used:
  7849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7850 ;; Tracked objects:
  7851 ;;		On entry : 0/0
  7852 ;;		On exit  : 0/0
  7853 ;;		Unchanged: 0/0
  7854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7855 ;;      Params:         0       0       1       0       0       0       0       0
  7856 ;;      Locals:         0       0       4       0       0       0       0       0
  7857 ;;      Temps:          0       0       2       0       0       0       0       0
  7858 ;;      Totals:         0       0       7       0       0       0       0       0
  7859 ;;Total ram usage:        7 bytes
  7860 ;; Hardware stack levels used: 1
  7861 ;; Hardware stack levels required when called: 14
  7862 ;; This function calls:
  7863 ;;		___assert_fail
  7864 ;;		___fldiv
  7865 ;;		___flmul
  7866 ;;		___flsub
  7867 ;;		___fltol
  7868 ;;		___xxtofl
  7869 ;;		_getADCValue
  7870 ;; This function is called by:
  7871 ;;		_ProcessMsg
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875  0000'                    _SSPA_getTemp:	
  7876                           ;psect for function _SSPA_getTemp
  7877                           
  7878                           
  7879                           ;incstack = 0
  7880 ;; hardware stack exceeded
  7881                           ; Regs used in _SSPA_getTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7882                           ;SSPA_getTemp@sspa stored from wreg
  7883  0000' 0021               	movlb	1	; select bank1
  7884  0001' 0080'              	movwf	SSPA_getTemp@sspa^(0+128)
  7885                           
  7886                           ;main.c: 285:     adc_channel_t channel;;main.c: 286:     adc_result_t adc_value;;main.c
      +                          : 288:     switch (band) {
  7887  0002' 2800'              	goto	l5117
  7888  0003'                    l5111:
  7889                           
  7890                           ;main.c: 290:             channel = TM_Ka;
  7891  0003' 3003               	movlw	3
  7892  0004' 2800'              	goto	L1
  7893  0005'                    l5113:	
  7894                           ;main.c: 292:             break;
  7895                           
  7896                           
  7897                           ;main.c: 294:             channel = TM_X;
  7898  0005' 3007               	movlw	7
  7899  0006'                    L1:
  7900  0006' 0080'              	movwf	SSPA_getTemp@channel^(0+128)
  7901                           
  7902                           ;main.c: 295:             break;
  7903  0007' 2800'              	goto	l5119
  7904  0008'                    l5117:
  7905  0008' 0800'              	movf	SSPA_getTemp@band^(0+128),w
  7906                           
  7907                           ; Switch size 1, requested type "simple"
  7908                           ; Number of cases is 3, Range of values is 0 to 2
  7909                           ; switch strategies available:
  7910                           ; Name         Instructions Cycles
  7911                           ; simple_byte           10     6 (average)
  7912                           ; direct_byte           12     6 (fixed)
  7913                           ; jumptable            260     6 (fixed)
  7914                           ;	Chosen strategy is simple_byte
  7915  0009' 3A00               	xorlw	0	; case 0
  7916  000A' 1903               	skipnz
  7917  000B' 2800'              	goto	l5119
  7918  000C' 3A01               	xorlw	1	; case 1
  7919  000D' 1903               	skipnz
  7920  000E' 2800'              	goto	l5111
  7921  000F' 3A03               	xorlw	3	; case 2
  7922  0010' 1903               	skipnz
  7923  0011' 2800'              	goto	l5113
  7924  0012' 2800'              	goto	l5119
  7925  0013'                    l5119:
  7926                           
  7927                           ;main.c: 302:     ((void)((channel == TM_Ka || channel == TM_X) || (__assert_fail("chann
      +                          el == TM_Ka || channel == TM_X", "main.c", 302, __func__),0)));
  7928  0013' 3003               	movlw	3
  7929  0014' 0600'              	xorwf	SSPA_getTemp@channel^(0+128),w
  7930  0015' 1903               	btfsc	3,2
  7931  0016' 2800'              	goto	l5125
  7932  0017' 3007               	movlw	7
  7933  0018' 0600'              	xorwf	SSPA_getTemp@channel^(0+128),w
  7934  0019' 1903               	btfsc	3,2
  7935  001A' 2800'              	goto	l5125
  7936  001B' 3000'              	movlw	low (STR_7| (0+32768))
  7937  001C' 0020               	movlb	0	; select bank0
  7938  001D' 00B0'              	movwf	___assert_fail@expr
  7939  001E' 3000'              	movlw	high (STR_7| (0+32768))
  7940  001F' 00B1'              	movwf	___assert_fail@expr+1
  7941  0020' 3000'              	movlw	low (STR_2| (0+32768))
  7942  0021' 00B2'              	movwf	___assert_fail@file
  7943  0022' 3000'              	movlw	high (STR_2| (0+32768))
  7944  0023' 00B3'              	movwf	___assert_fail@file+1
  7945  0024' 302E               	movlw	46
  7946  0025' 00B4'              	movwf	___assert_fail@line
  7947  0026' 3001               	movlw	1
  7948  0027' 00B5'              	movwf	___assert_fail@line+1
  7949  0028' 3000'              	movlw	low (STR_9| (0+32768))
  7950  0029' 00B6'              	movwf	___assert_fail@func
  7951  002A' 3000'              	movlw	high (STR_9| (0+32768))
  7952  002B' 00B7'              	movwf	___assert_fail@func+1
  7953  002C' 3180' 2000' 3180'  	fcall	___assert_fail
  7954  002F'                    l5125:
  7955                           
  7956                           ;main.c: 303:     adc_value = getADCValue(channel);
  7957  002F' 0021               	movlb	1	; select bank1
  7958  0030' 0800'              	movf	SSPA_getTemp@channel^(0+128),w
  7959  0031' 3180' 2000' 3180'  	fcall	_getADCValue
  7960  0034' 0020               	movlb	0	; select bank0
  7961  0035' 0839'              	movf	?_getADCValue+1,w
  7962  0036' 0021               	movlb	1	; select bank1
  7963  0037' 0080'              	movwf	(SSPA_getTemp@adc_value+1)^(0+128)
  7964  0038' 0020               	movlb	0	; select bank0
  7965  0039' 0838'              	movf	?_getADCValue,w
  7966  003A' 0021               	movlb	1	; select bank1
  7967  003B' 0080'              	movwf	SSPA_getTemp@adc_value^(0+128)
  7968                           
  7969                           ;main.c: 305:     sspa->m_wTemp = (uint16_t)(int16_t) ((0 - 4.3 * (1024 - (adc_value))) 
      +                          / 1);
  7970  003C' 3000               	movlw	0
  7971  003D' 0020               	movlb	0	; select bank0
  7972  003E' 00AF'              	movwf	___flsub@b+3
  7973  003F' 3000               	movlw	0
  7974  0040' 00AE'              	movwf	___flsub@b+2
  7975  0041' 3000               	movlw	0
  7976  0042' 00AD'              	movwf	___flsub@b+1
  7977  0043' 3000               	movlw	0
  7978  0044' 00AC'              	movwf	___flsub@b
  7979  0045' 3000               	movlw	0
  7980  0046' 0021               	movlb	1	; select bank1
  7981  0047' 0080'              	movwf	??_SSPA_getTemp^(0+128)
  7982  0048' 3004               	movlw	4
  7983  0049' 0081'              	movwf	(??_SSPA_getTemp^(0+128)+1)
  7984  004A' 0800'              	movf	SSPA_getTemp@adc_value^(0+128),w
  7985  004B' 0200'              	subwf	??_SSPA_getTemp^(0+128),w
  7986  004C' 0020               	movlb	0	; select bank0
  7987  004D' 0080'              	movwf	___xxtofl@val
  7988  004E' 0021               	movlb	1	; select bank1
  7989  004F' 0800'              	movf	(SSPA_getTemp@adc_value+1)^(0+128),w
  7990  0050' 3B00'              	subwfb	(??_SSPA_getTemp+1)^(0+128),w
  7991  0051' 0020               	movlb	0	; select bank0
  7992  0052' 0081'              	movwf	___xxtofl@val+1
  7993  0053' 0182'              	clrf	___xxtofl@val+2
  7994  0054' 0183'              	clrf	___xxtofl@val+3
  7995  0055' 3000               	movlw	0
  7996  0056' 3180' 2000' 3180'  	fcall	___xxtofl
  7997  0059' 0020               	movlb	0	; select bank0
  7998  005A' 0803'              	movf	?___xxtofl+3,w
  7999  005B' 0095'              	movwf	___flmul@a+3
  8000  005C' 0802'              	movf	?___xxtofl+2,w
  8001  005D' 0094'              	movwf	___flmul@a+2
  8002  005E' 0801'              	movf	?___xxtofl+1,w
  8003  005F' 0093'              	movwf	___flmul@a+1
  8004  0060' 0800'              	movf	?___xxtofl,w
  8005  0061' 0092'              	movwf	___flmul@a
  8006  0062' 3040               	movlw	64
  8007  0063' 0091'              	movwf	___flmul@b+3
  8008  0064' 3089               	movlw	137
  8009  0065' 0090'              	movwf	___flmul@b+2
  8010  0066' 3099               	movlw	153
  8011  0067' 008F'              	movwf	___flmul@b+1
  8012  0068' 309A               	movlw	154
  8013  0069' 008E'              	movwf	___flmul@b
  8014  006A' 3180' 2000' 3180'  	fcall	___flmul
  8015  006D' 0020               	movlb	0	; select bank0
  8016  006E' 0811'              	movf	?___flmul+3,w
  8017  006F' 00AB'              	movwf	___flsub@a+3
  8018  0070' 0810'              	movf	?___flmul+2,w
  8019  0071' 00AA'              	movwf	___flsub@a+2
  8020  0072' 080F'              	movf	?___flmul+1,w
  8021  0073' 00A9'              	movwf	___flsub@a+1
  8022  0074' 080E'              	movf	?___flmul,w
  8023  0075' 00A8'              	movwf	___flsub@a
  8024  0076' 3180' 2000' 3180'  	fcall	___flsub
  8025  0079' 0020               	movlb	0	; select bank0
  8026  007A' 082B'              	movf	?___flsub+3,w
  8027  007B' 00B7'              	movwf	___fldiv@b+3
  8028  007C' 082A'              	movf	?___flsub+2,w
  8029  007D' 00B6'              	movwf	___fldiv@b+2
  8030  007E' 0829'              	movf	?___flsub+1,w
  8031  007F' 00B5'              	movwf	___fldiv@b+1
  8032  0080' 0828'              	movf	?___flsub,w
  8033  0081' 00B4'              	movwf	___fldiv@b
  8034  0082' 303F               	movlw	63
  8035  0083' 00B3'              	movwf	___fldiv@a+3
  8036  0084' 3080               	movlw	128
  8037  0085' 00B2'              	movwf	___fldiv@a+2
  8038  0086' 3000               	movlw	0
  8039  0087' 00B1'              	movwf	___fldiv@a+1
  8040  0088' 3000               	movlw	0
  8041  0089' 00B0'              	movwf	___fldiv@a
  8042  008A' 3180' 2000' 3180'  	fcall	___fldiv
  8043  008D' 0020               	movlb	0	; select bank0
  8044  008E' 0833'              	movf	?___fldiv+3,w
  8045  008F' 00CD'              	movwf	___fltol@f1+3
  8046  0090' 0832'              	movf	?___fldiv+2,w
  8047  0091' 00CC'              	movwf	___fltol@f1+2
  8048  0092' 0831'              	movf	?___fldiv+1,w
  8049  0093' 00CB'              	movwf	___fltol@f1+1
  8050  0094' 0830'              	movf	?___fldiv,w
  8051  0095' 00CA'              	movwf	___fltol@f1
  8052  0096' 3180' 2000'        	fcall	___fltol
  8053  0098' 0021               	movlb	1	; select bank1
  8054  0099' 0A00'              	incf	SSPA_getTemp@sspa^(0+128),w
  8055  009A' 0086               	movwf	6
  8056  009B' 3001               	movlw	1	; select bank2/3
  8057  009C' 0087               	movwf	7
  8058  009D' 0020               	movlb	0	; select bank0
  8059  009E' 084A'              	movf	?___fltol,w
  8060  009F' 3FC0               	movwi [0]fsr1
  8061  00A0' 084B'              	movf	?___fltol+1,w
  8062  00A1' 3FC1               	movwi [1]fsr1
  8063  00A2' 0008               	return
  8064  00A3'                    __end_of_SSPA_getTemp:
  8065                           
  8066                           	psect	text24
  8067  0000'                    __ptext24:	
  8068 ;; *************** function _SSPA_getPOut *****************
  8069 ;; Defined at:
  8070 ;;		line 313 in file "main.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  sspa            1    wreg     PTR struct .
  8073 ;;		 -> sppas(24), 
  8074 ;;  band            1    4[BANK1 ] unsigned char 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  sspa            1    7[BANK1 ] PTR struct .
  8077 ;;		 -> sppas(24), 
  8078 ;;  adc_value       2    8[BANK1 ] unsigned short 
  8079 ;;  channel         1   10[BANK1 ] enum E9222
  8080 ;; Return value:  Size  Location     Type
  8081 ;;                  1    wreg      void 
  8082 ;; Registers used:
  8083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8084 ;; Tracked objects:
  8085 ;;		On entry : 0/0
  8086 ;;		On exit  : 0/0
  8087 ;;		Unchanged: 0/0
  8088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8089 ;;      Params:         0       0       1       0       0       0       0       0
  8090 ;;      Locals:         0       0       4       0       0       0       0       0
  8091 ;;      Temps:          0       0       2       0       0       0       0       0
  8092 ;;      Totals:         0       0       7       0       0       0       0       0
  8093 ;;Total ram usage:        7 bytes
  8094 ;; Hardware stack levels used: 1
  8095 ;; Hardware stack levels required when called: 14
  8096 ;; This function calls:
  8097 ;;		___assert_fail
  8098 ;;		___fldiv
  8099 ;;		___flmul
  8100 ;;		___flsub
  8101 ;;		___fltol
  8102 ;;		___xxtofl
  8103 ;;		_getADCValue
  8104 ;; This function is called by:
  8105 ;;		_ProcessMsg
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109  0000'                    _SSPA_getPOut:	
  8110                           ;psect for function _SSPA_getPOut
  8111                           
  8112                           
  8113                           ;main.c: 314:     adc_channel_t channel;;main.c: 315:     adc_result_t adc_value;;main.c
      +                          : 317:     switch (band) {
  8114                           
  8115                           ;incstack = 0
  8116 ;; hardware stack exceeded
  8117                           ; Regs used in _SSPA_getPOut: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8118  0000' 2800'              	goto	l5149
  8119  0001'                    l709:	
  8120                           ;main.c: 318:         case 1:
  8121                           
  8122                           
  8123                           ;main.c: 319:             channel = CS_Ka;
  8124  0001' 0180'              	clrf	SSPA_getPOut@channel^(0+128)
  8125  0002' 0A80'              	incf	SSPA_getPOut@channel^(0+128),f
  8126                           
  8127                           ;main.c: 320:             adc_value = getADCValue(channel);
  8128  0003' 3001               	movlw	1
  8129  0004' 3180' 2000' 3180'  	fcall	_getADCValue
  8130  0007' 0020               	movlb	0	; select bank0
  8131  0008' 0839'              	movf	?_getADCValue+1,w
  8132  0009' 0021               	movlb	1	; select bank1
  8133  000A' 0080'              	movwf	(SSPA_getPOut@adc_value+1)^(0+128)
  8134  000B' 0020               	movlb	0	; select bank0
  8135  000C' 0838'              	movf	?_getADCValue,w
  8136  000D' 0021               	movlb	1	; select bank1
  8137  000E' 0080'              	movwf	SSPA_getPOut@adc_value^(0+128)
  8138                           
  8139                           ;main.c: 321:             sppas->m_lCurrent = (uint32_t)(int16_t) ((0 - 4.3 * (1024 - (a
      +                          dc_value))) / 1);
  8140  000F' 3000               	movlw	0
  8141  0010' 0020               	movlb	0	; select bank0
  8142  0011' 00AF'              	movwf	___flsub@b+3
  8143  0012' 3000               	movlw	0
  8144  0013' 00AE'              	movwf	___flsub@b+2
  8145  0014' 3000               	movlw	0
  8146  0015' 00AD'              	movwf	___flsub@b+1
  8147  0016' 3000               	movlw	0
  8148  0017' 00AC'              	movwf	___flsub@b
  8149  0018' 3000               	movlw	0
  8150  0019' 0021               	movlb	1	; select bank1
  8151  001A' 0080'              	movwf	??_SSPA_getPOut^(0+128)
  8152  001B' 3004               	movlw	4
  8153  001C' 0081'              	movwf	(??_SSPA_getPOut^(0+128)+1)
  8154  001D' 0800'              	movf	SSPA_getPOut@adc_value^(0+128),w
  8155  001E' 0200'              	subwf	??_SSPA_getPOut^(0+128),w
  8156  001F' 0020               	movlb	0	; select bank0
  8157  0020' 0080'              	movwf	___xxtofl@val
  8158  0021' 0021               	movlb	1	; select bank1
  8159  0022' 0800'              	movf	(SSPA_getPOut@adc_value+1)^(0+128),w
  8160  0023' 3B00'              	subwfb	(??_SSPA_getPOut+1)^(0+128),w
  8161  0024' 0020               	movlb	0	; select bank0
  8162  0025' 0081'              	movwf	___xxtofl@val+1
  8163  0026' 0182'              	clrf	___xxtofl@val+2
  8164  0027' 0183'              	clrf	___xxtofl@val+3
  8165  0028' 3000               	movlw	0
  8166  0029' 3180' 2000' 3180'  	fcall	___xxtofl
  8167  002C' 0020               	movlb	0	; select bank0
  8168  002D' 0803'              	movf	?___xxtofl+3,w
  8169  002E' 0095'              	movwf	___flmul@a+3
  8170  002F' 0802'              	movf	?___xxtofl+2,w
  8171  0030' 0094'              	movwf	___flmul@a+2
  8172  0031' 0801'              	movf	?___xxtofl+1,w
  8173  0032' 0093'              	movwf	___flmul@a+1
  8174  0033' 0800'              	movf	?___xxtofl,w
  8175  0034' 0092'              	movwf	___flmul@a
  8176  0035' 3040               	movlw	64
  8177  0036' 0091'              	movwf	___flmul@b+3
  8178  0037' 3089               	movlw	137
  8179  0038' 0090'              	movwf	___flmul@b+2
  8180  0039' 3099               	movlw	153
  8181  003A' 008F'              	movwf	___flmul@b+1
  8182  003B' 309A               	movlw	154
  8183  003C' 008E'              	movwf	___flmul@b
  8184  003D' 3180' 2000' 3180'  	fcall	___flmul
  8185  0040' 0020               	movlb	0	; select bank0
  8186  0041' 0811'              	movf	?___flmul+3,w
  8187  0042' 00AB'              	movwf	___flsub@a+3
  8188  0043' 0810'              	movf	?___flmul+2,w
  8189  0044' 00AA'              	movwf	___flsub@a+2
  8190  0045' 080F'              	movf	?___flmul+1,w
  8191  0046' 00A9'              	movwf	___flsub@a+1
  8192  0047' 080E'              	movf	?___flmul,w
  8193  0048' 00A8'              	movwf	___flsub@a
  8194  0049' 3180' 2000' 3180'  	fcall	___flsub
  8195  004C' 0020               	movlb	0	; select bank0
  8196  004D' 082B'              	movf	?___flsub+3,w
  8197  004E' 00B7'              	movwf	___fldiv@b+3
  8198  004F' 082A'              	movf	?___flsub+2,w
  8199  0050' 00B6'              	movwf	___fldiv@b+2
  8200  0051' 0829'              	movf	?___flsub+1,w
  8201  0052' 00B5'              	movwf	___fldiv@b+1
  8202  0053' 0828'              	movf	?___flsub,w
  8203  0054' 00B4'              	movwf	___fldiv@b
  8204  0055' 303F               	movlw	63
  8205  0056' 00B3'              	movwf	___fldiv@a+3
  8206  0057' 3080               	movlw	128
  8207  0058' 00B2'              	movwf	___fldiv@a+2
  8208  0059' 3000               	movlw	0
  8209  005A' 00B1'              	movwf	___fldiv@a+1
  8210  005B' 3000               	movlw	0
  8211  005C' 00B0'              	movwf	___fldiv@a
  8212  005D' 3180' 2000' 3180'  	fcall	___fldiv
  8213  0060' 0020               	movlb	0	; select bank0
  8214  0061' 0833'              	movf	?___fldiv+3,w
  8215  0062' 00CD'              	movwf	___fltol@f1+3
  8216  0063' 0832'              	movf	?___fldiv+2,w
  8217  0064' 00CC'              	movwf	___fltol@f1+2
  8218  0065' 0831'              	movf	?___fldiv+1,w
  8219  0066' 00CB'              	movwf	___fltol@f1+1
  8220  0067' 0830'              	movf	?___fldiv,w
  8221  0068' 00CA'              	movwf	___fltol@f1
  8222  0069' 3180' 2000' 3180'  	fcall	___fltol
  8223  006C' 0020               	movlb	0	; select bank0
  8224  006D' 084A'              	movf	?___fltol,w
  8225  006E' 0022               	movlb	2	; select bank2
  8226  006F' 0084'              	movwf	(_sppas^(0+256)+4)
  8227  0070' 0020               	movlb	0	; select bank0
  8228  0071' 084B'              	movf	?___fltol+1,w
  8229  0072' 0022               	movlb	2	; select bank2
  8230  0073' 0084'              	movwf	((_sppas+1)^(0+256)+4)
  8231  0074' 0D89               	rlf	9,f
  8232  0075' 3B89               	subwfb	9,f
  8233  0076' 0989               	comf	9,f
  8234  0077' 0084'              	movwf	((_sppas+2)^(0+256)+4)
  8235  0078' 0084'              	movwf	((_sppas+3)^(0+256)+4)
  8236                           
  8237                           ;main.c: 322:             sppas->m_bPOut = 0xFF;
  8238  0079' 30FF               	movlw	255
  8239  007A' 2800'              	goto	L2
  8240  007B'                    l5135:	
  8241                           ;main.c: 323:             break;
  8242                           
  8243                           
  8244                           ;main.c: 327:             adc_value = getADCValue(channel);
  8245  007B' 300A               	movlw	10
  8246  007C' 3180' 2000' 3180'  	fcall	_getADCValue
  8247  007F' 0020               	movlb	0	; select bank0
  8248  0080' 0839'              	movf	?_getADCValue+1,w
  8249  0081' 0021               	movlb	1	; select bank1
  8250  0082' 0080'              	movwf	(SSPA_getPOut@adc_value+1)^(0+128)
  8251  0083' 0020               	movlb	0	; select bank0
  8252  0084' 0838'              	movf	?_getADCValue,w
  8253  0085' 0021               	movlb	1	; select bank1
  8254  0086' 0080'              	movwf	SSPA_getPOut@adc_value^(0+128)
  8255                           
  8256                           ;main.c: 328:             sppas->m_lCurrent = (uint32_t)(int16_t) ((0 - 4.3 * (1024 - (a
      +                          dc_value))) / 1);
  8257  0087' 3000               	movlw	0
  8258  0088' 0020               	movlb	0	; select bank0
  8259  0089' 00AF'              	movwf	___flsub@b+3
  8260  008A' 3000               	movlw	0
  8261  008B' 00AE'              	movwf	___flsub@b+2
  8262  008C' 3000               	movlw	0
  8263  008D' 00AD'              	movwf	___flsub@b+1
  8264  008E' 3000               	movlw	0
  8265  008F' 00AC'              	movwf	___flsub@b
  8266  0090' 3000               	movlw	0
  8267  0091' 0021               	movlb	1	; select bank1
  8268  0092' 0080'              	movwf	??_SSPA_getPOut^(0+128)
  8269  0093' 3004               	movlw	4
  8270  0094' 0081'              	movwf	(??_SSPA_getPOut^(0+128)+1)
  8271  0095' 0800'              	movf	SSPA_getPOut@adc_value^(0+128),w
  8272  0096' 0200'              	subwf	??_SSPA_getPOut^(0+128),w
  8273  0097' 0020               	movlb	0	; select bank0
  8274  0098' 0080'              	movwf	___xxtofl@val
  8275  0099' 0021               	movlb	1	; select bank1
  8276  009A' 0800'              	movf	(SSPA_getPOut@adc_value+1)^(0+128),w
  8277  009B' 3B00'              	subwfb	(??_SSPA_getPOut+1)^(0+128),w
  8278  009C' 0020               	movlb	0	; select bank0
  8279  009D' 0081'              	movwf	___xxtofl@val+1
  8280  009E' 0182'              	clrf	___xxtofl@val+2
  8281  009F' 0183'              	clrf	___xxtofl@val+3
  8282  00A0' 3000               	movlw	0
  8283  00A1' 3180' 2000' 3180'  	fcall	___xxtofl
  8284  00A4' 0020               	movlb	0	; select bank0
  8285  00A5' 0803'              	movf	?___xxtofl+3,w
  8286  00A6' 0095'              	movwf	___flmul@a+3
  8287  00A7' 0802'              	movf	?___xxtofl+2,w
  8288  00A8' 0094'              	movwf	___flmul@a+2
  8289  00A9' 0801'              	movf	?___xxtofl+1,w
  8290  00AA' 0093'              	movwf	___flmul@a+1
  8291  00AB' 0800'              	movf	?___xxtofl,w
  8292  00AC' 0092'              	movwf	___flmul@a
  8293  00AD' 3040               	movlw	64
  8294  00AE' 0091'              	movwf	___flmul@b+3
  8295  00AF' 3089               	movlw	137
  8296  00B0' 0090'              	movwf	___flmul@b+2
  8297  00B1' 3099               	movlw	153
  8298  00B2' 008F'              	movwf	___flmul@b+1
  8299  00B3' 309A               	movlw	154
  8300  00B4' 008E'              	movwf	___flmul@b
  8301  00B5' 3180' 2000' 3180'  	fcall	___flmul
  8302  00B8' 0020               	movlb	0	; select bank0
  8303  00B9' 0811'              	movf	?___flmul+3,w
  8304  00BA' 00AB'              	movwf	___flsub@a+3
  8305  00BB' 0810'              	movf	?___flmul+2,w
  8306  00BC' 00AA'              	movwf	___flsub@a+2
  8307  00BD' 080F'              	movf	?___flmul+1,w
  8308  00BE' 00A9'              	movwf	___flsub@a+1
  8309  00BF' 080E'              	movf	?___flmul,w
  8310  00C0' 00A8'              	movwf	___flsub@a
  8311  00C1' 3180' 2000' 3180'  	fcall	___flsub
  8312  00C4' 0020               	movlb	0	; select bank0
  8313  00C5' 082B'              	movf	?___flsub+3,w
  8314  00C6' 00B7'              	movwf	___fldiv@b+3
  8315  00C7' 082A'              	movf	?___flsub+2,w
  8316  00C8' 00B6'              	movwf	___fldiv@b+2
  8317  00C9' 0829'              	movf	?___flsub+1,w
  8318  00CA' 00B5'              	movwf	___fldiv@b+1
  8319  00CB' 0828'              	movf	?___flsub,w
  8320  00CC' 00B4'              	movwf	___fldiv@b
  8321  00CD' 303F               	movlw	63
  8322  00CE' 00B3'              	movwf	___fldiv@a+3
  8323  00CF' 3080               	movlw	128
  8324  00D0' 00B2'              	movwf	___fldiv@a+2
  8325  00D1' 3000               	movlw	0
  8326  00D2' 00B1'              	movwf	___fldiv@a+1
  8327  00D3' 3000               	movlw	0
  8328  00D4' 00B0'              	movwf	___fldiv@a
  8329  00D5' 3180' 2000' 3180'  	fcall	___fldiv
  8330  00D8' 0020               	movlb	0	; select bank0
  8331  00D9' 0833'              	movf	?___fldiv+3,w
  8332  00DA' 00CD'              	movwf	___fltol@f1+3
  8333  00DB' 0832'              	movf	?___fldiv+2,w
  8334  00DC' 00CC'              	movwf	___fltol@f1+2
  8335  00DD' 0831'              	movf	?___fldiv+1,w
  8336  00DE' 00CB'              	movwf	___fltol@f1+1
  8337  00DF' 0830'              	movf	?___fldiv,w
  8338  00E0' 00CA'              	movwf	___fltol@f1
  8339  00E1' 3180' 2000' 3180'  	fcall	___fltol
  8340  00E4' 0020               	movlb	0	; select bank0
  8341  00E5' 084A'              	movf	?___fltol,w
  8342  00E6' 0022               	movlb	2	; select bank2
  8343  00E7' 0084'              	movwf	(_sppas^(0+256)+4)
  8344  00E8' 0020               	movlb	0	; select bank0
  8345  00E9' 084B'              	movf	?___fltol+1,w
  8346  00EA' 0022               	movlb	2	; select bank2
  8347  00EB' 0084'              	movwf	((_sppas+1)^(0+256)+4)
  8348  00EC' 0D89               	rlf	9,f
  8349  00ED' 3B89               	subwfb	9,f
  8350  00EE' 0989               	comf	9,f
  8351  00EF' 0084'              	movwf	((_sppas+2)^(0+256)+4)
  8352  00F0' 0084'              	movwf	((_sppas+3)^(0+256)+4)
  8353                           
  8354                           ;main.c: 329:             channel = PD_X;
  8355  00F1' 0021               	movlb	1	; select bank1
  8356  00F2' 0180'              	clrf	SSPA_getPOut@channel^(0+128)
  8357                           
  8358                           ;main.c: 330:             adc_value = getADCValue(channel);
  8359  00F3' 3000               	movlw	0
  8360  00F4' 3180' 2000' 3180'  	fcall	_getADCValue
  8361  00F7' 0020               	movlb	0	; select bank0
  8362  00F8' 0839'              	movf	?_getADCValue+1,w
  8363  00F9' 0021               	movlb	1	; select bank1
  8364  00FA' 0080'              	movwf	(SSPA_getPOut@adc_value+1)^(0+128)
  8365  00FB' 0020               	movlb	0	; select bank0
  8366  00FC' 0838'              	movf	?_getADCValue,w
  8367  00FD' 0021               	movlb	1	; select bank1
  8368  00FE' 0080'              	movwf	SSPA_getPOut@adc_value^(0+128)
  8369                           
  8370                           ;main.c: 331:             sppas->m_bPOut = (uint8_t)(int16_t) ((0 - 4.3 * (1024 - (adc_v
      +                          alue))) / 1);
  8371  00FF' 3000               	movlw	0
  8372  0100' 0020               	movlb	0	; select bank0
  8373  0101' 00AF'              	movwf	___flsub@b+3
  8374  0102' 3000               	movlw	0
  8375  0103' 00AE'              	movwf	___flsub@b+2
  8376  0104' 3000               	movlw	0
  8377  0105' 00AD'              	movwf	___flsub@b+1
  8378  0106' 3000               	movlw	0
  8379  0107' 00AC'              	movwf	___flsub@b
  8380  0108' 3000               	movlw	0
  8381  0109' 0021               	movlb	1	; select bank1
  8382  010A' 0080'              	movwf	??_SSPA_getPOut^(0+128)
  8383  010B' 3004               	movlw	4
  8384  010C' 0081'              	movwf	(??_SSPA_getPOut^(0+128)+1)
  8385  010D' 0800'              	movf	SSPA_getPOut@adc_value^(0+128),w
  8386  010E' 0200'              	subwf	??_SSPA_getPOut^(0+128),w
  8387  010F' 0020               	movlb	0	; select bank0
  8388  0110' 0080'              	movwf	___xxtofl@val
  8389  0111' 0021               	movlb	1	; select bank1
  8390  0112' 0800'              	movf	(SSPA_getPOut@adc_value+1)^(0+128),w
  8391  0113' 3B00'              	subwfb	(??_SSPA_getPOut+1)^(0+128),w
  8392  0114' 0020               	movlb	0	; select bank0
  8393  0115' 0081'              	movwf	___xxtofl@val+1
  8394  0116' 0182'              	clrf	___xxtofl@val+2
  8395  0117' 0183'              	clrf	___xxtofl@val+3
  8396  0118' 3000               	movlw	0
  8397  0119' 3180' 2000' 3180'  	fcall	___xxtofl
  8398  011C' 0020               	movlb	0	; select bank0
  8399  011D' 0803'              	movf	?___xxtofl+3,w
  8400  011E' 0095'              	movwf	___flmul@a+3
  8401  011F' 0802'              	movf	?___xxtofl+2,w
  8402  0120' 0094'              	movwf	___flmul@a+2
  8403  0121' 0801'              	movf	?___xxtofl+1,w
  8404  0122' 0093'              	movwf	___flmul@a+1
  8405  0123' 0800'              	movf	?___xxtofl,w
  8406  0124' 0092'              	movwf	___flmul@a
  8407  0125' 3040               	movlw	64
  8408  0126' 0091'              	movwf	___flmul@b+3
  8409  0127' 3089               	movlw	137
  8410  0128' 0090'              	movwf	___flmul@b+2
  8411  0129' 3099               	movlw	153
  8412  012A' 008F'              	movwf	___flmul@b+1
  8413  012B' 309A               	movlw	154
  8414  012C' 008E'              	movwf	___flmul@b
  8415  012D' 3180' 2000' 3180'  	fcall	___flmul
  8416  0130' 0020               	movlb	0	; select bank0
  8417  0131' 0811'              	movf	?___flmul+3,w
  8418  0132' 00AB'              	movwf	___flsub@a+3
  8419  0133' 0810'              	movf	?___flmul+2,w
  8420  0134' 00AA'              	movwf	___flsub@a+2
  8421  0135' 080F'              	movf	?___flmul+1,w
  8422  0136' 00A9'              	movwf	___flsub@a+1
  8423  0137' 080E'              	movf	?___flmul,w
  8424  0138' 00A8'              	movwf	___flsub@a
  8425  0139' 3180' 2000' 3180'  	fcall	___flsub
  8426  013C' 0020               	movlb	0	; select bank0
  8427  013D' 082B'              	movf	?___flsub+3,w
  8428  013E' 00B7'              	movwf	___fldiv@b+3
  8429  013F' 082A'              	movf	?___flsub+2,w
  8430  0140' 00B6'              	movwf	___fldiv@b+2
  8431  0141' 0829'              	movf	?___flsub+1,w
  8432  0142' 00B5'              	movwf	___fldiv@b+1
  8433  0143' 0828'              	movf	?___flsub,w
  8434  0144' 00B4'              	movwf	___fldiv@b
  8435  0145' 303F               	movlw	63
  8436  0146' 00B3'              	movwf	___fldiv@a+3
  8437  0147' 3080               	movlw	128
  8438  0148' 00B2'              	movwf	___fldiv@a+2
  8439  0149' 3000               	movlw	0
  8440  014A' 00B1'              	movwf	___fldiv@a+1
  8441  014B' 3000               	movlw	0
  8442  014C' 00B0'              	movwf	___fldiv@a
  8443  014D' 3180' 2000' 3180'  	fcall	___fldiv
  8444  0150' 0020               	movlb	0	; select bank0
  8445  0151' 0833'              	movf	?___fldiv+3,w
  8446  0152' 00CD'              	movwf	___fltol@f1+3
  8447  0153' 0832'              	movf	?___fldiv+2,w
  8448  0154' 00CC'              	movwf	___fltol@f1+2
  8449  0155' 0831'              	movf	?___fldiv+1,w
  8450  0156' 00CB'              	movwf	___fltol@f1+1
  8451  0157' 0830'              	movf	?___fldiv,w
  8452  0158' 00CA'              	movwf	___fltol@f1
  8453  0159' 3180' 2000' 3180'  	fcall	___fltol
  8454  015C' 0020               	movlb	0	; select bank0
  8455  015D' 084A'              	movf	?___fltol,w
  8456  015E' 0022               	movlb	2	; select bank2
  8457  015F'                    L2:
  8458  015F' 0083'              	movwf	(_sppas^(0+256)+3)
  8459                           
  8460                           ;main.c: 332:             break;
  8461  0160' 2800'              	goto	l5151
  8462  0161'                    l5149:
  8463  0161' 0021               	movlb	1	; select bank1
  8464  0162' 0800'              	movf	SSPA_getPOut@band^(0+128),w
  8465                           
  8466                           ; Switch size 1, requested type "simple"
  8467                           ; Number of cases is 3, Range of values is 0 to 2
  8468                           ; switch strategies available:
  8469                           ; Name         Instructions Cycles
  8470                           ; simple_byte           10     6 (average)
  8471                           ; direct_byte           12     6 (fixed)
  8472                           ; jumptable            260     6 (fixed)
  8473                           ;	Chosen strategy is simple_byte
  8474  0163' 3A00               	xorlw	0	; case 0
  8475  0164' 1903               	skipnz
  8476  0165' 2800'              	goto	l5151
  8477  0166' 3A01               	xorlw	1	; case 1
  8478  0167' 1903               	skipnz
  8479  0168' 2800'              	goto	l709
  8480  0169' 3A03               	xorlw	3	; case 2
  8481  016A' 1903               	skipnz
  8482  016B' 2800'              	goto	l5135
  8483  016C' 2800'              	goto	l5151
  8484  016D'                    l5151:
  8485                           
  8486                           ;main.c: 339:     ((void)((channel == PD_X || channel == CS_Ka || channel == CS_X) || (_
      +                          _assert_fail("channel == PD_X || channel == CS_Ka || channel == CS_X", "main.c", 339, __
      +                          func__),0)));
  8487  016D' 0021               	movlb	1	; select bank1
  8488  016E' 0800'              	movf	SSPA_getPOut@channel^(0+128),w
  8489  016F' 1903               	btfsc	3,2
  8490  0170' 0008               	return
  8491  0171' 0300'              	decf	SSPA_getPOut@channel^(0+128),w
  8492  0172' 1903               	btfsc	3,2
  8493  0173' 0008               	return
  8494  0174' 300A               	movlw	10
  8495  0175' 0600'              	xorwf	SSPA_getPOut@channel^(0+128),w
  8496  0176' 1903               	btfsc	3,2
  8497  0177' 0008               	return
  8498  0178' 3000'              	movlw	low (STR_13| (0+32768))
  8499  0179' 0020               	movlb	0	; select bank0
  8500  017A' 00B0'              	movwf	___assert_fail@expr
  8501  017B' 3000'              	movlw	high (STR_13| (0+32768))
  8502  017C' 00B1'              	movwf	___assert_fail@expr+1
  8503  017D' 3000'              	movlw	low (STR_2| (0+32768))
  8504  017E' 00B2'              	movwf	___assert_fail@file
  8505  017F' 3000'              	movlw	high (STR_2| (0+32768))
  8506  0180' 00B3'              	movwf	___assert_fail@file+1
  8507  0181' 3053               	movlw	83
  8508  0182' 00B4'              	movwf	___assert_fail@line
  8509  0183' 3001               	movlw	1
  8510  0184' 00B5'              	movwf	___assert_fail@line+1
  8511  0185' 3000'              	movlw	low (STR_15| (0+32768))
  8512  0186' 00B6'              	movwf	___assert_fail@func
  8513  0187' 3000'              	movlw	high (STR_15| (0+32768))
  8514  0188' 00B7'              	movwf	___assert_fail@func+1
  8515  0189' 3180' 2000'        	fcall	___assert_fail
  8516  018B' 0008               	return
  8517  018C'                    __end_of_SSPA_getPOut:
  8518                           
  8519                           	psect	text25
  8520  0000'                    __ptext25:	
  8521 ;; *************** function _getADCValue *****************
  8522 ;; Defined at:
  8523 ;;		line 233 in file "main.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;  channel         1    wreg     enum E9222
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  channel         1   60[BANK0 ] enum E9222
  8528 ;;  i               1   63[BANK0 ] unsigned char 
  8529 ;;  avg             2   61[BANK0 ] unsigned short 
  8530 ;; Return value:  Size  Location     Type
  8531 ;;                  2   56[BANK0 ] unsigned short 
  8532 ;; Registers used:
  8533 ;;		wreg, status,2, status,0, pclath, cstack
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8539 ;;      Params:         0       2       0       0       0       0       0       0
  8540 ;;      Locals:         0       4       0       0       0       0       0       0
  8541 ;;      Temps:          0       2       0       0       0       0       0       0
  8542 ;;      Totals:         0       8       0       0       0       0       0       0
  8543 ;;Total ram usage:        8 bytes
  8544 ;; Hardware stack levels used: 1
  8545 ;; Hardware stack levels required when called: 13
  8546 ;; This function calls:
  8547 ;;		_ADC_GetConversionResult
  8548 ;;		_ADC_IsConversionDone
  8549 ;;		_ADC_SelectChannel
  8550 ;;		_ADC_StartConversion
  8551 ;;		___assert_fail
  8552 ;; This function is called by:
  8553 ;;		_SSPA_getTemp
  8554 ;;		_SSPA_getPOut
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558  0000'                    _getADCValue:	
  8559                           ;psect for function _getADCValue
  8560                           
  8561                           
  8562                           ;incstack = 0
  8563 ;; hardware stack exceeded
  8564                           ; Regs used in _getADCValue: [wreg+status,2+status,0+pclath+cstack]
  8565                           ;getADCValue@channel stored from wreg
  8566  0000' 0020               	movlb	0	; select bank0
  8567  0001' 00BC'              	movwf	getADCValue@channel
  8568                           
  8569                           ;main.c: 236:     adc_result_t avg = 0;
  8570                           
  8571                           ;main.c: 234:     ((void)((sizeof (adc_result_t) == sizeof (uint16_t)) || (__assert_fail
      +                          ("sizeof (adc_result_t) == sizeof (uint16_t)", "main.c", 234, __func__),0)));
  8572  0002' 01BD'              	clrf	getADCValue@avg
  8573  0003' 01BE'              	clrf	getADCValue@avg+1
  8574                           
  8575                           ;main.c: 238:     ADC_StartConversion();
  8576  0004' 3180' 2000' 3180'  	fcall	_ADC_StartConversion
  8577                           
  8578                           ;main.c: 239:     ADC_SelectChannel(channel);
  8579  0007' 0020               	movlb	0	; select bank0
  8580  0008' 083C'              	movf	getADCValue@channel,w
  8581  0009' 3180' 2000' 3180'  	fcall	_ADC_SelectChannel
  8582                           
  8583                           ;main.c: 241:     for (uint8_t i = 0; i < 32; i++)
  8584  000C' 0020               	movlb	0	; select bank0
  8585  000D' 01BF'              	clrf	getADCValue@i
  8586  000E'                    l4917:
  8587                           
  8588                           ;main.c: 242:         if (ADC_IsConversionDone())
  8589  000E' 3180' 2000' 3180'  	fcall	_ADC_IsConversionDone
  8590  0011' 3A00               	xorlw	0
  8591  0012' 1903               	skipnz
  8592  0013' 2800'              	goto	l4921
  8593                           
  8594                           ;main.c: 243:             avg += ADC_GetConversionResult();
  8595  0014' 3180' 2000' 3180'  	fcall	_ADC_GetConversionResult
  8596  0017' 0020               	movlb	0	; select bank0
  8597  0018' 0800'              	movf	?_ADC_GetConversionResult,w
  8598  0019' 07BD'              	addwf	getADCValue@avg,f
  8599  001A' 0801'              	movf	?_ADC_GetConversionResult+1,w
  8600  001B' 3DBE'              	addwfc	getADCValue@avg+1,f
  8601  001C'                    l4921:
  8602  001C' 3001               	movlw	1
  8603  001D' 0020               	movlb	0	; select bank0
  8604  001E' 00BA'              	movwf	??_getADCValue
  8605  001F' 083A'              	movf	??_getADCValue,w
  8606  0020' 07BF'              	addwf	getADCValue@i,f
  8607  0021' 3020               	movlw	32
  8608  0022' 023F'              	subwf	getADCValue@i,w
  8609  0023' 1C03               	skipc
  8610  0024' 2800'              	goto	l4917
  8611                           
  8612                           ;main.c: 245:     return avg >> 5;
  8613  0025' 083E'              	movf	getADCValue@avg+1,w
  8614  0026' 00BB'              	movwf	??_getADCValue+1
  8615  0027' 083D'              	movf	getADCValue@avg,w
  8616  0028' 00BA'              	movwf	??_getADCValue
  8617  0029' 3005               	movlw	5
  8618  002A'                    u5045:
  8619  002A' 36BB'              	lsrf	??_getADCValue+1,f
  8620  002B' 0CBA'              	rrf	??_getADCValue,f
  8621  002C' 0B89               	decfsz	9,f
  8622  002D' 2800'              	goto	u5045
  8623  002E' 083A'              	movf	??_getADCValue,w
  8624  002F' 00B8'              	movwf	?_getADCValue
  8625  0030' 083B'              	movf	??_getADCValue+1,w
  8626  0031' 00B9'              	movwf	?_getADCValue+1
  8627  0032' 0008               	return
  8628  0033'                    __end_of_getADCValue:
  8629                           
  8630                           	psect	text26
  8631  0000'                    __ptext26:	
  8632 ;; *************** function ___assert_fail *****************
  8633 ;; Defined at:
  8634 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\assert.c"
  8635 ;; Parameters:    Size  Location     Type
  8636 ;;  expr            2   48[BANK0 ] PTR const unsigned char 
  8637 ;;		 -> STR_16(55), STR_10(36), STR_4(43), 
  8638 ;;  file            2   50[BANK0 ] PTR const unsigned char 
  8639 ;;		 -> STR_17(7), STR_11(7), STR_5(7), 
  8640 ;;  line            2   52[BANK0 ] int 
  8641 ;;  func            2   54[BANK0 ] PTR const unsigned char 
  8642 ;;		 -> STR_18(13), STR_12(13), STR_6(12), 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;		None
  8645 ;; Return value:  Size  Location     Type
  8646 ;;                  1    wreg      void 
  8647 ;; Registers used:
  8648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8649 ;; Tracked objects:
  8650 ;;		On entry : 0/0
  8651 ;;		On exit  : 0/0
  8652 ;;		Unchanged: 0/0
  8653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8654 ;;      Params:         0       8       0       0       0       0       0       0
  8655 ;;      Locals:         0       0       0       0       0       0       0       0
  8656 ;;      Temps:          0       0       0       0       0       0       0       0
  8657 ;;      Totals:         0       8       0       0       0       0       0       0
  8658 ;;Total ram usage:        8 bytes
  8659 ;; Hardware stack levels used: 1
  8660 ;; Hardware stack levels required when called: 12
  8661 ;; This function calls:
  8662 ;;		_abort
  8663 ;;		_printf
  8664 ;; This function is called by:
  8665 ;;		_getADCValue
  8666 ;;		_SSPA_getTemp
  8667 ;;		_SSPA_getPOut
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671  0000'                    ___assert_fail:	
  8672                           ;psect for function ___assert_fail
  8673                           
  8674                           
  8675                           ;incstack = 0
  8676 ;; hardware stack exceeded
  8677                           ; Regs used in ___assert_fail: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8678  0000' 3000'              	movlw	low (STR_19| (0+32768))
  8679  0001' 0020               	movlb	0	; select bank0
  8680  0002' 00A5'              	movwf	printf@fmt
  8681  0003' 3000'              	movlw	high (STR_19| (0+32768))
  8682  0004' 00A6'              	movwf	printf@fmt+1
  8683  0005' 0831'              	movf	___assert_fail@expr+1,w
  8684  0006' 0081'              	movwf	(low ((?_printf| 0+2))+1)
  8685  0007' 0830'              	movf	___assert_fail@expr,w
  8686  0008' 0080'              	movwf	low ((?_printf| 0+2))
  8687  0009' 0833'              	movf	___assert_fail@file+1,w
  8688  000A' 0081'              	movwf	(low ((?_printf| 0+4))+1)
  8689  000B' 0832'              	movf	___assert_fail@file,w
  8690  000C' 0080'              	movwf	low ((?_printf| 0+4))
  8691  000D' 0837'              	movf	___assert_fail@func+1,w
  8692  000E' 0081'              	movwf	(low ((?_printf| 0+6))+1)
  8693  000F' 0836'              	movf	___assert_fail@func,w
  8694  0010' 0080'              	movwf	low ((?_printf| 0+6))
  8695  0011' 0835'              	movf	___assert_fail@line+1,w
  8696  0012' 00AE'              	movwf	?_printf+9
  8697  0013' 0834'              	movf	___assert_fail@line,w
  8698  0014' 00AD'              	movwf	?_printf+8
  8699  0015' 3180' 2000' 3180'  	fcall	_printf
  8700  0018' 3180' 2000'        	fcall	_abort
  8701  001A' 0008               	return
  8702  001B'                    __end_of___assert_fail:
  8703                           
  8704                           	psect	text27
  8705  0000'                    __ptext27:	
  8706 ;; *************** function _printf *****************
  8707 ;; Defined at:
  8708 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\printf.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;  fmt             2   37[BANK0 ] PTR const unsigned char 
  8711 ;;		 -> STR_19(35), 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  ret             2    0        int 
  8714 ;;  ap              1   47[BANK0 ] PTR void [1]
  8715 ;;		 -> ?_printf(2), 
  8716 ;; Return value:  Size  Location     Type
  8717 ;;                  2   37[BANK0 ] int 
  8718 ;; Registers used:
  8719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8725 ;;      Params:         0      10       0       0       0       0       0       0
  8726 ;;      Locals:         0       1       0       0       0       0       0       0
  8727 ;;      Temps:          0       0       0       0       0       0       0       0
  8728 ;;      Totals:         0      11       0       0       0       0       0       0
  8729 ;;Total ram usage:       11 bytes
  8730 ;; Hardware stack levels used: 1
  8731 ;; Hardware stack levels required when called: 11
  8732 ;; This function calls:
  8733 ;;		_vfprintf
  8734 ;; This function is called by:
  8735 ;;		___assert_fail
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739  0000'                    _printf:	
  8740                           ;psect for function _printf
  8741                           
  8742                           
  8743                           ;incstack = 0
  8744 ;; hardware stack exceeded
  8745                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8746  0000' 3000'              	movlw	(low ((?_printf| 0+2)))& (0+255)
  8747  0001' 0020               	movlb	0	; select bank0
  8748  0002' 00AF'              	movwf	printf@ap
  8749  0003' 3000               	movlw	0
  8750  0004' 009D'              	movwf	vfprintf@fp
  8751  0005' 009E'              	movwf	vfprintf@fp+1
  8752  0006' 0826'              	movf	printf@fmt+1,w
  8753  0007' 00A0'              	movwf	vfprintf@fmt+1
  8754  0008' 0825'              	movf	printf@fmt,w
  8755  0009' 009F'              	movwf	vfprintf@fmt
  8756  000A' 3000'              	movlw	(low (printf@ap| 0))& (0+255)
  8757  000B' 00A1'              	movwf	vfprintf@ap
  8758  000C' 3180' 2000'        	fcall	_vfprintf
  8759  000E' 0008               	return
  8760  000F'                    __end_of_printf:
  8761                           
  8762                           	psect	text28
  8763  0000'                    __ptext28:	
  8764 ;; *************** function _vfprintf *****************
  8765 ;; Defined at:
  8766 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  fp              2   29[BANK0 ] PTR struct _IO_FILE
  8769 ;;		 -> NULL(0), 
  8770 ;;  fmt             2   31[BANK0 ] PTR const unsigned char 
  8771 ;;		 -> STR_19(35), 
  8772 ;;  ap              1   33[BANK0 ] PTR PTR void 
  8773 ;;		 -> printf@ap(1), 
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  cfmt            2   35[BANK0 ] PTR unsigned char 
  8776 ;;		 -> STR_19(35), 
  8777 ;; Return value:  Size  Location     Type
  8778 ;;                  2   29[BANK0 ] int 
  8779 ;; Registers used:
  8780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8781 ;; Tracked objects:
  8782 ;;		On entry : 0/0
  8783 ;;		On exit  : 0/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8786 ;;      Params:         0       5       0       0       0       0       0       0
  8787 ;;      Locals:         0       2       0       0       0       0       0       0
  8788 ;;      Temps:          0       1       0       0       0       0       0       0
  8789 ;;      Totals:         0       8       0       0       0       0       0       0
  8790 ;;Total ram usage:        8 bytes
  8791 ;; Hardware stack levels used: 1
  8792 ;; Hardware stack levels required when called: 10
  8793 ;; This function calls:
  8794 ;;		_vfpfcnvrt
  8795 ;; This function is called by:
  8796 ;;		_printf
  8797 ;; This function uses a non-reentrant model
  8798 ;;
  8799                           
  8800  0000'                    _vfprintf:	
  8801                           ;psect for function _vfprintf
  8802                           
  8803                           
  8804                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  8805                           
  8806                           ;incstack = 0
  8807 ;; hardware stack exceeded
  8808                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8809  0000' 0020               	movlb	0	; select bank0
  8810  0001' 0820'              	movf	vfprintf@fmt+1,w
  8811  0002' 00A4'              	movwf	vfprintf@cfmt+1
  8812  0003' 081F'              	movf	vfprintf@fmt,w
  8813  0004' 00A3'              	movwf	vfprintf@cfmt
  8814  0005'                    l4855:	
  8815                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8816                           
  8817                           
  8818                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  8819  0005' 0020               	movlb	0	; select bank0
  8820  0006' 0823'              	movf	vfprintf@cfmt,w
  8821  0007' 0084               	movwf	4
  8822  0008' 0824'              	movf	vfprintf@cfmt+1,w
  8823  0009' 0085               	movwf	5
  8824  000A' 0012               	moviw fsr0++
  8825  000B' 1903               	btfsc	3,2
  8826  000C' 2800'              	goto	l4857
  8827                           
  8828                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  8829  000D' 081E'              	movf	vfprintf@fp+1,w
  8830  000E' 008C'              	movwf	vfpfcnvrt@fp+1
  8831  000F' 081D'              	movf	vfprintf@fp,w
  8832  0010' 008B'              	movwf	vfpfcnvrt@fp
  8833  0011' 3000'              	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  8834  0012' 008D'              	movwf	vfpfcnvrt@fmt
  8835  0013' 0821'              	movf	vfprintf@ap,w
  8836  0014' 008E'              	movwf	vfpfcnvrt@ap
  8837  0015' 3180' 2000' 3180'  	fcall	_vfpfcnvrt
  8838  0018' 2800'              	goto	l4855
  8839  0019'                    l4857:
  8840                           
  8841                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  8842  0019' 019D'              	clrf	?_vfprintf
  8843  001A' 019E'              	clrf	?_vfprintf+1
  8844  001B' 0008               	return
  8845  001C'                    __end_of_vfprintf:
  8846                           
  8847                           	psect	text29
  8848  0000'                    __ptext29:	
  8849 ;; *************** function _vfpfcnvrt *****************
  8850 ;; Defined at:
  8851 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  fp              2   11[BANK0 ] PTR struct _IO_FILE
  8854 ;;		 -> NULL(0), 
  8855 ;;  fmt             1   13[BANK0 ] PTR PTR unsigned char 
  8856 ;;		 -> vfprintf@cfmt(2), 
  8857 ;;  ap              1   14[BANK0 ] PTR PTR void 
  8858 ;;		 -> printf@ap(1), 
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;  cp              2   19[BANK0 ] PTR unsigned char 
  8861 ;;		 -> ?_printf(2), STR_18(13), STR_17(7), STR_16(55), 
  8862 ;;		 -> STR_12(13), STR_11(7), STR_10(36), STR_6(12), 
  8863 ;;		 -> STR_5(7), STR_4(43), 
  8864 ;;  convarg         4   24[BANK0 ] struct .
  8865 ;;  cp              2   21[BANK0 ] PTR unsigned char 
  8866 ;;		 -> STR_19(35), 
  8867 ;;  c               1   28[BANK0 ] unsigned char 
  8868 ;;  done            1   23[BANK0 ] _Bool 
  8869 ;; Return value:  Size  Location     Type
  8870 ;;                  1    wreg      void 
  8871 ;; Registers used:
  8872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8873 ;; Tracked objects:
  8874 ;;		On entry : 0/0
  8875 ;;		On exit  : 0/0
  8876 ;;		Unchanged: 0/0
  8877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8878 ;;      Params:         0       4       0       0       0       0       0       0
  8879 ;;      Locals:         0      10       0       0       0       0       0       0
  8880 ;;      Temps:          0       4       0       0       0       0       0       0
  8881 ;;      Totals:         0      18       0       0       0       0       0       0
  8882 ;;Total ram usage:       18 bytes
  8883 ;; Hardware stack levels used: 1
  8884 ;; Hardware stack levels required when called: 9
  8885 ;; This function calls:
  8886 ;;		___awdiv
  8887 ;;		___awmod
  8888 ;;		_abs
  8889 ;;		_fputc
  8890 ;; This function is called by:
  8891 ;;		_vfprintf
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895  0000'                    _vfpfcnvrt:	
  8896                           ;psect for function _vfpfcnvrt
  8897                           
  8898                           
  8899                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  8900                           
  8901                           ;incstack = 0
  8902 ;; hardware stack exceeded
  8903                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8904  0000' 0020               	movlb	0	; select bank0
  8905  0001' 080D'              	movf	vfpfcnvrt@fmt,w
  8906  0002' 0086               	movwf	6
  8907  0003' 0187               	clrf	7
  8908  0004' 3F40               	moviw [0]fsr1
  8909  0005' 008F'              	movwf	??_vfpfcnvrt
  8910  0006' 3F41               	moviw [1]fsr1
  8911  0007' 0090'              	movwf	??_vfpfcnvrt+1
  8912  0008' 080F'              	movf	??_vfpfcnvrt,w
  8913  0009' 0084               	movwf	4
  8914  000A' 0810'              	movf	??_vfpfcnvrt+1,w
  8915  000B' 0085               	movwf	5
  8916  000C' 0012               	moviw fsr0++
  8917  000D' 3A25               	xorlw	37
  8918  000E' 1D03               	btfss	3,2
  8919  000F' 2800'              	goto	l4843
  8920                           
  8921                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  8922  0010' 080D'              	movf	vfpfcnvrt@fmt,w
  8923  0011' 0086               	movwf	6
  8924  0012' 0187               	clrf	7
  8925  0013' 3001               	movlw	1
  8926  0014' 0781               	addwf	1,f
  8927  0015' 3141               	addfsr 1,1
  8928  0016' 1803               	skipnc
  8929  0017' 0A81               	incf	1,f
  8930                           
  8931                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  8932  0018' 0021               	movlb	1	; select bank1
  8933  0019' 0180'              	clrf	_width^(0+128)
  8934  001A' 0180'              	clrf	(_width+1)^(0+128)
  8935  001B' 1003               	clrc
  8936  001C' 3000               	movlw	0
  8937  001D' 1803               	btfsc	3,0
  8938  001E' 3001               	movlw	1
  8939  001F' 0084'              	movwf	_flags
  8940                           
  8941                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  8942  0020' 30FF               	movlw	255
  8943  0021' 0080'              	movwf	_prec^(0+128)
  8944  0022' 30FF               	movlw	255
  8945  0023' 0081'              	movwf	(_prec^(0+128)+1)
  8946                           
  8947                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  8948  0024' 0020               	movlb	0	; select bank0
  8949  0025' 080D'              	movf	vfpfcnvrt@fmt,w
  8950  0026' 0086               	movwf	6
  8951  0027' 0187               	clrf	7
  8952  0028' 3F40               	moviw [0]fsr1
  8953  0029' 0095'              	movwf	vfpfcnvrt@cp
  8954  002A' 3F41               	moviw [1]fsr1
  8955  002B' 0096'              	movwf	vfpfcnvrt@cp+1
  8956                           
  8957                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  8958  002C' 0815'              	movf	vfpfcnvrt@cp,w
  8959  002D' 0084               	movwf	4
  8960  002E' 0816'              	movf	vfpfcnvrt@cp+1,w
  8961  002F' 0085               	movwf	5
  8962  0030' 0012               	moviw fsr0++
  8963  0031' 3A64               	xorlw	100
  8964  0032' 1903               	btfsc	3,2
  8965  0033' 2800'              	goto	l4783
  8966  0034' 0815'              	movf	vfpfcnvrt@cp,w
  8967  0035' 0084               	movwf	4
  8968  0036' 0816'              	movf	vfpfcnvrt@cp+1,w
  8969  0037' 0085               	movwf	5
  8970  0038' 0012               	moviw fsr0++
  8971  0039' 3A69               	xorlw	105
  8972  003A' 1D03               	btfss	3,2
  8973  003B' 2800'              	goto	l4811
  8974  003C'                    l4783:
  8975                           
  8976                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  8977  003C' 080E'              	movf	vfpfcnvrt@ap,w
  8978  003D' 0086               	movwf	6
  8979  003E' 0187               	clrf	7
  8980  003F' 0801               	movf	1,w
  8981  0040' 0084               	movwf	4
  8982  0041' 0185               	clrf	5
  8983  0042' 3002               	movlw	2
  8984  0043' 0781               	addwf	1,f
  8985  0044' 3F00               	moviw [0]fsr0
  8986  0045' 0098'              	movwf	vfpfcnvrt@convarg
  8987  0046' 3F01               	moviw [1]fsr0
  8988  0047' 0099'              	movwf	vfpfcnvrt@convarg+1
  8989                           
  8990                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  8991  0048' 0815'              	movf	vfpfcnvrt@cp,w
  8992  0049' 3E01               	addlw	1
  8993  004A' 008F'              	movwf	??_vfpfcnvrt
  8994  004B' 3000               	movlw	0
  8995  004C' 3D16'              	addwfc	vfpfcnvrt@cp+1,w
  8996  004D' 0090'              	movwf	??_vfpfcnvrt+1
  8997  004E' 080D'              	movf	vfpfcnvrt@fmt,w
  8998  004F' 0086               	movwf	6
  8999  0050' 0187               	clrf	7
  9000  0051' 080F'              	movf	??_vfpfcnvrt,w
  9001  0052' 3FC0               	movwi [0]fsr1
  9002  0053' 0810'              	movf	??_vfpfcnvrt+1,w
  9003  0054' 3FC1               	movwi [1]fsr1
  9004                           
  9005                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  9006  0055' 3020               	movlw	32
  9007  0056' 009C'              	movwf	vfpfcnvrt@c
  9008                           
  9009                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  9010  0057' 1F99'              	btfss	vfpfcnvrt@convarg+1,7
  9011  0058' 2800'              	goto	u4850
  9012  0059' 3001               	movlw	1
  9013  005A' 2800'              	goto	u4860
  9014  005B'                    u4850:
  9015  005B' 3000               	movlw	0
  9016  005C'                    u4860:
  9017  005C' 0097'              	movwf	vfpfcnvrt@done
  9018  005D' 2800'              	goto	l4791
  9019  005E'                    l4797:
  9020  005E' 081C'              	movf	vfpfcnvrt@c,w
  9021  005F' 1903               	btfsc	3,2
  9022  0060' 2800'              	goto	l4799
  9023  0061'                    l4791:
  9024                           
  9025                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  9026  0061' 3001               	movlw	1
  9027  0062' 029C'              	subwf	vfpfcnvrt@c,f
  9028  0063' 081C'              	movf	vfpfcnvrt@c,w
  9029  0064' 3E00'              	addlw	(low (_dbuf| (0+256)))& (0+255)
  9030  0065' 0086               	movwf	6
  9031  0066' 3001               	movlw	1	; select bank2/3
  9032  0067' 0087               	movwf	7
  9033  0068' 300A               	movlw	10
  9034  0069' 0080'              	movwf	___awmod@divisor
  9035  006A' 3000               	movlw	0
  9036  006B' 0081'              	movwf	___awmod@divisor+1
  9037  006C' 0819'              	movf	vfpfcnvrt@convarg+1,w
  9038  006D' 0083'              	movwf	___awmod@dividend+1
  9039  006E' 0818'              	movf	vfpfcnvrt@convarg,w
  9040  006F' 0082'              	movwf	___awmod@dividend
  9041  0070' 3180' 2000' 3180'  	fcall	___awmod
  9042  0073' 0020               	movlb	0	; select bank0
  9043  0074' 0801'              	movf	?___awmod+1,w
  9044  0075' 0088'              	movwf	abs@a+1
  9045  0076' 0800'              	movf	?___awmod,w
  9046  0077' 0087'              	movwf	abs@a
  9047  0078' 3180' 2000' 3180'  	fcall	_abs
  9048  007B' 0020               	movlb	0	; select bank0
  9049  007C' 0807'              	movf	?_abs,w
  9050  007D' 3E30               	addlw	48
  9051  007E' 0081               	movwf	1
  9052                           
  9053                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  9054  007F' 300A               	movlw	10
  9055  0080' 0080'              	movwf	___awdiv@divisor
  9056  0081' 3000               	movlw	0
  9057  0082' 0081'              	movwf	___awdiv@divisor+1
  9058  0083' 0819'              	movf	vfpfcnvrt@convarg+1,w
  9059  0084' 0083'              	movwf	___awdiv@dividend+1
  9060  0085' 0818'              	movf	vfpfcnvrt@convarg,w
  9061  0086' 0082'              	movwf	___awdiv@dividend
  9062  0087' 3180' 2000' 3180'  	fcall	___awdiv
  9063  008A' 0020               	movlb	0	; select bank0
  9064  008B' 0801'              	movf	?___awdiv+1,w
  9065  008C' 0099'              	movwf	vfpfcnvrt@convarg+1
  9066  008D' 0800'              	movf	?___awdiv,w
  9067  008E' 0098'              	movwf	vfpfcnvrt@convarg
  9068                           
  9069                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  9070  008F' 0818'              	movf	vfpfcnvrt@convarg,w
  9071  0090' 0419'              	iorwf	vfpfcnvrt@convarg+1,w
  9072  0091' 1D03               	btfss	3,2
  9073  0092' 2800'              	goto	l4797
  9074  0093'                    l4799:
  9075                           
  9076                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  9077  0093' 081C'              	movf	vfpfcnvrt@c,w
  9078  0094' 1903               	btfsc	3,2
  9079  0095' 2800'              	goto	l4809
  9080  0096' 0817'              	movf	vfpfcnvrt@done,w
  9081  0097' 1903               	btfsc	3,2
  9082  0098' 2800'              	goto	l4809
  9083                           
  9084                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  9085  0099' 3001               	movlw	1
  9086  009A' 029C'              	subwf	vfpfcnvrt@c,f
  9087  009B' 081C'              	movf	vfpfcnvrt@c,w
  9088  009C' 3E00'              	addlw	(low (_dbuf| (0+256)))& (0+255)
  9089  009D' 0086               	movwf	6
  9090  009E' 3001               	movlw	1	; select bank2/3
  9091  009F' 0087               	movwf	7
  9092  00A0' 302D               	movlw	45
  9093  00A1' 0081               	movwf	1
  9094  00A2'                    l4809:
  9095                           
  9096                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  9097  00A2' 3020               	movlw	32
  9098  00A3' 061C'              	xorwf	vfpfcnvrt@c,w
  9099  00A4' 1903               	btfsc	3,2
  9100  00A5' 0008               	return
  9101                           
  9102                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  9103  00A6' 081C'              	movf	vfpfcnvrt@c,w
  9104  00A7' 3E00'              	addlw	(low (_dbuf| (0+256)))& (0+255)
  9105  00A8' 0086               	movwf	6
  9106  00A9' 3001               	movlw	1	; select bank2/3
  9107  00AA' 0087               	movwf	7
  9108  00AB' 0801               	movf	1,w
  9109  00AC' 008F'              	movwf	??_vfpfcnvrt
  9110  00AD' 0190'              	clrf	??_vfpfcnvrt+1
  9111  00AE' 080F'              	movf	??_vfpfcnvrt,w
  9112  00AF' 0080'              	movwf	fputc@c
  9113  00B0' 0810'              	movf	??_vfpfcnvrt+1,w
  9114  00B1' 0081'              	movwf	fputc@c+1
  9115  00B2' 080C'              	movf	vfpfcnvrt@fp+1,w
  9116  00B3' 0083'              	movwf	fputc@fp+1
  9117  00B4' 080B'              	movf	vfpfcnvrt@fp,w
  9118  00B5' 0082'              	movwf	fputc@fp
  9119  00B6' 3180' 2000' 3180'  	fcall	_fputc
  9120  00B9' 3001               	movlw	1
  9121  00BA' 0020               	movlb	0	; select bank0
  9122  00BB' 008F'              	movwf	??_vfpfcnvrt
  9123  00BC' 080F'              	movf	??_vfpfcnvrt,w
  9124  00BD' 079C'              	addwf	vfpfcnvrt@c,f
  9125  00BE' 2800'              	goto	l4809
  9126  00BF'                    l4811:
  9127                           
  9128                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1656:   done = 0;
  9129  00BF' 0197'              	clrf	vfpfcnvrt@done
  9130                           
  9131                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1657:   if ((*fmt
      +                          )[0] == 's') {
  9132  00C0' 080D'              	movf	vfpfcnvrt@fmt,w
  9133  00C1' 0086               	movwf	6
  9134  00C2' 0187               	clrf	7
  9135  00C3' 3F40               	moviw [0]fsr1
  9136  00C4' 008F'              	movwf	??_vfpfcnvrt
  9137  00C5' 3F41               	moviw [1]fsr1
  9138  00C6' 0090'              	movwf	??_vfpfcnvrt+1
  9139  00C7' 080F'              	movf	??_vfpfcnvrt,w
  9140  00C8' 0084               	movwf	4
  9141  00C9' 0810'              	movf	??_vfpfcnvrt+1,w
  9142  00CA' 0085               	movwf	5
  9143  00CB' 0012               	moviw fsr0++
  9144  00CC' 3A73               	xorlw	115
  9145  00CD' 1D03               	btfss	3,2
  9146  00CE' 2800'              	goto	l4819
  9147                           
  9148                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1658:    ++*fmt;
  9149  00CF' 080D'              	movf	vfpfcnvrt@fmt,w
  9150  00D0' 0086               	movwf	6
  9151  00D1' 0187               	clrf	7
  9152  00D2' 3001               	movlw	1
  9153  00D3' 2800'              	goto	L3
  9154  00D4'                    l4819:	
  9155                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1660:   }
  9156                           
  9157  00D4' 080D'              	movf	vfpfcnvrt@fmt,w
  9158  00D5' 0086               	movwf	6
  9159  00D6' 0187               	clrf	7
  9160  00D7' 3F40               	moviw [0]fsr1
  9161  00D8' 008F'              	movwf	??_vfpfcnvrt
  9162  00D9' 3F41               	moviw [1]fsr1
  9163  00DA' 0090'              	movwf	??_vfpfcnvrt+1
  9164  00DB' 080F'              	movf	??_vfpfcnvrt,w
  9165  00DC' 0084               	movwf	4
  9166  00DD' 0810'              	movf	??_vfpfcnvrt+1,w
  9167  00DE' 0085               	movwf	5
  9168  00DF' 0012               	moviw fsr0++
  9169  00E0' 3A6C               	xorlw	108
  9170  00E1' 1D03               	btfss	3,2
  9171  00E2' 2800'              	goto	l4829
  9172  00E3' 080D'              	movf	vfpfcnvrt@fmt,w
  9173  00E4' 0086               	movwf	6
  9174  00E5' 0187               	clrf	7
  9175  00E6' 3F40               	moviw [0]fsr1
  9176  00E7' 008F'              	movwf	??_vfpfcnvrt
  9177  00E8' 3F41               	moviw [1]fsr1
  9178  00E9' 0090'              	movwf	??_vfpfcnvrt+1
  9179  00EA' 3001               	movlw	1
  9180  00EB' 070F'              	addwf	??_vfpfcnvrt,w
  9181  00EC' 0084               	movwf	4
  9182  00ED' 0810'              	movf	??_vfpfcnvrt+1,w
  9183  00EE' 1803               	skipnc
  9184  00EF' 0A10'              	incf	??_vfpfcnvrt+1,w
  9185  00F0' 0085               	movwf	5
  9186  00F1' 0012               	moviw fsr0++
  9187  00F2' 3A6C               	xorlw	108
  9188  00F3' 1D03               	btfss	3,2
  9189  00F4' 2800'              	goto	l4829
  9190  00F5' 080D'              	movf	vfpfcnvrt@fmt,w
  9191  00F6' 0086               	movwf	6
  9192  00F7' 0187               	clrf	7
  9193  00F8' 3F40               	moviw [0]fsr1
  9194  00F9' 008F'              	movwf	??_vfpfcnvrt
  9195  00FA' 3F41               	moviw [1]fsr1
  9196  00FB' 0090'              	movwf	??_vfpfcnvrt+1
  9197  00FC' 3002               	movlw	2
  9198  00FD' 070F'              	addwf	??_vfpfcnvrt,w
  9199  00FE' 0084               	movwf	4
  9200  00FF' 0810'              	movf	??_vfpfcnvrt+1,w
  9201  0100' 1803               	skipnc
  9202  0101' 0A10'              	incf	??_vfpfcnvrt+1,w
  9203  0102' 0085               	movwf	5
  9204  0103' 0012               	moviw fsr0++
  9205  0104' 3A73               	xorlw	115
  9206  0105' 1D03               	btfss	3,2
  9207  0106' 2800'              	goto	l4829
  9208                           
  9209                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1662:    *fmt += 
      +                          3;
  9210  0107' 080D'              	movf	vfpfcnvrt@fmt,w
  9211  0108' 0086               	movwf	6
  9212  0109' 0187               	clrf	7
  9213  010A' 3003               	movlw	3
  9214  010B'                    L3:
  9215  010B' 0781               	addwf	1,f
  9216  010C' 3141               	addfsr 1,1
  9217  010D' 1803               	skipnc
  9218  010E' 0A81               	incf	1,f
  9219                           
  9220                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1659:    done = 1
      +                          ;
  9221  010F' 0197'              	clrf	vfpfcnvrt@done
  9222  0110' 0A97'              	incf	vfpfcnvrt@done,f
  9223  0111'                    l4829:
  9224                           
  9225                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1665:   if (done)
      +                           {
  9226  0111' 0817'              	movf	vfpfcnvrt@done,w
  9227  0112' 1903               	btfsc	3,2
  9228  0113' 2800'              	goto	l4839
  9229                           
  9230                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1669:    for (cha
      +                          r * cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0)); *cp != '\0'; cp++) {
  9231  0114' 080E'              	movf	vfpfcnvrt@ap,w
  9232  0115' 0086               	movwf	6
  9233  0116' 0187               	clrf	7
  9234  0117' 0801               	movf	1,w
  9235  0118' 0084               	movwf	4
  9236  0119' 0185               	clrf	5
  9237  011A' 3002               	movlw	2
  9238  011B' 0781               	addwf	1,f
  9239  011C' 3F00               	moviw [0]fsr0
  9240  011D' 0093'              	movwf	vfpfcnvrt@cp_2048
  9241  011E' 3F01               	moviw [1]fsr0
  9242  011F' 0094'              	movwf	vfpfcnvrt@cp_2048+1
  9243  0120'                    l4837:
  9244  0120' 0813'              	movf	vfpfcnvrt@cp_2048,w
  9245  0121' 0084               	movwf	4
  9246  0122' 0814'              	movf	vfpfcnvrt@cp_2048+1,w
  9247  0123' 0085               	movwf	5
  9248  0124' 0012               	moviw fsr0++
  9249  0125' 1903               	btfsc	3,2
  9250  0126' 0008               	return
  9251                           
  9252                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1670:     fputc(*
      +                          cp, fp);
  9253  0127' 0813'              	movf	vfpfcnvrt@cp_2048,w
  9254  0128' 0084               	movwf	4
  9255  0129' 0814'              	movf	vfpfcnvrt@cp_2048+1,w
  9256  012A' 0085               	movwf	5
  9257  012B' 0800               	movf	0,w	;code access
  9258  012C' 008F'              	movwf	??_vfpfcnvrt
  9259  012D' 0190'              	clrf	??_vfpfcnvrt+1
  9260  012E' 080F'              	movf	??_vfpfcnvrt,w
  9261  012F' 0080'              	movwf	fputc@c
  9262  0130' 0810'              	movf	??_vfpfcnvrt+1,w
  9263  0131' 0081'              	movwf	fputc@c+1
  9264  0132' 080C'              	movf	vfpfcnvrt@fp+1,w
  9265  0133' 0083'              	movwf	fputc@fp+1
  9266  0134' 080B'              	movf	vfpfcnvrt@fp,w
  9267  0135' 0082'              	movwf	fputc@fp
  9268  0136' 3180' 2000' 3180'  	fcall	_fputc
  9269                           
  9270                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1674:    }
  9271  0139' 3001               	movlw	1
  9272  013A' 0020               	movlb	0	; select bank0
  9273  013B' 0793'              	addwf	vfpfcnvrt@cp_2048,f
  9274  013C' 3000               	movlw	0
  9275  013D' 3D94'              	addwfc	vfpfcnvrt@cp_2048+1,f
  9276  013E' 2800'              	goto	l4837
  9277  013F'                    l4839:
  9278                           
  9279                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  9280  013F' 0020               	movlb	0	; select bank0
  9281  0140' 080D'              	movf	vfpfcnvrt@fmt,w
  9282  0141' 0086               	movwf	6
  9283  0142' 0187               	clrf	7
  9284  0143' 3001               	movlw	1
  9285  0144' 0781               	addwf	1,f
  9286  0145' 3141               	addfsr 1,1
  9287  0146' 1803               	skipnc
  9288  0147' 0A81               	incf	1,f
  9289  0148' 0008               	return
  9290  0149'                    l4843:
  9291                           
  9292                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  9293  0149' 080D'              	movf	vfpfcnvrt@fmt,w
  9294  014A' 0086               	movwf	6
  9295  014B' 0187               	clrf	7
  9296  014C' 3F40               	moviw [0]fsr1
  9297  014D' 008F'              	movwf	??_vfpfcnvrt
  9298  014E' 3F41               	moviw [1]fsr1
  9299  014F' 0090'              	movwf	??_vfpfcnvrt+1
  9300  0150' 080F'              	movf	??_vfpfcnvrt,w
  9301  0151' 0084               	movwf	4
  9302  0152' 0810'              	movf	??_vfpfcnvrt+1,w
  9303  0153' 0085               	movwf	5
  9304  0154' 0800               	movf	0,w	;code access
  9305  0155' 0091'              	movwf	??_vfpfcnvrt+2
  9306  0156' 0192'              	clrf	??_vfpfcnvrt+3
  9307  0157' 0811'              	movf	??_vfpfcnvrt+2,w
  9308  0158' 0080'              	movwf	fputc@c
  9309  0159' 0812'              	movf	??_vfpfcnvrt+3,w
  9310  015A' 0081'              	movwf	fputc@c+1
  9311  015B' 080C'              	movf	vfpfcnvrt@fp+1,w
  9312  015C' 0083'              	movwf	fputc@fp+1
  9313  015D' 080B'              	movf	vfpfcnvrt@fp,w
  9314  015E' 0082'              	movwf	fputc@fp
  9315  015F' 3180' 2000' 3180'  	fcall	_fputc
  9316  0162' 2800'              	goto	l4839
  9317  0163'                    __end_of_vfpfcnvrt:
  9318                           
  9319                           	psect	text30
  9320  0000'                    __ptext30:	
  9321 ;; *************** function _fputc *****************
  9322 ;; Defined at:
  9323 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;  c               2    0[BANK0 ] int 
  9326 ;;  fp              2    2[BANK0 ] PTR struct _IO_FILE
  9327 ;;		 -> NULL(0), 
  9328 ;; Auto vars:     Size  Location     Type
  9329 ;;		None
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  2    0[BANK0 ] int 
  9332 ;; Registers used:
  9333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9339 ;;      Params:         0       4       0       0       0       0       0       0
  9340 ;;      Locals:         0       0       0       0       0       0       0       0
  9341 ;;      Temps:          0       5       0       0       0       0       0       0
  9342 ;;      Totals:         0       9       0       0       0       0       0       0
  9343 ;;Total ram usage:        9 bytes
  9344 ;; Hardware stack levels used: 1
  9345 ;; Hardware stack levels required when called: 8
  9346 ;; This function calls:
  9347 ;;		_putch
  9348 ;; This function is called by:
  9349 ;;		_vfpfcnvrt
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353  0000'                    _fputc:	
  9354                           ;psect for function _fputc
  9355                           
  9356                           
  9357                           ;incstack = 0
  9358 ;; hardware stack exceeded
  9359                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9360  0000' 0020               	movlb	0	; select bank0
  9361  0001' 0802'              	movf	fputc@fp,w
  9362  0002' 0403'              	iorwf	fputc@fp+1,w
  9363  0003' 1903               	btfsc	3,2
  9364  0004' 2800'              	goto	l4751
  9365  0005' 0802'              	movf	fputc@fp,w
  9366  0006' 0403'              	iorwf	fputc@fp+1,w
  9367  0007' 1D03               	btfss	3,2
  9368  0008' 2800'              	goto	l4753
  9369  0009'                    l4751:
  9370  0009' 0800'              	movf	fputc@c,w
  9371  000A' 3180' 2000'        	fcall	_putch
  9372  000C' 0008               	return
  9373  000D'                    l4753:
  9374  000D' 0802'              	movf	fputc@fp,w
  9375  000E' 0086               	movwf	6
  9376  000F' 0803'              	movf	fputc@fp+1,w
  9377  0010' 0087               	movwf	7
  9378  0011' 3149               	addfsr 1,9
  9379  0012' 0016               	moviw fsr1++
  9380  0013' 0401               	iorwf	1,w
  9381  0014' 1903               	btfsc	3,2
  9382  0015' 2800'              	goto	l4757
  9383  0016' 0802'              	movf	fputc@fp,w
  9384  0017' 0086               	movwf	6
  9385  0018' 0803'              	movf	fputc@fp+1,w
  9386  0019' 0087               	movwf	7
  9387  001A' 3149               	addfsr 1,9
  9388  001B' 3F40               	moviw [0]fsr1
  9389  001C' 0084'              	movwf	??_fputc
  9390  001D' 3F41               	moviw [1]fsr1
  9391  001E' 0085'              	movwf	??_fputc+1
  9392  001F' 0802'              	movf	fputc@fp,w
  9393  0020' 0086               	movwf	6
  9394  0021' 0803'              	movf	fputc@fp+1,w
  9395  0022' 0087               	movwf	7
  9396  0023' 3142               	addfsr 1,2
  9397  0024' 3F40               	moviw [0]fsr1
  9398  0025' 0086'              	movwf	??_fputc+2
  9399  0026' 3F41               	moviw [1]fsr1
  9400  0027' 0087'              	movwf	??_fputc+3
  9401  0028' 0807'              	movf	??_fputc+3,w
  9402  0029' 3A80               	xorlw	128
  9403  002A' 0088'              	movwf	??_fputc+4
  9404  002B' 0805'              	movf	??_fputc+1,w
  9405  002C' 3A80               	xorlw	128
  9406  002D' 0208'              	subwf	??_fputc+4,w
  9407  002E' 1D03               	skipz
  9408  002F' 2800'              	goto	u4805
  9409  0030' 0804'              	movf	??_fputc,w
  9410  0031' 0206'              	subwf	??_fputc+2,w
  9411  0032'                    u4805:
  9412  0032' 1803               	skipnc
  9413  0033' 0008               	return
  9414  0034'                    l4757:
  9415  0034' 0020               	movlb	0	; select bank0
  9416  0035' 0802'              	movf	fputc@fp,w
  9417  0036' 0086               	movwf	6
  9418  0037' 0803'              	movf	fputc@fp+1,w
  9419  0038' 0087               	movwf	7
  9420  0039' 3142               	addfsr 1,2
  9421  003A' 0802'              	movf	fputc@fp,w
  9422  003B' 0084               	movwf	4
  9423  003C' 0803'              	movf	fputc@fp+1,w
  9424  003D' 0085               	movwf	5
  9425  003E' 3F40               	moviw [0]fsr1
  9426  003F' 0700               	addwf	0,w
  9427  0040' 0084'              	movwf	??_fputc
  9428  0041' 3101               	addfsr 0,1
  9429  0042' 3F41               	moviw [1]fsr1
  9430  0043' 3D00               	addwfc	0,w
  9431  0044' 0085'              	movwf	??_fputc+1
  9432  0045' 0804'              	movf	??_fputc,w
  9433  0046' 0086               	movwf	6
  9434  0047' 0805'              	movf	??_fputc+1,w
  9435  0048' 0087               	movwf	7
  9436  0049' 0800'              	movf	fputc@c,w
  9437  004A' 0081               	movwf	1
  9438  004B' 0802'              	movf	fputc@fp,w
  9439  004C' 0086               	movwf	6
  9440  004D' 0803'              	movf	fputc@fp+1,w
  9441  004E' 0087               	movwf	7
  9442  004F' 3142               	addfsr 1,2
  9443  0050' 3001               	movlw	1
  9444  0051' 0781               	addwf	1,f
  9445  0052' 3141               	addfsr 1,1
  9446  0053' 1803               	skipnc
  9447  0054' 0A81               	incf	1,f
  9448  0055' 0008               	return
  9449  0056'                    __end_of_fputc:
  9450                           
  9451                           	psect	text31
  9452  0000'                    __ptext31:	
  9453 ;; *************** function _putch *****************
  9454 ;; Defined at:
  9455 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;  c               1    wreg     unsigned char 
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;  c               1    0[COMMON] unsigned char 
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  1    wreg      void 
  9462 ;; Registers used:
  9463 ;;		wreg
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9469 ;;      Params:         0       0       0       0       0       0       0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0
  9472 ;;      Totals:         0       0       0       0       0       0       0       0
  9473 ;;Total ram usage:        0 bytes
  9474 ;; Hardware stack levels used: 1
  9475 ;; Hardware stack levels required when called: 7
  9476 ;; This function calls:
  9477 ;;		Nothing
  9478 ;; This function is called by:
  9479 ;;		_fputc
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483  0000'                    _putch:	
  9484                           ;psect for function _putch
  9485                           
  9486                           
  9487                           ;incstack = 0
  9488 ;; hardware stack exceeded
  9489                           ; Regs used in _putch: [wreg]
  9490  0000' 0008               	return
  9491  0001'                    __end_of_putch:
  9492                           
  9493                           	psect	text32
  9494  0000'                    __ptext32:	
  9495 ;; *************** function _abs *****************
  9496 ;; Defined at:
  9497 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
  9498 ;; Parameters:    Size  Location     Type
  9499 ;;  a               2    7[BANK0 ] int 
  9500 ;; Auto vars:     Size  Location     Type
  9501 ;;		None
  9502 ;; Return value:  Size  Location     Type
  9503 ;;                  2    7[BANK0 ] int 
  9504 ;; Registers used:
  9505 ;;		wreg, status,2, status,0
  9506 ;; Tracked objects:
  9507 ;;		On entry : 0/0
  9508 ;;		On exit  : 0/0
  9509 ;;		Unchanged: 0/0
  9510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9511 ;;      Params:         0       2       0       0       0       0       0       0
  9512 ;;      Locals:         0       0       0       0       0       0       0       0
  9513 ;;      Temps:          0       2       0       0       0       0       0       0
  9514 ;;      Totals:         0       4       0       0       0       0       0       0
  9515 ;;Total ram usage:        4 bytes
  9516 ;; Hardware stack levels used: 1
  9517 ;; Hardware stack levels required when called: 7
  9518 ;; This function calls:
  9519 ;;		Nothing
  9520 ;; This function is called by:
  9521 ;;		_vfpfcnvrt
  9522 ;; This function uses a non-reentrant model
  9523 ;;
  9524                           
  9525  0000'                    _abs:	
  9526                           ;psect for function _abs
  9527                           
  9528                           
  9529                           ;incstack = 0
  9530                           ; Regs used in _abs: [wreg+status,2+status,0]
  9531  0000' 0020               	movlb	0	; select bank0
  9532  0001' 1F88'              	btfss	abs@a+1,7
  9533  0002' 0008               	return
  9534  0003' 0907'              	comf	abs@a,w
  9535  0004' 0089'              	movwf	??_abs
  9536  0005' 0908'              	comf	abs@a+1,w
  9537  0006' 008A'              	movwf	??_abs+1
  9538  0007' 0A89'              	incf	??_abs,f
  9539  0008' 1903               	skipnz
  9540  0009' 0A8A'              	incf	??_abs+1,f
  9541  000A' 0809'              	movf	??_abs,w
  9542  000B' 0087'              	movwf	?_abs
  9543  000C' 080A'              	movf	??_abs+1,w
  9544  000D' 0088'              	movwf	?_abs+1
  9545  000E' 0008               	return
  9546  000F'                    __end_of_abs:
  9547                           
  9548                           	psect	text33
  9549  0000'                    __ptext33:	
  9550 ;; *************** function ___awmod *****************
  9551 ;; Defined at:
  9552 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  9553 ;; Parameters:    Size  Location     Type
  9554 ;;  divisor         2    0[BANK0 ] int 
  9555 ;;  dividend        2    2[BANK0 ] int 
  9556 ;; Auto vars:     Size  Location     Type
  9557 ;;  sign            1    6[BANK0 ] unsigned char 
  9558 ;;  counter         1    5[BANK0 ] unsigned char 
  9559 ;; Return value:  Size  Location     Type
  9560 ;;                  2    0[BANK0 ] int 
  9561 ;; Registers used:
  9562 ;;		wreg, status,2, status,0
  9563 ;; Tracked objects:
  9564 ;;		On entry : 0/0
  9565 ;;		On exit  : 0/0
  9566 ;;		Unchanged: 0/0
  9567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9568 ;;      Params:         0       4       0       0       0       0       0       0
  9569 ;;      Locals:         0       2       0       0       0       0       0       0
  9570 ;;      Temps:          0       1       0       0       0       0       0       0
  9571 ;;      Totals:         0       7       0       0       0       0       0       0
  9572 ;;Total ram usage:        7 bytes
  9573 ;; Hardware stack levels used: 1
  9574 ;; Hardware stack levels required when called: 7
  9575 ;; This function calls:
  9576 ;;		Nothing
  9577 ;; This function is called by:
  9578 ;;		_vfpfcnvrt
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582  0000'                    ___awmod:	
  9583                           ;psect for function ___awmod
  9584                           
  9585                           
  9586                           ;incstack = 0
  9587                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9588  0000' 0020               	movlb	0	; select bank0
  9589  0001' 0186'              	clrf	___awmod@sign
  9590  0002' 1F83'              	btfss	___awmod@dividend+1,7
  9591  0003' 2800'              	goto	l4717
  9592  0004' 0982'              	comf	___awmod@dividend,f
  9593  0005' 0983'              	comf	___awmod@dividend+1,f
  9594  0006' 0A82'              	incf	___awmod@dividend,f
  9595  0007' 1903               	skipnz
  9596  0008' 0A83'              	incf	___awmod@dividend+1,f
  9597  0009' 0186'              	clrf	___awmod@sign
  9598  000A' 0A86'              	incf	___awmod@sign,f
  9599  000B'                    l4717:
  9600  000B' 1F81'              	btfss	___awmod@divisor+1,7
  9601  000C' 2800'              	goto	l4721
  9602  000D' 0980'              	comf	___awmod@divisor,f
  9603  000E' 0981'              	comf	___awmod@divisor+1,f
  9604  000F' 0A80'              	incf	___awmod@divisor,f
  9605  0010' 1903               	skipnz
  9606  0011' 0A81'              	incf	___awmod@divisor+1,f
  9607  0012'                    l4721:
  9608  0012' 0800'              	movf	___awmod@divisor,w
  9609  0013' 0401'              	iorwf	___awmod@divisor+1,w
  9610  0014' 1903               	btfsc	3,2
  9611  0015' 2800'              	goto	l4739
  9612  0016' 0185'              	clrf	___awmod@counter
  9613  0017' 0A85'              	incf	___awmod@counter,f
  9614  0018'                    l4729:
  9615  0018' 1B81'              	btfsc	___awmod@divisor+1,7
  9616  0019' 2800'              	goto	l4731
  9617  001A' 3001               	movlw	1
  9618  001B'                    u4715:
  9619  001B' 3580'              	lslf	___awmod@divisor,f
  9620  001C' 0D81'              	rlf	___awmod@divisor+1,f
  9621  001D' 0B89               	decfsz	9,f
  9622  001E' 2800'              	goto	u4715
  9623  001F' 3001               	movlw	1
  9624  0020' 0084'              	movwf	??___awmod
  9625  0021' 0804'              	movf	??___awmod,w
  9626  0022' 0785'              	addwf	___awmod@counter,f
  9627  0023' 2800'              	goto	l4729
  9628  0024'                    l4731:
  9629  0024' 0801'              	movf	___awmod@divisor+1,w
  9630  0025' 0203'              	subwf	___awmod@dividend+1,w
  9631  0026' 1D03               	skipz
  9632  0027' 2800'              	goto	u4735
  9633  0028' 0800'              	movf	___awmod@divisor,w
  9634  0029' 0202'              	subwf	___awmod@dividend,w
  9635  002A'                    u4735:
  9636  002A' 1C03               	skipc
  9637  002B' 2800'              	goto	l4735
  9638  002C' 0800'              	movf	___awmod@divisor,w
  9639  002D' 0282'              	subwf	___awmod@dividend,f
  9640  002E' 0801'              	movf	___awmod@divisor+1,w
  9641  002F' 3B83'              	subwfb	___awmod@dividend+1,f
  9642  0030'                    l4735:
  9643  0030' 3001               	movlw	1
  9644  0031'                    u4745:
  9645  0031' 3681'              	lsrf	___awmod@divisor+1,f
  9646  0032' 0C80'              	rrf	___awmod@divisor,f
  9647  0033' 0B89               	decfsz	9,f
  9648  0034' 2800'              	goto	u4745
  9649  0035' 3001               	movlw	1
  9650  0036' 0285'              	subwf	___awmod@counter,f
  9651  0037' 1D03               	btfss	3,2
  9652  0038' 2800'              	goto	l4731
  9653  0039'                    l4739:
  9654  0039' 0806'              	movf	___awmod@sign,w
  9655  003A' 1903               	btfsc	3,2
  9656  003B' 2800'              	goto	l4743
  9657  003C' 0982'              	comf	___awmod@dividend,f
  9658  003D' 0983'              	comf	___awmod@dividend+1,f
  9659  003E' 0A82'              	incf	___awmod@dividend,f
  9660  003F' 1903               	skipnz
  9661  0040' 0A83'              	incf	___awmod@dividend+1,f
  9662  0041'                    l4743:
  9663  0041' 0803'              	movf	___awmod@dividend+1,w
  9664  0042' 0081'              	movwf	?___awmod+1
  9665  0043' 0802'              	movf	___awmod@dividend,w
  9666  0044' 0080'              	movwf	?___awmod
  9667  0045' 0008               	return
  9668  0046'                    __end_of___awmod:
  9669                           
  9670                           	psect	text34
  9671  0000'                    __ptext34:	
  9672 ;; *************** function ___awdiv *****************
  9673 ;; Defined at:
  9674 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;  divisor         2    0[BANK0 ] int 
  9677 ;;  dividend        2    2[BANK0 ] int 
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;  quotient        2    7[BANK0 ] int 
  9680 ;;  sign            1    6[BANK0 ] unsigned char 
  9681 ;;  counter         1    5[BANK0 ] unsigned char 
  9682 ;; Return value:  Size  Location     Type
  9683 ;;                  2    0[BANK0 ] int 
  9684 ;; Registers used:
  9685 ;;		wreg, status,2, status,0
  9686 ;; Tracked objects:
  9687 ;;		On entry : 0/0
  9688 ;;		On exit  : 0/0
  9689 ;;		Unchanged: 0/0
  9690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9691 ;;      Params:         0       4       0       0       0       0       0       0
  9692 ;;      Locals:         0       4       0       0       0       0       0       0
  9693 ;;      Temps:          0       1       0       0       0       0       0       0
  9694 ;;      Totals:         0       9       0       0       0       0       0       0
  9695 ;;Total ram usage:        9 bytes
  9696 ;; Hardware stack levels used: 1
  9697 ;; Hardware stack levels required when called: 7
  9698 ;; This function calls:
  9699 ;;		Nothing
  9700 ;; This function is called by:
  9701 ;;		_vfpfcnvrt
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705  0000'                    ___awdiv:	
  9706                           ;psect for function ___awdiv
  9707                           
  9708                           
  9709                           ;incstack = 0
  9710                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9711  0000' 0020               	movlb	0	; select bank0
  9712  0001' 0186'              	clrf	___awdiv@sign
  9713  0002' 1F81'              	btfss	___awdiv@divisor+1,7
  9714  0003' 2800'              	goto	l4673
  9715  0004' 0980'              	comf	___awdiv@divisor,f
  9716  0005' 0981'              	comf	___awdiv@divisor+1,f
  9717  0006' 0A80'              	incf	___awdiv@divisor,f
  9718  0007' 1903               	skipnz
  9719  0008' 0A81'              	incf	___awdiv@divisor+1,f
  9720  0009' 0186'              	clrf	___awdiv@sign
  9721  000A' 0A86'              	incf	___awdiv@sign,f
  9722  000B'                    l4673:
  9723  000B' 1F83'              	btfss	___awdiv@dividend+1,7
  9724  000C' 2800'              	goto	l4679
  9725  000D' 0982'              	comf	___awdiv@dividend,f
  9726  000E' 0983'              	comf	___awdiv@dividend+1,f
  9727  000F' 0A82'              	incf	___awdiv@dividend,f
  9728  0010' 1903               	skipnz
  9729  0011' 0A83'              	incf	___awdiv@dividend+1,f
  9730  0012' 3001               	movlw	1
  9731  0013' 0084'              	movwf	??___awdiv
  9732  0014' 0804'              	movf	??___awdiv,w
  9733  0015' 0686'              	xorwf	___awdiv@sign,f
  9734  0016'                    l4679:
  9735  0016' 0187'              	clrf	___awdiv@quotient
  9736  0017' 0188'              	clrf	___awdiv@quotient+1
  9737  0018' 0800'              	movf	___awdiv@divisor,w
  9738  0019' 0401'              	iorwf	___awdiv@divisor+1,w
  9739  001A' 1903               	btfsc	3,2
  9740  001B' 2800'              	goto	l4701
  9741  001C' 0185'              	clrf	___awdiv@counter
  9742  001D' 0A85'              	incf	___awdiv@counter,f
  9743  001E'                    l4689:
  9744  001E' 1B81'              	btfsc	___awdiv@divisor+1,7
  9745  001F' 2800'              	goto	l4691
  9746  0020' 3001               	movlw	1
  9747  0021'                    u4615:
  9748  0021' 3580'              	lslf	___awdiv@divisor,f
  9749  0022' 0D81'              	rlf	___awdiv@divisor+1,f
  9750  0023' 0B89               	decfsz	9,f
  9751  0024' 2800'              	goto	u4615
  9752  0025' 3001               	movlw	1
  9753  0026' 0084'              	movwf	??___awdiv
  9754  0027' 0804'              	movf	??___awdiv,w
  9755  0028' 0785'              	addwf	___awdiv@counter,f
  9756  0029' 2800'              	goto	l4689
  9757  002A'                    l4691:
  9758  002A' 3001               	movlw	1
  9759  002B'                    u4635:
  9760  002B' 3587'              	lslf	___awdiv@quotient,f
  9761  002C' 0D88'              	rlf	___awdiv@quotient+1,f
  9762  002D' 0B89               	decfsz	9,f
  9763  002E' 2800'              	goto	u4635
  9764  002F' 0801'              	movf	___awdiv@divisor+1,w
  9765  0030' 0203'              	subwf	___awdiv@dividend+1,w
  9766  0031' 1D03               	skipz
  9767  0032' 2800'              	goto	u4645
  9768  0033' 0800'              	movf	___awdiv@divisor,w
  9769  0034' 0202'              	subwf	___awdiv@dividend,w
  9770  0035'                    u4645:
  9771  0035' 1C03               	skipc
  9772  0036' 2800'              	goto	l4697
  9773  0037' 0800'              	movf	___awdiv@divisor,w
  9774  0038' 0282'              	subwf	___awdiv@dividend,f
  9775  0039' 0801'              	movf	___awdiv@divisor+1,w
  9776  003A' 3B83'              	subwfb	___awdiv@dividend+1,f
  9777  003B' 1407'              	bsf	___awdiv@quotient,0
  9778  003C'                    l4697:
  9779  003C' 3001               	movlw	1
  9780  003D'                    u4655:
  9781  003D' 3681'              	lsrf	___awdiv@divisor+1,f
  9782  003E' 0C80'              	rrf	___awdiv@divisor,f
  9783  003F' 0B89               	decfsz	9,f
  9784  0040' 2800'              	goto	u4655
  9785  0041' 3001               	movlw	1
  9786  0042' 0285'              	subwf	___awdiv@counter,f
  9787  0043' 1D03               	btfss	3,2
  9788  0044' 2800'              	goto	l4691
  9789  0045'                    l4701:
  9790  0045' 0806'              	movf	___awdiv@sign,w
  9791  0046' 1903               	btfsc	3,2
  9792  0047' 2800'              	goto	l4705
  9793  0048' 0987'              	comf	___awdiv@quotient,f
  9794  0049' 0988'              	comf	___awdiv@quotient+1,f
  9795  004A' 0A87'              	incf	___awdiv@quotient,f
  9796  004B' 1903               	skipnz
  9797  004C' 0A88'              	incf	___awdiv@quotient+1,f
  9798  004D'                    l4705:
  9799  004D' 0808'              	movf	___awdiv@quotient+1,w
  9800  004E' 0081'              	movwf	?___awdiv+1
  9801  004F' 0807'              	movf	___awdiv@quotient,w
  9802  0050' 0080'              	movwf	?___awdiv
  9803  0051' 0008               	return
  9804  0052'                    __end_of___awdiv:
  9805                           
  9806                           	psect	text35
  9807  0000'                    __ptext35:	
  9808 ;; *************** function _abort *****************
  9809 ;; Defined at:
  9810 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abort.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;		None
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;		None
  9815 ;; Return value:  Size  Location     Type
  9816 ;;                  1    wreg      void 
  9817 ;; Registers used:
  9818 ;;		wreg, status,2, status,0, pclath, cstack
  9819 ;; Tracked objects:
  9820 ;;		On entry : 0/0
  9821 ;;		On exit  : 0/0
  9822 ;;		Unchanged: 0/0
  9823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9824 ;;      Params:         0       0       0       0       0       0       0       0
  9825 ;;      Locals:         0       0       0       0       0       0       0       0
  9826 ;;      Temps:          0       0       0       0       0       0       0       0
  9827 ;;      Totals:         0       0       0       0       0       0       0       0
  9828 ;;Total ram usage:        0 bytes
  9829 ;; Hardware stack levels used: 1
  9830 ;; Hardware stack levels required when called: 9
  9831 ;; This function calls:
  9832 ;;		_exit
  9833 ;; This function is called by:
  9834 ;;		___assert_fail
  9835 ;; This function uses a non-reentrant model
  9836 ;;
  9837                           
  9838  0000'                    _abort:	
  9839                           ;psect for function _abort
  9840                           
  9841                           
  9842                           ;incstack = 0
  9843                           ; Regs used in _abort: [wreg+status,2+status,0+pclath+cstack]
  9844  0000' 30FF               	movlw	255
  9845  0001' 0020               	movlb	0	; select bank0
  9846  0002' 0082'              	movwf	exit@code
  9847  0003' 30FF               	movlw	255
  9848  0004' 0083'              	movwf	exit@code+1
  9849  0005' 3180' 2000'        	fcall	_exit
  9850  0007' 0008               	return
  9851  0008'                    __end_of_abort:
  9852                           
  9853                           	psect	text36
  9854  0000'                    __ptext36:	
  9855 ;; *************** function _exit *****************
  9856 ;; Defined at:
  9857 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\exit.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;  code            2    2[BANK0 ] int 
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;		None
  9862 ;; Return value:  Size  Location     Type
  9863 ;;                  1    wreg      void 
  9864 ;; Registers used:
  9865 ;;		wreg, status,2, status,0, pclath, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9871 ;;      Params:         0       2       0       0       0       0       0       0
  9872 ;;      Locals:         0       0       0       0       0       0       0       0
  9873 ;;      Temps:          0       0       0       0       0       0       0       0
  9874 ;;      Totals:         0       2       0       0       0       0       0       0
  9875 ;;Total ram usage:        2 bytes
  9876 ;; Hardware stack levels used: 1
  9877 ;; Hardware stack levels required when called: 8
  9878 ;; This function calls:
  9879 ;;		__Exit
  9880 ;;		___funcs_on_exit
  9881 ;; This function is called by:
  9882 ;;		_abort
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886  0000'                    _exit:	
  9887                           ;psect for function _exit
  9888                           
  9889                           
  9890                           ;incstack = 0
  9891                           ; Regs used in _exit: [wreg+status,2+status,0+pclath+cstack]
  9892  0000' 3180' 2000' 3180'  	fcall	___funcs_on_exit
  9893  0003' 0020               	movlb	0	; select bank0
  9894  0004' 0803'              	movf	exit@code+1,w
  9895  0005' 0081'              	movwf	__Exit@ec+1
  9896  0006' 0802'              	movf	exit@code,w
  9897  0007' 0080'              	movwf	__Exit@ec
  9898  0008' 3180' 2000'        	fcall	__Exit
  9899  000A' 0008               	return
  9900  000B'                    __end_of_exit:
  9901                           
  9902                           	psect	text37
  9903  0000'                    __ptext37:	
  9904 ;; *************** function ___funcs_on_exit *****************
  9905 ;; Defined at:
  9906 ;;		line 11 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\atexit.c"
  9907 ;; Parameters:    Size  Location     Type
  9908 ;;		None
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;  func            2    0        PTR FTN()void 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;                  1    wreg      void 
  9913 ;; Registers used:
  9914 ;;		wreg, status,2, status,0
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/0
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9920 ;;      Params:         0       0       0       0       0       0       0       0
  9921 ;;      Locals:         0       0       0       0       0       0       0       0
  9922 ;;      Temps:          0       1       0       0       0       0       0       0
  9923 ;;      Totals:         0       1       0       0       0       0       0       0
  9924 ;;Total ram usage:        1 bytes
  9925 ;; Hardware stack levels used: 1
  9926 ;; Hardware stack levels required when called: 7
  9927 ;; This function calls:
  9928 ;;		Nothing
  9929 ;; This function is called by:
  9930 ;;		_exit
  9931 ;; This function uses a non-reentrant model
  9932 ;;
  9933                           
  9934  0000'                    ___funcs_on_exit:	
  9935                           ;psect for function ___funcs_on_exit
  9936                           
  9937  0000'                    l4767:	
  9938                           ;incstack = 0
  9939                           ; Regs used in ___funcs_on_exit: [wreg+status,2+status,0]
  9940                           
  9941  0000' 0805'              	movf	_count,w
  9942  0001' 3A80               	xorlw	128
  9943  0002' 3E7F               	addlw	-129
  9944  0003' 1C03               	btfss	3,0
  9945  0004' 0008               	return
  9946  0005' 30FF               	movlw	255
  9947  0006' 0020               	movlb	0	; select bank0
  9948  0007' 0080'              	movwf	??___funcs_on_exit
  9949  0008' 0800'              	movf	??___funcs_on_exit,w
  9950  0009' 0785'              	addwf	_count,f
  9951  000A' 2800'              	goto	l4767
  9952  000B'                    __end_of___funcs_on_exit:
  9953                           
  9954                           	psect	text38
  9955  0000'                    __ptext38:	
  9956 ;; *************** function __Exit *****************
  9957 ;; Defined at:
  9958 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\_Exit.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;  ec              2    0[BANK0 ] int 
  9961 ;; Auto vars:     Size  Location     Type
  9962 ;;		None
  9963 ;; Return value:  Size  Location     Type
  9964 ;;                  1    wreg      void 
  9965 ;; Registers used:
  9966 ;;		None
  9967 ;; Tracked objects:
  9968 ;;		On entry : 0/0
  9969 ;;		On exit  : 0/0
  9970 ;;		Unchanged: 0/0
  9971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9972 ;;      Params:         0       2       0       0       0       0       0       0
  9973 ;;      Locals:         0       0       0       0       0       0       0       0
  9974 ;;      Temps:          0       0       0       0       0       0       0       0
  9975 ;;      Totals:         0       2       0       0       0       0       0       0
  9976 ;;Total ram usage:        2 bytes
  9977 ;; Hardware stack levels used: 1
  9978 ;; Hardware stack levels required when called: 7
  9979 ;; This function calls:
  9980 ;;		Nothing
  9981 ;; This function is called by:
  9982 ;;		_exit
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986  0000'                    __Exit:	
  9987                           ;psect for function __Exit
  9988                           
  9989  0000'                    l1345:	
  9990                           ;incstack = 0
  9991                           ; Regs used in __Exit: []
  9992                           
  9993  0000' 2800'              	goto	l1345
  9994  0001'                    __end_of__Exit:
  9995                           
  9996                           	psect	text39
  9997  0000'                    __ptext39:	
  9998 ;; *************** function _ADC_StartConversion *****************
  9999 ;; Defined at:
 10000 ;;		line 88 in file "mcc_generated_files/adc/src/adc.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;		None
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;		None
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  1    wreg      void 
 10007 ;; Registers used:
 10008 ;;		None
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10014 ;;      Params:         0       0       0       0       0       0       0       0
 10015 ;;      Locals:         0       0       0       0       0       0       0       0
 10016 ;;      Temps:          0       0       0       0       0       0       0       0
 10017 ;;      Totals:         0       0       0       0       0       0       0       0
 10018 ;;Total ram usage:        0 bytes
 10019 ;; Hardware stack levels used: 1
 10020 ;; Hardware stack levels required when called: 7
 10021 ;; This function calls:
 10022 ;;		Nothing
 10023 ;; This function is called by:
 10024 ;;		_getADCValue
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028  0000'                    _ADC_StartConversion:	
 10029                           ;psect for function _ADC_StartConversion
 10030                           
 10031                           
 10032                           ;mcc_generated_files/adc/src/adc.c: 91:     ADCON0bits.GO_nDONE = 1;
 10033                           
 10034                           ;incstack = 0
 10035                           ; Regs used in _ADC_StartConversion: []
 10036  0000' 0021               	movlb	1	; select bank1
 10037  0001' 149D               	bsf	29,1	;volatile
 10038  0002' 0008               	return
 10039  0003'                    __end_of_ADC_StartConversion:
 10040                           
 10041                           	psect	text40
 10042  0000'                    __ptext40:	
 10043 ;; *************** function _ADC_SelectChannel *****************
 10044 ;; Defined at:
 10045 ;;		line 82 in file "mcc_generated_files/adc/src/adc.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;  channel         1    wreg     enum E9219
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;  channel         1    1[BANK0 ] enum E9219
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, status,2, status,0
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10059 ;;      Params:         0       0       0       0       0       0       0       0
 10060 ;;      Locals:         0       1       0       0       0       0       0       0
 10061 ;;      Temps:          0       1       0       0       0       0       0       0
 10062 ;;      Totals:         0       2       0       0       0       0       0       0
 10063 ;;Total ram usage:        2 bytes
 10064 ;; Hardware stack levels used: 1
 10065 ;; Hardware stack levels required when called: 7
 10066 ;; This function calls:
 10067 ;;		Nothing
 10068 ;; This function is called by:
 10069 ;;		_getADCValue
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073  0000'                    _ADC_SelectChannel:	
 10074                           ;psect for function _ADC_SelectChannel
 10075                           
 10076                           
 10077                           ;incstack = 0
 10078                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
 10079                           ;ADC_SelectChannel@channel stored from wreg
 10080  0000' 0020               	movlb	0	; select bank0
 10081  0001' 0081'              	movwf	ADC_SelectChannel@channel
 10082                           
 10083                           ;mcc_generated_files/adc/src/adc.c: 82: void ADC_SelectChannel(adc_channel_t channel);mc
      +                          c_generated_files/adc/src/adc.c: 83: {;mcc_generated_files/adc/src/adc.c: 85:     ADCON0
      +                          bits.CHS = channel;
 10084  0002' 0801'              	movf	ADC_SelectChannel@channel,w
 10085  0003' 0080'              	movwf	??_ADC_SelectChannel
 10086  0004' 0D80'              	rlf	??_ADC_SelectChannel,f
 10087  0005' 0D80'              	rlf	??_ADC_SelectChannel,f
 10088  0006' 0021               	movlb	1	; select bank1
 10089  0007' 081D               	movf	29,w	;volatile
 10090  0008' 0020               	movlb	0	; select bank0
 10091  0009' 0600'              	xorwf	??_ADC_SelectChannel,w
 10092  000A' 3983               	andlw	-125
 10093  000B' 0600'              	xorwf	??_ADC_SelectChannel,w
 10094  000C' 0021               	movlb	1	; select bank1
 10095  000D' 009D               	movwf	29	;volatile
 10096  000E' 0008               	return
 10097  000F'                    __end_of_ADC_SelectChannel:
 10098                           
 10099                           	psect	text41
 10100  0000'                    __ptext41:	
 10101 ;; *************** function _ADC_IsConversionDone *****************
 10102 ;; Defined at:
 10103 ;;		line 94 in file "mcc_generated_files/adc/src/adc.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;		None
 10106 ;; Auto vars:     Size  Location     Type
 10107 ;;		None
 10108 ;; Return value:  Size  Location     Type
 10109 ;;                  1    wreg      _Bool 
 10110 ;; Registers used:
 10111 ;;		wreg, status,0
 10112 ;; Tracked objects:
 10113 ;;		On entry : 0/0
 10114 ;;		On exit  : 0/0
 10115 ;;		Unchanged: 0/0
 10116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10117 ;;      Params:         0       0       0       0       0       0       0       0
 10118 ;;      Locals:         0       0       0       0       0       0       0       0
 10119 ;;      Temps:          0       0       0       0       0       0       0       0
 10120 ;;      Totals:         0       0       0       0       0       0       0       0
 10121 ;;Total ram usage:        0 bytes
 10122 ;; Hardware stack levels used: 1
 10123 ;; Hardware stack levels required when called: 7
 10124 ;; This function calls:
 10125 ;;		Nothing
 10126 ;; This function is called by:
 10127 ;;		_getADCValue
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131  0000'                    _ADC_IsConversionDone:	
 10132                           ;psect for function _ADC_IsConversionDone
 10133                           
 10134                           
 10135                           ;mcc_generated_files/adc/src/adc.c: 97:     return ((_Bool)(!ADCON0bits.GO_nDONE));
 10136                           
 10137                           ;incstack = 0
 10138                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
 10139  0000' 1003               	clrc
 10140  0001' 0021               	movlb	1	; select bank1
 10141  0002' 1C9D               	btfss	29,1	;volatile
 10142  0003' 1403               	setc
 10143  0004' 3000               	movlw	0
 10144  0005' 3D09               	addwfc	9,w
 10145  0006' 0008               	return
 10146  0007'                    __end_of_ADC_IsConversionDone:
 10147                           
 10148                           	psect	text42
 10149  0000'                    __ptext42:	
 10150 ;; *************** function _ADC_GetConversionResult *****************
 10151 ;; Defined at:
 10152 ;;		line 100 in file "mcc_generated_files/adc/src/adc.c"
 10153 ;; Parameters:    Size  Location     Type
 10154 ;;		None
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;		None
 10157 ;; Return value:  Size  Location     Type
 10158 ;;                  2    0[BANK0 ] unsigned short 
 10159 ;; Registers used:
 10160 ;;		wreg
 10161 ;; Tracked objects:
 10162 ;;		On entry : 0/0
 10163 ;;		On exit  : 0/0
 10164 ;;		Unchanged: 0/0
 10165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10166 ;;      Params:         0       2       0       0       0       0       0       0
 10167 ;;      Locals:         0       0       0       0       0       0       0       0
 10168 ;;      Temps:          0       0       0       0       0       0       0       0
 10169 ;;      Totals:         0       2       0       0       0       0       0       0
 10170 ;;Total ram usage:        2 bytes
 10171 ;; Hardware stack levels used: 1
 10172 ;; Hardware stack levels required when called: 7
 10173 ;; This function calls:
 10174 ;;		Nothing
 10175 ;; This function is called by:
 10176 ;;		_getADCValue
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180  0000'                    _ADC_GetConversionResult:	
 10181                           ;psect for function _ADC_GetConversionResult
 10182                           
 10183                           
 10184                           ;mcc_generated_files/adc/src/adc.c: 103:     return ((adc_result_t)((ADRESH << 8) + ADRE
      +                          SL));
 10185                           
 10186                           ;incstack = 0
 10187                           ; Regs used in _ADC_GetConversionResult: [wreg]
 10188  0000' 0021               	movlb	1	; select bank1
 10189  0001' 081C               	movf	28,w	;volatile
 10190  0002' 0020               	movlb	0	; select bank0
 10191  0003' 0081'              	movwf	?_ADC_GetConversionResult+1
 10192  0004' 0021               	movlb	1	; select bank1
 10193  0005' 081B               	movf	27,w	;volatile
 10194  0006' 0020               	movlb	0	; select bank0
 10195  0007' 0080'              	movwf	?_ADC_GetConversionResult
 10196  0008' 0008               	return
 10197  0009'                    __end_of_ADC_GetConversionResult:
 10198                           
 10199                           	psect	text43
 10200  0000'                    __ptext43:	
 10201 ;; *************** function ___xxtofl *****************
 10202 ;; Defined at:
 10203 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\xxtofl.c"
 10204 ;; Parameters:    Size  Location     Type
 10205 ;;  sign            1    wreg     unsigned char 
 10206 ;;  val             4    0[BANK0 ] long 
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;  sign            1    8[BANK0 ] unsigned char 
 10209 ;;  arg             4   10[BANK0 ] unsigned long 
 10210 ;;  exp             1    9[BANK0 ] unsigned char 
 10211 ;; Return value:  Size  Location     Type
 10212 ;;                  4    0[BANK0 ] unsigned char 
 10213 ;; Registers used:
 10214 ;;		wreg, status,2, status,0
 10215 ;; Tracked objects:
 10216 ;;		On entry : 0/0
 10217 ;;		On exit  : 0/0
 10218 ;;		Unchanged: 0/0
 10219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10220 ;;      Params:         0       4       0       0       0       0       0       0
 10221 ;;      Locals:         0       6       0       0       0       0       0       0
 10222 ;;      Temps:          0       4       0       0       0       0       0       0
 10223 ;;      Totals:         0      14       0       0       0       0       0       0
 10224 ;;Total ram usage:       14 bytes
 10225 ;; Hardware stack levels used: 1
 10226 ;; Hardware stack levels required when called: 7
 10227 ;; This function calls:
 10228 ;;		Nothing
 10229 ;; This function is called by:
 10230 ;;		_SSPA_getTemp
 10231 ;;		_SSPA_getPOut
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235  0000'                    ___xxtofl:	
 10236                           ;psect for function ___xxtofl
 10237                           
 10238                           
 10239                           ;incstack = 0
 10240                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 10241                           ;___xxtofl@sign stored from wreg
 10242  0000' 0020               	movlb	0	; select bank0
 10243  0001' 0088'              	movwf	___xxtofl@sign
 10244  0002' 0808'              	movf	___xxtofl@sign,w
 10245  0003' 1D03               	btfss	3,2
 10246  0004' 1F83'              	btfss	___xxtofl@val+3,7
 10247  0005' 2800'              	goto	l3945
 10248  0006' 0900'              	comf	___xxtofl@val,w
 10249  0007' 008A'              	movwf	___xxtofl@arg
 10250  0008' 0901'              	comf	___xxtofl@val+1,w
 10251  0009' 008B'              	movwf	___xxtofl@arg+1
 10252  000A' 0902'              	comf	___xxtofl@val+2,w
 10253  000B' 008C'              	movwf	___xxtofl@arg+2
 10254  000C' 0903'              	comf	___xxtofl@val+3,w
 10255  000D' 008D'              	movwf	___xxtofl@arg+3
 10256  000E' 0A8A'              	incf	___xxtofl@arg,f
 10257  000F' 1903               	skipnz
 10258  0010' 0A8B'              	incf	___xxtofl@arg+1,f
 10259  0011' 1903               	skipnz
 10260  0012' 0A8C'              	incf	___xxtofl@arg+2,f
 10261  0013' 1903               	skipnz
 10262  0014' 0A8D'              	incf	___xxtofl@arg+3,f
 10263  0015' 2800'              	goto	l1308
 10264  0016'                    l3945:
 10265  0016' 0803'              	movf	___xxtofl@val+3,w
 10266  0017' 008D'              	movwf	___xxtofl@arg+3
 10267  0018' 0802'              	movf	___xxtofl@val+2,w
 10268  0019' 008C'              	movwf	___xxtofl@arg+2
 10269  001A' 0801'              	movf	___xxtofl@val+1,w
 10270  001B' 008B'              	movwf	___xxtofl@arg+1
 10271  001C' 0800'              	movf	___xxtofl@val,w
 10272  001D' 008A'              	movwf	___xxtofl@arg
 10273  001E'                    l1308:
 10274  001E' 0803'              	movf	___xxtofl@val+3,w
 10275  001F' 0402'              	iorwf	___xxtofl@val+2,w
 10276  0020' 0401'              	iorwf	___xxtofl@val+1,w
 10277  0021' 0400'              	iorwf	___xxtofl@val,w
 10278  0022' 1D03               	skipz
 10279  0023' 2800'              	goto	l3951
 10280  0024' 3000               	movlw	0
 10281  0025' 0083'              	movwf	?___xxtofl+3
 10282  0026' 3000               	movlw	0
 10283  0027' 0082'              	movwf	?___xxtofl+2
 10284  0028' 3000               	movlw	0
 10285  0029' 0081'              	movwf	?___xxtofl+1
 10286  002A' 3000               	movlw	0
 10287  002B' 0080'              	movwf	?___xxtofl
 10288  002C' 0008               	return
 10289  002D'                    l3951:
 10290  002D' 3096               	movlw	150
 10291  002E' 0089'              	movwf	___xxtofl@exp
 10292  002F'                    l3955:
 10293  002F' 30FE               	movlw	254
 10294  0030' 050D'              	andwf	___xxtofl@arg+3,w
 10295  0031' 1903               	btfsc	3,2
 10296  0032' 2800'              	goto	l1314
 10297  0033' 3001               	movlw	1
 10298  0034' 0084'              	movwf	??___xxtofl
 10299  0035' 0804'              	movf	??___xxtofl,w
 10300  0036' 0789'              	addwf	___xxtofl@exp,f
 10301  0037' 3001               	movlw	1
 10302  0038'                    u3915:
 10303  0038' 368D'              	lsrf	___xxtofl@arg+3,f
 10304  0039' 0C8C'              	rrf	___xxtofl@arg+2,f
 10305  003A' 0C8B'              	rrf	___xxtofl@arg+1,f
 10306  003B' 0C8A'              	rrf	___xxtofl@arg,f
 10307  003C' 0B89               	decfsz	9,f
 10308  003D' 2800'              	goto	u3915
 10309  003E' 2800'              	goto	l3955
 10310  003F'                    l3957:
 10311  003F' 3001               	movlw	1
 10312  0040' 0084'              	movwf	??___xxtofl
 10313  0041' 0804'              	movf	??___xxtofl,w
 10314  0042' 0789'              	addwf	___xxtofl@exp,f
 10315  0043' 3001               	movlw	1
 10316  0044' 078A'              	addwf	___xxtofl@arg,f
 10317  0045' 3000               	movlw	0
 10318  0046' 3D8B'              	addwfc	___xxtofl@arg+1,f
 10319  0047' 3000               	movlw	0
 10320  0048' 3D8C'              	addwfc	___xxtofl@arg+2,f
 10321  0049' 3000               	movlw	0
 10322  004A' 3D8D'              	addwfc	___xxtofl@arg+3,f
 10323  004B' 3001               	movlw	1
 10324  004C'                    u3935:
 10325  004C' 368D'              	lsrf	___xxtofl@arg+3,f
 10326  004D' 0C8C'              	rrf	___xxtofl@arg+2,f
 10327  004E' 0C8B'              	rrf	___xxtofl@arg+1,f
 10328  004F' 0C8A'              	rrf	___xxtofl@arg,f
 10329  0050' 0B89               	decfsz	9,f
 10330  0051' 2800'              	goto	u3935
 10331  0052'                    l1314:
 10332  0052' 30FF               	movlw	255
 10333  0053' 050D'              	andwf	___xxtofl@arg+3,w
 10334  0054' 1903               	btfsc	3,2
 10335  0055' 2800'              	goto	l3965
 10336  0056' 2800'              	goto	l3957
 10337  0057'                    l3967:
 10338  0057' 3002               	movlw	2
 10339  0058' 0209'              	subwf	___xxtofl@exp,w
 10340  0059' 1C03               	btfss	3,0
 10341  005A' 2800'              	goto	l1321
 10342  005B' 3001               	movlw	1
 10343  005C' 0289'              	subwf	___xxtofl@exp,f
 10344  005D' 3001               	movlw	1
 10345  005E'                    u3955:
 10346  005E' 358A'              	lslf	___xxtofl@arg,f
 10347  005F' 0D8B'              	rlf	___xxtofl@arg+1,f
 10348  0060' 0D8C'              	rlf	___xxtofl@arg+2,f
 10349  0061' 0D8D'              	rlf	___xxtofl@arg+3,f
 10350  0062' 0B89               	decfsz	9,f
 10351  0063' 2800'              	goto	u3955
 10352  0064'                    l3965:
 10353  0064' 1F8C'              	btfss	___xxtofl@arg+2,7
 10354  0065' 2800'              	goto	l3967
 10355  0066'                    l1321:
 10356  0066' 1809'              	btfsc	___xxtofl@exp,0
 10357  0067' 2800'              	goto	l1322
 10358  0068' 30FF               	movlw	255
 10359  0069' 058A'              	andwf	___xxtofl@arg,f
 10360  006A' 30FF               	movlw	255
 10361  006B' 058B'              	andwf	___xxtofl@arg+1,f
 10362  006C' 307F               	movlw	127
 10363  006D' 058C'              	andwf	___xxtofl@arg+2,f
 10364  006E' 30FF               	movlw	255
 10365  006F' 058D'              	andwf	___xxtofl@arg+3,f
 10366  0070'                    l1322:
 10367  0070' 1003               	clrc
 10368  0071' 0C89'              	rrf	___xxtofl@exp,f
 10369  0072' 0809'              	movf	___xxtofl@exp,w
 10370  0073' 0084'              	movwf	??___xxtofl
 10371  0074' 0185'              	clrf	??___xxtofl+1
 10372  0075' 0186'              	clrf	??___xxtofl+2
 10373  0076' 0187'              	clrf	??___xxtofl+3
 10374  0077' 3018               	movlw	24
 10375  0078'                    u3995:
 10376  0078' 3584'              	lslf	??___xxtofl,f
 10377  0079' 0D85'              	rlf	??___xxtofl+1,f
 10378  007A' 0D86'              	rlf	??___xxtofl+2,f
 10379  007B' 0D87'              	rlf	??___xxtofl+3,f
 10380  007C' 0B89               	decfsz	9,f
 10381  007D' 2800'              	goto	u3995
 10382  007E' 0804'              	movf	??___xxtofl,w
 10383  007F' 048A'              	iorwf	___xxtofl@arg,f
 10384  0080' 0805'              	movf	??___xxtofl+1,w
 10385  0081' 048B'              	iorwf	___xxtofl@arg+1,f
 10386  0082' 0806'              	movf	??___xxtofl+2,w
 10387  0083' 048C'              	iorwf	___xxtofl@arg+2,f
 10388  0084' 0807'              	movf	??___xxtofl+3,w
 10389  0085' 048D'              	iorwf	___xxtofl@arg+3,f
 10390  0086' 0808'              	movf	___xxtofl@sign,w
 10391  0087' 1D03               	btfss	3,2
 10392  0088' 1F83'              	btfss	___xxtofl@val+3,7
 10393  0089' 2800'              	goto	l3979
 10394  008A' 178D'              	bsf	___xxtofl@arg+3,7
 10395  008B'                    l3979:
 10396  008B' 080D'              	movf	___xxtofl@arg+3,w
 10397  008C' 0083'              	movwf	?___xxtofl+3
 10398  008D' 080C'              	movf	___xxtofl@arg+2,w
 10399  008E' 0082'              	movwf	?___xxtofl+2
 10400  008F' 080B'              	movf	___xxtofl@arg+1,w
 10401  0090' 0081'              	movwf	?___xxtofl+1
 10402  0091' 080A'              	movf	___xxtofl@arg,w
 10403  0092' 0080'              	movwf	?___xxtofl
 10404  0093' 0008               	return
 10405  0094'                    __end_of___xxtofl:
 10406                           
 10407                           	psect	text44
 10408  0000'                    __ptext44:	
 10409 ;; *************** function ___fltol *****************
 10410 ;; Defined at:
 10411 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\fltol.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;  f1              4   74[BANK0 ] unsigned char 
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;  exp1            1   79[BANK0 ] unsigned char 
 10416 ;;  sign1           1   78[BANK0 ] unsigned char 
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  4   74[BANK0 ] long 
 10419 ;; Registers used:
 10420 ;;		wreg, status,2, status,0
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10426 ;;      Params:         0       4       0       0       0       0       0       0
 10427 ;;      Locals:         0       2       0       0       0       0       0       0
 10428 ;;      Temps:          0       0       4       0       0       0       0       0
 10429 ;;      Totals:         0       6       4       0       0       0       0       0
 10430 ;;Total ram usage:       10 bytes
 10431 ;; Hardware stack levels used: 1
 10432 ;; Hardware stack levels required when called: 7
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_SSPA_getTemp
 10437 ;;		_SSPA_getPOut
 10438 ;; This function uses a non-reentrant model
 10439 ;;
 10440                           
 10441  0000'                    ___fltol:	
 10442                           ;psect for function ___fltol
 10443                           
 10444                           
 10445                           ;incstack = 0
 10446                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 10447  0000' 1003               	clrc
 10448  0001' 0020               	movlb	0	; select bank0
 10449  0002' 0D4C'              	rlf	___fltol@f1+2,w
 10450  0003' 0D4D'              	rlf	___fltol@f1+3,w
 10451  0004' 00CF'              	movwf	___fltol@exp1
 10452  0005' 084F'              	movf	___fltol@exp1,w
 10453  0006' 1D03               	btfss	3,2
 10454  0007' 2800'              	goto	l3623
 10455  0008'                    l3619:
 10456  0008' 3000               	movlw	0
 10457  0009' 00CD'              	movwf	?___fltol+3
 10458  000A' 3000               	movlw	0
 10459  000B' 00CC'              	movwf	?___fltol+2
 10460  000C' 3000               	movlw	0
 10461  000D' 00CB'              	movwf	?___fltol+1
 10462  000E' 3000               	movlw	0
 10463  000F' 00CA'              	movwf	?___fltol
 10464  0010' 0008               	return
 10465  0011'                    l3623:
 10466  0011' 084A'              	movf	___fltol@f1,w
 10467  0012' 0021               	movlb	1	; select bank1
 10468  0013' 0080'              	movwf	??___fltol^(0+128)
 10469  0014' 0020               	movlb	0	; select bank0
 10470  0015' 084B'              	movf	___fltol@f1+1,w
 10471  0016' 0021               	movlb	1	; select bank1
 10472  0017' 0081'              	movwf	(??___fltol^(0+128)+1)
 10473  0018' 0020               	movlb	0	; select bank0
 10474  0019' 084C'              	movf	___fltol@f1+2,w
 10475  001A' 0021               	movlb	1	; select bank1
 10476  001B' 0082'              	movwf	(??___fltol^(0+128)+2)
 10477  001C' 0020               	movlb	0	; select bank0
 10478  001D' 084D'              	movf	___fltol@f1+3,w
 10479  001E' 0021               	movlb	1	; select bank1
 10480  001F' 0083'              	movwf	(??___fltol^(0+128)+3)
 10481  0020' 301F               	movlw	31
 10482  0021'                    u3245:
 10483  0021' 3683'              	lsrf	(??___fltol^(0+128)+3),f
 10484  0022' 0C82'              	rrf	(??___fltol^(0+128)+2),f
 10485  0023' 0C81'              	rrf	(??___fltol^(0+128)+1),f
 10486  0024' 0C80'              	rrf	??___fltol^(0+128),f
 10487  0025' 0B89               	decfsz	9,f
 10488  0026' 2800'              	goto	u3245
 10489  0027' 0800'              	movf	??___fltol^(0+128),w
 10490  0028' 0020               	movlb	0	; select bank0
 10491  0029' 00CE'              	movwf	___fltol@sign1
 10492  002A' 17CC'              	bsf	___fltol@f1+2,7
 10493  002B' 30FF               	movlw	255
 10494  002C' 05CA'              	andwf	___fltol@f1,f
 10495  002D' 30FF               	movlw	255
 10496  002E' 05CB'              	andwf	___fltol@f1+1,f
 10497  002F' 30FF               	movlw	255
 10498  0030' 05CC'              	andwf	___fltol@f1+2,f
 10499  0031' 3000               	movlw	0
 10500  0032' 05CD'              	andwf	___fltol@f1+3,f
 10501  0033' 3096               	movlw	150
 10502  0034' 02CF'              	subwf	___fltol@exp1,f
 10503  0035' 1FCF'              	btfss	___fltol@exp1,7
 10504  0036' 2800'              	goto	l3641
 10505  0037' 084F'              	movf	___fltol@exp1,w
 10506  0038' 3A80               	xorlw	128
 10507  0039' 3E97               	addlw	151
 10508  003A' 1C03               	btfss	3,0
 10509  003B' 2800'              	goto	l3619
 10510  003C'                    l3639:
 10511  003C' 3001               	movlw	1
 10512  003D'                    u3275:
 10513  003D' 36CD'              	lsrf	___fltol@f1+3,f
 10514  003E' 0CCC'              	rrf	___fltol@f1+2,f
 10515  003F' 0CCB'              	rrf	___fltol@f1+1,f
 10516  0040' 0CCA'              	rrf	___fltol@f1,f
 10517  0041' 0B89               	decfsz	9,f
 10518  0042' 2800'              	goto	u3275
 10519  0043' 3001               	movlw	1
 10520  0044' 0021               	movlb	1	; select bank1
 10521  0045' 0080'              	movwf	??___fltol^(0+128)
 10522  0046' 0800'              	movf	??___fltol^(0+128),w
 10523  0047' 0020               	movlb	0	; select bank0
 10524  0048' 07CF'              	addwf	___fltol@exp1,f
 10525  0049' 1903               	btfsc	3,2
 10526  004A' 2800'              	goto	l3649
 10527  004B' 2800'              	goto	l3639
 10528  004C'                    l3641:
 10529  004C' 3020               	movlw	32
 10530  004D' 024F'              	subwf	___fltol@exp1,w
 10531  004E' 1803               	btfsc	3,0
 10532  004F' 2800'              	goto	l3619
 10533  0050'                    l1068:
 10534  0050' 084F'              	movf	___fltol@exp1,w
 10535  0051' 1903               	btfsc	3,2
 10536  0052' 2800'              	goto	l3649
 10537  0053' 3001               	movlw	1
 10538  0054'                    u3305:
 10539  0054' 35CA'              	lslf	___fltol@f1,f
 10540  0055' 0DCB'              	rlf	___fltol@f1+1,f
 10541  0056' 0DCC'              	rlf	___fltol@f1+2,f
 10542  0057' 0DCD'              	rlf	___fltol@f1+3,f
 10543  0058' 0B89               	decfsz	9,f
 10544  0059' 2800'              	goto	u3305
 10545  005A' 3001               	movlw	1
 10546  005B' 02CF'              	subwf	___fltol@exp1,f
 10547  005C' 2800'              	goto	l1068
 10548  005D'                    l3649:
 10549  005D' 084E'              	movf	___fltol@sign1,w
 10550  005E' 1903               	btfsc	3,2
 10551  005F' 0008               	return
 10552  0060' 09CA'              	comf	___fltol@f1,f
 10553  0061' 09CB'              	comf	___fltol@f1+1,f
 10554  0062' 09CC'              	comf	___fltol@f1+2,f
 10555  0063' 09CD'              	comf	___fltol@f1+3,f
 10556  0064' 0ACA'              	incf	___fltol@f1,f
 10557  0065' 1903               	skipnz
 10558  0066' 0ACB'              	incf	___fltol@f1+1,f
 10559  0067' 1903               	skipnz
 10560  0068' 0ACC'              	incf	___fltol@f1+2,f
 10561  0069' 1903               	skipnz
 10562  006A' 0ACD'              	incf	___fltol@f1+3,f
 10563  006B' 0008               	return
 10564  006C'                    __end_of___fltol:
 10565                           
 10566                           	psect	text45
 10567  0000'                    __ptext45:	
 10568 ;; *************** function ___flsub *****************
 10569 ;; Defined at:
 10570 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcadd.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;  a               4   40[BANK0 ] long 
 10573 ;;  b               4   44[BANK0 ] long 
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;		None
 10576 ;; Return value:  Size  Location     Type
 10577 ;;                  4   40[BANK0 ] long 
 10578 ;; Registers used:
 10579 ;;		wreg, status,2, status,0, pclath, cstack
 10580 ;; Tracked objects:
 10581 ;;		On entry : 0/0
 10582 ;;		On exit  : 0/0
 10583 ;;		Unchanged: 0/0
 10584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10585 ;;      Params:         0       8       0       0       0       0       0       0
 10586 ;;      Locals:         0       0       0       0       0       0       0       0
 10587 ;;      Temps:          0       0       0       0       0       0       0       0
 10588 ;;      Totals:         0       8       0       0       0       0       0       0
 10589 ;;Total ram usage:        8 bytes
 10590 ;; Hardware stack levels used: 1
 10591 ;; Hardware stack levels required when called: 8
 10592 ;; This function calls:
 10593 ;;		___fladd
 10594 ;; This function is called by:
 10595 ;;		_SSPA_getTemp
 10596 ;;		_SSPA_getPOut
 10597 ;; This function uses a non-reentrant model
 10598 ;;
 10599                           
 10600  0000'                    ___flsub:	
 10601                           ;psect for function ___flsub
 10602                           
 10603                           
 10604                           ;incstack = 0
 10605                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 10606  0000' 3080               	movlw	128
 10607  0001' 0020               	movlb	0	; select bank0
 10608  0002' 06AB'              	xorwf	___flsub@a+3,f
 10609  0003' 082F'              	movf	___flsub@b+3,w
 10610  0004' 0083'              	movwf	___fladd@b+3
 10611  0005' 082E'              	movf	___flsub@b+2,w
 10612  0006' 0082'              	movwf	___fladd@b+2
 10613  0007' 082D'              	movf	___flsub@b+1,w
 10614  0008' 0081'              	movwf	___fladd@b+1
 10615  0009' 082C'              	movf	___flsub@b,w
 10616  000A' 0080'              	movwf	___fladd@b
 10617  000B' 082B'              	movf	___flsub@a+3,w
 10618  000C' 0087'              	movwf	___fladd@a+3
 10619  000D' 082A'              	movf	___flsub@a+2,w
 10620  000E' 0086'              	movwf	___fladd@a+2
 10621  000F' 0829'              	movf	___flsub@a+1,w
 10622  0010' 0085'              	movwf	___fladd@a+1
 10623  0011' 0828'              	movf	___flsub@a,w
 10624  0012' 0084'              	movwf	___fladd@a
 10625  0013' 3180' 2000'        	fcall	___fladd
 10626  0015' 0020               	movlb	0	; select bank0
 10627  0016' 0803'              	movf	?___fladd+3,w
 10628  0017' 00AB'              	movwf	?___flsub+3
 10629  0018' 0802'              	movf	?___fladd+2,w
 10630  0019' 00AA'              	movwf	?___flsub+2
 10631  001A' 0801'              	movf	?___fladd+1,w
 10632  001B' 00A9'              	movwf	?___flsub+1
 10633  001C' 0800'              	movf	?___fladd,w
 10634  001D' 00A8'              	movwf	?___flsub
 10635  001E' 0008               	return
 10636  001F'                    __end_of___flsub:
 10637                           
 10638                           	psect	text46
 10639  0000'                    __ptext46:	
 10640 ;; *************** function ___fladd *****************
 10641 ;; Defined at:
 10642 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcadd.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;  b               4    0[BANK0 ] long 
 10645 ;;  a               4    4[BANK0 ] long 
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;  grs             1   19[BANK0 ] unsigned char 
 10648 ;;  bexp            1   18[BANK0 ] unsigned char 
 10649 ;;  aexp            1   17[BANK0 ] unsigned char 
 10650 ;;  signs           1   16[BANK0 ] unsigned char 
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  4    0[BANK0 ] unsigned char 
 10653 ;; Registers used:
 10654 ;;		wreg, status,2, status,0
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/0
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10660 ;;      Params:         0       8       0       0       0       0       0       0
 10661 ;;      Locals:         0       4       0       0       0       0       0       0
 10662 ;;      Temps:          0       8       0       0       0       0       0       0
 10663 ;;      Totals:         0      20       0       0       0       0       0       0
 10664 ;;Total ram usage:       20 bytes
 10665 ;; Hardware stack levels used: 1
 10666 ;; Hardware stack levels required when called: 7
 10667 ;; This function calls:
 10668 ;;		Nothing
 10669 ;; This function is called by:
 10670 ;;		___flsub
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674  0000'                    ___fladd:	
 10675                           ;psect for function ___fladd
 10676                           
 10677                           
 10678                           ;incstack = 0
 10679                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 10680  0000' 0020               	movlb	0	; select bank0
 10681  0001' 0803'              	movf	___fladd@b+3,w
 10682  0002' 3980               	andlw	128
 10683  0003' 0090'              	movwf	___fladd@signs
 10684  0004' 3503'              	lslf	___fladd@b+3,w
 10685  0005' 0092'              	movwf	___fladd@bexp
 10686  0006' 1B82'              	btfsc	___fladd@b+2,7
 10687  0007' 1412'              	bsf	___fladd@bexp,0
 10688  0008' 0812'              	movf	___fladd@bexp,w
 10689  0009' 1903               	btfsc	3,2
 10690  000A' 2800'              	goto	l3363
 10691  000B' 0A12'              	incf	___fladd@bexp,w
 10692  000C' 1D03               	btfss	3,2
 10693  000D' 2800'              	goto	l3359
 10694  000E' 3000               	movlw	0
 10695  000F' 0083'              	movwf	___fladd@b+3
 10696  0010' 3000               	movlw	0
 10697  0011' 0082'              	movwf	___fladd@b+2
 10698  0012' 3000               	movlw	0
 10699  0013' 0081'              	movwf	___fladd@b+1
 10700  0014' 3000               	movlw	0
 10701  0015' 0080'              	movwf	___fladd@b
 10702  0016'                    l3359:
 10703  0016' 1782'              	bsf	___fladd@b+2,7
 10704  0017' 0183'              	clrf	___fladd@b+3
 10705  0018' 2800'              	goto	l3365
 10706  0019'                    l3363:
 10707  0019' 3000               	movlw	0
 10708  001A' 0083'              	movwf	___fladd@b+3
 10709  001B' 3000               	movlw	0
 10710  001C' 0082'              	movwf	___fladd@b+2
 10711  001D' 3000               	movlw	0
 10712  001E' 0081'              	movwf	___fladd@b+1
 10713  001F' 3000               	movlw	0
 10714  0020' 0080'              	movwf	___fladd@b
 10715  0021'                    l3365:
 10716  0021' 0807'              	movf	___fladd@a+3,w
 10717  0022' 3980               	andlw	128
 10718  0023' 0091'              	movwf	___fladd@aexp
 10719  0024' 0811'              	movf	___fladd@aexp,w
 10720  0025' 0610'              	xorwf	___fladd@signs,w
 10721  0026' 1D03               	btfss	3,2
 10722  0027' 1710'              	bsf	___fladd@signs,6
 10723  0028' 3507'              	lslf	___fladd@a+3,w
 10724  0029' 0091'              	movwf	___fladd@aexp
 10725  002A' 1B86'              	btfsc	___fladd@a+2,7
 10726  002B' 1411'              	bsf	___fladd@aexp,0
 10727  002C' 0811'              	movf	___fladd@aexp,w
 10728  002D' 1903               	btfsc	3,2
 10729  002E' 2800'              	goto	l3387
 10730  002F' 0A11'              	incf	___fladd@aexp,w
 10731  0030' 1D03               	btfss	3,2
 10732  0031' 2800'              	goto	l3383
 10733  0032' 3000               	movlw	0
 10734  0033' 0087'              	movwf	___fladd@a+3
 10735  0034' 3000               	movlw	0
 10736  0035' 0086'              	movwf	___fladd@a+2
 10737  0036' 3000               	movlw	0
 10738  0037' 0085'              	movwf	___fladd@a+1
 10739  0038' 3000               	movlw	0
 10740  0039' 0084'              	movwf	___fladd@a
 10741  003A'                    l3383:
 10742  003A' 1786'              	bsf	___fladd@a+2,7
 10743  003B' 0187'              	clrf	___fladd@a+3
 10744  003C' 2800'              	goto	l1168
 10745  003D'                    l3387:
 10746  003D' 3000               	movlw	0
 10747  003E' 0087'              	movwf	___fladd@a+3
 10748  003F' 3000               	movlw	0
 10749  0040' 0086'              	movwf	___fladd@a+2
 10750  0041' 3000               	movlw	0
 10751  0042' 0085'              	movwf	___fladd@a+1
 10752  0043' 3000               	movlw	0
 10753  0044' 0084'              	movwf	___fladd@a
 10754  0045'                    l1168:
 10755  0045' 0812'              	movf	___fladd@bexp,w
 10756  0046' 0211'              	subwf	___fladd@aexp,w
 10757  0047' 1803               	skipnc
 10758  0048' 2800'              	goto	l3423
 10759  0049' 1F10'              	btfss	___fladd@signs,6
 10760  004A' 2800'              	goto	l3393
 10761  004B' 3080               	movlw	128
 10762  004C' 0088'              	movwf	??___fladd
 10763  004D' 0808'              	movf	??___fladd,w
 10764  004E' 0690'              	xorwf	___fladd@signs,f
 10765  004F'                    l3393:
 10766  004F' 0812'              	movf	___fladd@bexp,w
 10767  0050' 0093'              	movwf	___fladd@grs
 10768  0051' 0811'              	movf	___fladd@aexp,w
 10769  0052' 0092'              	movwf	___fladd@bexp
 10770  0053' 0813'              	movf	___fladd@grs,w
 10771  0054' 0091'              	movwf	___fladd@aexp
 10772  0055' 0800'              	movf	___fladd@b,w
 10773  0056' 0093'              	movwf	___fladd@grs
 10774  0057' 0804'              	movf	___fladd@a,w
 10775  0058' 0080'              	movwf	___fladd@b
 10776  0059' 0813'              	movf	___fladd@grs,w
 10777  005A' 0084'              	movwf	___fladd@a
 10778  005B' 0801'              	movf	___fladd@b+1,w
 10779  005C' 0093'              	movwf	___fladd@grs
 10780  005D' 0805'              	movf	___fladd@a+1,w
 10781  005E' 0081'              	movwf	___fladd@b+1
 10782  005F' 0813'              	movf	___fladd@grs,w
 10783  0060' 0085'              	movwf	___fladd@a+1
 10784  0061' 0802'              	movf	___fladd@b+2,w
 10785  0062' 0093'              	movwf	___fladd@grs
 10786  0063' 0806'              	movf	___fladd@a+2,w
 10787  0064' 0082'              	movwf	___fladd@b+2
 10788  0065' 0813'              	movf	___fladd@grs,w
 10789  0066' 0086'              	movwf	___fladd@a+2
 10790  0067' 0803'              	movf	___fladd@b+3,w
 10791  0068' 0093'              	movwf	___fladd@grs
 10792  0069' 0807'              	movf	___fladd@a+3,w
 10793  006A' 0083'              	movwf	___fladd@b+3
 10794  006B' 0813'              	movf	___fladd@grs,w
 10795  006C' 0087'              	movwf	___fladd@a+3
 10796  006D'                    l3423:
 10797  006D' 0193'              	clrf	___fladd@grs
 10798  006E' 0811'              	movf	___fladd@aexp,w
 10799  006F' 0088'              	movwf	??___fladd
 10800  0070' 0189'              	clrf	??___fladd+1
 10801  0071' 0809'              	movf	??___fladd+1,w
 10802  0072' 008B'              	movwf	??___fladd+3
 10803  0073' 0812'              	movf	___fladd@bexp,w
 10804  0074' 0208'              	subwf	??___fladd,w
 10805  0075' 008A'              	movwf	??___fladd+2
 10806  0076' 1C03               	skipc
 10807  0077' 038B'              	decf	??___fladd+3,f
 10808  0078' 080B'              	movf	??___fladd+3,w
 10809  0079' 3A80               	xorlw	128
 10810  007A' 008C'              	movwf	??___fladd+4
 10811  007B' 3080               	movlw	128
 10812  007C' 020C'              	subwf	??___fladd+4,w
 10813  007D' 1D03               	skipz
 10814  007E' 2800'              	goto	u2835
 10815  007F' 301A               	movlw	26
 10816  0080' 020A'              	subwf	??___fladd+2,w
 10817  0081'                    u2835:
 10818  0081' 1C03               	skipc
 10819  0082' 2800'              	goto	l3441
 10820  0083' 0020               	movlb	0	; select bank0
 10821  0084' 0803'              	movf	___fladd@b+3,w
 10822  0085' 0402'              	iorwf	___fladd@b+2,w
 10823  0086' 0401'              	iorwf	___fladd@b+1,w
 10824  0087' 0400'              	iorwf	___fladd@b,w
 10825  0088' 1903               	btfsc	3,2
 10826  0089' 2800'              	goto	u2840
 10827  008A' 3001               	movlw	1
 10828  008B' 2800'              	goto	u2850
 10829  008C'                    u2840:
 10830  008C' 3000               	movlw	0
 10831  008D'                    u2850:
 10832  008D' 0093'              	movwf	___fladd@grs
 10833  008E' 3000               	movlw	0
 10834  008F' 0083'              	movwf	___fladd@b+3
 10835  0090' 3000               	movlw	0
 10836  0091' 0082'              	movwf	___fladd@b+2
 10837  0092' 3000               	movlw	0
 10838  0093' 0081'              	movwf	___fladd@b+1
 10839  0094' 3000               	movlw	0
 10840  0095' 0080'              	movwf	___fladd@b
 10841  0096' 0811'              	movf	___fladd@aexp,w
 10842  0097' 0092'              	movwf	___fladd@bexp
 10843  0098' 2800'              	goto	l1172
 10844  0099'                    l1174:
 10845  0099' 1C13'              	btfss	___fladd@grs,0
 10846  009A' 2800'              	goto	l3431
 10847  009B' 3613'              	lsrf	___fladd@grs,w
 10848  009C' 3801               	iorlw	1
 10849  009D' 0093'              	movwf	___fladd@grs
 10850  009E' 2800'              	goto	l3433
 10851  009F'                    l3431:
 10852  009F' 1003               	clrc
 10853  00A0' 0C93'              	rrf	___fladd@grs,f
 10854  00A1'                    l3433:
 10855  00A1' 1800'              	btfsc	___fladd@b,0
 10856  00A2' 1793'              	bsf	___fladd@grs,7
 10857  00A3' 3001               	movlw	1
 10858  00A4' 0088'              	movwf	??___fladd
 10859  00A5'                    u2885:
 10860  00A5' 3783'              	asrf	___fladd@b+3,f
 10861  00A6' 0C82'              	rrf	___fladd@b+2,f
 10862  00A7' 0C81'              	rrf	___fladd@b+1,f
 10863  00A8' 0C80'              	rrf	___fladd@b,f
 10864  00A9' 0B80'              	decfsz	??___fladd& (0+127),f
 10865  00AA' 2800'              	goto	u2885
 10866  00AB' 3001               	movlw	1
 10867  00AC' 0088'              	movwf	??___fladd
 10868  00AD' 0808'              	movf	??___fladd,w
 10869  00AE' 0792'              	addwf	___fladd@bexp,f
 10870  00AF'                    l3441:
 10871  00AF' 0020               	movlb	0	; select bank0
 10872  00B0' 0811'              	movf	___fladd@aexp,w
 10873  00B1' 0212'              	subwf	___fladd@bexp,w
 10874  00B2' 1C03               	skipc
 10875  00B3' 2800'              	goto	l1174
 10876  00B4'                    l1172:
 10877  00B4' 1B10'              	btfsc	___fladd@signs,6
 10878  00B5' 2800'              	goto	l3467
 10879  00B6' 0812'              	movf	___fladd@bexp,w
 10880  00B7' 1D03               	btfss	3,2
 10881  00B8' 2800'              	goto	l3449
 10882  00B9' 3000               	movlw	0
 10883  00BA' 0083'              	movwf	?___fladd+3
 10884  00BB' 3000               	movlw	0
 10885  00BC' 0082'              	movwf	?___fladd+2
 10886  00BD' 3000               	movlw	0
 10887  00BE' 0081'              	movwf	?___fladd+1
 10888  00BF' 3000               	movlw	0
 10889  00C0' 0080'              	movwf	?___fladd
 10890  00C1' 0008               	return
 10891  00C2'                    l3449:
 10892  00C2' 0804'              	movf	___fladd@a,w
 10893  00C3' 0780'              	addwf	___fladd@b,f
 10894  00C4' 0805'              	movf	___fladd@a+1,w
 10895  00C5' 3D81'              	addwfc	___fladd@b+1,f
 10896  00C6' 0806'              	movf	___fladd@a+2,w
 10897  00C7' 3D82'              	addwfc	___fladd@b+2,f
 10898  00C8' 0807'              	movf	___fladd@a+3,w
 10899  00C9' 3D83'              	addwfc	___fladd@b+3,f
 10900  00CA' 1C03'              	btfss	___fladd@b+3,0
 10901  00CB' 2800'              	goto	l3501
 10902  00CC' 1C13'              	btfss	___fladd@grs,0
 10903  00CD' 2800'              	goto	l3457
 10904  00CE' 3613'              	lsrf	___fladd@grs,w
 10905  00CF' 3801               	iorlw	1
 10906  00D0' 0093'              	movwf	___fladd@grs
 10907  00D1' 2800'              	goto	l3459
 10908  00D2'                    l3457:
 10909  00D2' 1003               	clrc
 10910  00D3' 0C93'              	rrf	___fladd@grs,f
 10911  00D4'                    l3459:
 10912  00D4' 1800'              	btfsc	___fladd@b,0
 10913  00D5' 1793'              	bsf	___fladd@grs,7
 10914  00D6' 3001               	movlw	1
 10915  00D7' 0088'              	movwf	??___fladd
 10916  00D8'                    u2955:
 10917  00D8' 3783'              	asrf	___fladd@b+3,f
 10918  00D9' 0C82'              	rrf	___fladd@b+2,f
 10919  00DA' 0C81'              	rrf	___fladd@b+1,f
 10920  00DB' 0C80'              	rrf	___fladd@b,f
 10921  00DC' 0B80'              	decfsz	??___fladd& (0+127),f
 10922  00DD' 2800'              	goto	u2955
 10923  00DE' 3001               	movlw	1
 10924  00DF' 0088'              	movwf	??___fladd
 10925  00E0' 0808'              	movf	??___fladd,w
 10926  00E1' 0792'              	addwf	___fladd@bexp,f
 10927  00E2' 2800'              	goto	l3501
 10928  00E3'                    l3467:
 10929  00E3' 0803'              	movf	___fladd@b+3,w
 10930  00E4' 3A80               	xorlw	128
 10931  00E5' 0088'              	movwf	??___fladd
 10932  00E6' 0807'              	movf	___fladd@a+3,w
 10933  00E7' 3A80               	xorlw	128
 10934  00E8' 0208'              	subwf	??___fladd,w
 10935  00E9' 1D03               	skipz
 10936  00EA' 2800'              	goto	u2963
 10937  00EB' 0806'              	movf	___fladd@a+2,w
 10938  00EC' 0202'              	subwf	___fladd@b+2,w
 10939  00ED' 1D03               	skipz
 10940  00EE' 2800'              	goto	u2963
 10941  00EF' 0805'              	movf	___fladd@a+1,w
 10942  00F0' 0201'              	subwf	___fladd@b+1,w
 10943  00F1' 1D03               	skipz
 10944  00F2' 2800'              	goto	u2963
 10945  00F3' 0804'              	movf	___fladd@a,w
 10946  00F4' 0200'              	subwf	___fladd@b,w
 10947  00F5'                    u2963:
 10948  00F5' 1803               	skipnc
 10949  00F6' 2800'              	goto	l3477
 10950  00F7' 30FF               	movlw	255
 10951  00F8' 0088'              	movwf	??___fladd
 10952  00F9' 30FF               	movlw	255
 10953  00FA' 0089'              	movwf	??___fladd+1
 10954  00FB' 30FF               	movlw	255
 10955  00FC' 008A'              	movwf	??___fladd+2
 10956  00FD' 30FF               	movlw	255
 10957  00FE' 008B'              	movwf	??___fladd+3
 10958  00FF' 0800'              	movf	___fladd@b,w
 10959  0100' 0204'              	subwf	___fladd@a,w
 10960  0101' 008C'              	movwf	??___fladd+4
 10961  0102' 0801'              	movf	___fladd@b+1,w
 10962  0103' 3B05'              	subwfb	___fladd@a+1,w
 10963  0104' 008D'              	movwf	??___fladd+5
 10964  0105' 0802'              	movf	___fladd@b+2,w
 10965  0106' 3B06'              	subwfb	___fladd@a+2,w
 10966  0107' 008E'              	movwf	??___fladd+6
 10967  0108' 0803'              	movf	___fladd@b+3,w
 10968  0109' 3B07'              	subwfb	___fladd@a+3,w
 10969  010A' 008F'              	movwf	??___fladd+7
 10970  010B' 080C'              	movf	??___fladd+4,w
 10971  010C' 0788'              	addwf	??___fladd,f
 10972  010D' 080D'              	movf	??___fladd+5,w
 10973  010E' 3D89'              	addwfc	??___fladd+1,f
 10974  010F' 080E'              	movf	??___fladd+6,w
 10975  0110' 3D8A'              	addwfc	??___fladd+2,f
 10976  0111' 080F'              	movf	??___fladd+7,w
 10977  0112' 3D8B'              	addwfc	??___fladd+3,f
 10978  0113' 080B'              	movf	??___fladd+3,w
 10979  0114' 0083'              	movwf	___fladd@b+3
 10980  0115' 080A'              	movf	??___fladd+2,w
 10981  0116' 0082'              	movwf	___fladd@b+2
 10982  0117' 0809'              	movf	??___fladd+1,w
 10983  0118' 0081'              	movwf	___fladd@b+1
 10984  0119' 0808'              	movf	??___fladd,w
 10985  011A' 0080'              	movwf	___fladd@b
 10986  011B' 3080               	movlw	128
 10987  011C' 0088'              	movwf	??___fladd
 10988  011D' 0808'              	movf	??___fladd,w
 10989  011E' 0690'              	xorwf	___fladd@signs,f
 10990  011F' 0993'              	comf	___fladd@grs,f
 10991  0120' 0A93'              	incf	___fladd@grs,f
 10992  0121' 0813'              	movf	___fladd@grs,w
 10993  0122' 1D03               	btfss	3,2
 10994  0123' 2800'              	goto	l1189
 10995  0124' 3001               	movlw	1
 10996  0125' 0780'              	addwf	___fladd@b,f
 10997  0126' 3000               	movlw	0
 10998  0127' 3D81'              	addwfc	___fladd@b+1,f
 10999  0128' 3000               	movlw	0
 11000  0129' 3D82'              	addwfc	___fladd@b+2,f
 11001  012A' 3000               	movlw	0
 11002  012B' 3D83'              	addwfc	___fladd@b+3,f
 11003  012C' 2800'              	goto	l1189
 11004  012D'                    l3477:
 11005  012D' 0804'              	movf	___fladd@a,w
 11006  012E' 0280'              	subwf	___fladd@b,f
 11007  012F' 0805'              	movf	___fladd@a+1,w
 11008  0130' 3B81'              	subwfb	___fladd@b+1,f
 11009  0131' 0806'              	movf	___fladd@a+2,w
 11010  0132' 3B82'              	subwfb	___fladd@b+2,f
 11011  0133' 0807'              	movf	___fladd@a+3,w
 11012  0134' 3B83'              	subwfb	___fladd@b+3,f
 11013  0135'                    l1189:
 11014  0135' 0803'              	movf	___fladd@b+3,w
 11015  0136' 0402'              	iorwf	___fladd@b+2,w
 11016  0137' 0401'              	iorwf	___fladd@b+1,w
 11017  0138' 0400'              	iorwf	___fladd@b,w
 11018  0139' 1D03               	skipz
 11019  013A' 2800'              	goto	l3499
 11020  013B' 0813'              	movf	___fladd@grs,w
 11021  013C' 1D03               	btfss	3,2
 11022  013D' 2800'              	goto	l3499
 11023  013E' 3000               	movlw	0
 11024  013F' 0083'              	movwf	?___fladd+3
 11025  0140' 3000               	movlw	0
 11026  0141' 0082'              	movwf	?___fladd+2
 11027  0142' 3000               	movlw	0
 11028  0143' 0081'              	movwf	?___fladd+1
 11029  0144' 3000               	movlw	0
 11030  0145' 0080'              	movwf	?___fladd
 11031  0146' 0008               	return
 11032  0147'                    l3485:
 11033  0147' 3001               	movlw	1
 11034  0148'                    u3005:
 11035  0148' 3580'              	lslf	___fladd@b,f
 11036  0149' 0D81'              	rlf	___fladd@b+1,f
 11037  014A' 0D82'              	rlf	___fladd@b+2,f
 11038  014B' 0D83'              	rlf	___fladd@b+3,f
 11039  014C' 0B89               	decfsz	9,f
 11040  014D' 2800'              	goto	u3005
 11041  014E' 1B93'              	btfsc	___fladd@grs,7
 11042  014F' 1400'              	bsf	___fladd@b,0
 11043  0150' 1C13'              	btfss	___fladd@grs,0
 11044  0151' 2800'              	goto	l3493
 11045  0152' 1403               	setc
 11046  0153' 2800'              	goto	L4
 11047  0154'                    l3493:
 11048  0154' 1003               	clrc
 11049  0155'                    L4:
 11050  0155' 0D93'              	rlf	___fladd@grs,f
 11051  0156' 0812'              	movf	___fladd@bexp,w
 11052  0157' 1903               	btfsc	3,2
 11053  0158' 2800'              	goto	l3499
 11054  0159' 3001               	movlw	1
 11055  015A' 0292'              	subwf	___fladd@bexp,f
 11056  015B'                    l3499:
 11057  015B' 1F82'              	btfss	___fladd@b+2,7
 11058  015C' 2800'              	goto	l3485
 11059  015D'                    l3501:
 11060  015D' 0191'              	clrf	___fladd@aexp
 11061  015E' 1F93'              	btfss	___fladd@grs,7
 11062  015F' 2800'              	goto	l3511
 11063  0160' 0813'              	movf	___fladd@grs,w
 11064  0161' 397F               	andlw	127
 11065  0162' 1903               	btfsc	3,2
 11066  0163' 1800'              	btfsc	___fladd@b,0
 11067  0164' 2800'              	goto	l3507
 11068  0165' 2800'              	goto	l3511
 11069  0166'                    l3507:
 11070  0166' 0191'              	clrf	___fladd@aexp
 11071  0167' 0A91'              	incf	___fladd@aexp,f
 11072  0168'                    l3511:
 11073  0168' 0811'              	movf	___fladd@aexp,w
 11074  0169' 1903               	btfsc	3,2
 11075  016A' 2800'              	goto	l1202
 11076  016B' 3001               	movlw	1
 11077  016C' 0780'              	addwf	___fladd@b,f
 11078  016D' 3000               	movlw	0
 11079  016E' 3D81'              	addwfc	___fladd@b+1,f
 11080  016F' 3000               	movlw	0
 11081  0170' 3D82'              	addwfc	___fladd@b+2,f
 11082  0171' 3000               	movlw	0
 11083  0172' 3D83'              	addwfc	___fladd@b+3,f
 11084  0173' 1C03'              	btfss	___fladd@b+3,0
 11085  0174' 2800'              	goto	l1202
 11086  0175' 0800'              	movf	___fladd@b,w
 11087  0176' 0088'              	movwf	??___fladd
 11088  0177' 0801'              	movf	___fladd@b+1,w
 11089  0178' 0089'              	movwf	??___fladd+1
 11090  0179' 0802'              	movf	___fladd@b+2,w
 11091  017A' 008A'              	movwf	??___fladd+2
 11092  017B' 0803'              	movf	___fladd@b+3,w
 11093  017C' 008B'              	movwf	??___fladd+3
 11094  017D' 3001               	movlw	1
 11095  017E' 008C'              	movwf	??___fladd+4
 11096  017F'                    u3105:
 11097  017F' 378B'              	asrf	??___fladd+3,f
 11098  0180' 0C8A'              	rrf	??___fladd+2,f
 11099  0181' 0C89'              	rrf	??___fladd+1,f
 11100  0182' 0C88'              	rrf	??___fladd,f
 11101  0183' 0B8C'              	decfsz	??___fladd+4,f
 11102  0184' 2800'              	goto	u3105
 11103  0185' 080B'              	movf	??___fladd+3,w
 11104  0186' 0083'              	movwf	___fladd@b+3
 11105  0187' 080A'              	movf	??___fladd+2,w
 11106  0188' 0082'              	movwf	___fladd@b+2
 11107  0189' 0809'              	movf	??___fladd+1,w
 11108  018A' 0081'              	movwf	___fladd@b+1
 11109  018B' 0808'              	movf	??___fladd,w
 11110  018C' 0080'              	movwf	___fladd@b
 11111  018D' 0A12'              	incf	___fladd@bexp,w
 11112  018E' 1903               	btfsc	3,2
 11113  018F' 2800'              	goto	l1202
 11114  0190' 3001               	movlw	1
 11115  0191' 0088'              	movwf	??___fladd
 11116  0192' 0808'              	movf	??___fladd,w
 11117  0193' 0792'              	addwf	___fladd@bexp,f
 11118  0194'                    l1202:
 11119  0194' 0A12'              	incf	___fladd@bexp,w
 11120  0195' 1D03               	btfss	3,2
 11121  0196' 0812'              	movf	___fladd@bexp,w
 11122  0197' 1D03               	btfss	3,2
 11123  0198' 2800'              	goto	l3529
 11124  0199' 3000               	movlw	0
 11125  019A' 0083'              	movwf	___fladd@b+3
 11126  019B' 3000               	movlw	0
 11127  019C' 0082'              	movwf	___fladd@b+2
 11128  019D' 3000               	movlw	0
 11129  019E' 0081'              	movwf	___fladd@b+1
 11130  019F' 3000               	movlw	0
 11131  01A0' 0080'              	movwf	___fladd@b
 11132  01A1' 0812'              	movf	___fladd@bexp,w
 11133  01A2' 1903               	btfsc	3,2
 11134  01A3' 0190'              	clrf	___fladd@signs
 11135  01A4'                    l3529:
 11136  01A4' 1C12'              	btfss	___fladd@bexp,0
 11137  01A5' 2800'              	goto	l3533
 11138  01A6' 1782'              	bsf	___fladd@b+2,7
 11139  01A7' 2800'              	goto	l1210
 11140  01A8'                    l3533:
 11141  01A8' 307F               	movlw	127
 11142  01A9' 0088'              	movwf	??___fladd
 11143  01AA' 0808'              	movf	??___fladd,w
 11144  01AB' 0582'              	andwf	___fladd@b+2,f
 11145  01AC'                    l1210:
 11146  01AC' 3612'              	lsrf	___fladd@bexp,w
 11147  01AD' 0083'              	movwf	___fladd@b+3
 11148  01AE' 1F90'              	btfss	___fladd@signs,7
 11149  01AF' 0008               	return
 11150  01B0' 1783'              	bsf	___fladd@b+3,7
 11151  01B1' 0008               	return
 11152  01B2'                    __end_of___fladd:
 11153                           
 11154                           	psect	text47
 11155  0000'                    __ptext47:	
 11156 ;; *************** function ___flmul *****************
 11157 ;; Defined at:
 11158 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcmul.c"
 11159 ;; Parameters:    Size  Location     Type
 11160 ;;  b               4   14[BANK0 ] unsigned char 
 11161 ;;  a               4   18[BANK0 ] unsigned char 
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;  prod            4   34[BANK0 ] struct .
 11164 ;;  grs             4   29[BANK0 ] unsigned long 
 11165 ;;  temp            2   38[BANK0 ] struct .
 11166 ;;  bexp            1   33[BANK0 ] unsigned char 
 11167 ;;  aexp            1   28[BANK0 ] unsigned char 
 11168 ;;  sign            1   27[BANK0 ] unsigned char 
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  4   14[BANK0 ] unsigned char 
 11171 ;; Registers used:
 11172 ;;		wreg, status,2, status,0, pclath, cstack
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11178 ;;      Params:         0       8       0       0       0       0       0       0
 11179 ;;      Locals:         0      13       0       0       0       0       0       0
 11180 ;;      Temps:          0       5       0       0       0       0       0       0
 11181 ;;      Totals:         0      26       0       0       0       0       0       0
 11182 ;;Total ram usage:       26 bytes
 11183 ;; Hardware stack levels used: 1
 11184 ;; Hardware stack levels required when called: 8
 11185 ;; This function calls:
 11186 ;;		__Umul8_16
 11187 ;; This function is called by:
 11188 ;;		_SSPA_getTemp
 11189 ;;		_SSPA_getPOut
 11190 ;; This function uses a non-reentrant model
 11191 ;;
 11192                           
 11193  0000'                    ___flmul:	
 11194                           ;psect for function ___flmul
 11195                           
 11196                           
 11197                           ;incstack = 0
 11198                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 11199  0000' 0020               	movlb	0	; select bank0
 11200  0001' 0811'              	movf	___flmul@b+3,w
 11201  0002' 3980               	andlw	128
 11202  0003' 009B'              	movwf	___flmul@sign
 11203  0004' 3511'              	lslf	___flmul@b+3,w
 11204  0005' 00A1'              	movwf	___flmul@bexp
 11205  0006' 1B90'              	btfsc	___flmul@b+2,7
 11206  0007' 1421'              	bsf	___flmul@bexp,0
 11207  0008' 0821'              	movf	___flmul@bexp,w
 11208  0009' 1903               	btfsc	3,2
 11209  000A' 2800'              	goto	l4951
 11210  000B' 0A21'              	incf	___flmul@bexp,w
 11211  000C' 1D03               	btfss	3,2
 11212  000D' 2800'              	goto	l4949
 11213  000E' 3000               	movlw	0
 11214  000F' 0091'              	movwf	___flmul@b+3
 11215  0010' 3000               	movlw	0
 11216  0011' 0090'              	movwf	___flmul@b+2
 11217  0012' 3000               	movlw	0
 11218  0013' 008F'              	movwf	___flmul@b+1
 11219  0014' 3000               	movlw	0
 11220  0015' 008E'              	movwf	___flmul@b
 11221  0016'                    l4949:
 11222  0016' 1790'              	bsf	___flmul@b+2,7
 11223  0017' 2800'              	goto	l4953
 11224  0018'                    l4951:
 11225  0018' 3000               	movlw	0
 11226  0019' 0091'              	movwf	___flmul@b+3
 11227  001A' 3000               	movlw	0
 11228  001B' 0090'              	movwf	___flmul@b+2
 11229  001C' 3000               	movlw	0
 11230  001D' 008F'              	movwf	___flmul@b+1
 11231  001E' 3000               	movlw	0
 11232  001F' 008E'              	movwf	___flmul@b
 11233  0020'                    l4953:
 11234  0020' 0815'              	movf	___flmul@a+3,w
 11235  0021' 3980               	andlw	128
 11236  0022' 0096'              	movwf	??___flmul
 11237  0023' 0816'              	movf	??___flmul,w
 11238  0024' 069B'              	xorwf	___flmul@sign,f
 11239  0025' 3515'              	lslf	___flmul@a+3,w
 11240  0026' 009C'              	movwf	___flmul@aexp
 11241  0027' 1B94'              	btfsc	___flmul@a+2,7
 11242  0028' 141C'              	bsf	___flmul@aexp,0
 11243  0029' 081C'              	movf	___flmul@aexp,w
 11244  002A' 1903               	btfsc	3,2
 11245  002B' 2800'              	goto	l4969
 11246  002C' 0A1C'              	incf	___flmul@aexp,w
 11247  002D' 1D03               	btfss	3,2
 11248  002E' 2800'              	goto	l4967
 11249  002F' 3000               	movlw	0
 11250  0030' 0095'              	movwf	___flmul@a+3
 11251  0031' 3000               	movlw	0
 11252  0032' 0094'              	movwf	___flmul@a+2
 11253  0033' 3000               	movlw	0
 11254  0034' 0093'              	movwf	___flmul@a+1
 11255  0035' 3000               	movlw	0
 11256  0036' 0092'              	movwf	___flmul@a
 11257  0037'                    l4967:
 11258  0037' 1794'              	bsf	___flmul@a+2,7
 11259  0038' 2800'              	goto	l4971
 11260  0039'                    l4969:
 11261  0039' 3000               	movlw	0
 11262  003A' 0095'              	movwf	___flmul@a+3
 11263  003B' 3000               	movlw	0
 11264  003C' 0094'              	movwf	___flmul@a+2
 11265  003D' 3000               	movlw	0
 11266  003E' 0093'              	movwf	___flmul@a+1
 11267  003F' 3000               	movlw	0
 11268  0040' 0092'              	movwf	___flmul@a
 11269  0041'                    l4971:
 11270  0041' 081C'              	movf	___flmul@aexp,w
 11271  0042' 1D03               	btfss	3,2
 11272  0043' 0821'              	movf	___flmul@bexp,w
 11273  0044' 1D03               	btfss	3,2
 11274  0045' 2800'              	goto	l4979
 11275  0046' 3000               	movlw	0
 11276  0047' 0091'              	movwf	?___flmul+3
 11277  0048' 3000               	movlw	0
 11278  0049' 0090'              	movwf	?___flmul+2
 11279  004A' 3000               	movlw	0
 11280  004B' 008F'              	movwf	?___flmul+1
 11281  004C' 3000               	movlw	0
 11282  004D' 008E'              	movwf	?___flmul
 11283  004E' 0008               	return
 11284  004F'                    l4979:
 11285  004F' 080E'              	movf	___flmul@b,w
 11286  0050' 0080'              	movwf	__Umul8_16@multiplicand
 11287  0051' 0814'              	movf	___flmul@a+2,w
 11288  0052' 3180' 2000' 3180'  	fcall	__Umul8_16
 11289  0055' 0020               	movlb	0	; select bank0
 11290  0056' 0801'              	movf	?__Umul8_16+1,w
 11291  0057' 00A7'              	movwf	___flmul@temp+1
 11292  0058' 0800'              	movf	?__Umul8_16,w
 11293  0059' 00A6'              	movwf	___flmul@temp
 11294  005A' 0826'              	movf	___flmul@temp,w
 11295  005B' 0096'              	movwf	??___flmul
 11296  005C' 0197'              	clrf	??___flmul+1
 11297  005D' 0198'              	clrf	??___flmul+2
 11298  005E' 0199'              	clrf	??___flmul+3
 11299  005F' 0819'              	movf	??___flmul+3,w
 11300  0060' 00A0'              	movwf	___flmul@grs+3
 11301  0061' 0818'              	movf	??___flmul+2,w
 11302  0062' 009F'              	movwf	___flmul@grs+2
 11303  0063' 0817'              	movf	??___flmul+1,w
 11304  0064' 009E'              	movwf	___flmul@grs+1
 11305  0065' 0816'              	movf	??___flmul,w
 11306  0066' 009D'              	movwf	___flmul@grs
 11307  0067' 0827'              	movf	___flmul@temp+1,w
 11308  0068' 0096'              	movwf	??___flmul
 11309  0069' 0197'              	clrf	??___flmul+1
 11310  006A' 0198'              	clrf	??___flmul+2
 11311  006B' 0199'              	clrf	??___flmul+3
 11312  006C' 0819'              	movf	??___flmul+3,w
 11313  006D' 00A5'              	movwf	___flmul@prod+3
 11314  006E' 0818'              	movf	??___flmul+2,w
 11315  006F' 00A4'              	movwf	___flmul@prod+2
 11316  0070' 0817'              	movf	??___flmul+1,w
 11317  0071' 00A3'              	movwf	___flmul@prod+1
 11318  0072' 0816'              	movf	??___flmul,w
 11319  0073' 00A2'              	movwf	___flmul@prod
 11320  0074' 080F'              	movf	___flmul@b+1,w
 11321  0075' 0080'              	movwf	__Umul8_16@multiplicand
 11322  0076' 0813'              	movf	___flmul@a+1,w
 11323  0077' 3180' 2000' 3180'  	fcall	__Umul8_16
 11324  007A' 0020               	movlb	0	; select bank0
 11325  007B' 0801'              	movf	?__Umul8_16+1,w
 11326  007C' 00A7'              	movwf	___flmul@temp+1
 11327  007D' 0800'              	movf	?__Umul8_16,w
 11328  007E' 00A6'              	movwf	___flmul@temp
 11329  007F' 0826'              	movf	___flmul@temp,w
 11330  0080' 0096'              	movwf	??___flmul
 11331  0081' 0197'              	clrf	??___flmul+1
 11332  0082' 0198'              	clrf	??___flmul+2
 11333  0083' 0199'              	clrf	??___flmul+3
 11334  0084' 0816'              	movf	??___flmul,w
 11335  0085' 079D'              	addwf	___flmul@grs,f
 11336  0086' 0817'              	movf	??___flmul+1,w
 11337  0087' 3D9E'              	addwfc	___flmul@grs+1,f
 11338  0088' 0818'              	movf	??___flmul+2,w
 11339  0089' 3D9F'              	addwfc	___flmul@grs+2,f
 11340  008A' 0819'              	movf	??___flmul+3,w
 11341  008B' 3DA0'              	addwfc	___flmul@grs+3,f
 11342  008C' 0827'              	movf	___flmul@temp+1,w
 11343  008D' 0096'              	movwf	??___flmul
 11344  008E' 0197'              	clrf	??___flmul+1
 11345  008F' 0198'              	clrf	??___flmul+2
 11346  0090' 0199'              	clrf	??___flmul+3
 11347  0091' 0816'              	movf	??___flmul,w
 11348  0092' 07A2'              	addwf	___flmul@prod,f
 11349  0093' 0817'              	movf	??___flmul+1,w
 11350  0094' 3DA3'              	addwfc	___flmul@prod+1,f
 11351  0095' 0818'              	movf	??___flmul+2,w
 11352  0096' 3DA4'              	addwfc	___flmul@prod+2,f
 11353  0097' 0819'              	movf	??___flmul+3,w
 11354  0098' 3DA5'              	addwfc	___flmul@prod+3,f
 11355  0099' 0810'              	movf	___flmul@b+2,w
 11356  009A' 0080'              	movwf	__Umul8_16@multiplicand
 11357  009B' 0812'              	movf	___flmul@a,w
 11358  009C' 3180' 2000' 3180'  	fcall	__Umul8_16
 11359  009F' 0020               	movlb	0	; select bank0
 11360  00A0' 0801'              	movf	?__Umul8_16+1,w
 11361  00A1' 00A7'              	movwf	___flmul@temp+1
 11362  00A2' 0800'              	movf	?__Umul8_16,w
 11363  00A3' 00A6'              	movwf	___flmul@temp
 11364  00A4' 0826'              	movf	___flmul@temp,w
 11365  00A5' 0096'              	movwf	??___flmul
 11366  00A6' 0197'              	clrf	??___flmul+1
 11367  00A7' 0198'              	clrf	??___flmul+2
 11368  00A8' 0199'              	clrf	??___flmul+3
 11369  00A9' 0816'              	movf	??___flmul,w
 11370  00AA' 079D'              	addwf	___flmul@grs,f
 11371  00AB' 0817'              	movf	??___flmul+1,w
 11372  00AC' 3D9E'              	addwfc	___flmul@grs+1,f
 11373  00AD' 0818'              	movf	??___flmul+2,w
 11374  00AE' 3D9F'              	addwfc	___flmul@grs+2,f
 11375  00AF' 0819'              	movf	??___flmul+3,w
 11376  00B0' 3DA0'              	addwfc	___flmul@grs+3,f
 11377  00B1' 0827'              	movf	___flmul@temp+1,w
 11378  00B2' 0096'              	movwf	??___flmul
 11379  00B3' 0197'              	clrf	??___flmul+1
 11380  00B4' 0198'              	clrf	??___flmul+2
 11381  00B5' 0199'              	clrf	??___flmul+3
 11382  00B6' 0816'              	movf	??___flmul,w
 11383  00B7' 07A2'              	addwf	___flmul@prod,f
 11384  00B8' 0817'              	movf	??___flmul+1,w
 11385  00B9' 3DA3'              	addwfc	___flmul@prod+1,f
 11386  00BA' 0818'              	movf	??___flmul+2,w
 11387  00BB' 3DA4'              	addwfc	___flmul@prod+2,f
 11388  00BC' 0819'              	movf	??___flmul+3,w
 11389  00BD' 3DA5'              	addwfc	___flmul@prod+3,f
 11390  00BE' 3008               	movlw	8
 11391  00BF'                    u5135:
 11392  00BF' 359D'              	lslf	___flmul@grs,f
 11393  00C0' 0D9E'              	rlf	___flmul@grs+1,f
 11394  00C1' 0D9F'              	rlf	___flmul@grs+2,f
 11395  00C2' 0DA0'              	rlf	___flmul@grs+3,f
 11396  00C3' 0B89               	decfsz	9,f
 11397  00C4' 2800'              	goto	u5135
 11398  00C5' 080F'              	movf	___flmul@b+1,w
 11399  00C6' 0080'              	movwf	__Umul8_16@multiplicand
 11400  00C7' 0812'              	movf	___flmul@a,w
 11401  00C8' 3180' 2000' 3180'  	fcall	__Umul8_16
 11402  00CB' 0020               	movlb	0	; select bank0
 11403  00CC' 0801'              	movf	?__Umul8_16+1,w
 11404  00CD' 00A7'              	movwf	___flmul@temp+1
 11405  00CE' 0800'              	movf	?__Umul8_16,w
 11406  00CF' 00A6'              	movwf	___flmul@temp
 11407  00D0' 0826'              	movf	___flmul@temp,w
 11408  00D1' 079D'              	addwf	___flmul@grs,f
 11409  00D2' 0827'              	movf	___flmul@temp+1,w
 11410  00D3' 3D9E'              	addwfc	___flmul@grs+1,f
 11411  00D4' 3000               	movlw	0
 11412  00D5' 3D9F'              	addwfc	___flmul@grs+2,f
 11413  00D6' 3DA0'              	addwfc	___flmul@grs+3,f
 11414  00D7' 080E'              	movf	___flmul@b,w
 11415  00D8' 0080'              	movwf	__Umul8_16@multiplicand
 11416  00D9' 0813'              	movf	___flmul@a+1,w
 11417  00DA' 3180' 2000' 3180'  	fcall	__Umul8_16
 11418  00DD' 0020               	movlb	0	; select bank0
 11419  00DE' 0801'              	movf	?__Umul8_16+1,w
 11420  00DF' 00A7'              	movwf	___flmul@temp+1
 11421  00E0' 0800'              	movf	?__Umul8_16,w
 11422  00E1' 00A6'              	movwf	___flmul@temp
 11423  00E2' 0826'              	movf	___flmul@temp,w
 11424  00E3' 079D'              	addwf	___flmul@grs,f
 11425  00E4' 0827'              	movf	___flmul@temp+1,w
 11426  00E5' 3D9E'              	addwfc	___flmul@grs+1,f
 11427  00E6' 3000               	movlw	0
 11428  00E7' 3D9F'              	addwfc	___flmul@grs+2,f
 11429  00E8' 3DA0'              	addwfc	___flmul@grs+3,f
 11430  00E9' 3008               	movlw	8
 11431  00EA'                    u5145:
 11432  00EA' 359D'              	lslf	___flmul@grs,f
 11433  00EB' 0D9E'              	rlf	___flmul@grs+1,f
 11434  00EC' 0D9F'              	rlf	___flmul@grs+2,f
 11435  00ED' 0DA0'              	rlf	___flmul@grs+3,f
 11436  00EE' 0B89               	decfsz	9,f
 11437  00EF' 2800'              	goto	u5145
 11438  00F0' 080E'              	movf	___flmul@b,w
 11439  00F1' 0080'              	movwf	__Umul8_16@multiplicand
 11440  00F2' 0812'              	movf	___flmul@a,w
 11441  00F3' 3180' 2000' 3180'  	fcall	__Umul8_16
 11442  00F6' 0020               	movlb	0	; select bank0
 11443  00F7' 0801'              	movf	?__Umul8_16+1,w
 11444  00F8' 00A7'              	movwf	___flmul@temp+1
 11445  00F9' 0800'              	movf	?__Umul8_16,w
 11446  00FA' 00A6'              	movwf	___flmul@temp
 11447  00FB' 0826'              	movf	___flmul@temp,w
 11448  00FC' 079D'              	addwf	___flmul@grs,f
 11449  00FD' 0827'              	movf	___flmul@temp+1,w
 11450  00FE' 3D9E'              	addwfc	___flmul@grs+1,f
 11451  00FF' 3000               	movlw	0
 11452  0100' 3D9F'              	addwfc	___flmul@grs+2,f
 11453  0101' 3DA0'              	addwfc	___flmul@grs+3,f
 11454  0102' 080F'              	movf	___flmul@b+1,w
 11455  0103' 0080'              	movwf	__Umul8_16@multiplicand
 11456  0104' 0814'              	movf	___flmul@a+2,w
 11457  0105' 3180' 2000' 3180'  	fcall	__Umul8_16
 11458  0108' 0020               	movlb	0	; select bank0
 11459  0109' 0801'              	movf	?__Umul8_16+1,w
 11460  010A' 00A7'              	movwf	___flmul@temp+1
 11461  010B' 0800'              	movf	?__Umul8_16,w
 11462  010C' 00A6'              	movwf	___flmul@temp
 11463  010D' 0826'              	movf	___flmul@temp,w
 11464  010E' 07A2'              	addwf	___flmul@prod,f
 11465  010F' 0827'              	movf	___flmul@temp+1,w
 11466  0110' 3DA3'              	addwfc	___flmul@prod+1,f
 11467  0111' 3000               	movlw	0
 11468  0112' 3DA4'              	addwfc	___flmul@prod+2,f
 11469  0113' 3DA5'              	addwfc	___flmul@prod+3,f
 11470  0114' 0810'              	movf	___flmul@b+2,w
 11471  0115' 0080'              	movwf	__Umul8_16@multiplicand
 11472  0116' 0813'              	movf	___flmul@a+1,w
 11473  0117' 3180' 2000' 3180'  	fcall	__Umul8_16
 11474  011A' 0020               	movlb	0	; select bank0
 11475  011B' 0801'              	movf	?__Umul8_16+1,w
 11476  011C' 00A7'              	movwf	___flmul@temp+1
 11477  011D' 0800'              	movf	?__Umul8_16,w
 11478  011E' 00A6'              	movwf	___flmul@temp
 11479  011F' 0826'              	movf	___flmul@temp,w
 11480  0120' 07A2'              	addwf	___flmul@prod,f
 11481  0121' 0827'              	movf	___flmul@temp+1,w
 11482  0122' 3DA3'              	addwfc	___flmul@prod+1,f
 11483  0123' 3000               	movlw	0
 11484  0124' 3DA4'              	addwfc	___flmul@prod+2,f
 11485  0125' 3DA5'              	addwfc	___flmul@prod+3,f
 11486  0126' 0810'              	movf	___flmul@b+2,w
 11487  0127' 0080'              	movwf	__Umul8_16@multiplicand
 11488  0128' 0814'              	movf	___flmul@a+2,w
 11489  0129' 3180' 2000' 3180'  	fcall	__Umul8_16
 11490  012C' 0020               	movlb	0	; select bank0
 11491  012D' 0801'              	movf	?__Umul8_16+1,w
 11492  012E' 00A7'              	movwf	___flmul@temp+1
 11493  012F' 0800'              	movf	?__Umul8_16,w
 11494  0130' 00A6'              	movwf	___flmul@temp
 11495  0131' 0826'              	movf	___flmul@temp,w
 11496  0132' 0096'              	movwf	??___flmul
 11497  0133' 0827'              	movf	___flmul@temp+1,w
 11498  0134' 0097'              	movwf	??___flmul+1
 11499  0135' 0198'              	clrf	??___flmul+2
 11500  0136' 0199'              	clrf	??___flmul+3
 11501  0137' 3008               	movlw	8
 11502  0138'                    u5155:
 11503  0138' 3596'              	lslf	??___flmul,f
 11504  0139' 0D97'              	rlf	??___flmul+1,f
 11505  013A' 0D98'              	rlf	??___flmul+2,f
 11506  013B' 0D99'              	rlf	??___flmul+3,f
 11507  013C' 0B89               	decfsz	9,f
 11508  013D' 2800'              	goto	u5155
 11509  013E' 0816'              	movf	??___flmul,w
 11510  013F' 07A2'              	addwf	___flmul@prod,f
 11511  0140' 0817'              	movf	??___flmul+1,w
 11512  0141' 3DA3'              	addwfc	___flmul@prod+1,f
 11513  0142' 0818'              	movf	??___flmul+2,w
 11514  0143' 3DA4'              	addwfc	___flmul@prod+2,f
 11515  0144' 0819'              	movf	??___flmul+3,w
 11516  0145' 3DA5'              	addwfc	___flmul@prod+3,f
 11517  0146' 081D'              	movf	___flmul@grs,w
 11518  0147' 0096'              	movwf	??___flmul
 11519  0148' 081E'              	movf	___flmul@grs+1,w
 11520  0149' 0097'              	movwf	??___flmul+1
 11521  014A' 081F'              	movf	___flmul@grs+2,w
 11522  014B' 0098'              	movwf	??___flmul+2
 11523  014C' 0820'              	movf	___flmul@grs+3,w
 11524  014D' 0099'              	movwf	??___flmul+3
 11525  014E' 3018               	movlw	24
 11526  014F'                    u5165:
 11527  014F' 3699'              	lsrf	??___flmul+3,f
 11528  0150' 0C98'              	rrf	??___flmul+2,f
 11529  0151' 0C97'              	rrf	??___flmul+1,f
 11530  0152' 0C96'              	rrf	??___flmul,f
 11531  0153' 0B89               	decfsz	9,f
 11532  0154' 2800'              	goto	u5165
 11533  0155' 0816'              	movf	??___flmul,w
 11534  0156' 07A2'              	addwf	___flmul@prod,f
 11535  0157' 0817'              	movf	??___flmul+1,w
 11536  0158' 3DA3'              	addwfc	___flmul@prod+1,f
 11537  0159' 0818'              	movf	??___flmul+2,w
 11538  015A' 3DA4'              	addwfc	___flmul@prod+2,f
 11539  015B' 0819'              	movf	??___flmul+3,w
 11540  015C' 3DA5'              	addwfc	___flmul@prod+3,f
 11541  015D' 3008               	movlw	8
 11542  015E'                    u5175:
 11543  015E' 359D'              	lslf	___flmul@grs,f
 11544  015F' 0D9E'              	rlf	___flmul@grs+1,f
 11545  0160' 0D9F'              	rlf	___flmul@grs+2,f
 11546  0161' 0DA0'              	rlf	___flmul@grs+3,f
 11547  0162' 0B89               	decfsz	9,f
 11548  0163' 2800'              	goto	u5175
 11549  0164' 0821'              	movf	___flmul@bexp,w
 11550  0165' 071C'              	addwf	___flmul@aexp,w
 11551  0166' 0096'              	movwf	??___flmul
 11552  0167' 0197'              	clrf	??___flmul+1
 11553  0168' 0D97'              	rlf	??___flmul+1,f
 11554  0169' 0816'              	movf	??___flmul,w
 11555  016A' 3E82               	addlw	130
 11556  016B' 00A6'              	movwf	___flmul@temp
 11557  016C' 30FF               	movlw	255
 11558  016D' 3D17'              	addwfc	??___flmul+1,w
 11559  016E' 00A7'              	movwf	___flmul@temp+1
 11560  016F'                    l5031:
 11561  016F' 1BA4'              	btfsc	___flmul@prod+2,7
 11562  0170' 2800'              	goto	l5033
 11563  0171' 3001               	movlw	1
 11564  0172'                    u5185:
 11565  0172' 35A2'              	lslf	___flmul@prod,f
 11566  0173' 0DA3'              	rlf	___flmul@prod+1,f
 11567  0174' 0DA4'              	rlf	___flmul@prod+2,f
 11568  0175' 0DA5'              	rlf	___flmul@prod+3,f
 11569  0176' 0B89               	decfsz	9,f
 11570  0177' 2800'              	goto	u5185
 11571  0178' 1BA0'              	btfsc	___flmul@grs+3,7
 11572  0179' 1422'              	bsf	___flmul@prod,0
 11573  017A' 3001               	movlw	1
 11574  017B'                    u5205:
 11575  017B' 359D'              	lslf	___flmul@grs,f
 11576  017C' 0D9E'              	rlf	___flmul@grs+1,f
 11577  017D' 0D9F'              	rlf	___flmul@grs+2,f
 11578  017E' 0DA0'              	rlf	___flmul@grs+3,f
 11579  017F' 0B89               	decfsz	9,f
 11580  0180' 2800'              	goto	u5205
 11581  0181' 30FF               	movlw	255
 11582  0182' 07A6'              	addwf	___flmul@temp,f
 11583  0183' 30FF               	movlw	255
 11584  0184' 3DA7'              	addwfc	___flmul@temp+1,f
 11585  0185' 2800'              	goto	l5031
 11586  0186'                    l5033:
 11587  0186' 019C'              	clrf	___flmul@aexp
 11588  0187' 1FA0'              	btfss	___flmul@grs+3,7
 11589  0188' 2800'              	goto	l5043
 11590  0189' 30FF               	movlw	255
 11591  018A' 051D'              	andwf	___flmul@grs,w
 11592  018B' 0096'              	movwf	??___flmul
 11593  018C' 30FF               	movlw	255
 11594  018D' 051E'              	andwf	___flmul@grs+1,w
 11595  018E' 0097'              	movwf	??___flmul+1
 11596  018F' 30FF               	movlw	255
 11597  0190' 051F'              	andwf	___flmul@grs+2,w
 11598  0191' 0098'              	movwf	??___flmul+2
 11599  0192' 307F               	movlw	127
 11600  0193' 0520'              	andwf	___flmul@grs+3,w
 11601  0194' 0099'              	movwf	??___flmul+3
 11602  0195' 0819'              	movf	??___flmul+3,w
 11603  0196' 0418'              	iorwf	??___flmul+2,w
 11604  0197' 0417'              	iorwf	??___flmul+1,w
 11605  0198' 0416'              	iorwf	??___flmul,w
 11606  0199' 1903               	skipnz
 11607  019A' 1822'              	btfsc	___flmul@prod,0
 11608  019B' 2800'              	goto	l5039
 11609  019C' 2800'              	goto	l5043
 11610  019D'                    l5039:
 11611  019D' 019C'              	clrf	___flmul@aexp
 11612  019E' 0A9C'              	incf	___flmul@aexp,f
 11613  019F'                    l5043:
 11614  019F' 081C'              	movf	___flmul@aexp,w
 11615  01A0' 1903               	btfsc	3,2
 11616  01A1' 2800'              	goto	l5053
 11617  01A2' 3001               	movlw	1
 11618  01A3' 07A2'              	addwf	___flmul@prod,f
 11619  01A4' 3000               	movlw	0
 11620  01A5' 3DA3'              	addwfc	___flmul@prod+1,f
 11621  01A6' 3000               	movlw	0
 11622  01A7' 3DA4'              	addwfc	___flmul@prod+2,f
 11623  01A8' 3000               	movlw	0
 11624  01A9' 3DA5'              	addwfc	___flmul@prod+3,f
 11625  01AA' 1C25'              	btfss	___flmul@prod+3,0
 11626  01AB' 2800'              	goto	l5053
 11627  01AC' 0822'              	movf	___flmul@prod,w
 11628  01AD' 0096'              	movwf	??___flmul
 11629  01AE' 0823'              	movf	___flmul@prod+1,w
 11630  01AF' 0097'              	movwf	??___flmul+1
 11631  01B0' 0824'              	movf	___flmul@prod+2,w
 11632  01B1' 0098'              	movwf	??___flmul+2
 11633  01B2' 0825'              	movf	___flmul@prod+3,w
 11634  01B3' 0099'              	movwf	??___flmul+3
 11635  01B4' 3001               	movlw	1
 11636  01B5' 009A'              	movwf	??___flmul+4
 11637  01B6'                    u5275:
 11638  01B6' 3799'              	asrf	??___flmul+3,f
 11639  01B7' 0C98'              	rrf	??___flmul+2,f
 11640  01B8' 0C97'              	rrf	??___flmul+1,f
 11641  01B9' 0C96'              	rrf	??___flmul,f
 11642  01BA' 0B9A'              	decfsz	??___flmul+4,f
 11643  01BB' 2800'              	goto	u5275
 11644  01BC' 0819'              	movf	??___flmul+3,w
 11645  01BD' 00A5'              	movwf	___flmul@prod+3
 11646  01BE' 0818'              	movf	??___flmul+2,w
 11647  01BF' 00A4'              	movwf	___flmul@prod+2
 11648  01C0' 0817'              	movf	??___flmul+1,w
 11649  01C1' 00A3'              	movwf	___flmul@prod+1
 11650  01C2' 0816'              	movf	??___flmul,w
 11651  01C3' 00A2'              	movwf	___flmul@prod
 11652  01C4' 3001               	movlw	1
 11653  01C5' 07A6'              	addwf	___flmul@temp,f
 11654  01C6' 3000               	movlw	0
 11655  01C7' 3DA7'              	addwfc	___flmul@temp+1,f
 11656  01C8'                    l5053:
 11657  01C8' 0827'              	movf	___flmul@temp+1,w
 11658  01C9' 3A80               	xorlw	128
 11659  01CA' 0096'              	movwf	??___flmul
 11660  01CB' 3080               	movlw	128
 11661  01CC' 0216'              	subwf	??___flmul,w
 11662  01CD' 1D03               	skipz
 11663  01CE' 2800'              	goto	u5285
 11664  01CF' 30FF               	movlw	255
 11665  01D0' 0226'              	subwf	___flmul@temp,w
 11666  01D1'                    u5285:
 11667  01D1' 1C03               	skipc
 11668  01D2' 2800'              	goto	l5057
 11669  01D3' 307F               	movlw	127
 11670  01D4' 0020               	movlb	0	; select bank0
 11671  01D5' 00A5'              	movwf	___flmul@prod+3
 11672  01D6' 3080               	movlw	128
 11673  01D7' 00A4'              	movwf	___flmul@prod+2
 11674  01D8' 3000               	movlw	0
 11675  01D9' 00A3'              	movwf	___flmul@prod+1
 11676  01DA' 3000               	movlw	0
 11677  01DB' 00A2'              	movwf	___flmul@prod
 11678  01DC' 2800'              	goto	l1276
 11679  01DD'                    l5057:
 11680  01DD' 0020               	movlb	0	; select bank0
 11681  01DE' 0827'              	movf	___flmul@temp+1,w
 11682  01DF' 3A80               	xorlw	128
 11683  01E0' 0096'              	movwf	??___flmul
 11684  01E1' 3080               	movlw	128
 11685  01E2' 0216'              	subwf	??___flmul,w
 11686  01E3' 1D03               	skipz
 11687  01E4' 2800'              	goto	u5295
 11688  01E5' 3001               	movlw	1
 11689  01E6' 0226'              	subwf	___flmul@temp,w
 11690  01E7'                    u5295:
 11691  01E7' 1803               	skipnc
 11692  01E8' 2800'              	goto	l5063
 11693  01E9' 3000               	movlw	0
 11694  01EA' 0020               	movlb	0	; select bank0
 11695  01EB' 00A5'              	movwf	___flmul@prod+3
 11696  01EC' 3000               	movlw	0
 11697  01ED' 00A4'              	movwf	___flmul@prod+2
 11698  01EE' 3000               	movlw	0
 11699  01EF' 00A3'              	movwf	___flmul@prod+1
 11700  01F0' 3000               	movlw	0
 11701  01F1' 00A2'              	movwf	___flmul@prod
 11702  01F2' 019B'              	clrf	___flmul@sign
 11703  01F3' 2800'              	goto	l1276
 11704  01F4'                    l5063:
 11705  01F4' 0020               	movlb	0	; select bank0
 11706  01F5' 0826'              	movf	___flmul@temp,w
 11707  01F6' 00A1'              	movwf	___flmul@bexp
 11708  01F7' 30FF               	movlw	255
 11709  01F8' 05A2'              	andwf	___flmul@prod,f
 11710  01F9' 30FF               	movlw	255
 11711  01FA' 05A3'              	andwf	___flmul@prod+1,f
 11712  01FB' 307F               	movlw	127
 11713  01FC' 05A4'              	andwf	___flmul@prod+2,f
 11714  01FD' 3000               	movlw	0
 11715  01FE' 05A5'              	andwf	___flmul@prod+3,f
 11716  01FF' 1821'              	btfsc	___flmul@bexp,0
 11717  0200' 17A4'              	bsf	___flmul@prod+2,7
 11718  0201' 3621'              	lsrf	___flmul@bexp,w
 11719  0202' 00A5'              	movwf	___flmul@prod+3
 11720  0203'                    l1276:
 11721  0203' 081B'              	movf	___flmul@sign,w
 11722  0204' 0096'              	movwf	??___flmul
 11723  0205' 0816'              	movf	??___flmul,w
 11724  0206' 04A5'              	iorwf	___flmul@prod+3,f
 11725  0207' 0825'              	movf	___flmul@prod+3,w
 11726  0208' 0091'              	movwf	?___flmul+3
 11727  0209' 0824'              	movf	___flmul@prod+2,w
 11728  020A' 0090'              	movwf	?___flmul+2
 11729  020B' 0823'              	movf	___flmul@prod+1,w
 11730  020C' 008F'              	movwf	?___flmul+1
 11731  020D' 0822'              	movf	___flmul@prod,w
 11732  020E' 008E'              	movwf	?___flmul
 11733  020F' 0008               	return
 11734  0210'                    __end_of___flmul:
 11735                           
 11736                           	psect	text48
 11737  0000'                    __ptext48:	
 11738 ;; *************** function __Umul8_16 *****************
 11739 ;; Defined at:
 11740 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8_16.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  multiplier      1    wreg     unsigned char 
 11743 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 11744 ;; Auto vars:     Size  Location     Type
 11745 ;;  multiplier      1    8[BANK0 ] unsigned char 
 11746 ;;  word_mpld       2    6[BANK0 ] unsigned short 
 11747 ;;  product         2    4[BANK0 ] unsigned short 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  2    0[BANK0 ] unsigned int 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11757 ;;      Params:         0       2       0       0       0       0       0       0
 11758 ;;      Locals:         0       5       0       0       0       0       0       0
 11759 ;;      Temps:          0       2       0       0       0       0       0       0
 11760 ;;      Totals:         0       9       0       0       0       0       0       0
 11761 ;;Total ram usage:        9 bytes
 11762 ;; Hardware stack levels used: 1
 11763 ;; Hardware stack levels required when called: 7
 11764 ;; This function calls:
 11765 ;;		Nothing
 11766 ;; This function is called by:
 11767 ;;		___flmul
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771  0000'                    __Umul8_16:	
 11772                           ;psect for function __Umul8_16
 11773                           
 11774                           
 11775                           ;incstack = 0
 11776                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 11777                           ;__Umul8_16@multiplier stored from wreg
 11778  0000' 0020               	movlb	0	; select bank0
 11779  0001' 0088'              	movwf	__Umul8_16@multiplier
 11780  0002' 0184'              	clrf	__Umul8_16@product
 11781  0003' 0185'              	clrf	__Umul8_16@product+1
 11782  0004' 0800'              	movf	__Umul8_16@multiplicand,w
 11783  0005' 0082'              	movwf	??__Umul8_16
 11784  0006' 0183'              	clrf	??__Umul8_16+1
 11785  0007' 0802'              	movf	??__Umul8_16,w
 11786  0008' 0086'              	movwf	__Umul8_16@word_mpld
 11787  0009' 0803'              	movf	??__Umul8_16+1,w
 11788  000A' 0087'              	movwf	__Umul8_16@word_mpld+1
 11789  000B'                    l4889:
 11790  000B' 1C08'              	btfss	__Umul8_16@multiplier,0
 11791  000C' 2800'              	goto	l1283
 11792  000D' 0806'              	movf	__Umul8_16@word_mpld,w
 11793  000E' 0784'              	addwf	__Umul8_16@product,f
 11794  000F' 0807'              	movf	__Umul8_16@word_mpld+1,w
 11795  0010' 3D85'              	addwfc	__Umul8_16@product+1,f
 11796  0011'                    l1283:
 11797  0011' 3001               	movlw	1
 11798  0012'                    u5005:
 11799  0012' 3586'              	lslf	__Umul8_16@word_mpld,f
 11800  0013' 0D87'              	rlf	__Umul8_16@word_mpld+1,f
 11801  0014' 0B89               	decfsz	9,f
 11802  0015' 2800'              	goto	u5005
 11803  0016' 1003               	clrc
 11804  0017' 0C88'              	rrf	__Umul8_16@multiplier,f
 11805  0018' 0808'              	movf	__Umul8_16@multiplier,w
 11806  0019' 1D03               	btfss	3,2
 11807  001A' 2800'              	goto	l4889
 11808  001B' 0805'              	movf	__Umul8_16@product+1,w
 11809  001C' 0081'              	movwf	?__Umul8_16+1
 11810  001D' 0804'              	movf	__Umul8_16@product,w
 11811  001E' 0080'              	movwf	?__Umul8_16
 11812  001F' 0008               	return
 11813  0020'                    __end_of__Umul8_16:
 11814                           
 11815                           	psect	text49
 11816  0000'                    __ptext49:	
 11817 ;; *************** function ___fldiv *****************
 11818 ;; Defined at:
 11819 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\sprcdiv.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;  a               4   48[BANK0 ] unsigned int 
 11822 ;;  b               4   52[BANK0 ] unsigned int 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;  grs             4   68[BANK0 ] unsigned long 
 11825 ;;  rem             4   61[BANK0 ] unsigned long 
 11826 ;;  new_exp         2   66[BANK0 ] short 
 11827 ;;  aexp            1   73[BANK0 ] unsigned char 
 11828 ;;  bexp            1   72[BANK0 ] unsigned char 
 11829 ;;  sign            1   65[BANK0 ] unsigned char 
 11830 ;; Return value:  Size  Location     Type
 11831 ;;                  4   48[BANK0 ] unsigned char 
 11832 ;; Registers used:
 11833 ;;		wreg, status,2, status,0
 11834 ;; Tracked objects:
 11835 ;;		On entry : 0/0
 11836 ;;		On exit  : 0/0
 11837 ;;		Unchanged: 0/0
 11838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11839 ;;      Params:         0       8       0       0       0       0       0       0
 11840 ;;      Locals:         0      13       0       0       0       0       0       0
 11841 ;;      Temps:          0       5       0       0       0       0       0       0
 11842 ;;      Totals:         0      26       0       0       0       0       0       0
 11843 ;;Total ram usage:       26 bytes
 11844 ;; Hardware stack levels used: 1
 11845 ;; Hardware stack levels required when called: 7
 11846 ;; This function calls:
 11847 ;;		Nothing
 11848 ;; This function is called by:
 11849 ;;		_SSPA_getTemp
 11850 ;;		_SSPA_getPOut
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854  0000'                    ___fldiv:	
 11855                           ;psect for function ___fldiv
 11856                           
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 11860  0000' 0020               	movlb	0	; select bank0
 11861  0001' 0837'              	movf	___fldiv@b+3,w
 11862  0002' 3980               	andlw	128
 11863  0003' 00C1'              	movwf	___fldiv@sign
 11864  0004' 3537'              	lslf	___fldiv@b+3,w
 11865  0005' 00C8'              	movwf	___fldiv@bexp
 11866  0006' 1BB6'              	btfsc	___fldiv@b+2,7
 11867  0007' 1448'              	bsf	___fldiv@bexp,0
 11868  0008' 0848'              	movf	___fldiv@bexp,w
 11869  0009' 1903               	btfsc	3,2
 11870  000A' 2800'              	goto	l3677
 11871  000B' 0A48'              	incf	___fldiv@bexp,w
 11872  000C' 1D03               	btfss	3,2
 11873  000D' 2800'              	goto	l3673
 11874  000E' 3000               	movlw	0
 11875  000F' 00B7'              	movwf	___fldiv@b+3
 11876  0010' 3000               	movlw	0
 11877  0011' 00B6'              	movwf	___fldiv@b+2
 11878  0012' 3000               	movlw	0
 11879  0013' 00B5'              	movwf	___fldiv@b+1
 11880  0014' 3000               	movlw	0
 11881  0015' 00B4'              	movwf	___fldiv@b
 11882  0016'                    l3673:
 11883  0016' 17B6'              	bsf	___fldiv@b+2,7
 11884  0017' 01B7'              	clrf	___fldiv@b+3
 11885  0018' 2800'              	goto	l3679
 11886  0019'                    l3677:
 11887  0019' 3000               	movlw	0
 11888  001A' 00B7'              	movwf	___fldiv@b+3
 11889  001B' 3000               	movlw	0
 11890  001C' 00B6'              	movwf	___fldiv@b+2
 11891  001D' 3000               	movlw	0
 11892  001E' 00B5'              	movwf	___fldiv@b+1
 11893  001F' 3000               	movlw	0
 11894  0020' 00B4'              	movwf	___fldiv@b
 11895  0021'                    l3679:
 11896  0021' 0833'              	movf	___fldiv@a+3,w
 11897  0022' 3980               	andlw	128
 11898  0023' 00B8'              	movwf	??___fldiv
 11899  0024' 0838'              	movf	??___fldiv,w
 11900  0025' 06C1'              	xorwf	___fldiv@sign,f
 11901  0026' 3533'              	lslf	___fldiv@a+3,w
 11902  0027' 00C9'              	movwf	___fldiv@aexp
 11903  0028' 1BB2'              	btfsc	___fldiv@a+2,7
 11904  0029' 1449'              	bsf	___fldiv@aexp,0
 11905  002A' 0849'              	movf	___fldiv@aexp,w
 11906  002B' 1903               	btfsc	3,2
 11907  002C' 2800'              	goto	l3697
 11908  002D' 0A49'              	incf	___fldiv@aexp,w
 11909  002E' 1D03               	btfss	3,2
 11910  002F' 2800'              	goto	l3693
 11911  0030' 3000               	movlw	0
 11912  0031' 00B3'              	movwf	___fldiv@a+3
 11913  0032' 3000               	movlw	0
 11914  0033' 00B2'              	movwf	___fldiv@a+2
 11915  0034' 3000               	movlw	0
 11916  0035' 00B1'              	movwf	___fldiv@a+1
 11917  0036' 3000               	movlw	0
 11918  0037' 00B0'              	movwf	___fldiv@a
 11919  0038'                    l3693:
 11920  0038' 17B2'              	bsf	___fldiv@a+2,7
 11921  0039' 01B3'              	clrf	___fldiv@a+3
 11922  003A' 2800'              	goto	l1224
 11923  003B'                    l3697:
 11924  003B' 3000               	movlw	0
 11925  003C' 00B3'              	movwf	___fldiv@a+3
 11926  003D' 3000               	movlw	0
 11927  003E' 00B2'              	movwf	___fldiv@a+2
 11928  003F' 3000               	movlw	0
 11929  0040' 00B1'              	movwf	___fldiv@a+1
 11930  0041' 3000               	movlw	0
 11931  0042' 00B0'              	movwf	___fldiv@a
 11932  0043'                    l1224:
 11933  0043' 0833'              	movf	___fldiv@a+3,w
 11934  0044' 0432'              	iorwf	___fldiv@a+2,w
 11935  0045' 0431'              	iorwf	___fldiv@a+1,w
 11936  0046' 0430'              	iorwf	___fldiv@a,w
 11937  0047' 1D03               	skipz
 11938  0048' 2800'              	goto	l3707
 11939  0049' 3000               	movlw	0
 11940  004A' 00B7'              	movwf	___fldiv@b+3
 11941  004B' 3000               	movlw	0
 11942  004C' 00B6'              	movwf	___fldiv@b+2
 11943  004D' 3000               	movlw	0
 11944  004E' 00B5'              	movwf	___fldiv@b+1
 11945  004F' 3000               	movlw	0
 11946  0050' 00B4'              	movwf	___fldiv@b
 11947  0051' 3080               	movlw	128
 11948  0052' 04B6'              	iorwf	___fldiv@b+2,f
 11949  0053' 307F               	movlw	127
 11950  0054' 04B7'              	iorwf	___fldiv@b+3,f
 11951  0055'                    L5:
 11952  0055' 0841'              	movf	___fldiv@sign,w
 11953  0056' 00B8'              	movwf	??___fldiv
 11954  0057' 0838'              	movf	??___fldiv,w
 11955  0058' 04B7'              	iorwf	___fldiv@b+3,f
 11956  0059' 0837'              	movf	___fldiv@b+3,w
 11957  005A' 00B3'              	movwf	?___fldiv+3
 11958  005B' 0836'              	movf	___fldiv@b+2,w
 11959  005C' 00B2'              	movwf	?___fldiv+2
 11960  005D' 0835'              	movf	___fldiv@b+1,w
 11961  005E' 00B1'              	movwf	?___fldiv+1
 11962  005F' 0834'              	movf	___fldiv@b,w
 11963  0060' 00B0'              	movwf	?___fldiv
 11964  0061' 0008               	return
 11965  0062'                    l3707:
 11966  0062' 0848'              	movf	___fldiv@bexp,w
 11967  0063' 1D03               	btfss	3,2
 11968  0064' 2800'              	goto	l3713
 11969  0065' 3000               	movlw	0
 11970  0066' 00B3'              	movwf	?___fldiv+3
 11971  0067' 3000               	movlw	0
 11972  0068' 00B2'              	movwf	?___fldiv+2
 11973  0069' 3000               	movlw	0
 11974  006A' 00B1'              	movwf	?___fldiv+1
 11975  006B' 3000               	movlw	0
 11976  006C' 00B0'              	movwf	?___fldiv
 11977  006D' 0008               	return
 11978  006E'                    l3713:
 11979  006E' 0848'              	movf	___fldiv@bexp,w
 11980  006F' 00B8'              	movwf	??___fldiv
 11981  0070' 01B9'              	clrf	??___fldiv+1
 11982  0071' 0839'              	movf	??___fldiv+1,w
 11983  0072' 00BB'              	movwf	??___fldiv+3
 11984  0073' 0849'              	movf	___fldiv@aexp,w
 11985  0074' 0238'              	subwf	??___fldiv,w
 11986  0075' 00BA'              	movwf	??___fldiv+2
 11987  0076' 1C03               	skipc
 11988  0077' 03BB'              	decf	??___fldiv+3,f
 11989  0078' 083A'              	movf	??___fldiv+2,w
 11990  0079' 3E7F               	addlw	127
 11991  007A' 00C2'              	movwf	___fldiv@new_exp
 11992  007B' 3000               	movlw	0
 11993  007C' 3D3B'              	addwfc	??___fldiv+3,w
 11994  007D' 00C3'              	movwf	___fldiv@new_exp+1
 11995  007E' 0837'              	movf	___fldiv@b+3,w
 11996  007F' 00C0'              	movwf	___fldiv@rem+3
 11997  0080' 0836'              	movf	___fldiv@b+2,w
 11998  0081' 00BF'              	movwf	___fldiv@rem+2
 11999  0082' 0835'              	movf	___fldiv@b+1,w
 12000  0083' 00BE'              	movwf	___fldiv@rem+1
 12001  0084' 0834'              	movf	___fldiv@b,w
 12002  0085' 00BD'              	movwf	___fldiv@rem
 12003  0086' 3000               	movlw	0
 12004  0087' 00B7'              	movwf	___fldiv@b+3
 12005  0088' 3000               	movlw	0
 12006  0089' 00B6'              	movwf	___fldiv@b+2
 12007  008A' 3000               	movlw	0
 12008  008B' 00B5'              	movwf	___fldiv@b+1
 12009  008C' 3000               	movlw	0
 12010  008D' 00B4'              	movwf	___fldiv@b
 12011  008E' 3000               	movlw	0
 12012  008F' 00C7'              	movwf	___fldiv@grs+3
 12013  0090' 3000               	movlw	0
 12014  0091' 00C6'              	movwf	___fldiv@grs+2
 12015  0092' 3000               	movlw	0
 12016  0093' 00C5'              	movwf	___fldiv@grs+1
 12017  0094' 3000               	movlw	0
 12018  0095' 00C4'              	movwf	___fldiv@grs
 12019  0096' 01C9'              	clrf	___fldiv@aexp
 12020  0097'                    l3741:
 12021  0097' 301A               	movlw	26
 12022  0098' 0249'              	subwf	___fldiv@aexp,w
 12023  0099' 1803               	btfsc	3,0
 12024  009A' 2800'              	goto	l3743
 12025  009B' 0849'              	movf	___fldiv@aexp,w
 12026  009C' 1903               	btfsc	3,2
 12027  009D' 2800'              	goto	l3733
 12028  009E' 3001               	movlw	1
 12029  009F'                    u3425:
 12030  009F' 35BD'              	lslf	___fldiv@rem,f
 12031  00A0' 0DBE'              	rlf	___fldiv@rem+1,f
 12032  00A1' 0DBF'              	rlf	___fldiv@rem+2,f
 12033  00A2' 0DC0'              	rlf	___fldiv@rem+3,f
 12034  00A3' 0B89               	decfsz	9,f
 12035  00A4' 2800'              	goto	u3425
 12036  00A5' 3001               	movlw	1
 12037  00A6'                    u3435:
 12038  00A6' 35B4'              	lslf	___fldiv@b,f
 12039  00A7' 0DB5'              	rlf	___fldiv@b+1,f
 12040  00A8' 0DB6'              	rlf	___fldiv@b+2,f
 12041  00A9' 0DB7'              	rlf	___fldiv@b+3,f
 12042  00AA' 0B89               	decfsz	9,f
 12043  00AB' 2800'              	goto	u3435
 12044  00AC' 1BC7'              	btfsc	___fldiv@grs+3,7
 12045  00AD' 1434'              	bsf	___fldiv@b,0
 12046  00AE' 3001               	movlw	1
 12047  00AF'                    u3455:
 12048  00AF' 35C4'              	lslf	___fldiv@grs,f
 12049  00B0' 0DC5'              	rlf	___fldiv@grs+1,f
 12050  00B1' 0DC6'              	rlf	___fldiv@grs+2,f
 12051  00B2' 0DC7'              	rlf	___fldiv@grs+3,f
 12052  00B3' 0B89               	decfsz	9,f
 12053  00B4' 2800'              	goto	u3455
 12054  00B5'                    l3733:
 12055  00B5' 0833'              	movf	___fldiv@a+3,w
 12056  00B6' 0240'              	subwf	___fldiv@rem+3,w
 12057  00B7' 1D03               	skipz
 12058  00B8' 2800'              	goto	u3465
 12059  00B9' 0832'              	movf	___fldiv@a+2,w
 12060  00BA' 023F'              	subwf	___fldiv@rem+2,w
 12061  00BB' 1D03               	skipz
 12062  00BC' 2800'              	goto	u3465
 12063  00BD' 0831'              	movf	___fldiv@a+1,w
 12064  00BE' 023E'              	subwf	___fldiv@rem+1,w
 12065  00BF' 1D03               	skipz
 12066  00C0' 2800'              	goto	u3465
 12067  00C1' 0830'              	movf	___fldiv@a,w
 12068  00C2' 023D'              	subwf	___fldiv@rem,w
 12069  00C3'                    u3465:
 12070  00C3' 1C03               	skipc
 12071  00C4' 2800'              	goto	l3739
 12072  00C5' 1747'              	bsf	___fldiv@grs+3,6
 12073  00C6' 0830'              	movf	___fldiv@a,w
 12074  00C7' 02BD'              	subwf	___fldiv@rem,f
 12075  00C8' 0831'              	movf	___fldiv@a+1,w
 12076  00C9' 3BBE'              	subwfb	___fldiv@rem+1,f
 12077  00CA' 0832'              	movf	___fldiv@a+2,w
 12078  00CB' 3BBF'              	subwfb	___fldiv@rem+2,f
 12079  00CC' 0833'              	movf	___fldiv@a+3,w
 12080  00CD' 3BC0'              	subwfb	___fldiv@rem+3,f
 12081  00CE'                    l3739:
 12082  00CE' 3001               	movlw	1
 12083  00CF' 00B8'              	movwf	??___fldiv
 12084  00D0' 0838'              	movf	??___fldiv,w
 12085  00D1' 07C9'              	addwf	___fldiv@aexp,f
 12086  00D2' 2800'              	goto	l3741
 12087  00D3'                    l3743:
 12088  00D3' 0840'              	movf	___fldiv@rem+3,w
 12089  00D4' 043F'              	iorwf	___fldiv@rem+2,w
 12090  00D5' 043E'              	iorwf	___fldiv@rem+1,w
 12091  00D6' 043D'              	iorwf	___fldiv@rem,w
 12092  00D7' 1D03               	btfss	3,2
 12093  00D8' 1444'              	bsf	___fldiv@grs,0
 12094  00D9'                    l3757:
 12095  00D9' 1BB6'              	btfsc	___fldiv@b+2,7
 12096  00DA' 2800'              	goto	l3759
 12097  00DB' 3001               	movlw	1
 12098  00DC'                    u3495:
 12099  00DC' 35B4'              	lslf	___fldiv@b,f
 12100  00DD' 0DB5'              	rlf	___fldiv@b+1,f
 12101  00DE' 0DB6'              	rlf	___fldiv@b+2,f
 12102  00DF' 0DB7'              	rlf	___fldiv@b+3,f
 12103  00E0' 0B89               	decfsz	9,f
 12104  00E1' 2800'              	goto	u3495
 12105  00E2' 1BC7'              	btfsc	___fldiv@grs+3,7
 12106  00E3' 1434'              	bsf	___fldiv@b,0
 12107  00E4' 3001               	movlw	1
 12108  00E5'                    u3515:
 12109  00E5' 35C4'              	lslf	___fldiv@grs,f
 12110  00E6' 0DC5'              	rlf	___fldiv@grs+1,f
 12111  00E7' 0DC6'              	rlf	___fldiv@grs+2,f
 12112  00E8' 0DC7'              	rlf	___fldiv@grs+3,f
 12113  00E9' 0B89               	decfsz	9,f
 12114  00EA' 2800'              	goto	u3515
 12115  00EB' 30FF               	movlw	255
 12116  00EC' 07C2'              	addwf	___fldiv@new_exp,f
 12117  00ED' 30FF               	movlw	255
 12118  00EE' 3DC3'              	addwfc	___fldiv@new_exp+1,f
 12119  00EF' 2800'              	goto	l3757
 12120  00F0'                    l3759:
 12121  00F0' 01C9'              	clrf	___fldiv@aexp
 12122  00F1' 1FC7'              	btfss	___fldiv@grs+3,7
 12123  00F2' 2800'              	goto	l3769
 12124  00F3' 30FF               	movlw	255
 12125  00F4' 0544'              	andwf	___fldiv@grs,w
 12126  00F5' 00B8'              	movwf	??___fldiv
 12127  00F6' 30FF               	movlw	255
 12128  00F7' 0545'              	andwf	___fldiv@grs+1,w
 12129  00F8' 00B9'              	movwf	??___fldiv+1
 12130  00F9' 30FF               	movlw	255
 12131  00FA' 0546'              	andwf	___fldiv@grs+2,w
 12132  00FB' 00BA'              	movwf	??___fldiv+2
 12133  00FC' 307F               	movlw	127
 12134  00FD' 0547'              	andwf	___fldiv@grs+3,w
 12135  00FE' 00BB'              	movwf	??___fldiv+3
 12136  00FF' 083B'              	movf	??___fldiv+3,w
 12137  0100' 043A'              	iorwf	??___fldiv+2,w
 12138  0101' 0439'              	iorwf	??___fldiv+1,w
 12139  0102' 0438'              	iorwf	??___fldiv,w
 12140  0103' 1903               	skipnz
 12141  0104' 1834'              	btfsc	___fldiv@b,0
 12142  0105' 2800'              	goto	l3765
 12143  0106' 2800'              	goto	l3769
 12144  0107'                    l3765:
 12145  0107' 01C9'              	clrf	___fldiv@aexp
 12146  0108' 0AC9'              	incf	___fldiv@aexp,f
 12147  0109'                    l3769:
 12148  0109' 0849'              	movf	___fldiv@aexp,w
 12149  010A' 1903               	btfsc	3,2
 12150  010B' 2800'              	goto	l3779
 12151  010C' 3001               	movlw	1
 12152  010D' 07B4'              	addwf	___fldiv@b,f
 12153  010E' 3000               	movlw	0
 12154  010F' 3DB5'              	addwfc	___fldiv@b+1,f
 12155  0110' 3000               	movlw	0
 12156  0111' 3DB6'              	addwfc	___fldiv@b+2,f
 12157  0112' 3000               	movlw	0
 12158  0113' 3DB7'              	addwfc	___fldiv@b+3,f
 12159  0114' 1C37'              	btfss	___fldiv@b+3,0
 12160  0115' 2800'              	goto	l3779
 12161  0116' 0834'              	movf	___fldiv@b,w
 12162  0117' 00B8'              	movwf	??___fldiv
 12163  0118' 0835'              	movf	___fldiv@b+1,w
 12164  0119' 00B9'              	movwf	??___fldiv+1
 12165  011A' 0836'              	movf	___fldiv@b+2,w
 12166  011B' 00BA'              	movwf	??___fldiv+2
 12167  011C' 0837'              	movf	___fldiv@b+3,w
 12168  011D' 00BB'              	movwf	??___fldiv+3
 12169  011E' 3001               	movlw	1
 12170  011F' 00BC'              	movwf	??___fldiv+4
 12171  0120'                    u3585:
 12172  0120' 37BB'              	asrf	??___fldiv+3,f
 12173  0121' 0CBA'              	rrf	??___fldiv+2,f
 12174  0122' 0CB9'              	rrf	??___fldiv+1,f
 12175  0123' 0CB8'              	rrf	??___fldiv,f
 12176  0124' 0BBC'              	decfsz	??___fldiv+4,f
 12177  0125' 2800'              	goto	u3585
 12178  0126' 083B'              	movf	??___fldiv+3,w
 12179  0127' 00B7'              	movwf	___fldiv@b+3
 12180  0128' 083A'              	movf	??___fldiv+2,w
 12181  0129' 00B6'              	movwf	___fldiv@b+2
 12182  012A' 0839'              	movf	??___fldiv+1,w
 12183  012B' 00B5'              	movwf	___fldiv@b+1
 12184  012C' 0838'              	movf	??___fldiv,w
 12185  012D' 00B4'              	movwf	___fldiv@b
 12186  012E' 3001               	movlw	1
 12187  012F' 07C2'              	addwf	___fldiv@new_exp,f
 12188  0130' 3000               	movlw	0
 12189  0131' 3DC3'              	addwfc	___fldiv@new_exp+1,f
 12190  0132'                    l3779:
 12191  0132' 0843'              	movf	___fldiv@new_exp+1,w
 12192  0133' 3A80               	xorlw	128
 12193  0134' 00B8'              	movwf	??___fldiv
 12194  0135' 3080               	movlw	128
 12195  0136' 0238'              	subwf	??___fldiv,w
 12196  0137' 1D03               	skipz
 12197  0138' 2800'              	goto	u3595
 12198  0139' 30FF               	movlw	255
 12199  013A' 0242'              	subwf	___fldiv@new_exp,w
 12200  013B'                    u3595:
 12201  013B' 1C03               	skipc
 12202  013C' 2800'              	goto	l1245
 12203  013D' 30FF               	movlw	255
 12204  013E' 0020               	movlb	0	; select bank0
 12205  013F' 00C2'              	movwf	___fldiv@new_exp
 12206  0140' 3000               	movlw	0
 12207  0141' 00C3'              	movwf	___fldiv@new_exp+1
 12208  0142' 3000               	movlw	0
 12209  0143' 00B7'              	movwf	___fldiv@b+3
 12210  0144' 3000               	movlw	0
 12211  0145' 00B6'              	movwf	___fldiv@b+2
 12212  0146' 3000               	movlw	0
 12213  0147' 00B5'              	movwf	___fldiv@b+1
 12214  0148' 3000               	movlw	0
 12215  0149' 00B4'              	movwf	___fldiv@b
 12216  014A'                    l1245:
 12217  014A' 0020               	movlb	0	; select bank0
 12218  014B' 0843'              	movf	___fldiv@new_exp+1,w
 12219  014C' 3A80               	xorlw	128
 12220  014D' 00B8'              	movwf	??___fldiv
 12221  014E' 3080               	movlw	128
 12222  014F' 0238'              	subwf	??___fldiv,w
 12223  0150' 1D03               	skipz
 12224  0151' 2800'              	goto	u3605
 12225  0152' 3001               	movlw	1
 12226  0153' 0242'              	subwf	___fldiv@new_exp,w
 12227  0154'                    u3605:
 12228  0154' 1803               	skipnc
 12229  0155' 2800'              	goto	l1246
 12230  0156' 0020               	movlb	0	; select bank0
 12231  0157' 01C2'              	clrf	___fldiv@new_exp
 12232  0158' 01C3'              	clrf	___fldiv@new_exp+1
 12233  0159' 3000               	movlw	0
 12234  015A' 00B7'              	movwf	___fldiv@b+3
 12235  015B' 3000               	movlw	0
 12236  015C' 00B6'              	movwf	___fldiv@b+2
 12237  015D' 3000               	movlw	0
 12238  015E' 00B5'              	movwf	___fldiv@b+1
 12239  015F' 3000               	movlw	0
 12240  0160' 00B4'              	movwf	___fldiv@b
 12241  0161' 01C1'              	clrf	___fldiv@sign
 12242  0162'                    l1246:
 12243  0162' 0020               	movlb	0	; select bank0
 12244  0163' 0842'              	movf	___fldiv@new_exp,w
 12245  0164' 00C8'              	movwf	___fldiv@bexp
 12246  0165' 1C48'              	btfss	___fldiv@bexp,0
 12247  0166' 2800'              	goto	l3793
 12248  0167' 17B6'              	bsf	___fldiv@b+2,7
 12249  0168' 2800'              	goto	l1248
 12250  0169'                    l3793:
 12251  0169' 307F               	movlw	127
 12252  016A' 00B8'              	movwf	??___fldiv
 12253  016B' 0838'              	movf	??___fldiv,w
 12254  016C' 05B6'              	andwf	___fldiv@b+2,f
 12255  016D'                    l1248:
 12256  016D' 3648'              	lsrf	___fldiv@bexp,w
 12257  016E' 00B7'              	movwf	___fldiv@b+3
 12258  016F' 2800'              	goto	L5
 12259  0170'                    __end_of___fldiv:
 12260                           
 12261                           	psect	text50
 12262  0000'                    __ptext50:	
 12263 ;; *************** function _KAPS_setRelPos *****************
 12264 ;; Defined at:
 12265 ;;		line 369 in file "main.c"
 12266 ;; Parameters:    Size  Location     Type
 12267 ;;  kaps            1    wreg     PTR struct .
 12268 ;;		 -> kaps(7), 
 12269 ;;  offset          4   13[BANK0 ] unsigned long 
 12270 ;; Auto vars:     Size  Location     Type
 12271 ;;  kaps            1   17[BANK0 ] PTR struct .
 12272 ;;		 -> kaps(7), 
 12273 ;; Return value:  Size  Location     Type
 12274 ;;                  1    wreg      void 
 12275 ;; Registers used:
 12276 ;;		wreg
 12277 ;; Tracked objects:
 12278 ;;		On entry : 0/0
 12279 ;;		On exit  : 0/0
 12280 ;;		Unchanged: 0/0
 12281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12282 ;;      Params:         0       4       0       0       0       0       0       0
 12283 ;;      Locals:         0       1       0       0       0       0       0       0
 12284 ;;      Temps:          0       0       0       0       0       0       0       0
 12285 ;;      Totals:         0       5       0       0       0       0       0       0
 12286 ;;Total ram usage:        5 bytes
 12287 ;; Hardware stack levels used: 1
 12288 ;; Hardware stack levels required when called: 7
 12289 ;; This function calls:
 12290 ;;		Nothing
 12291 ;; This function is called by:
 12292 ;;		_ProcessMsg
 12293 ;; This function uses a non-reentrant model
 12294 ;;
 12295                           
 12296  0000'                    _KAPS_setRelPos:	
 12297                           ;psect for function _KAPS_setRelPos
 12298                           
 12299                           
 12300                           ;incstack = 0
 12301                           ; Regs used in _KAPS_setRelPos: [wreg]
 12302  0000' 0008               	return
 12303  0001'                    __end_of_KAPS_setRelPos:
 12304                           
 12305                           	psect	text51
 12306  0000'                    __ptext51:	
 12307 ;; *************** function _KAPS_setAbsPos *****************
 12308 ;; Defined at:
 12309 ;;		line 358 in file "main.c"
 12310 ;; Parameters:    Size  Location     Type
 12311 ;;  kaps            1    wreg     PTR struct .
 12312 ;;		 -> kaps(7), 
 12313 ;;  pos             4   13[BANK0 ] unsigned long 
 12314 ;; Auto vars:     Size  Location     Type
 12315 ;;  kaps            1   17[BANK0 ] PTR struct .
 12316 ;;		 -> kaps(7), 
 12317 ;; Return value:  Size  Location     Type
 12318 ;;                  1    wreg      void 
 12319 ;; Registers used:
 12320 ;;		wreg
 12321 ;; Tracked objects:
 12322 ;;		On entry : 0/0
 12323 ;;		On exit  : 0/0
 12324 ;;		Unchanged: 0/0
 12325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12326 ;;      Params:         0       4       0       0       0       0       0       0
 12327 ;;      Locals:         0       1       0       0       0       0       0       0
 12328 ;;      Temps:          0       0       0       0       0       0       0       0
 12329 ;;      Totals:         0       5       0       0       0       0       0       0
 12330 ;;Total ram usage:        5 bytes
 12331 ;; Hardware stack levels used: 1
 12332 ;; Hardware stack levels required when called: 7
 12333 ;; This function calls:
 12334 ;;		Nothing
 12335 ;; This function is called by:
 12336 ;;		_ProcessMsg
 12337 ;; This function uses a non-reentrant model
 12338 ;;
 12339                           
 12340  0000'                    _KAPS_setAbsPos:	
 12341                           ;psect for function _KAPS_setAbsPos
 12342                           
 12343                           
 12344                           ;incstack = 0
 12345                           ; Regs used in _KAPS_setAbsPos: [wreg]
 12346  0000' 0008               	return
 12347  0001'                    __end_of_KAPS_setAbsPos:
 12348                           
 12349                           	psect	text52
 12350  0000'                    __ptext52:	
 12351 ;; *************** function _KAPS_getStatus *****************
 12352 ;; Defined at:
 12353 ;;		line 391 in file "main.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;  kaps            1    wreg     PTR struct .
 12356 ;;		 -> kaps(7), 
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  kaps            1    0[BANK0 ] PTR struct .
 12359 ;;		 -> kaps(7), 
 12360 ;; Return value:  Size  Location     Type
 12361 ;;                  1    wreg      void 
 12362 ;; Registers used:
 12363 ;;		wreg
 12364 ;; Tracked objects:
 12365 ;;		On entry : 0/0
 12366 ;;		On exit  : 0/0
 12367 ;;		Unchanged: 0/0
 12368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12369 ;;      Params:         0       0       0       0       0       0       0       0
 12370 ;;      Locals:         0       1       0       0       0       0       0       0
 12371 ;;      Temps:          0       0       0       0       0       0       0       0
 12372 ;;      Totals:         0       1       0       0       0       0       0       0
 12373 ;;Total ram usage:        1 bytes
 12374 ;; Hardware stack levels used: 1
 12375 ;; Hardware stack levels required when called: 7
 12376 ;; This function calls:
 12377 ;;		Nothing
 12378 ;; This function is called by:
 12379 ;;		_ProcessMsg
 12380 ;; This function uses a non-reentrant model
 12381 ;;
 12382                           
 12383  0000'                    _KAPS_getStatus:	
 12384                           ;psect for function _KAPS_getStatus
 12385                           
 12386                           
 12387                           ;incstack = 0
 12388                           ; Regs used in _KAPS_getStatus: [wreg]
 12389  0000' 0008               	return
 12390  0001'                    __end_of_KAPS_getStatus:
 12391                           
 12392                           	psect	text53
 12393  0000'                    __ptext53:	
 12394 ;; *************** function _KAPS_getPos *****************
 12395 ;; Defined at:
 12396 ;;		line 407 in file "main.c"
 12397 ;; Parameters:    Size  Location     Type
 12398 ;;  kaps            1    wreg     PTR struct .
 12399 ;;		 -> kaps(7), 
 12400 ;; Auto vars:     Size  Location     Type
 12401 ;;  kaps            1    0[BANK0 ] PTR struct .
 12402 ;;		 -> kaps(7), 
 12403 ;; Return value:  Size  Location     Type
 12404 ;;                  1    wreg      void 
 12405 ;; Registers used:
 12406 ;;		wreg
 12407 ;; Tracked objects:
 12408 ;;		On entry : 0/0
 12409 ;;		On exit  : 0/0
 12410 ;;		Unchanged: 0/0
 12411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12412 ;;      Params:         0       0       0       0       0       0       0       0
 12413 ;;      Locals:         0       1       0       0       0       0       0       0
 12414 ;;      Temps:          0       0       0       0       0       0       0       0
 12415 ;;      Totals:         0       1       0       0       0       0       0       0
 12416 ;;Total ram usage:        1 bytes
 12417 ;; Hardware stack levels used: 1
 12418 ;; Hardware stack levels required when called: 7
 12419 ;; This function calls:
 12420 ;;		Nothing
 12421 ;; This function is called by:
 12422 ;;		_ProcessMsg
 12423 ;; This function uses a non-reentrant model
 12424 ;;
 12425                           
 12426  0000'                    _KAPS_getPos:	
 12427                           ;psect for function _KAPS_getPos
 12428                           
 12429                           
 12430                           ;incstack = 0
 12431                           ; Regs used in _KAPS_getPos: [wreg]
 12432  0000' 0008               	return
 12433  0001'                    __end_of_KAPS_getPos:
 12434                           
 12435                           	psect	text54
 12436  0000'                    __ptext54:	
 12437 ;; *************** function _KAPS_getIndex *****************
 12438 ;; Defined at:
 12439 ;;		line 399 in file "main.c"
 12440 ;; Parameters:    Size  Location     Type
 12441 ;;  kaps            1    wreg     PTR struct .
 12442 ;;		 -> kaps(7), 
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;  kaps            1    0[BANK0 ] PTR struct .
 12445 ;;		 -> kaps(7), 
 12446 ;; Return value:  Size  Location     Type
 12447 ;;                  1    wreg      void 
 12448 ;; Registers used:
 12449 ;;		wreg
 12450 ;; Tracked objects:
 12451 ;;		On entry : 0/0
 12452 ;;		On exit  : 0/0
 12453 ;;		Unchanged: 0/0
 12454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12455 ;;      Params:         0       0       0       0       0       0       0       0
 12456 ;;      Locals:         0       1       0       0       0       0       0       0
 12457 ;;      Temps:          0       0       0       0       0       0       0       0
 12458 ;;      Totals:         0       1       0       0       0       0       0       0
 12459 ;;Total ram usage:        1 bytes
 12460 ;; Hardware stack levels used: 1
 12461 ;; Hardware stack levels required when called: 7
 12462 ;; This function calls:
 12463 ;;		Nothing
 12464 ;; This function is called by:
 12465 ;;		_ProcessMsg
 12466 ;; This function uses a non-reentrant model
 12467 ;;
 12468                           
 12469  0000'                    _KAPS_getIndex:	
 12470                           ;psect for function _KAPS_getIndex
 12471                           
 12472                           
 12473                           ;incstack = 0
 12474                           ; Regs used in _KAPS_getIndex: [wreg]
 12475  0000' 0008               	return
 12476  0001'                    __end_of_KAPS_getIndex:
 12477                           
 12478                           	psect	text55
 12479  0000'                    __ptext55:	
 12480 ;; *************** function _KAPS_StorePos *****************
 12481 ;; Defined at:
 12482 ;;		line 381 in file "main.c"
 12483 ;; Parameters:    Size  Location     Type
 12484 ;;  kaps            1    wreg     PTR struct .
 12485 ;;		 -> kaps(7), 
 12486 ;;  idx             1   13[BANK0 ] unsigned char 
 12487 ;;  pos             4   14[BANK0 ] unsigned long 
 12488 ;; Auto vars:     Size  Location     Type
 12489 ;;  kaps            1   18[BANK0 ] PTR struct .
 12490 ;;		 -> kaps(7), 
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  1    wreg      void 
 12493 ;; Registers used:
 12494 ;;		wreg
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12500 ;;      Params:         0       5       0       0       0       0       0       0
 12501 ;;      Locals:         0       1       0       0       0       0       0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0
 12503 ;;      Totals:         0       6       0       0       0       0       0       0
 12504 ;;Total ram usage:        6 bytes
 12505 ;; Hardware stack levels used: 1
 12506 ;; Hardware stack levels required when called: 7
 12507 ;; This function calls:
 12508 ;;		Nothing
 12509 ;; This function is called by:
 12510 ;;		_ProcessMsg
 12511 ;; This function uses a non-reentrant model
 12512 ;;
 12513                           
 12514  0000'                    _KAPS_StorePos:	
 12515                           ;psect for function _KAPS_StorePos
 12516                           
 12517                           
 12518                           ;incstack = 0
 12519                           ; Regs used in _KAPS_StorePos: [wreg]
 12520  0000' 0008               	return
 12521  0001'                    __end_of_KAPS_StorePos:
 12522                           
 12523                           	psect	text56
 12524  0000'                    __ptext56:	
 12525 ;; *************** function _KAPS_GoToIdx *****************
 12526 ;; Defined at:
 12527 ;;		line 347 in file "main.c"
 12528 ;; Parameters:    Size  Location     Type
 12529 ;;  kaps            1    wreg     PTR struct .
 12530 ;;		 -> kaps(7), 
 12531 ;;  idx             1    0[BANK0 ] unsigned char 
 12532 ;; Auto vars:     Size  Location     Type
 12533 ;;  kaps            1    1[BANK0 ] PTR struct .
 12534 ;;		 -> kaps(7), 
 12535 ;; Return value:  Size  Location     Type
 12536 ;;                  1    wreg      void 
 12537 ;; Registers used:
 12538 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12539 ;; Tracked objects:
 12540 ;;		On entry : 0/0
 12541 ;;		On exit  : 0/0
 12542 ;;		Unchanged: 0/0
 12543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12544 ;;      Params:         0       1       0       0       0       0       0       0
 12545 ;;      Locals:         0       1       0       0       0       0       0       0
 12546 ;;      Temps:          0       0       0       0       0       0       0       0
 12547 ;;      Totals:         0       2       0       0       0       0       0       0
 12548 ;;Total ram usage:        2 bytes
 12549 ;; Hardware stack levels used: 1
 12550 ;; Hardware stack levels required when called: 7
 12551 ;; This function calls:
 12552 ;;		Nothing
 12553 ;; This function is called by:
 12554 ;;		_ProcessMsg
 12555 ;; This function uses a non-reentrant model
 12556 ;;
 12557                           
 12558  0000'                    _KAPS_GoToIdx:	
 12559                           ;psect for function _KAPS_GoToIdx
 12560                           
 12561                           
 12562                           ;incstack = 0
 12563                           ; Regs used in _KAPS_GoToIdx: [wreg+fsr1l+fsr1h+status,2+status,0]
 12564                           ;KAPS_GoToIdx@kaps stored from wreg
 12565  0000' 0020               	movlb	0	; select bank0
 12566  0001' 0081'              	movwf	KAPS_GoToIdx@kaps
 12567                           
 12568                           ;main.c: 350:     kaps->m_bIdxPos = idx;
 12569  0002' 0801'              	movf	KAPS_GoToIdx@kaps,w
 12570  0003' 3E06               	addlw	6
 12571  0004' 0086               	movwf	6
 12572  0005' 0187               	clrf	7
 12573  0006' 0800'              	movf	KAPS_GoToIdx@idx,w
 12574  0007' 0081               	movwf	1
 12575  0008' 0008               	return
 12576  0009'                    __end_of_KAPS_GoToIdx:
 12577                           
 12578                           	psect	text57
 12579  0000'                    __ptext57:	
 12580 ;; *************** function _EUSART_Read *****************
 12581 ;; Defined at:
 12582 ;;		line 213 in file "mcc_generated_files/uart/src/eusart.c"
 12583 ;; Parameters:    Size  Location     Type
 12584 ;;		None
 12585 ;; Auto vars:     Size  Location     Type
 12586 ;;		None
 12587 ;; Return value:  Size  Location     Type
 12588 ;;                  1    wreg      unsigned char 
 12589 ;; Registers used:
 12590 ;;		wreg, status,2, status,0, pclath, cstack
 12591 ;; Tracked objects:
 12592 ;;		On entry : 0/0
 12593 ;;		On exit  : 0/0
 12594 ;;		Unchanged: 0/0
 12595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12596 ;;      Params:         0       0       0       0       0       0       0       0
 12597 ;;      Locals:         0       0       0       0       0       0       0       0
 12598 ;;      Temps:          0       0       0       0       0       0       0       0
 12599 ;;      Totals:         0       0       0       0       0       0       0       0
 12600 ;;Total ram usage:        0 bytes
 12601 ;; Hardware stack levels used: 1
 12602 ;; Hardware stack levels required when called: 8
 12603 ;; This function calls:
 12604 ;;		NULL
 12605 ;;		_EUSART_DefaultFramingErrorCallback
 12606 ;;		_EUSART_DefaultOverrunErrorCallback
 12607 ;; This function is called by:
 12608 ;;		_main
 12609 ;; This function uses a non-reentrant model
 12610 ;;
 12611                           
 12612  0000'                    _EUSART_Read:	
 12613                           ;psect for function _EUSART_Read
 12614                           
 12615                           
 12616                           ;mcc_generated_files/uart/src/eusart.c: 215:     eusartRxLastError.status = 0;
 12617                           
 12618                           ;incstack = 0
 12619                           ; Regs used in _EUSART_Read: [wreg+status,2+status,0+pclath+cstack]
 12620  0000' 0021               	movlb	1	; select bank1
 12621  0001' 0180'              	clrf	_eusartRxLastError^(0+128)	;volatile
 12622  0002' 0180'              	clrf	(_eusartRxLastError+1)^(0+128)	;volatile
 12623                           
 12624                           ;mcc_generated_files/uart/src/eusart.c: 216:     if(1 == RC1STAbits.OERR)
 12625  0003' 0023               	movlb	3	; select bank3
 12626  0004' 1C9D               	btfss	29,1	;volatile
 12627  0005' 2800'              	goto	l5365
 12628                           
 12629                           ;mcc_generated_files/uart/src/eusart.c: 217:     {;mcc_generated_files/uart/src/eusart.c
      +                          : 218:         eusartRxLastError.oerr = 1;
 12630  0006' 0021               	movlb	1	; select bank1
 12631  0007' 1500'              	bsf	_eusartRxLastError^(0+128),2	;volatile
 12632                           
 12633                           ;mcc_generated_files/uart/src/eusart.c: 219:         if(((void*)0) != EUSART_OverrunErro
      +                          rHandler)
 12634  0008' 0800'              	movf	_EUSART_OverrunErrorHandler^(0+128),w
 12635  0009' 0400'              	iorwf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 12636  000A' 1903               	btfsc	3,2
 12637  000B' 2800'              	goto	l5365
 12638                           
 12639                           ;mcc_generated_files/uart/src/eusart.c: 220:         {;mcc_generated_files/uart/src/eusa
      +                          rt.c: 221:             EUSART_OverrunErrorHandler();
 12640  000C' 0800'              	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
 12641  000D' 008A               	movwf	10
 12642  000E' 0800'              	movf	_EUSART_OverrunErrorHandler^(0+128),w
 12643  000F' 000A               	callw
 12644  0010' 3180'              	pagesel	$
 12645  0011'                    l5365:
 12646                           
 12647                           ;mcc_generated_files/uart/src/eusart.c: 224:     if(1 == RC1STAbits.FERR)
 12648  0011' 0023               	movlb	3	; select bank3
 12649  0012' 1D1D               	btfss	29,2	;volatile
 12650  0013' 2800'              	goto	l5373
 12651                           
 12652                           ;mcc_generated_files/uart/src/eusart.c: 225:     {;mcc_generated_files/uart/src/eusart.c
      +                          : 226:         eusartRxLastError.ferr = 1;
 12653  0014' 0021               	movlb	1	; select bank1
 12654  0015' 1480'              	bsf	_eusartRxLastError^(0+128),1	;volatile
 12655                           
 12656                           ;mcc_generated_files/uart/src/eusart.c: 227:         if(((void*)0) != EUSART_FramingErro
      +                          rHandler)
 12657  0016' 0800'              	movf	_EUSART_FramingErrorHandler,w
 12658  0017' 0401'              	iorwf	_EUSART_FramingErrorHandler+1,w
 12659  0018' 1903               	btfsc	3,2
 12660  0019' 2800'              	goto	l5373
 12661                           
 12662                           ;mcc_generated_files/uart/src/eusart.c: 228:         {;mcc_generated_files/uart/src/eusa
      +                          rt.c: 229:             EUSART_FramingErrorHandler();
 12663  001A' 0801'              	movf	_EUSART_FramingErrorHandler+1,w
 12664  001B' 008A               	movwf	10
 12665  001C' 0800'              	movf	_EUSART_FramingErrorHandler,w
 12666  001D' 000A               	callw
 12667  001E' 3180'              	pagesel	$
 12668  001F'                    l5373:
 12669                           
 12670                           ;mcc_generated_files/uart/src/eusart.c: 232:     return RC1REG;
 12671  001F' 0023               	movlb	3	; select bank3
 12672  0020' 0819               	movf	25,w	;volatile
 12673  0021' 0008               	return
 12674  0022'                    __end_of_EUSART_Read:
 12675                           
 12676                           	psect	text58
 12677  0000'                    __ptext58:	
 12678 ;; *************** function _EUSART_DefaultOverrunErrorCallback *****************
 12679 ;; Defined at:
 12680 ;;		line 245 in file "mcc_generated_files/uart/src/eusart.c"
 12681 ;; Parameters:    Size  Location     Type
 12682 ;;		None
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;		None
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      void 
 12687 ;; Registers used:
 12688 ;;		None
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12694 ;;      Params:         0       0       0       0       0       0       0       0
 12695 ;;      Locals:         0       0       0       0       0       0       0       0
 12696 ;;      Temps:          0       0       0       0       0       0       0       0
 12697 ;;      Totals:         0       0       0       0       0       0       0       0
 12698 ;;Total ram usage:        0 bytes
 12699 ;; Hardware stack levels used: 1
 12700 ;; Hardware stack levels required when called: 7
 12701 ;; This function calls:
 12702 ;;		Nothing
 12703 ;; This function is called by:
 12704 ;;		_EUSART_Initialize
 12705 ;;		_EUSART_Read
 12706 ;; This function uses a non-reentrant model
 12707 ;;
 12708                           
 12709  0000'                    _EUSART_DefaultOverrunErrorCallback:	
 12710                           ;psect for function _EUSART_DefaultOverrunErrorCallback
 12711                           
 12712                           
 12713                           ;mcc_generated_files/uart/src/eusart.c: 248:     RC1STAbits.CREN = 0;
 12714                           
 12715                           ;incstack = 0
 12716                           ; Regs used in _EUSART_DefaultOverrunErrorCallback: []
 12717  0000' 0023               	movlb	3	; select bank3
 12718  0001' 121D               	bcf	29,4	;volatile
 12719                           
 12720                           ;mcc_generated_files/uart/src/eusart.c: 249:     RC1STAbits.CREN = 1;
 12721  0002' 161D               	bsf	29,4	;volatile
 12722  0003' 0008               	return
 12723  0004'                    __end_of_EUSART_DefaultOverrunErrorCallback:
 12724                           
 12725                           	psect	text59
 12726  0000'                    __ptext59:	
 12727 ;; *************** function _EUSART_DefaultFramingErrorCallback *****************
 12728 ;; Defined at:
 12729 ;;		line 240 in file "mcc_generated_files/uart/src/eusart.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;		None
 12732 ;; Auto vars:     Size  Location     Type
 12733 ;;		None
 12734 ;; Return value:  Size  Location     Type
 12735 ;;                  1    wreg      void 
 12736 ;; Registers used:
 12737 ;;		None
 12738 ;; Tracked objects:
 12739 ;;		On entry : 0/0
 12740 ;;		On exit  : 0/0
 12741 ;;		Unchanged: 0/0
 12742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12743 ;;      Params:         0       0       0       0       0       0       0       0
 12744 ;;      Locals:         0       0       0       0       0       0       0       0
 12745 ;;      Temps:          0       0       0       0       0       0       0       0
 12746 ;;      Totals:         0       0       0       0       0       0       0       0
 12747 ;;Total ram usage:        0 bytes
 12748 ;; Hardware stack levels used: 1
 12749 ;; Hardware stack levels required when called: 7
 12750 ;; This function calls:
 12751 ;;		Nothing
 12752 ;; This function is called by:
 12753 ;;		_EUSART_Initialize
 12754 ;;		_EUSART_Read
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758  0000'                    _EUSART_DefaultFramingErrorCallback:	
 12759                           ;psect for function _EUSART_DefaultFramingErrorCallback
 12760                           
 12761                           
 12762                           ;incstack = 0
 12763                           ; Regs used in _EUSART_DefaultFramingErrorCallback: []
 12764  0000' 0008               	return
 12765  0001'                    __end_of_EUSART_DefaultFramingErrorCallback:
 12766                           
 12767                           	psect	text60
 12768  0000'                    __ptext60:	
 12769 ;; *************** function _EUSART_IsRxReady *****************
 12770 ;; Defined at:
 12771 ;;		line 193 in file "mcc_generated_files/uart/src/eusart.c"
 12772 ;; Parameters:    Size  Location     Type
 12773 ;;		None
 12774 ;; Auto vars:     Size  Location     Type
 12775 ;;		None
 12776 ;; Return value:  Size  Location     Type
 12777 ;;                  1    wreg      _Bool 
 12778 ;; Registers used:
 12779 ;;		wreg, status,2, status,0
 12780 ;; Tracked objects:
 12781 ;;		On entry : 0/0
 12782 ;;		On exit  : 0/0
 12783 ;;		Unchanged: 0/0
 12784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12785 ;;      Params:         0       0       0       0       0       0       0       0
 12786 ;;      Locals:         0       0       0       0       0       0       0       0
 12787 ;;      Temps:          0       0       0       0       0       0       0       0
 12788 ;;      Totals:         0       0       0       0       0       0       0       0
 12789 ;;Total ram usage:        0 bytes
 12790 ;; Hardware stack levels used: 1
 12791 ;; Hardware stack levels required when called: 7
 12792 ;; This function calls:
 12793 ;;		Nothing
 12794 ;; This function is called by:
 12795 ;;		_main
 12796 ;; This function uses a non-reentrant model
 12797 ;;
 12798                           
 12799  0000'                    _EUSART_IsRxReady:	
 12800                           ;psect for function _EUSART_IsRxReady
 12801                           
 12802                           
 12803                           ;mcc_generated_files/uart/src/eusart.c: 195:     return (_Bool)(PIR1bits.RCIF);
 12804                           
 12805                           ;incstack = 0
 12806                           ; Regs used in _EUSART_IsRxReady: [wreg+status,2+status,0]
 12807  0000' 0020               	movlb	0	; select bank0
 12808  0001' 0E10               	swapf	16,w	;volatile
 12809  0002' 0C89               	rrf	9,f
 12810  0003' 3901               	andlw	1
 12811  0004' 0008               	return
 12812  0005'                    __end_of_EUSART_IsRxReady:
 12813                           
 12814                           	psect	intentry
 12815  0000'                    __pintentry:	
 12816 ;; *************** function _INTERRUPT_InterruptManager *****************
 12817 ;; Defined at:
 12818 ;;		line 59 in file "mcc_generated_files/system/src/interrupt.c"
 12819 ;; Parameters:    Size  Location     Type
 12820 ;;		None
 12821 ;; Auto vars:     Size  Location     Type
 12822 ;;		None
 12823 ;; Return value:  Size  Location     Type
 12824 ;;                  1    wreg      void 
 12825 ;; Registers used:
 12826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12827 ;; Tracked objects:
 12828 ;;		On entry : 0/0
 12829 ;;		On exit  : 0/0
 12830 ;;		Unchanged: 0/0
 12831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12832 ;;      Params:         0       0       0       0       0       0       0       0
 12833 ;;      Locals:         0       0       0       0       0       0       0       0
 12834 ;;      Temps:          0       0       0       0       0       0       0       0
 12835 ;;      Totals:         0       0       0       0       0       0       0       0
 12836 ;;Total ram usage:        0 bytes
 12837 ;; Hardware stack levels used: 1
 12838 ;; Hardware stack levels required when called: 6
 12839 ;; This function calls:
 12840 ;;		_ADC_ISR
 12841 ;;		_I2C1_ERROR_ISR
 12842 ;;		_I2C1_ISR
 12843 ;; This function is called by:
 12844 ;;		Interrupt level 1
 12845 ;; This function uses a non-reentrant model
 12846 ;;
 12847                           
 12848  0000'                    _INTERRUPT_InterruptManager:
 12849                           
 12850                           ;incstack = 0
 12851 ;; hardware stack exceeded
 12852  0000' 147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12853                           
 12854                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12855  0001' 3180'              	pagesel	$
 12856                           
 12857                           ;mcc_generated_files/system/src/interrupt.c: 62:     if(INTCONbits.PEIE == 1)
 12858  0002' 1F0B               	btfss	11,6	;volatile
 12859  0003' 2800'              	goto	i1l455
 12860                           
 12861                           ;mcc_generated_files/system/src/interrupt.c: 63:     {;mcc_generated_files/system/src/in
      +                          terrupt.c: 64:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
 12862  0004' 0021               	movlb	1	; select bank1
 12863  0005' 1F10               	btfss	16,6	;volatile
 12864  0006' 2800'              	goto	i1l448
 12865  0007' 0020               	movlb	0	; select bank0
 12866  0008' 1F10               	btfss	16,6	;volatile
 12867  0009' 2800'              	goto	i1l448
 12868                           
 12869                           ;mcc_generated_files/system/src/interrupt.c: 65:         {;mcc_generated_files/system/sr
      +                          c/interrupt.c: 66:             ADC_ISR();
 12870  000A' 3180' 2000' 3180'  	fcall	_ADC_ISR
 12871                           
 12872                           ;mcc_generated_files/system/src/interrupt.c: 67:         }
 12873  000D' 2800'              	goto	i1l455
 12874  000E'                    i1l448:	
 12875                           ;mcc_generated_files/system/src/interrupt.c: 68:         else if(PIE2bits.BCL1IE == 1 &&
      +                           PIR2bits.BCL1IF == 1)
 12876                           
 12877  000E' 0021               	movlb	1	; select bank1
 12878  000F' 1D91               	btfss	17,3	;volatile
 12879  0010' 2800'              	goto	i1l450
 12880  0011' 0020               	movlb	0	; select bank0
 12881  0012' 1D91               	btfss	17,3	;volatile
 12882  0013' 2800'              	goto	i1l450
 12883                           
 12884                           ;mcc_generated_files/system/src/interrupt.c: 69:         {;mcc_generated_files/system/sr
      +                          c/interrupt.c: 70:             I2C1_ERROR_ISR();
 12885  0014' 3180' 2000' 3180'  	fcall	_I2C1_ERROR_ISR
 12886                           
 12887                           ;mcc_generated_files/system/src/interrupt.c: 71:         }
 12888  0017' 2800'              	goto	i1l455
 12889  0018'                    i1l450:	
 12890                           ;mcc_generated_files/system/src/interrupt.c: 72:         else if(PIE1bits.SSP1IE == 1 &&
      +                           PIR1bits.SSP1IF == 1)
 12891                           
 12892  0018' 0021               	movlb	1	; select bank1
 12893  0019' 1D90               	btfss	16,3	;volatile
 12894  001A' 2800'              	goto	i1l455
 12895  001B' 0020               	movlb	0	; select bank0
 12896  001C' 1D90               	btfss	16,3	;volatile
 12897  001D' 2800'              	goto	i1l455
 12898                           
 12899                           ;mcc_generated_files/system/src/interrupt.c: 73:         {;mcc_generated_files/system/sr
      +                          c/interrupt.c: 74:             I2C1_ISR();
 12900  001E' 3180' 2000'        	fcall	_I2C1_ISR
 12901  0020'                    i1l455:	
 12902                           ;mcc_generated_files/system/src/interrupt.c: 80:     }
 12903                           
 12904                           ;mcc_generated_files/system/src/interrupt.c: 75:         }
 12905                           
 12906  0020' 107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12907  0021' 0009               	retfie
 12908  0022'                    __end_of_INTERRUPT_InterruptManager:
 12909                           
 12910                           	psect	text62
 12911  0000'                    __ptext62:	
 12912 ;; *************** function _I2C1_ISR *****************
 12913 ;; Defined at:
 12914 ;;		line 219 in file "mcc_generated_files/i2c_host/src/mssp.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;		None
 12917 ;; Auto vars:     Size  Location     Type
 12918 ;;		None
 12919 ;; Return value:  Size  Location     Type
 12920 ;;                  1    wreg      void 
 12921 ;; Registers used:
 12922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12923 ;; Tracked objects:
 12924 ;;		On entry : 0/0
 12925 ;;		On exit  : 0/0
 12926 ;;		Unchanged: 0/0
 12927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12928 ;;      Params:         0       0       0       0       0       0       0       0
 12929 ;;      Locals:         0       0       0       0       0       0       0       0
 12930 ;;      Temps:          0       0       0       0       0       0       0       0
 12931 ;;      Totals:         0       0       0       0       0       0       0       0
 12932 ;;Total ram usage:        0 bytes
 12933 ;; Hardware stack levels used: 1
 12934 ;; Hardware stack levels required when called: 5
 12935 ;; This function calls:
 12936 ;;		_I2C1_EventHandler
 12937 ;; This function is called by:
 12938 ;;		_INTERRUPT_InterruptManager
 12939 ;; This function uses a non-reentrant model
 12940 ;;
 12941                           
 12942  0000'                    _I2C1_ISR:	
 12943                           ;psect for function _I2C1_ISR
 12944                           
 12945                           
 12946                           ;mcc_generated_files/i2c_host/src/mssp.c: 221:     I2C1_EventHandler();
 12947                           
 12948                           ;incstack = 0
 12949 ;; hardware stack exceeded
 12950                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12951  0000' 3180' 2000'        	fcall	_I2C1_EventHandler
 12952  0002' 0008               	return
 12953  0003'                    __end_of_I2C1_ISR:
 12954                           
 12955                           	psect	text63
 12956  0000'                    __ptext63:	
 12957 ;; *************** function _I2C1_EventHandler *****************
 12958 ;; Defined at:
 12959 ;;		line 256 in file "mcc_generated_files/i2c_host/src/mssp.c"
 12960 ;; Parameters:    Size  Location     Type
 12961 ;;		None
 12962 ;; Auto vars:     Size  Location     Type
 12963 ;;		None
 12964 ;; Return value:  Size  Location     Type
 12965 ;;                  1    wreg      void 
 12966 ;; Registers used:
 12967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12968 ;; Tracked objects:
 12969 ;;		On entry : 0/0
 12970 ;;		On exit  : 0/0
 12971 ;;		Unchanged: 0/0
 12972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12973 ;;      Params:         0       0       0       0       0       0       0       0
 12974 ;;      Locals:         0       0       0       0       0       0       0       0
 12975 ;;      Temps:          2       0       0       0       0       0       0       0
 12976 ;;      Totals:         2       0       0       0       0       0       0       0
 12977 ;;Total ram usage:        2 bytes
 12978 ;; Hardware stack levels used: 1
 12979 ;; Hardware stack levels required when called: 4
 12980 ;; This function calls:
 12981 ;;		_I2C1_EVENT_ERROR
 12982 ;;		_I2C1_EVENT_IDLE
 12983 ;;		_I2C1_EVENT_NACK
 12984 ;;		_I2C1_EVENT_RESET
 12985 ;;		_I2C1_EVENT_RX
 12986 ;;		_I2C1_EVENT_SEND_RD_ADDR
 12987 ;;		_I2C1_EVENT_SEND_WR_ADDR
 12988 ;;		_I2C1_EVENT_STOP
 12989 ;;		_I2C1_EVENT_TX
 12990 ;;		_I2C1_InterruptClear
 12991 ;;		_I2C1_IsAddr
 12992 ;;		_I2C1_IsData
 12993 ;;		_I2C1_IsNack
 12994 ;; This function is called by:
 12995 ;;		_I2C1_ISR
 12996 ;; This function uses a non-reentrant model
 12997 ;;
 12998                           
 12999  0000'                    _I2C1_EventHandler:	
 13000                           ;psect for function _I2C1_EventHandler
 13001                           
 13002                           
 13003                           ;mcc_generated_files/i2c_host/src/mssp.c: 258:     I2C1_InterruptClear();
 13004                           
 13005                           ;incstack = 0
 13006 ;; hardware stack exceeded
 13007                           ; Regs used in _I2C1_EventHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13008  0000' 3180' 2000' 3180'  	fcall	_I2C1_InterruptClear
 13009                           
 13010                           ;mcc_generated_files/i2c_host/src/mssp.c: 259:     if (I2C1_IsAddr() && I2C1_IsNack())
 13011  0003' 3180' 2000' 3180'  	fcall	_I2C1_IsAddr
 13012  0006' 3A00               	xorlw	0
 13013  0007' 1903               	skipnz
 13014  0008' 2800'              	goto	i1l4245
 13015  0009' 3180' 2000' 3180'  	fcall	_I2C1_IsNack
 13016  000C' 3A00               	xorlw	0
 13017  000D' 1903               	skipnz
 13018  000E' 2800'              	goto	i1l4245
 13019                           
 13020                           ;mcc_generated_files/i2c_host/src/mssp.c: 260:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 261:         i2c1Status.state = I2C_STATE_NACK;
 13021  000F' 3005               	movlw	5
 13022  0010' 0021               	movlb	1	; select bank1
 13023  0011' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 13024                           
 13025                           ;mcc_generated_files/i2c_host/src/mssp.c: 262:         i2c1Status.errorState = I2C_ERROR
      +                          _ADDR_NACK;
 13026  0012' 3001               	movlw	1
 13027  0013' 2800'              	goto	L6
 13028  0014'                    i1l4245:	
 13029                           ;mcc_generated_files/i2c_host/src/mssp.c: 263:     }
 13030                           
 13031  0014' 3180' 2000' 3180'  	fcall	_I2C1_IsData
 13032  0017' 3A00               	xorlw	0
 13033  0018' 1903               	skipnz
 13034  0019' 2800'              	goto	i1l4251
 13035  001A' 3180' 2000' 3180'  	fcall	_I2C1_IsNack
 13036  001D' 3A00               	xorlw	0
 13037  001E' 1903               	skipnz
 13038  001F' 2800'              	goto	i1l4251
 13039                           
 13040                           ;mcc_generated_files/i2c_host/src/mssp.c: 265:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 266:         i2c1Status.state = I2C_STATE_NACK;
 13041  0020' 3005               	movlw	5
 13042  0021' 0021               	movlb	1	; select bank1
 13043  0022' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 13044                           
 13045                           ;mcc_generated_files/i2c_host/src/mssp.c: 267:         i2c1Status.errorState = I2C_ERROR
      +                          _DATA_NACK;
 13046  0023' 3002               	movlw	2
 13047  0024'                    L6:
 13048  0024' 008C'              	movwf	(_i2c1Status^(0+128)+12)	;volatile
 13049  0025'                    i1l4251:
 13050                           
 13051                           ;mcc_generated_files/i2c_host/src/mssp.c: 269:     i2c1Status.state = i2c1_eventTable[i2
      +                          c1Status.state]();
 13052  0025' 0021               	movlb	1	; select bank1
 13053  0026' 080D'              	movf	(_i2c1Status^(0+128)+13),w	;volatile
 13054  0027' 0084'              	movwf	??_I2C1_EventHandler
 13055  0028' 0185'              	clrf	??_I2C1_EventHandler+1
 13056  0029' 3584'              	lslf	??_I2C1_EventHandler,f
 13057  002A' 0D85'              	rlf	??_I2C1_EventHandler+1,f
 13058  002B' 3000'              	movlw	low _i2c1_eventTable
 13059  002C' 0704'              	addwf	??_I2C1_EventHandler,w
 13060  002D' 0084               	movwf	4
 13061  002E' 3000'              	movlw	high _i2c1_eventTable
 13062  002F' 3D05'              	addwfc	??_I2C1_EventHandler+1,w
 13063  0030' 3880               	iorlw	128
 13064  0031' 0085               	movwf	5
 13065  0032' 3F01               	moviw [1]fsr0
 13066  0033' 008A               	movwf	10
 13067  0034' 3F00               	moviw [0]fsr0
 13068  0035' 000A               	callw
 13069  0036' 3180'              	pagesel	$
 13070  0037' 0021               	movlb	1	; select bank1
 13071  0038' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 13072  0039' 0008               	return
 13073  003A'                    __end_of_I2C1_EventHandler:
 13074                           
 13075                           	psect	text64
 13076  0000'                    __ptext64:	
 13077 ;; *************** function _I2C1_IsNack *****************
 13078 ;; Defined at:
 13079 ;;		line 447 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13080 ;; Parameters:    Size  Location     Type
 13081 ;;		None
 13082 ;; Auto vars:     Size  Location     Type
 13083 ;;		None
 13084 ;; Return value:  Size  Location     Type
 13085 ;;                  1    wreg      _Bool 
 13086 ;; Registers used:
 13087 ;;		wreg, status,2, status,0
 13088 ;; Tracked objects:
 13089 ;;		On entry : 0/0
 13090 ;;		On exit  : 0/0
 13091 ;;		Unchanged: 0/0
 13092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13093 ;;      Params:         0       0       0       0       0       0       0       0
 13094 ;;      Locals:         0       0       0       0       0       0       0       0
 13095 ;;      Temps:          0       0       0       0       0       0       0       0
 13096 ;;      Totals:         0       0       0       0       0       0       0       0
 13097 ;;Total ram usage:        0 bytes
 13098 ;; Hardware stack levels used: 1
 13099 ;; This function calls:
 13100 ;;		Nothing
 13101 ;; This function is called by:
 13102 ;;		_I2C1_EventHandler
 13103 ;; This function uses a non-reentrant model
 13104 ;;
 13105                           
 13106  0000'                    _I2C1_IsNack:	
 13107                           ;psect for function _I2C1_IsNack
 13108                           
 13109                           
 13110                           ;mcc_generated_files/i2c_host/src/mssp.c: 449:     return SSP1CON2bits.ACKSTAT;
 13111                           
 13112                           ;incstack = 0
 13113                           ; Regs used in _I2C1_IsNack: [wreg+status,2+status,0]
 13114  0000' 0024               	movlb	4	; select bank4
 13115  0001' 0E16               	swapf	22,w	;volatile
 13116  0002' 0C89               	rrf	9,f
 13117  0003' 0C89               	rrf	9,f
 13118  0004' 3901               	andlw	1
 13119  0005' 0008               	return
 13120  0006'                    __end_of_I2C1_IsNack:
 13121                           
 13122                           	psect	text65
 13123  0000'                    __ptext65:	
 13124 ;; *************** function _I2C1_IsData *****************
 13125 ;; Defined at:
 13126 ;;		line 452 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13127 ;; Parameters:    Size  Location     Type
 13128 ;;		None
 13129 ;; Auto vars:     Size  Location     Type
 13130 ;;		None
 13131 ;; Return value:  Size  Location     Type
 13132 ;;                  1    wreg      _Bool 
 13133 ;; Registers used:
 13134 ;;		wreg, status,2, status,0
 13135 ;; Tracked objects:
 13136 ;;		On entry : 0/0
 13137 ;;		On exit  : 0/0
 13138 ;;		Unchanged: 0/0
 13139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13140 ;;      Params:         0       0       0       0       0       0       0       0
 13141 ;;      Locals:         0       0       0       0       0       0       0       0
 13142 ;;      Temps:          0       0       0       0       0       0       0       0
 13143 ;;      Totals:         0       0       0       0       0       0       0       0
 13144 ;;Total ram usage:        0 bytes
 13145 ;; Hardware stack levels used: 1
 13146 ;; This function calls:
 13147 ;;		Nothing
 13148 ;; This function is called by:
 13149 ;;		_I2C1_EventHandler
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153  0000'                    _I2C1_IsData:	
 13154                           ;psect for function _I2C1_IsData
 13155                           
 13156                           
 13157                           ;mcc_generated_files/i2c_host/src/mssp.c: 454:     return (SSP1STATbits.D_nA);
 13158                           
 13159                           ;incstack = 0
 13160                           ; Regs used in _I2C1_IsData: [wreg+status,2+status,0]
 13161  0000' 0024               	movlb	4	; select bank4
 13162  0001' 0E14               	swapf	20,w	;volatile
 13163  0002' 0C89               	rrf	9,f
 13164  0003' 3901               	andlw	1
 13165  0004' 0008               	return
 13166  0005'                    __end_of_I2C1_IsData:
 13167                           
 13168                           	psect	text66
 13169  0000'                    __ptext66:	
 13170 ;; *************** function _I2C1_IsAddr *****************
 13171 ;; Defined at:
 13172 ;;		line 457 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13173 ;; Parameters:    Size  Location     Type
 13174 ;;		None
 13175 ;; Auto vars:     Size  Location     Type
 13176 ;;		None
 13177 ;; Return value:  Size  Location     Type
 13178 ;;                  1    wreg      _Bool 
 13179 ;; Registers used:
 13180 ;;		wreg, status,0
 13181 ;; Tracked objects:
 13182 ;;		On entry : 0/0
 13183 ;;		On exit  : 0/0
 13184 ;;		Unchanged: 0/0
 13185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13186 ;;      Params:         0       0       0       0       0       0       0       0
 13187 ;;      Locals:         0       0       0       0       0       0       0       0
 13188 ;;      Temps:          0       0       0       0       0       0       0       0
 13189 ;;      Totals:         0       0       0       0       0       0       0       0
 13190 ;;Total ram usage:        0 bytes
 13191 ;; Hardware stack levels used: 1
 13192 ;; This function calls:
 13193 ;;		Nothing
 13194 ;; This function is called by:
 13195 ;;		_I2C1_EventHandler
 13196 ;; This function uses a non-reentrant model
 13197 ;;
 13198                           
 13199  0000'                    _I2C1_IsAddr:	
 13200                           ;psect for function _I2C1_IsAddr
 13201                           
 13202                           
 13203                           ;mcc_generated_files/i2c_host/src/mssp.c: 459:     return !(SSP1STATbits.D_nA);
 13204                           
 13205                           ;incstack = 0
 13206                           ; Regs used in _I2C1_IsAddr: [wreg+status,0]
 13207  0000' 1003               	clrc
 13208  0001' 0024               	movlb	4	; select bank4
 13209  0002' 1E94               	btfss	20,5	;volatile
 13210  0003' 1403               	setc
 13211  0004' 3000               	movlw	0
 13212  0005' 3D09               	addwfc	9,w
 13213  0006' 0008               	return
 13214  0007'                    __end_of_I2C1_IsAddr:
 13215                           
 13216                           	psect	text67
 13217  0000'                    __ptext67:	
 13218 ;; *************** function _I2C1_ERROR_ISR *****************
 13219 ;; Defined at:
 13220 ;;		line 224 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13221 ;; Parameters:    Size  Location     Type
 13222 ;;		None
 13223 ;; Auto vars:     Size  Location     Type
 13224 ;;		None
 13225 ;; Return value:  Size  Location     Type
 13226 ;;                  1    wreg      void 
 13227 ;; Registers used:
 13228 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13229 ;; Tracked objects:
 13230 ;;		On entry : 0/0
 13231 ;;		On exit  : 0/0
 13232 ;;		Unchanged: 0/0
 13233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13234 ;;      Params:         0       0       0       0       0       0       0       0
 13235 ;;      Locals:         0       0       0       0       0       0       0       0
 13236 ;;      Temps:          0       0       0       0       0       0       0       0
 13237 ;;      Totals:         0       0       0       0       0       0       0       0
 13238 ;;Total ram usage:        0 bytes
 13239 ;; Hardware stack levels used: 1
 13240 ;; Hardware stack levels required when called: 5
 13241 ;; This function calls:
 13242 ;;		_I2C1_ErrorEventHandler
 13243 ;; This function is called by:
 13244 ;;		_INTERRUPT_InterruptManager
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248  0000'                    _I2C1_ERROR_ISR:	
 13249                           ;psect for function _I2C1_ERROR_ISR
 13250                           
 13251                           
 13252                           ;mcc_generated_files/i2c_host/src/mssp.c: 226:     I2C1_ErrorEventHandler();
 13253                           
 13254                           ;incstack = 0
 13255 ;; hardware stack exceeded
 13256                           ; Regs used in _I2C1_ERROR_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13257  0000' 3180' 2000'        	fcall	_I2C1_ErrorEventHandler
 13258  0002' 0008               	return
 13259  0003'                    __end_of_I2C1_ERROR_ISR:
 13260                           
 13261                           	psect	text68
 13262  0000'                    __ptext68:	
 13263 ;; *************** function _I2C1_ErrorEventHandler *****************
 13264 ;; Defined at:
 13265 ;;		line 272 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13266 ;; Parameters:    Size  Location     Type
 13267 ;;		None
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;		None
 13270 ;; Return value:  Size  Location     Type
 13271 ;;                  1    wreg      void 
 13272 ;; Registers used:
 13273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13274 ;; Tracked objects:
 13275 ;;		On entry : 0/0
 13276 ;;		On exit  : 0/0
 13277 ;;		Unchanged: 0/0
 13278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13279 ;;      Params:         0       0       0       0       0       0       0       0
 13280 ;;      Locals:         0       0       0       0       0       0       0       0
 13281 ;;      Temps:          2       0       0       0       0       0       0       0
 13282 ;;      Totals:         2       0       0       0       0       0       0       0
 13283 ;;Total ram usage:        2 bytes
 13284 ;; Hardware stack levels used: 1
 13285 ;; Hardware stack levels required when called: 4
 13286 ;; This function calls:
 13287 ;;		NULL
 13288 ;;		_I2C1_DefaultCallback
 13289 ;;		_I2C1_EVENT_ERROR
 13290 ;;		_I2C1_EVENT_IDLE
 13291 ;;		_I2C1_EVENT_NACK
 13292 ;;		_I2C1_EVENT_RESET
 13293 ;;		_I2C1_EVENT_RX
 13294 ;;		_I2C1_EVENT_SEND_RD_ADDR
 13295 ;;		_I2C1_EVENT_SEND_WR_ADDR
 13296 ;;		_I2C1_EVENT_STOP
 13297 ;;		_I2C1_EVENT_TX
 13298 ;;		_I2C1_ErrorInterruptClear
 13299 ;; This function is called by:
 13300 ;;		_I2C1_ERROR_ISR
 13301 ;; This function uses a non-reentrant model
 13302 ;;
 13303                           
 13304  0000'                    _I2C1_ErrorEventHandler:	
 13305                           ;psect for function _I2C1_ErrorEventHandler
 13306                           
 13307                           
 13308                           ;mcc_generated_files/i2c_host/src/mssp.c: 274:     i2c1Status.state = I2C_STATE_ERROR;
 13309                           
 13310                           ;incstack = 0
 13311 ;; hardware stack exceeded
 13312                           ; Regs used in _I2C1_ErrorEventHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13313  0000' 3006               	movlw	6
 13314  0001' 0021               	movlb	1	; select bank1
 13315  0002' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 13316                           
 13317                           ;mcc_generated_files/i2c_host/src/mssp.c: 275:     i2c1Status.errorState = I2C_ERROR_BUS
      +                          _COLLISION;
 13318  0003' 3003               	movlw	3
 13319  0004' 008C'              	movwf	(_i2c1Status^(0+128)+12)	;volatile
 13320                           
 13321                           ;mcc_generated_files/i2c_host/src/mssp.c: 276:     I2C1_ErrorInterruptClear();
 13322  0005' 3180' 2000' 3180'  	fcall	_I2C1_ErrorInterruptClear
 13323                           
 13324                           ;mcc_generated_files/i2c_host/src/mssp.c: 277:     i2c1Status.state = i2c1_eventTable[i2
      +                          c1Status.state]();
 13325  0008' 0021               	movlb	1	; select bank1
 13326  0009' 080D'              	movf	(_i2c1Status^(0+128)+13),w	;volatile
 13327  000A' 0084'              	movwf	??_I2C1_ErrorEventHandler
 13328  000B' 0185'              	clrf	??_I2C1_ErrorEventHandler+1
 13329  000C' 3584'              	lslf	??_I2C1_ErrorEventHandler,f
 13330  000D' 0D85'              	rlf	??_I2C1_ErrorEventHandler+1,f
 13331  000E' 3000'              	movlw	low _i2c1_eventTable
 13332  000F' 0704'              	addwf	??_I2C1_ErrorEventHandler,w
 13333  0010' 0084               	movwf	4
 13334  0011' 3000'              	movlw	high _i2c1_eventTable
 13335  0012' 3D05'              	addwfc	??_I2C1_ErrorEventHandler+1,w
 13336  0013' 3880               	iorlw	128
 13337  0014' 0085               	movwf	5
 13338  0015' 3F01               	moviw [1]fsr0
 13339  0016' 008A               	movwf	10
 13340  0017' 3F00               	moviw [0]fsr0
 13341  0018' 000A               	callw
 13342  0019' 3180'              	pagesel	$
 13343  001A' 0021               	movlb	1	; select bank1
 13344  001B' 008D'              	movwf	(_i2c1Status^(0+128)+13)	;volatile
 13345                           
 13346                           ;mcc_generated_files/i2c_host/src/mssp.c: 278:     I2C1_Callback();
 13347  001C' 0800'              	movf	(_I2C1_Callback+1)^(0+128),w
 13348  001D' 008A               	movwf	10
 13349  001E' 0800'              	movf	_I2C1_Callback^(0+128),w
 13350  001F' 000A               	callw
 13351  0020' 3180'              	pagesel	$
 13352  0021' 0008               	return
 13353  0022'                    __end_of_I2C1_ErrorEventHandler:
 13354                           
 13355                           	psect	text69
 13356  0000'                    __ptext69:	
 13357 ;; *************** function _I2C1_EVENT_RESET *****************
 13358 ;; Defined at:
 13359 ;;		line 384 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13360 ;; Parameters:    Size  Location     Type
 13361 ;;		None
 13362 ;; Auto vars:     Size  Location     Type
 13363 ;;		None
 13364 ;; Return value:  Size  Location     Type
 13365 ;;                  1    wreg      enum E9544
 13366 ;; Registers used:
 13367 ;;		wreg, status,2, status,0, pclath, cstack
 13368 ;; Tracked objects:
 13369 ;;		On entry : 0/0
 13370 ;;		On exit  : 0/0
 13371 ;;		Unchanged: 0/0
 13372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13373 ;;      Params:         0       0       0       0       0       0       0       0
 13374 ;;      Locals:         0       0       0       0       0       0       0       0
 13375 ;;      Temps:          0       0       0       0       0       0       0       0
 13376 ;;      Totals:         0       0       0       0       0       0       0       0
 13377 ;;Total ram usage:        0 bytes
 13378 ;; Hardware stack levels used: 1
 13379 ;; Hardware stack levels required when called: 1
 13380 ;; This function calls:
 13381 ;;		_I2C1_BusReset
 13382 ;; This function is called by:
 13383 ;;		_I2C1_EVENT_ERROR
 13384 ;;		_I2C1_EventHandler
 13385 ;;		_I2C1_ErrorEventHandler
 13386 ;; This function uses a non-reentrant model
 13387 ;;
 13388                           
 13389  0000'                    _I2C1_EVENT_RESET:	
 13390                           ;psect for function _I2C1_EVENT_RESET
 13391                           
 13392                           
 13393                           ;mcc_generated_files/i2c_host/src/mssp.c: 386:     I2C1_BusReset();
 13394                           
 13395                           ;incstack = 0
 13396                           ; Regs used in _I2C1_EVENT_RESET: [wreg+status,2+status,0+pclath+cstack]
 13397  0000' 3180' 2000'        	fcall	_I2C1_BusReset
 13398                           
 13399                           ;mcc_generated_files/i2c_host/src/mssp.c: 387:     i2c1Status.busy = 0;
 13400  0002' 0021               	movlb	1	; select bank1
 13401  0003' 0180'              	clrf	_i2c1Status^(0+128)	;volatile
 13402                           
 13403                           ;mcc_generated_files/i2c_host/src/mssp.c: 388:     return I2C_STATE_IDLE;
 13404  0004' 3000               	movlw	0
 13405  0005' 0008               	return
 13406  0006'                    __end_of_I2C1_EVENT_RESET:
 13407                           
 13408                           	psect	text70
 13409  0000'                    __ptext70:	
 13410 ;; *************** function _I2C1_EVENT_STOP *****************
 13411 ;; Defined at:
 13412 ;;		line 377 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13413 ;; Parameters:    Size  Location     Type
 13414 ;;		None
 13415 ;; Auto vars:     Size  Location     Type
 13416 ;;		None
 13417 ;; Return value:  Size  Location     Type
 13418 ;;                  1    wreg      enum E9544
 13419 ;; Registers used:
 13420 ;;		wreg, status,2, status,0, pclath, cstack
 13421 ;; Tracked objects:
 13422 ;;		On entry : 0/0
 13423 ;;		On exit  : 0/0
 13424 ;;		Unchanged: 0/0
 13425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13426 ;;      Params:         0       0       0       0       0       0       0       0
 13427 ;;      Locals:         0       0       0       0       0       0       0       0
 13428 ;;      Temps:          0       0       0       0       0       0       0       0
 13429 ;;      Totals:         0       0       0       0       0       0       0       0
 13430 ;;Total ram usage:        0 bytes
 13431 ;; Hardware stack levels used: 1
 13432 ;; Hardware stack levels required when called: 2
 13433 ;; This function calls:
 13434 ;;		_I2C1_Close
 13435 ;;		_I2C1_StopSend
 13436 ;; This function is called by:
 13437 ;;		_I2C1_EVENT_TX
 13438 ;;		_I2C1_EVENT_NACK
 13439 ;;		_I2C1_EventHandler
 13440 ;;		_I2C1_ErrorEventHandler
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444  0000'                    _I2C1_EVENT_STOP:	
 13445                           ;psect for function _I2C1_EVENT_STOP
 13446                           
 13447                           
 13448                           ;mcc_generated_files/i2c_host/src/mssp.c: 379:     I2C1_StopSend();
 13449                           
 13450                           ;incstack = 0
 13451 ;; hardware stack exceeded
 13452                           ; Regs used in _I2C1_EVENT_STOP: [wreg+status,2+status,0+pclath+cstack]
 13453  0000' 3180' 2000' 3180'  	fcall	_I2C1_StopSend
 13454                           
 13455                           ;mcc_generated_files/i2c_host/src/mssp.c: 380:     I2C1_Close();
 13456  0003' 3180' 2000'        	fcall	_I2C1_Close
 13457                           
 13458                           ;mcc_generated_files/i2c_host/src/mssp.c: 381:     return I2C_STATE_IDLE;
 13459  0005' 3000               	movlw	0
 13460  0006' 0008               	return
 13461  0007'                    __end_of_I2C1_EVENT_STOP:
 13462                           
 13463                           	psect	text71
 13464  0000'                    __ptext71:	
 13465 ;; *************** function _I2C1_EVENT_ERROR *****************
 13466 ;; Defined at:
 13467 ;;		line 370 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13468 ;; Parameters:    Size  Location     Type
 13469 ;;		None
 13470 ;; Auto vars:     Size  Location     Type
 13471 ;;  retEventStat    1    0[COMMON] enum E9544
 13472 ;; Return value:  Size  Location     Type
 13473 ;;                  1    wreg      enum E9544
 13474 ;; Registers used:
 13475 ;;		wreg, status,2, status,0, pclath, cstack
 13476 ;; Tracked objects:
 13477 ;;		On entry : 0/0
 13478 ;;		On exit  : 0/0
 13479 ;;		Unchanged: 0/0
 13480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13481 ;;      Params:         0       0       0       0       0       0       0       0
 13482 ;;      Locals:         1       0       0       0       0       0       0       0
 13483 ;;      Temps:          0       0       0       0       0       0       0       0
 13484 ;;      Totals:         1       0       0       0       0       0       0       0
 13485 ;;Total ram usage:        1 bytes
 13486 ;; Hardware stack levels used: 1
 13487 ;; Hardware stack levels required when called: 2
 13488 ;; This function calls:
 13489 ;;		_I2C1_EVENT_RESET
 13490 ;; This function is called by:
 13491 ;;		_I2C1_EventHandler
 13492 ;;		_I2C1_ErrorEventHandler
 13493 ;; This function uses a non-reentrant model
 13494 ;;
 13495                           
 13496  0000'                    _I2C1_EVENT_ERROR:	
 13497                           ;psect for function _I2C1_EVENT_ERROR
 13498                           
 13499                           
 13500                           ;mcc_generated_files/i2c_host/src/mssp.c: 373:     retEventState = I2C1_EVENT_RESET();
 13501                           
 13502                           ;incstack = 0
 13503                           ; Regs used in _I2C1_EVENT_ERROR: [wreg+status,2+status,0+pclath+cstack]
 13504  0000' 3180' 2000'        	fcall	_I2C1_EVENT_RESET
 13505  0002' 0080'              	movwf	I2C1_EVENT_ERROR@retEventState
 13506                           
 13507                           ;mcc_generated_files/i2c_host/src/mssp.c: 374:     return retEventState;
 13508  0003' 0800'              	movf	I2C1_EVENT_ERROR@retEventState,w
 13509  0004' 0008               	return
 13510  0005'                    __end_of_I2C1_EVENT_ERROR:
 13511                           
 13512                           	psect	text72
 13513  0000'                    __ptext72:	
 13514 ;; *************** function _I2C1_EVENT_NACK *****************
 13515 ;; Defined at:
 13516 ;;		line 363 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;		None
 13519 ;; Auto vars:     Size  Location     Type
 13520 ;;  retEventStat    1    0[COMMON] enum E9544
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  1    wreg      enum E9544
 13523 ;; Registers used:
 13524 ;;		wreg, status,2, status,0, pclath, cstack
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13530 ;;      Params:         0       0       0       0       0       0       0       0
 13531 ;;      Locals:         1       0       0       0       0       0       0       0
 13532 ;;      Temps:          0       0       0       0       0       0       0       0
 13533 ;;      Totals:         1       0       0       0       0       0       0       0
 13534 ;;Total ram usage:        1 bytes
 13535 ;; Hardware stack levels used: 1
 13536 ;; Hardware stack levels required when called: 3
 13537 ;; This function calls:
 13538 ;;		_I2C1_EVENT_STOP
 13539 ;; This function is called by:
 13540 ;;		_I2C1_EventHandler
 13541 ;;		_I2C1_ErrorEventHandler
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545  0000'                    _I2C1_EVENT_NACK:	
 13546                           ;psect for function _I2C1_EVENT_NACK
 13547                           
 13548                           
 13549                           ;mcc_generated_files/i2c_host/src/mssp.c: 366:     retEventState = I2C1_EVENT_STOP();
 13550                           
 13551                           ;incstack = 0
 13552 ;; hardware stack exceeded
 13553                           ; Regs used in _I2C1_EVENT_NACK: [wreg+status,2+status,0+pclath+cstack]
 13554  0000' 3180' 2000'        	fcall	_I2C1_EVENT_STOP
 13555  0002' 0080'              	movwf	I2C1_EVENT_NACK@retEventState
 13556                           
 13557                           ;mcc_generated_files/i2c_host/src/mssp.c: 367:     return retEventState;
 13558  0003' 0800'              	movf	I2C1_EVENT_NACK@retEventState,w
 13559  0004' 0008               	return
 13560  0005'                    __end_of_I2C1_EVENT_NACK:
 13561                           
 13562                           	psect	text73
 13563  0000'                    __ptext73:	
 13564 ;; *************** function _I2C1_EVENT_RX *****************
 13565 ;; Defined at:
 13566 ;;		line 331 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13567 ;; Parameters:    Size  Location     Type
 13568 ;;		None
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  retEventStat    1    1[COMMON] enum E9544
 13571 ;; Return value:  Size  Location     Type
 13572 ;;                  1    wreg      enum E9544
 13573 ;; Registers used:
 13574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/0
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13580 ;;      Params:         0       0       0       0       0       0       0       0
 13581 ;;      Locals:         1       0       0       0       0       0       0       0
 13582 ;;      Temps:          1       0       0       0       0       0       0       0
 13583 ;;      Totals:         2       0       0       0       0       0       0       0
 13584 ;;Total ram usage:        2 bytes
 13585 ;; Hardware stack levels used: 1
 13586 ;; Hardware stack levels required when called: 1
 13587 ;; This function calls:
 13588 ;;		_I2C1_AckSend
 13589 ;;		_I2C1_DataReceive
 13590 ;;		_I2C1_IsRxBufFull
 13591 ;;		_I2C1_NackSend
 13592 ;;		_I2C1_ReceiveEnable
 13593 ;;		_I2C1_RestartDisable
 13594 ;; This function is called by:
 13595 ;;		_I2C1_EventHandler
 13596 ;;		_I2C1_ErrorEventHandler
 13597 ;; This function uses a non-reentrant model
 13598 ;;
 13599                           
 13600  0000'                    _I2C1_EVENT_RX:	
 13601                           ;psect for function _I2C1_EVENT_RX
 13602                           
 13603                           
 13604                           ;mcc_generated_files/i2c_host/src/mssp.c: 333:     i2c_host_event_states_t retEventState
      +                           = I2C_STATE_RX;
 13605                           
 13606                           ;incstack = 0
 13607                           ; Regs used in _I2C1_EVENT_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13608  0000' 3004               	movlw	4
 13609  0001' 0081'              	movwf	I2C1_EVENT_RX@retEventState
 13610                           
 13611                           ;mcc_generated_files/i2c_host/src/mssp.c: 335:     if (I2C1_IsRxBufFull())
 13612  0002' 3180' 2000' 3180'  	fcall	_I2C1_IsRxBufFull
 13613  0005' 3A00               	xorlw	0
 13614  0006' 1903               	skipnz
 13615  0007' 2800'              	goto	i1l4065
 13616                           
 13617                           ;mcc_generated_files/i2c_host/src/mssp.c: 336:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 337:         if (i2c1Status.readLength > 0)
 13618  0008' 0021               	movlb	1	; select bank1
 13619  0009' 0809'              	movf	(_i2c1Status^(0+128)+9),w	;volatile
 13620  000A' 0409'              	iorwf	((_i2c1Status+1)^(0+128)+9),w	;volatile
 13621  000B' 1903               	btfsc	3,2
 13622  000C' 2800'              	goto	i1l4057
 13623                           
 13624                           ;mcc_generated_files/i2c_host/src/mssp.c: 338:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 339:             *i2c1Status.readPtr++ = I2C1_DataReceive();
 13625  000D' 3180' 2000' 3180'  	fcall	_I2C1_DataReceive
 13626  0010' 0080'              	movwf	??_I2C1_EVENT_RX
 13627  0011' 3007               	movlw	7
 13628  0012' 3E00'              	addlw	(low (_i2c1Status| 0))& (0+255)
 13629  0013' 0086               	movwf	6
 13630  0014' 0187               	clrf	7
 13631  0015' 3F40               	moviw [0]fsr1
 13632  0016' 0084               	movwf	4
 13633  0017' 3F41               	moviw [1]fsr1
 13634  0018' 0085               	movwf	5
 13635  0019' 0800'              	movf	??_I2C1_EVENT_RX,w
 13636  001A' 0080               	movwf	0
 13637  001B' 3001               	movlw	1
 13638  001C' 0021               	movlb	1	; select bank1
 13639  001D' 0780'              	addwf	(low ((_i2c1Status| 0+7)))^(0+128),f	;volatile
 13640  001E' 3000               	movlw	0
 13641  001F' 3D80'              	addwfc	((low ((_i2c1Status| 0+7))+1))^(0+128),f	;volatile
 13642                           
 13643                           ;mcc_generated_files/i2c_host/src/mssp.c: 340:             i2c1Status.readLength--;
 13644  0020' 3001               	movlw	1
 13645  0021' 0289'              	subwf	(_i2c1Status^(0+128)+9),f	;volatile
 13646  0022' 3000               	movlw	0
 13647  0023' 3B89'              	subwfb	((_i2c1Status+1)^(0+128)+9),f	;volatile
 13648  0024'                    i1l4057:
 13649                           
 13650                           ;mcc_generated_files/i2c_host/src/mssp.c: 344:         if (i2c1Status.readLength > 0)
 13651  0024' 0809'              	movf	(_i2c1Status^(0+128)+9),w	;volatile
 13652  0025' 0409'              	iorwf	((_i2c1Status+1)^(0+128)+9),w	;volatile
 13653  0026' 1903               	btfsc	3,2
 13654  0027' 2800'              	goto	i1l4061
 13655                           
 13656                           ;mcc_generated_files/i2c_host/src/mssp.c: 345:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 346:             I2C1_AckSend();
 13657  0028' 3180' 2000' 3180'  	fcall	_I2C1_AckSend
 13658                           
 13659                           ;mcc_generated_files/i2c_host/src/mssp.c: 347:         }
 13660  002B' 2800'              	goto	i1l4067
 13661  002C'                    i1l4061:
 13662                           
 13663                           ;mcc_generated_files/i2c_host/src/mssp.c: 349:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 350:             I2C1_RestartDisable();
 13664  002C' 3180' 2000' 3180'  	fcall	_I2C1_RestartDisable
 13665                           
 13666                           ;mcc_generated_files/i2c_host/src/mssp.c: 351:             I2C1_NackSend();
 13667  002F' 3180' 2000' 3180'  	fcall	_I2C1_NackSend
 13668                           
 13669                           ;mcc_generated_files/i2c_host/src/mssp.c: 352:             retEventState = I2C_STATE_STO
      +                          P;
 13670  0032' 3007               	movlw	7
 13671  0033' 0081'              	movwf	I2C1_EVENT_RX@retEventState
 13672  0034' 2800'              	goto	i1l4067
 13673  0035'                    i1l4065:
 13674                           
 13675                           ;mcc_generated_files/i2c_host/src/mssp.c: 357:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 358:         I2C1_ReceiveEnable();
 13676  0035' 3180' 2000'        	fcall	_I2C1_ReceiveEnable
 13677  0037'                    i1l4067:
 13678                           
 13679                           ;mcc_generated_files/i2c_host/src/mssp.c: 360:     return retEventState;
 13680  0037' 0801'              	movf	I2C1_EVENT_RX@retEventState,w
 13681  0038' 0008               	return
 13682  0039'                    __end_of_I2C1_EVENT_RX:
 13683                           
 13684                           	psect	text74
 13685  0000'                    __ptext74:	
 13686 ;; *************** function _I2C1_EVENT_SEND_WR_ADDR *****************
 13687 ;; Defined at:
 13688 ;;		line 299 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13689 ;; Parameters:    Size  Location     Type
 13690 ;;		None
 13691 ;; Auto vars:     Size  Location     Type
 13692 ;;		None
 13693 ;; Return value:  Size  Location     Type
 13694 ;;                  1    wreg      enum E9544
 13695 ;; Registers used:
 13696 ;;		wreg, status,2, status,0, pclath, cstack
 13697 ;; Tracked objects:
 13698 ;;		On entry : 0/0
 13699 ;;		On exit  : 0/0
 13700 ;;		Unchanged: 0/0
 13701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13702 ;;      Params:         0       0       0       0       0       0       0       0
 13703 ;;      Locals:         0       0       0       0       0       0       0       0
 13704 ;;      Temps:          0       0       0       0       0       0       0       0
 13705 ;;      Totals:         0       0       0       0       0       0       0       0
 13706 ;;Total ram usage:        0 bytes
 13707 ;; Hardware stack levels used: 1
 13708 ;; Hardware stack levels required when called: 1
 13709 ;; This function calls:
 13710 ;;		_I2C1_DataTransmit
 13711 ;; This function is called by:
 13712 ;;		_I2C1_EventHandler
 13713 ;;		_I2C1_ErrorEventHandler
 13714 ;; This function uses a non-reentrant model
 13715 ;;
 13716                           
 13717  0000'                    _I2C1_EVENT_SEND_WR_ADDR:	
 13718                           ;psect for function _I2C1_EVENT_SEND_WR_ADDR
 13719                           
 13720                           
 13721                           ;mcc_generated_files/i2c_host/src/mssp.c: 301:     I2C1_DataTransmit((uint8_t) (i2c1Stat
      +                          us.address << 1));
 13722                           
 13723                           ;incstack = 0
 13724                           ; Regs used in _I2C1_EVENT_SEND_WR_ADDR: [wreg+status,2+status,0+pclath+cstack]
 13725  0000' 0021               	movlb	1	; select bank1
 13726  0001' 3501'              	lslf	(_i2c1Status^(0+128)+1),w	;volatile
 13727  0002' 3180' 2000'        	fcall	_I2C1_DataTransmit
 13728                           
 13729                           ;mcc_generated_files/i2c_host/src/mssp.c: 302:     return I2C_STATE_TX;
 13730  0004' 3003               	movlw	3
 13731  0005' 0008               	return
 13732  0006'                    __end_of_I2C1_EVENT_SEND_WR_ADDR:
 13733                           
 13734                           	psect	text75
 13735  0000'                    __ptext75:	
 13736 ;; *************** function _I2C1_EVENT_SEND_RD_ADDR *****************
 13737 ;; Defined at:
 13738 ;;		line 293 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13739 ;; Parameters:    Size  Location     Type
 13740 ;;		None
 13741 ;; Auto vars:     Size  Location     Type
 13742 ;;		None
 13743 ;; Return value:  Size  Location     Type
 13744 ;;                  1    wreg      enum E9544
 13745 ;; Registers used:
 13746 ;;		wreg, status,2, status,0, pclath, cstack
 13747 ;; Tracked objects:
 13748 ;;		On entry : 0/0
 13749 ;;		On exit  : 0/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13752 ;;      Params:         0       0       0       0       0       0       0       0
 13753 ;;      Locals:         0       0       0       0       0       0       0       0
 13754 ;;      Temps:          0       0       0       0       0       0       0       0
 13755 ;;      Totals:         0       0       0       0       0       0       0       0
 13756 ;;Total ram usage:        0 bytes
 13757 ;; Hardware stack levels used: 1
 13758 ;; Hardware stack levels required when called: 1
 13759 ;; This function calls:
 13760 ;;		_I2C1_DataTransmit
 13761 ;; This function is called by:
 13762 ;;		_I2C1_EventHandler
 13763 ;;		_I2C1_ErrorEventHandler
 13764 ;; This function uses a non-reentrant model
 13765 ;;
 13766                           
 13767  0000'                    _I2C1_EVENT_SEND_RD_ADDR:	
 13768                           ;psect for function _I2C1_EVENT_SEND_RD_ADDR
 13769                           
 13770                           
 13771                           ;mcc_generated_files/i2c_host/src/mssp.c: 295:     I2C1_DataTransmit((uint8_t) (i2c1Stat
      +                          us.address << 1 | 1));
 13772                           
 13773                           ;incstack = 0
 13774                           ; Regs used in _I2C1_EVENT_SEND_RD_ADDR: [wreg+status,2+status,0+pclath+cstack]
 13775  0000' 1403               	setc
 13776  0001' 0021               	movlb	1	; select bank1
 13777  0002' 0D01'              	rlf	(_i2c1Status^(0+128)+1),w	;volatile
 13778  0003' 3180' 2000'        	fcall	_I2C1_DataTransmit
 13779                           
 13780                           ;mcc_generated_files/i2c_host/src/mssp.c: 296:     return I2C_STATE_RX;
 13781  0005' 3004               	movlw	4
 13782  0006' 0008               	return
 13783  0007'                    __end_of_I2C1_EVENT_SEND_RD_ADDR:
 13784                           
 13785                           	psect	text76
 13786  0000'                    __ptext76:	
 13787 ;; *************** function _I2C1_EVENT_IDLE *****************
 13788 ;; Defined at:
 13789 ;;		line 287 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13790 ;; Parameters:    Size  Location     Type
 13791 ;;		None
 13792 ;; Auto vars:     Size  Location     Type
 13793 ;;		None
 13794 ;; Return value:  Size  Location     Type
 13795 ;;                  1    wreg      enum E9544
 13796 ;; Registers used:
 13797 ;;		wreg, status,2
 13798 ;; Tracked objects:
 13799 ;;		On entry : 0/0
 13800 ;;		On exit  : 0/0
 13801 ;;		Unchanged: 0/0
 13802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13803 ;;      Params:         0       0       0       0       0       0       0       0
 13804 ;;      Locals:         0       0       0       0       0       0       0       0
 13805 ;;      Temps:          0       0       0       0       0       0       0       0
 13806 ;;      Totals:         0       0       0       0       0       0       0       0
 13807 ;;Total ram usage:        0 bytes
 13808 ;; Hardware stack levels used: 1
 13809 ;; This function calls:
 13810 ;;		Nothing
 13811 ;; This function is called by:
 13812 ;;		_I2C1_EventHandler
 13813 ;;		_I2C1_ErrorEventHandler
 13814 ;; This function uses a non-reentrant model
 13815 ;;
 13816                           
 13817  0000'                    _I2C1_EVENT_IDLE:	
 13818                           ;psect for function _I2C1_EVENT_IDLE
 13819                           
 13820                           
 13821                           ;mcc_generated_files/i2c_host/src/mssp.c: 289:     i2c1Status.busy = 0;
 13822                           
 13823                           ;incstack = 0
 13824                           ; Regs used in _I2C1_EVENT_IDLE: [wreg+status,2]
 13825  0000' 0021               	movlb	1	; select bank1
 13826  0001' 0180'              	clrf	_i2c1Status^(0+128)	;volatile
 13827                           
 13828                           ;mcc_generated_files/i2c_host/src/mssp.c: 290:     return I2C_STATE_RESET;
 13829  0002' 3008               	movlw	8
 13830  0003' 0008               	return
 13831  0004'                    __end_of_I2C1_EVENT_IDLE:
 13832                           
 13833                           	psect	text77
 13834  0000'                    __ptext77:	
 13835 ;; *************** function _I2C1_EVENT_TX *****************
 13836 ;; Defined at:
 13837 ;;		line 305 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13838 ;; Parameters:    Size  Location     Type
 13839 ;;		None
 13840 ;; Auto vars:     Size  Location     Type
 13841 ;;  retEventStat    1    3[COMMON] enum E9544
 13842 ;; Return value:  Size  Location     Type
 13843 ;;                  1    wreg      enum E9544
 13844 ;; Registers used:
 13845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13846 ;; Tracked objects:
 13847 ;;		On entry : 0/0
 13848 ;;		On exit  : 0/0
 13849 ;;		Unchanged: 0/0
 13850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13851 ;;      Params:         0       0       0       0       0       0       0       0
 13852 ;;      Locals:         1       0       0       0       0       0       0       0
 13853 ;;      Temps:          2       0       0       0       0       0       0       0
 13854 ;;      Totals:         3       0       0       0       0       0       0       0
 13855 ;;Total ram usage:        3 bytes
 13856 ;; Hardware stack levels used: 1
 13857 ;; Hardware stack levels required when called: 3
 13858 ;; This function calls:
 13859 ;;		_I2C1_DataTransmit
 13860 ;;		_I2C1_EVENT_STOP
 13861 ;;		_I2C1_RestartEnable
 13862 ;; This function is called by:
 13863 ;;		_I2C1_EventHandler
 13864 ;;		_I2C1_ErrorEventHandler
 13865 ;; This function uses a non-reentrant model
 13866 ;;
 13867                           
 13868  0000'                    _I2C1_EVENT_TX:	
 13869                           ;psect for function _I2C1_EVENT_TX
 13870                           
 13871                           
 13872                           ;mcc_generated_files/i2c_host/src/mssp.c: 308:     if (i2c1Status.writeLength)
 13873                           
 13874                           ;incstack = 0
 13875 ;; hardware stack exceeded
 13876                           ; Regs used in _I2C1_EVENT_TX: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13877  0000' 0021               	movlb	1	; select bank1
 13878  0001' 0805'              	movf	(_i2c1Status^(0+128)+5),w	;volatile
 13879  0002' 0405'              	iorwf	((_i2c1Status+1)^(0+128)+5),w	;volatile
 13880  0003' 1903               	btfsc	3,2
 13881  0004' 2800'              	goto	i1l4031
 13882                           
 13883                           ;mcc_generated_files/i2c_host/src/mssp.c: 309:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 310:         i2c1Status.writeLength--;
 13884  0005' 3001               	movlw	1
 13885  0006' 0285'              	subwf	(_i2c1Status^(0+128)+5),f	;volatile
 13886  0007' 3000               	movlw	0
 13887  0008' 3B85'              	subwfb	((_i2c1Status+1)^(0+128)+5),f	;volatile
 13888                           
 13889                           ;mcc_generated_files/i2c_host/src/mssp.c: 311:         I2C1_DataTransmit(*i2c1Status.wri
      +                          tePtr++);
 13890  0009' 0800'              	movf	((low ((_i2c1Status| 0+3))+1))^(0+128),w	;volatile
 13891  000A' 0082'              	movwf	??_I2C1_EVENT_TX+1
 13892  000B' 0800'              	movf	(low ((_i2c1Status| 0+3)))^(0+128),w	;volatile
 13893  000C' 0081'              	movwf	??_I2C1_EVENT_TX
 13894  000D' 0A80'              	incf	(low ((_i2c1Status| 0+3)))^(0+128),f	;volatile
 13895  000E' 1903               	skipnz
 13896  000F' 0A80'              	incf	((low ((_i2c1Status| 0+3))+1))^(0+128),f	;volatile
 13897  0010' 0801'              	movf	??_I2C1_EVENT_TX,w
 13898  0011' 0086               	movwf	6
 13899  0012' 0802'              	movf	??_I2C1_EVENT_TX+1,w
 13900  0013' 0087               	movwf	7
 13901  0014' 0801               	movf	1,w
 13902  0015' 3180' 2000' 3180'  	fcall	_I2C1_DataTransmit
 13903                           
 13904                           ;mcc_generated_files/i2c_host/src/mssp.c: 312:         retEventState = I2C_STATE_TX;
 13905  0018' 3003               	movlw	3
 13906  0019' 2800'              	goto	L7
 13907  001A'                    i1l4031:	
 13908                           ;mcc_generated_files/i2c_host/src/mssp.c: 313:     }
 13909                           
 13910                           
 13911                           ;mcc_generated_files/i2c_host/src/mssp.c: 315:     {;mcc_generated_files/i2c_host/src/ms
      +                          sp.c: 316:         if (i2c1Status.switchToRead)
 13912  001A' 080B'              	movf	(_i2c1Status^(0+128)+11),w	;volatile
 13913  001B' 1903               	btfsc	3,2
 13914  001C' 2800'              	goto	i1l4039
 13915                           
 13916                           ;mcc_generated_files/i2c_host/src/mssp.c: 317:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 318:             i2c1Status.switchToRead = 0;
 13917  001D' 018B'              	clrf	(_i2c1Status^(0+128)+11)	;volatile
 13918                           
 13919                           ;mcc_generated_files/i2c_host/src/mssp.c: 319:             I2C1_RestartEnable();
 13920  001E' 3180' 2000' 3180'  	fcall	_I2C1_RestartEnable
 13921                           
 13922                           ;mcc_generated_files/i2c_host/src/mssp.c: 320:             retEventState = I2C_STATE_SEN
      +                          D_RD_ADDR;
 13923  0021' 0183'              	clrf	I2C1_EVENT_TX@retEventState
 13924  0022' 0A83'              	incf	I2C1_EVENT_TX@retEventState,f
 13925                           
 13926                           ;mcc_generated_files/i2c_host/src/mssp.c: 321:         }
 13927  0023' 2800'              	goto	i1l4041
 13928  0024'                    i1l4039:
 13929                           
 13930                           ;mcc_generated_files/i2c_host/src/mssp.c: 323:         {;mcc_generated_files/i2c_host/sr
      +                          c/mssp.c: 324:             retEventState = I2C1_EVENT_STOP();
 13931  0024' 3180' 2000'        	fcall	_I2C1_EVENT_STOP
 13932  0026'                    L7:
 13933  0026' 0083'              	movwf	I2C1_EVENT_TX@retEventState
 13934  0027'                    i1l4041:
 13935                           
 13936                           ;mcc_generated_files/i2c_host/src/mssp.c: 328:     return retEventState;
 13937  0027' 0803'              	movf	I2C1_EVENT_TX@retEventState,w
 13938  0028' 0008               	return
 13939  0029'                    __end_of_I2C1_EVENT_TX:
 13940                           
 13941                           	psect	text78
 13942  0000'                    __ptext78:	
 13943 ;; *************** function _I2C1_RestartEnable *****************
 13944 ;; Defined at:
 13945 ;;		line 415 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;		None
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;		None
 13950 ;; Return value:  Size  Location     Type
 13951 ;;                  1    wreg      void 
 13952 ;; Registers used:
 13953 ;;		None
 13954 ;; Tracked objects:
 13955 ;;		On entry : 0/0
 13956 ;;		On exit  : 0/0
 13957 ;;		Unchanged: 0/0
 13958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13959 ;;      Params:         0       0       0       0       0       0       0       0
 13960 ;;      Locals:         0       0       0       0       0       0       0       0
 13961 ;;      Temps:          0       0       0       0       0       0       0       0
 13962 ;;      Totals:         0       0       0       0       0       0       0       0
 13963 ;;Total ram usage:        0 bytes
 13964 ;; Hardware stack levels used: 1
 13965 ;; This function calls:
 13966 ;;		Nothing
 13967 ;; This function is called by:
 13968 ;;		_I2C1_EVENT_TX
 13969 ;; This function uses a non-reentrant model
 13970 ;;
 13971                           
 13972  0000'                    _I2C1_RestartEnable:	
 13973                           ;psect for function _I2C1_RestartEnable
 13974                           
 13975                           
 13976                           ;mcc_generated_files/i2c_host/src/mssp.c: 417:     SSP1CON2bits.RSEN = 1;
 13977                           
 13978                           ;incstack = 0
 13979                           ; Regs used in _I2C1_RestartEnable: []
 13980  0000' 0024               	movlb	4	; select bank4
 13981  0001' 1496               	bsf	22,1	;volatile
 13982  0002' 0008               	return
 13983  0003'                    __end_of_I2C1_RestartEnable:
 13984                           
 13985                           	psect	text79
 13986  0000'                    __ptext79:	
 13987 ;; *************** function _I2C1_DataTransmit *****************
 13988 ;; Defined at:
 13989 ;;		line 399 in file "mcc_generated_files/i2c_host/src/mssp.c"
 13990 ;; Parameters:    Size  Location     Type
 13991 ;;  data            1    wreg     unsigned char 
 13992 ;; Auto vars:     Size  Location     Type
 13993 ;;  data            1    0[COMMON] unsigned char 
 13994 ;; Return value:  Size  Location     Type
 13995 ;;                  1    wreg      void 
 13996 ;; Registers used:
 13997 ;;		wreg
 13998 ;; Tracked objects:
 13999 ;;		On entry : 0/0
 14000 ;;		On exit  : 0/0
 14001 ;;		Unchanged: 0/0
 14002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14003 ;;      Params:         0       0       0       0       0       0       0       0
 14004 ;;      Locals:         1       0       0       0       0       0       0       0
 14005 ;;      Temps:          0       0       0       0       0       0       0       0
 14006 ;;      Totals:         1       0       0       0       0       0       0       0
 14007 ;;Total ram usage:        1 bytes
 14008 ;; Hardware stack levels used: 1
 14009 ;; This function calls:
 14010 ;;		Nothing
 14011 ;; This function is called by:
 14012 ;;		_I2C1_EVENT_SEND_RD_ADDR
 14013 ;;		_I2C1_EVENT_SEND_WR_ADDR
 14014 ;;		_I2C1_EVENT_TX
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018  0000'                    _I2C1_DataTransmit:	
 14019                           ;psect for function _I2C1_DataTransmit
 14020                           
 14021                           
 14022                           ;incstack = 0
 14023                           ; Regs used in _I2C1_DataTransmit: [wreg]
 14024                           ;I2C1_DataTransmit@data stored from wreg
 14025  0000' 0080'              	movwf	I2C1_DataTransmit@data
 14026                           
 14027                           ;mcc_generated_files/i2c_host/src/mssp.c: 399: static void I2C1_DataTransmit(uint8_t dat
      +                          a);mcc_generated_files/i2c_host/src/mssp.c: 400: {;mcc_generated_files/i2c_host/src/mssp
      +                          .c: 401:     SSP1BUF = data;
 14028  0001' 0800'              	movf	I2C1_DataTransmit@data,w
 14029  0002' 0024               	movlb	4	; select bank4
 14030  0003' 0091               	movwf	17	;volatile
 14031  0004' 0008               	return
 14032  0005'                    __end_of_I2C1_DataTransmit:
 14033                           
 14034                           	psect	text80
 14035  0000'                    __ptext80:	
 14036 ;; *************** function _I2C1_RestartDisable *****************
 14037 ;; Defined at:
 14038 ;;		line 420 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14039 ;; Parameters:    Size  Location     Type
 14040 ;;		None
 14041 ;; Auto vars:     Size  Location     Type
 14042 ;;		None
 14043 ;; Return value:  Size  Location     Type
 14044 ;;                  1    wreg      void 
 14045 ;; Registers used:
 14046 ;;		None
 14047 ;; Tracked objects:
 14048 ;;		On entry : 0/0
 14049 ;;		On exit  : 0/0
 14050 ;;		Unchanged: 0/0
 14051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14052 ;;      Params:         0       0       0       0       0       0       0       0
 14053 ;;      Locals:         0       0       0       0       0       0       0       0
 14054 ;;      Temps:          0       0       0       0       0       0       0       0
 14055 ;;      Totals:         0       0       0       0       0       0       0       0
 14056 ;;Total ram usage:        0 bytes
 14057 ;; Hardware stack levels used: 1
 14058 ;; This function calls:
 14059 ;;		Nothing
 14060 ;; This function is called by:
 14061 ;;		_I2C1_EVENT_RX
 14062 ;; This function uses a non-reentrant model
 14063 ;;
 14064                           
 14065  0000'                    _I2C1_RestartDisable:	
 14066                           ;psect for function _I2C1_RestartDisable
 14067                           
 14068                           
 14069                           ;mcc_generated_files/i2c_host/src/mssp.c: 422:     SSP1CON2bits.RSEN = 0;
 14070                           
 14071                           ;incstack = 0
 14072                           ; Regs used in _I2C1_RestartDisable: []
 14073  0000' 0024               	movlb	4	; select bank4
 14074  0001' 1096               	bcf	22,1	;volatile
 14075  0002' 0008               	return
 14076  0003'                    __end_of_I2C1_RestartDisable:
 14077                           
 14078                           	psect	text81
 14079  0000'                    __ptext81:	
 14080 ;; *************** function _I2C1_ReceiveEnable *****************
 14081 ;; Defined at:
 14082 ;;		line 410 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14083 ;; Parameters:    Size  Location     Type
 14084 ;;		None
 14085 ;; Auto vars:     Size  Location     Type
 14086 ;;		None
 14087 ;; Return value:  Size  Location     Type
 14088 ;;                  1    wreg      void 
 14089 ;; Registers used:
 14090 ;;		None
 14091 ;; Tracked objects:
 14092 ;;		On entry : 0/0
 14093 ;;		On exit  : 0/0
 14094 ;;		Unchanged: 0/0
 14095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14096 ;;      Params:         0       0       0       0       0       0       0       0
 14097 ;;      Locals:         0       0       0       0       0       0       0       0
 14098 ;;      Temps:          0       0       0       0       0       0       0       0
 14099 ;;      Totals:         0       0       0       0       0       0       0       0
 14100 ;;Total ram usage:        0 bytes
 14101 ;; Hardware stack levels used: 1
 14102 ;; This function calls:
 14103 ;;		Nothing
 14104 ;; This function is called by:
 14105 ;;		_I2C1_EVENT_RX
 14106 ;; This function uses a non-reentrant model
 14107 ;;
 14108                           
 14109  0000'                    _I2C1_ReceiveEnable:	
 14110                           ;psect for function _I2C1_ReceiveEnable
 14111                           
 14112                           
 14113                           ;mcc_generated_files/i2c_host/src/mssp.c: 412:     SSP1CON2bits.RCEN = 1;
 14114                           
 14115                           ;incstack = 0
 14116                           ; Regs used in _I2C1_ReceiveEnable: []
 14117  0000' 0024               	movlb	4	; select bank4
 14118  0001' 1596               	bsf	22,3	;volatile
 14119  0002' 0008               	return
 14120  0003'                    __end_of_I2C1_ReceiveEnable:
 14121                           
 14122                           	psect	text82
 14123  0000'                    __ptext82:	
 14124 ;; *************** function _I2C1_NackSend *****************
 14125 ;; Defined at:
 14126 ;;		line 441 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14127 ;; Parameters:    Size  Location     Type
 14128 ;;		None
 14129 ;; Auto vars:     Size  Location     Type
 14130 ;;		None
 14131 ;; Return value:  Size  Location     Type
 14132 ;;                  1    wreg      void 
 14133 ;; Registers used:
 14134 ;;		None
 14135 ;; Tracked objects:
 14136 ;;		On entry : 0/0
 14137 ;;		On exit  : 0/0
 14138 ;;		Unchanged: 0/0
 14139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14140 ;;      Params:         0       0       0       0       0       0       0       0
 14141 ;;      Locals:         0       0       0       0       0       0       0       0
 14142 ;;      Temps:          0       0       0       0       0       0       0       0
 14143 ;;      Totals:         0       0       0       0       0       0       0       0
 14144 ;;Total ram usage:        0 bytes
 14145 ;; Hardware stack levels used: 1
 14146 ;; This function calls:
 14147 ;;		Nothing
 14148 ;; This function is called by:
 14149 ;;		_I2C1_EVENT_RX
 14150 ;; This function uses a non-reentrant model
 14151 ;;
 14152                           
 14153  0000'                    _I2C1_NackSend:	
 14154                           ;psect for function _I2C1_NackSend
 14155                           
 14156                           
 14157                           ;mcc_generated_files/i2c_host/src/mssp.c: 443:     SSP1CON2bits.ACKDT = 1;
 14158                           
 14159                           ;incstack = 0
 14160                           ; Regs used in _I2C1_NackSend: []
 14161  0000' 0024               	movlb	4	; select bank4
 14162  0001' 1696               	bsf	22,5	;volatile
 14163                           
 14164                           ;mcc_generated_files/i2c_host/src/mssp.c: 444:     SSP1CON2bits.ACKEN = 1;
 14165  0002' 1616               	bsf	22,4	;volatile
 14166  0003' 0008               	return
 14167  0004'                    __end_of_I2C1_NackSend:
 14168                           
 14169                           	psect	text83
 14170  0000'                    __ptext83:	
 14171 ;; *************** function _I2C1_IsRxBufFull *****************
 14172 ;; Defined at:
 14173 ;;		line 462 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14174 ;; Parameters:    Size  Location     Type
 14175 ;;		None
 14176 ;; Auto vars:     Size  Location     Type
 14177 ;;		None
 14178 ;; Return value:  Size  Location     Type
 14179 ;;                  1    wreg      _Bool 
 14180 ;; Registers used:
 14181 ;;		wreg, status,2, status,0
 14182 ;; Tracked objects:
 14183 ;;		On entry : 0/0
 14184 ;;		On exit  : 0/0
 14185 ;;		Unchanged: 0/0
 14186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14187 ;;      Params:         0       0       0       0       0       0       0       0
 14188 ;;      Locals:         0       0       0       0       0       0       0       0
 14189 ;;      Temps:          0       0       0       0       0       0       0       0
 14190 ;;      Totals:         0       0       0       0       0       0       0       0
 14191 ;;Total ram usage:        0 bytes
 14192 ;; Hardware stack levels used: 1
 14193 ;; This function calls:
 14194 ;;		Nothing
 14195 ;; This function is called by:
 14196 ;;		_I2C1_EVENT_RX
 14197 ;; This function uses a non-reentrant model
 14198 ;;
 14199                           
 14200  0000'                    _I2C1_IsRxBufFull:	
 14201                           ;psect for function _I2C1_IsRxBufFull
 14202                           
 14203                           
 14204                           ;mcc_generated_files/i2c_host/src/mssp.c: 464:     return SSP1STATbits.BF;
 14205                           
 14206                           ;incstack = 0
 14207                           ; Regs used in _I2C1_IsRxBufFull: [wreg+status,2+status,0]
 14208  0000' 0024               	movlb	4	; select bank4
 14209  0001' 0814               	movf	20,w	;volatile
 14210  0002' 3901               	andlw	1
 14211  0003' 0008               	return
 14212  0004'                    __end_of_I2C1_IsRxBufFull:
 14213                           
 14214                           	psect	text84
 14215  0000'                    __ptext84:	
 14216 ;; *************** function _I2C1_DataReceive *****************
 14217 ;; Defined at:
 14218 ;;		line 394 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;		None
 14221 ;; Auto vars:     Size  Location     Type
 14222 ;;		None
 14223 ;; Return value:  Size  Location     Type
 14224 ;;                  1    wreg      unsigned char 
 14225 ;; Registers used:
 14226 ;;		wreg
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/0
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14232 ;;      Params:         0       0       0       0       0       0       0       0
 14233 ;;      Locals:         0       0       0       0       0       0       0       0
 14234 ;;      Temps:          0       0       0       0       0       0       0       0
 14235 ;;      Totals:         0       0       0       0       0       0       0       0
 14236 ;;Total ram usage:        0 bytes
 14237 ;; Hardware stack levels used: 1
 14238 ;; This function calls:
 14239 ;;		Nothing
 14240 ;; This function is called by:
 14241 ;;		_I2C1_EVENT_RX
 14242 ;; This function uses a non-reentrant model
 14243 ;;
 14244                           
 14245  0000'                    _I2C1_DataReceive:	
 14246                           ;psect for function _I2C1_DataReceive
 14247                           
 14248                           
 14249                           ;mcc_generated_files/i2c_host/src/mssp.c: 396:     return SSP1BUF;
 14250                           
 14251                           ;incstack = 0
 14252                           ; Regs used in _I2C1_DataReceive: [wreg]
 14253  0000' 0024               	movlb	4	; select bank4
 14254  0001' 0811               	movf	17,w	;volatile
 14255  0002' 0008               	return
 14256  0003'                    __end_of_I2C1_DataReceive:
 14257                           
 14258                           	psect	text85
 14259  0000'                    __ptext85:	
 14260 ;; *************** function _I2C1_AckSend *****************
 14261 ;; Defined at:
 14262 ;;		line 435 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14263 ;; Parameters:    Size  Location     Type
 14264 ;;		None
 14265 ;; Auto vars:     Size  Location     Type
 14266 ;;		None
 14267 ;; Return value:  Size  Location     Type
 14268 ;;                  1    wreg      void 
 14269 ;; Registers used:
 14270 ;;		None
 14271 ;; Tracked objects:
 14272 ;;		On entry : 0/0
 14273 ;;		On exit  : 0/0
 14274 ;;		Unchanged: 0/0
 14275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14276 ;;      Params:         0       0       0       0       0       0       0       0
 14277 ;;      Locals:         0       0       0       0       0       0       0       0
 14278 ;;      Temps:          0       0       0       0       0       0       0       0
 14279 ;;      Totals:         0       0       0       0       0       0       0       0
 14280 ;;Total ram usage:        0 bytes
 14281 ;; Hardware stack levels used: 1
 14282 ;; This function calls:
 14283 ;;		Nothing
 14284 ;; This function is called by:
 14285 ;;		_I2C1_EVENT_RX
 14286 ;; This function uses a non-reentrant model
 14287 ;;
 14288                           
 14289  0000'                    _I2C1_AckSend:	
 14290                           ;psect for function _I2C1_AckSend
 14291                           
 14292                           
 14293                           ;mcc_generated_files/i2c_host/src/mssp.c: 437:     SSP1CON2bits.ACKDT = 0;
 14294                           
 14295                           ;incstack = 0
 14296                           ; Regs used in _I2C1_AckSend: []
 14297  0000' 0024               	movlb	4	; select bank4
 14298  0001' 1296               	bcf	22,5	;volatile
 14299                           
 14300                           ;mcc_generated_files/i2c_host/src/mssp.c: 438:     SSP1CON2bits.ACKEN = 1;
 14301  0002' 1616               	bsf	22,4	;volatile
 14302  0003' 0008               	return
 14303  0004'                    __end_of_I2C1_AckSend:
 14304                           
 14305                           	psect	text86
 14306  0000'                    __ptext86:	
 14307 ;; *************** function _I2C1_StopSend *****************
 14308 ;; Defined at:
 14309 ;;		line 430 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14310 ;; Parameters:    Size  Location     Type
 14311 ;;		None
 14312 ;; Auto vars:     Size  Location     Type
 14313 ;;		None
 14314 ;; Return value:  Size  Location     Type
 14315 ;;                  1    wreg      void 
 14316 ;; Registers used:
 14317 ;;		None
 14318 ;; Tracked objects:
 14319 ;;		On entry : 0/0
 14320 ;;		On exit  : 0/0
 14321 ;;		Unchanged: 0/0
 14322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14323 ;;      Params:         0       0       0       0       0       0       0       0
 14324 ;;      Locals:         0       0       0       0       0       0       0       0
 14325 ;;      Temps:          0       0       0       0       0       0       0       0
 14326 ;;      Totals:         0       0       0       0       0       0       0       0
 14327 ;;Total ram usage:        0 bytes
 14328 ;; Hardware stack levels used: 1
 14329 ;; This function calls:
 14330 ;;		Nothing
 14331 ;; This function is called by:
 14332 ;;		_I2C1_EVENT_STOP
 14333 ;; This function uses a non-reentrant model
 14334 ;;
 14335                           
 14336  0000'                    _I2C1_StopSend:	
 14337                           ;psect for function _I2C1_StopSend
 14338                           
 14339                           
 14340                           ;mcc_generated_files/i2c_host/src/mssp.c: 432:     SSP1CON2bits.PEN = 1;
 14341                           
 14342                           ;incstack = 0
 14343                           ; Regs used in _I2C1_StopSend: []
 14344  0000' 0024               	movlb	4	; select bank4
 14345  0001' 1516               	bsf	22,2	;volatile
 14346  0002' 0008               	return
 14347  0003'                    __end_of_I2C1_StopSend:
 14348                           
 14349                           	psect	text87
 14350  0000'                    __ptext87:	
 14351 ;; *************** function _I2C1_Close *****************
 14352 ;; Defined at:
 14353 ;;		line 244 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14354 ;; Parameters:    Size  Location     Type
 14355 ;;		None
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;		None
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  1    wreg      void 
 14360 ;; Registers used:
 14361 ;;		status,2, status,0, pclath, cstack
 14362 ;; Tracked objects:
 14363 ;;		On entry : 0/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14367 ;;      Params:         0       0       0       0       0       0       0       0
 14368 ;;      Locals:         0       0       0       0       0       0       0       0
 14369 ;;      Temps:          0       0       0       0       0       0       0       0
 14370 ;;      Totals:         0       0       0       0       0       0       0       0
 14371 ;;Total ram usage:        0 bytes
 14372 ;; Hardware stack levels used: 1
 14373 ;; Hardware stack levels required when called: 1
 14374 ;; This function calls:
 14375 ;;		_I2C1_ErrorInterruptClear
 14376 ;;		_I2C1_InterruptClear
 14377 ;;		_I2C1_StatusFlagsClear
 14378 ;; This function is called by:
 14379 ;;		_I2C1_EVENT_STOP
 14380 ;; This function uses a non-reentrant model
 14381 ;;
 14382                           
 14383  0000'                    _I2C1_Close:	
 14384                           ;psect for function _I2C1_Close
 14385                           
 14386                           
 14387                           ;mcc_generated_files/i2c_host/src/mssp.c: 246:     i2c1Status.busy = 0;
 14388                           
 14389                           ;incstack = 0
 14390 ;; hardware stack exceeded
 14391                           ; Regs used in _I2C1_Close: [status,2+status,0+pclath+cstack]
 14392  0000' 0021               	movlb	1	; select bank1
 14393  0001' 0180'              	clrf	_i2c1Status^(0+128)	;volatile
 14394                           
 14395                           ;mcc_generated_files/i2c_host/src/mssp.c: 247:     i2c1Status.address = 0xFF;
 14396  0002' 3000               	movlw	0
 14397  0003' 0081'              	movwf	((_i2c1Status+1)^(0+128)+1)	;volatile
 14398  0004' 30FF               	movlw	255
 14399  0005' 0081'              	movwf	(_i2c1Status^(0+128)+1)	;volatile
 14400                           
 14401                           ;mcc_generated_files/i2c_host/src/mssp.c: 248:     i2c1Status.writePtr = ((void*)0);
 14402  0006' 0180'              	clrf	(low ((_i2c1Status| 0+3)))^(0+128)	;volatile
 14403  0007' 0180'              	clrf	((low ((_i2c1Status| 0+3))+1))^(0+128)	;volatile
 14404                           
 14405                           ;mcc_generated_files/i2c_host/src/mssp.c: 249:     i2c1Status.readPtr = ((void*)0);
 14406  0008' 0180'              	clrf	(low ((_i2c1Status| 0+7)))^(0+128)	;volatile
 14407  0009' 0180'              	clrf	((low ((_i2c1Status| 0+7))+1))^(0+128)	;volatile
 14408                           
 14409                           ;mcc_generated_files/i2c_host/src/mssp.c: 250:     i2c1Status.state = I2C_STATE_IDLE;
 14410  000A' 018D'              	clrf	(_i2c1Status^(0+128)+13)	;volatile
 14411                           
 14412                           ;mcc_generated_files/i2c_host/src/mssp.c: 251:     I2C1_InterruptClear();
 14413  000B' 3180' 2000' 3180'  	fcall	_I2C1_InterruptClear
 14414                           
 14415                           ;mcc_generated_files/i2c_host/src/mssp.c: 252:     I2C1_ErrorInterruptClear();
 14416  000E' 3180' 2000' 3180'  	fcall	_I2C1_ErrorInterruptClear
 14417                           
 14418                           ;mcc_generated_files/i2c_host/src/mssp.c: 253:     I2C1_StatusFlagsClear();
 14419  0011' 3180' 2000'        	fcall	_I2C1_StatusFlagsClear
 14420  0013' 0008               	return
 14421  0014'                    __end_of_I2C1_Close:
 14422                           
 14423                           	psect	text88
 14424  0000'                    __ptext88:	
 14425 ;; *************** function _I2C1_StatusFlagsClear *****************
 14426 ;; Defined at:
 14427 ;;		line 489 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14428 ;; Parameters:    Size  Location     Type
 14429 ;;		None
 14430 ;; Auto vars:     Size  Location     Type
 14431 ;;		None
 14432 ;; Return value:  Size  Location     Type
 14433 ;;                  1    wreg      void 
 14434 ;; Registers used:
 14435 ;;		None
 14436 ;; Tracked objects:
 14437 ;;		On entry : 0/0
 14438 ;;		On exit  : 0/0
 14439 ;;		Unchanged: 0/0
 14440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14441 ;;      Params:         0       0       0       0       0       0       0       0
 14442 ;;      Locals:         0       0       0       0       0       0       0       0
 14443 ;;      Temps:          0       0       0       0       0       0       0       0
 14444 ;;      Totals:         0       0       0       0       0       0       0       0
 14445 ;;Total ram usage:        0 bytes
 14446 ;; Hardware stack levels used: 1
 14447 ;; This function calls:
 14448 ;;		Nothing
 14449 ;; This function is called by:
 14450 ;;		_I2C1_Close
 14451 ;; This function uses a non-reentrant model
 14452 ;;
 14453                           
 14454  0000'                    _I2C1_StatusFlagsClear:	
 14455                           ;psect for function _I2C1_StatusFlagsClear
 14456                           
 14457                           
 14458                           ;mcc_generated_files/i2c_host/src/mssp.c: 491:     SSP1CON1bits.WCOL = 0;
 14459                           
 14460                           ;incstack = 0
 14461 ;; hardware stack exceeded
 14462                           ; Regs used in _I2C1_StatusFlagsClear: []
 14463  0000' 0024               	movlb	4	; select bank4
 14464  0001' 1395               	bcf	21,7	;volatile
 14465                           
 14466                           ;mcc_generated_files/i2c_host/src/mssp.c: 492:     SSP1CON1bits.SSPOV = 0;
 14467  0002' 1315               	bcf	21,6	;volatile
 14468  0003' 0008               	return
 14469  0004'                    __end_of_I2C1_StatusFlagsClear:
 14470                           
 14471                           	psect	text89
 14472  0000'                    __ptext89:	
 14473 ;; *************** function _I2C1_InterruptClear *****************
 14474 ;; Defined at:
 14475 ;;		line 479 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;		None
 14478 ;; Auto vars:     Size  Location     Type
 14479 ;;		None
 14480 ;; Return value:  Size  Location     Type
 14481 ;;                  1    wreg      void 
 14482 ;; Registers used:
 14483 ;;		None
 14484 ;; Tracked objects:
 14485 ;;		On entry : 0/0
 14486 ;;		On exit  : 0/0
 14487 ;;		Unchanged: 0/0
 14488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14489 ;;      Params:         0       0       0       0       0       0       0       0
 14490 ;;      Locals:         0       0       0       0       0       0       0       0
 14491 ;;      Temps:          0       0       0       0       0       0       0       0
 14492 ;;      Totals:         0       0       0       0       0       0       0       0
 14493 ;;Total ram usage:        0 bytes
 14494 ;; Hardware stack levels used: 1
 14495 ;; This function calls:
 14496 ;;		Nothing
 14497 ;; This function is called by:
 14498 ;;		_I2C1_Close
 14499 ;;		_I2C1_EventHandler
 14500 ;; This function uses a non-reentrant model
 14501 ;;
 14502                           
 14503  0000'                    _I2C1_InterruptClear:	
 14504                           ;psect for function _I2C1_InterruptClear
 14505                           
 14506                           
 14507                           ;mcc_generated_files/i2c_host/src/mssp.c: 481:     PIR1bits.SSP1IF = 0;
 14508                           
 14509                           ;incstack = 0
 14510                           ; Regs used in _I2C1_InterruptClear: []
 14511  0000' 0020               	movlb	0	; select bank0
 14512  0001' 1190               	bcf	16,3	;volatile
 14513  0002' 0008               	return
 14514  0003'                    __end_of_I2C1_InterruptClear:
 14515                           
 14516                           	psect	text90
 14517  0000'                    __ptext90:	
 14518 ;; *************** function _I2C1_ErrorInterruptClear *****************
 14519 ;; Defined at:
 14520 ;;		line 484 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14521 ;; Parameters:    Size  Location     Type
 14522 ;;		None
 14523 ;; Auto vars:     Size  Location     Type
 14524 ;;		None
 14525 ;; Return value:  Size  Location     Type
 14526 ;;                  1    wreg      void 
 14527 ;; Registers used:
 14528 ;;		None
 14529 ;; Tracked objects:
 14530 ;;		On entry : 0/0
 14531 ;;		On exit  : 0/0
 14532 ;;		Unchanged: 0/0
 14533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14534 ;;      Params:         0       0       0       0       0       0       0       0
 14535 ;;      Locals:         0       0       0       0       0       0       0       0
 14536 ;;      Temps:          0       0       0       0       0       0       0       0
 14537 ;;      Totals:         0       0       0       0       0       0       0       0
 14538 ;;Total ram usage:        0 bytes
 14539 ;; Hardware stack levels used: 1
 14540 ;; This function calls:
 14541 ;;		Nothing
 14542 ;; This function is called by:
 14543 ;;		_I2C1_Close
 14544 ;;		_I2C1_ErrorEventHandler
 14545 ;; This function uses a non-reentrant model
 14546 ;;
 14547                           
 14548  0000'                    _I2C1_ErrorInterruptClear:	
 14549                           ;psect for function _I2C1_ErrorInterruptClear
 14550                           
 14551                           
 14552                           ;mcc_generated_files/i2c_host/src/mssp.c: 486:     PIR2bits.BCL1IF = 0;
 14553                           
 14554                           ;incstack = 0
 14555 ;; hardware stack exceeded
 14556                           ; Regs used in _I2C1_ErrorInterruptClear: []
 14557  0000' 0020               	movlb	0	; select bank0
 14558  0001' 1191               	bcf	17,3	;volatile
 14559  0002' 0008               	return
 14560  0003'                    __end_of_I2C1_ErrorInterruptClear:
 14561                           
 14562                           	psect	text91
 14563  0000'                    __ptext91:	
 14564 ;; *************** function _I2C1_BusReset *****************
 14565 ;; Defined at:
 14566 ;;		line 404 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14567 ;; Parameters:    Size  Location     Type
 14568 ;;		None
 14569 ;; Auto vars:     Size  Location     Type
 14570 ;;		None
 14571 ;; Return value:  Size  Location     Type
 14572 ;;                  1    wreg      void 
 14573 ;; Registers used:
 14574 ;;		None
 14575 ;; Tracked objects:
 14576 ;;		On entry : 0/0
 14577 ;;		On exit  : 0/0
 14578 ;;		Unchanged: 0/0
 14579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14580 ;;      Params:         0       0       0       0       0       0       0       0
 14581 ;;      Locals:         0       0       0       0       0       0       0       0
 14582 ;;      Temps:          0       0       0       0       0       0       0       0
 14583 ;;      Totals:         0       0       0       0       0       0       0       0
 14584 ;;Total ram usage:        0 bytes
 14585 ;; Hardware stack levels used: 1
 14586 ;; This function calls:
 14587 ;;		Nothing
 14588 ;; This function is called by:
 14589 ;;		_I2C1_EVENT_RESET
 14590 ;; This function uses a non-reentrant model
 14591 ;;
 14592                           
 14593  0000'                    _I2C1_BusReset:	
 14594                           ;psect for function _I2C1_BusReset
 14595                           
 14596                           
 14597                           ;mcc_generated_files/i2c_host/src/mssp.c: 406:     SSP1CON1bits.SSPEN = 0;
 14598                           
 14599                           ;incstack = 0
 14600                           ; Regs used in _I2C1_BusReset: []
 14601  0000' 0024               	movlb	4	; select bank4
 14602  0001' 1295               	bcf	21,5	;volatile
 14603                           
 14604                           ;mcc_generated_files/i2c_host/src/mssp.c: 407:     SSP1CON1bits.SSPEN = 1;
 14605  0002' 1695               	bsf	21,5	;volatile
 14606  0003' 0008               	return
 14607  0004'                    __end_of_I2C1_BusReset:
 14608                           
 14609                           	psect	text92
 14610  0000'                    __ptext92:	
 14611 ;; *************** function _I2C1_DefaultCallback *****************
 14612 ;; Defined at:
 14613 ;;		line 281 in file "mcc_generated_files/i2c_host/src/mssp.c"
 14614 ;; Parameters:    Size  Location     Type
 14615 ;;		None
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;		None
 14618 ;; Return value:  Size  Location     Type
 14619 ;;                  1    wreg      void 
 14620 ;; Registers used:
 14621 ;;		None
 14622 ;; Tracked objects:
 14623 ;;		On entry : 0/0
 14624 ;;		On exit  : 0/0
 14625 ;;		Unchanged: 0/0
 14626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14627 ;;      Params:         0       0       0       0       0       0       0       0
 14628 ;;      Locals:         0       0       0       0       0       0       0       0
 14629 ;;      Temps:          0       0       0       0       0       0       0       0
 14630 ;;      Totals:         0       0       0       0       0       0       0       0
 14631 ;;Total ram usage:        0 bytes
 14632 ;; Hardware stack levels used: 1
 14633 ;; This function calls:
 14634 ;;		Nothing
 14635 ;; This function is called by:
 14636 ;;		_I2C1_Initialize
 14637 ;;		_I2C1_Deinitialize
 14638 ;;		_I2C1_ErrorEventHandler
 14639 ;; This function uses a non-reentrant model
 14640 ;;
 14641                           
 14642  0000'                    _I2C1_DefaultCallback:	
 14643                           ;psect for function _I2C1_DefaultCallback
 14644                           
 14645                           
 14646                           ;incstack = 0
 14647                           ; Regs used in _I2C1_DefaultCallback: []
 14648  0000' 0008               	return
 14649  0001'                    __end_of_I2C1_DefaultCallback:
 14650                           
 14651                           	psect	text93
 14652  0000'                    __ptext93:	
 14653 ;; *************** function _ADC_ISR *****************
 14654 ;; Defined at:
 14655 ;;		line 134 in file "mcc_generated_files/adc/src/adc.c"
 14656 ;; Parameters:    Size  Location     Type
 14657 ;;		None
 14658 ;; Auto vars:     Size  Location     Type
 14659 ;;		None
 14660 ;; Return value:  Size  Location     Type
 14661 ;;                  1    wreg      void 
 14662 ;; Registers used:
 14663 ;;		wreg, status,2, status,0, pclath, cstack
 14664 ;; Tracked objects:
 14665 ;;		On entry : 0/0
 14666 ;;		On exit  : 0/0
 14667 ;;		Unchanged: 0/0
 14668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14669 ;;      Params:         0       0       0       0       0       0       0       0
 14670 ;;      Locals:         0       0       0       0       0       0       0       0
 14671 ;;      Temps:          0       0       0       0       0       0       0       0
 14672 ;;      Totals:         0       0       0       0       0       0       0       0
 14673 ;;Total ram usage:        0 bytes
 14674 ;; Hardware stack levels used: 1
 14675 ;; Hardware stack levels required when called: 1
 14676 ;; This function calls:
 14677 ;;		NULL
 14678 ;;		_ADC_DefaultInterruptHandler
 14679 ;; This function is called by:
 14680 ;;		_INTERRUPT_InterruptManager
 14681 ;; This function uses a non-reentrant model
 14682 ;;
 14683                           
 14684  0000'                    _ADC_ISR:	
 14685                           ;psect for function _ADC_ISR
 14686                           
 14687                           
 14688                           ;mcc_generated_files/adc/src/adc.c: 137:     PIR1bits.ADIF = 0;
 14689                           
 14690                           ;incstack = 0
 14691                           ; Regs used in _ADC_ISR: [wreg+status,2+status,0+pclath+cstack]
 14692  0000' 0020               	movlb	0	; select bank0
 14693  0001' 1310               	bcf	16,6	;volatile
 14694                           
 14695                           ;mcc_generated_files/adc/src/adc.c: 139:  if(ADC_InterruptHandler)
 14696  0002' 0021               	movlb	1	; select bank1
 14697  0003' 0800'              	movf	_ADC_InterruptHandler^(0+128),w
 14698  0004' 0400'              	iorwf	(_ADC_InterruptHandler+1)^(0+128),w
 14699  0005' 1903               	btfsc	3,2
 14700  0006' 0008               	return
 14701                           
 14702                           ;mcc_generated_files/adc/src/adc.c: 140:     {;mcc_generated_files/adc/src/adc.c: 141:  
      +                                 ADC_InterruptHandler();
 14703  0007' 0800'              	movf	(_ADC_InterruptHandler+1)^(0+128),w
 14704  0008' 008A               	movwf	10
 14705  0009' 0800'              	movf	_ADC_InterruptHandler^(0+128),w
 14706  000A' 000A               	callw
 14707  000B' 3180'              	pagesel	$
 14708  000C' 0008               	return
 14709  000D'                    __end_of_ADC_ISR:
 14710                           
 14711                           	psect	text94
 14712  0000'                    __ptext94:	
 14713 ;; *************** function _ADC_DefaultInterruptHandler *****************
 14714 ;; Defined at:
 14715 ;;		line 150 in file "mcc_generated_files/adc/src/adc.c"
 14716 ;; Parameters:    Size  Location     Type
 14717 ;;		None
 14718 ;; Auto vars:     Size  Location     Type
 14719 ;;		None
 14720 ;; Return value:  Size  Location     Type
 14721 ;;                  1    wreg      void 
 14722 ;; Registers used:
 14723 ;;		None
 14724 ;; Tracked objects:
 14725 ;;		On entry : 0/0
 14726 ;;		On exit  : 0/0
 14727 ;;		Unchanged: 0/0
 14728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14729 ;;      Params:         0       0       0       0       0       0       0       0
 14730 ;;      Locals:         0       0       0       0       0       0       0       0
 14731 ;;      Temps:          0       0       0       0       0       0       0       0
 14732 ;;      Totals:         0       0       0       0       0       0       0       0
 14733 ;;Total ram usage:        0 bytes
 14734 ;; Hardware stack levels used: 1
 14735 ;; This function calls:
 14736 ;;		Nothing
 14737 ;; This function is called by:
 14738 ;;		_ADC_Initialize
 14739 ;;		_ADC_ISR
 14740 ;; This function uses a non-reentrant model
 14741 ;;
 14742                           
 14743  0000'                    _ADC_DefaultInterruptHandler:	
 14744                           ;psect for function _ADC_DefaultInterruptHandler
 14745                           
 14746                           
 14747                           ;incstack = 0
 14748                           ; Regs used in _ADC_DefaultInterruptHandler: []
 14749  0000' 0008               	return
 14750  0001'                    __end_of_ADC_DefaultInterruptHandler:
 14751  007E                     btemp	set	126	;btemp
 14752  007E                     int$flags	set	126
 14753  007E                     wtemp0	set	126
 14754                           
 14755                           	psect	config
 14756                           
 14757                           ;Config register CONFIG1 @ 0x8007
 14758                           ;	Oscillator Selection Bits
 14759                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 14760                           ;	Power-up Timer Enable
 14761                           ;	PWRTE = OFF, PWRT disabled
 14762                           ;	MCLR Pin Function Select
 14763                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 14764                           ;	Flash Program Memory Code Protection
 14765                           ;	CP = OFF, Program memory code protection is disabled
 14766                           ;	Brown-out Reset Enable
 14767                           ;	BOREN = ON, Brown-out Reset enabled
 14768                           ;	Clock Out Enable
 14769                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 14770  8007                     	org	32775
 14771  8007  3FFC               	dw	16380
 14772                           
 14773                           ;Config register CONFIG2 @ 0x8008
 14774                           ;	Flash Memory Self-Write Protection
 14775                           ;	WRT = OFF, Write protection off
 14776                           ;	Peripheral Pin Select one-way control
 14777                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
 14778                           ;	Zero Cross Detect Disable Bit
 14779                           ;	ZCD = OFF, ZCD disable. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
 14780                           ;	PLL Enable Bit
 14781                           ;	PLLEN = OFF, 4x PLL is enabled when software sets the SPLLEN bit
 14782                           ;	Stack Overflow/Underflow Reset Enable
 14783                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 14784                           ;	Brown-out Reset Voltage Selection
 14785                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 14786                           ;	Low-Power Brown Out Reset
 14787                           ;	LPBOR = OFF, Low-Power BOR is disabled
 14788                           ;	In-Circuit Debugger Mode
 14789                           ;	DEBUG = 0x1, unprogrammed default
 14790                           ;	Low-Voltage Programming Enable
 14791                           ;	LVP = ON, Low-voltage programming enabled
 14792  8008                     	org	32776
 14793  8008  3EFF               	dw	16127
 14794                           
 14795                           ;Config register CONFIG3 @ 0x8009
 14796                           ;	WDT Period Select
 14797                           ;	WDTCPS = WDTCPS1F, Software Control (WDTPS)
 14798                           ;	Watchdog Timer Enable
 14799                           ;	WDTE = OFF, WDT disabled
 14800                           ;	WDT Window Select
 14801                           ;	WDTCWS = WDTCWSSW, Software WDT window size control (WDTWS bits)
 14802                           ;	WDT Input Clock Selector
 14803                           ;	WDTCCS = SWC, Software control, controlled by WDTCS bits
 14804  8009                     	org	32777
 14805  8009  3F9F               	dw	16287

Data Sizes:
    Strings     214
    Constant    86
    Data        24
    BSS         75
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     80      80
    BANK1            80     37      76
    BANK2            80      0      56
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), NULL(), 

    ADC_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_DefaultInterruptHandler(), 

    __assert_fail@expr	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_10(CODE[36]), STR_16(CODE[55]), STR_4(CODE[43]), 

    __assert_fail@file	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_11(CODE[7]), STR_17(CODE[7]), STR_5(CODE[7]), 

    __assert_fail@func	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_12(CODE[13]), STR_18(CODE[13]), STR_6(CODE[12]), 

    EUSART_FramingErrorCallbackRegister@callbackHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorCallback(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorCallback(), NULL(), 

    EUSART_OverrunErrorCallbackRegister@callbackHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorCallback(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorCallback(), NULL(), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    funcs	PTR FTN()void [3] size(2) Largest target is 0

    __funcs_on_exit@func	PTR FTN()void  size(2) Largest target is 0

    I2C1_Callback	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_DefaultCallback(), NULL(), 

    I2C1_CallbackRegister@callbackHandler	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_DefaultCallback(), 

    i2c1_eventTable	const PTR FTN()enum E9544[9] size(2) Largest target is 1
		 -> I2C1_EVENT_ERROR(), I2C1_EVENT_IDLE(), I2C1_EVENT_NACK(), I2C1_EVENT_RESET(), 
		 -> I2C1_EVENT_RX(), I2C1_EVENT_SEND_RD_ADDR(), I2C1_EVENT_SEND_WR_ADDR(), I2C1_EVENT_STOP(), 
		 -> I2C1_EVENT_TX(), 

    i2c1Status$readPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c1Status$writePtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_Host$CallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> I2C1_CallbackRegister(), 

    I2C_Host$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_Deinitialize(), 

    I2C_Host$ErrorGet	PTR FTN()enum E9535 size(2) Largest target is 1
		 -> I2C1_ErrorGet(), 

    I2C_Host$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_Initialize(), 

    I2C_Host$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> I2C1_IsBusy(), 

    I2C_Host$Read	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_Read(), 

    I2C_Host$Tasks	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    I2C_Host$TransferSetup	PTR FTN(PTR struct .,unsigned long ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    I2C_Host$Write	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_Write(), 

    I2C_Host$WriteRead	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_WriteRead(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), NULL(), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    KAPS_getIndex@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_getPos@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_getStatus@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_GoToIdx@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_setAbsPos@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_setRelPos@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    KAPS_StorePos@kaps	PTR struct . size(1) Largest target is 7
		 -> kaps(BANK1[7]), 

    packLong@data	PTR unsigned char  size(1) Largest target is 12
		 -> main@parser(BANK1[12]), 

    Parse@parser	PTR struct . size(1) Largest target is 12
		 -> main@parser(BANK1[12]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    ProcessMsg@data	PTR unsigned char  size(1) Largest target is 12
		 -> main@parser(BANK1[12]), 

    S189$2$1	PTR unsigned char  size(2) Largest target is 0

    S189$3$1	PTR unsigned char  size(2) Largest target is 0

    S189$4$1	PTR unsigned char  size(2) Largest target is 0

    S189$4$3	PTR unsigned char  size(2) Largest target is 0

    S189$8$0	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_DefaultCallback(), 

    S189$CallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> I2C1_CallbackRegister(), 

    S189$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_Deinitialize(), 

    S189$ErrorGet	PTR FTN()enum E9535 size(2) Largest target is 1
		 -> I2C1_ErrorGet(), 

    S189$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> I2C1_Initialize(), 

    S189$IsBusy	PTR FTN()_Bool  size(2) Largest target is 1
		 -> I2C1_IsBusy(), 

    S189$Read	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_Read(), 

    S189$Tasks	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    S189$TransferSetup	PTR FTN(PTR struct .,unsigned long ,)_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S189$Write	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_Write(), 

    S189$WriteRead	PTR FTN(unsigned short ,PTR unsigned char ,unsigned int ,PTR unsigned char ,unsigned int ,)_Bool  size(2) Largest target is 1
		 -> I2C1_WriteRead(), 

    S1980$buffer	PTR unsigned char  size(2) Largest target is 0

    S1980$source	PTR const unsigned char  size(2) Largest target is 0

    S288$readPtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S288$writePtr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S996$20$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorCallback(), 

    S996$21$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorCallback(), 

    S996$AutoBaudEventEnableGet	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NULL(), 

    S996$AutoBaudQuery	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_AutoBaudQuery(), 

    S996$AutoBaudSet	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> EUSART_AutoBaudSet(), 

    S996$BaudRateGet	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> NULL(), 

    S996$BaudRateSet	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$BRGCountGet	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> NULL(), 

    S996$BRGCountSet	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Deinitialize(), 

    S996$ErrorGet	PTR FTN()unsigned int  size(2) Largest target is 2
		 -> EUSART_ErrorGet(), 

    S996$EventCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$FramingErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_FramingErrorCallbackRegister(), 

    S996$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S996$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsRxReady(), 

    S996$IsTxDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsTxDone(), 

    S996$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsTxReady(), 

    S996$OverrunErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_OverrunErrorCallbackRegister(), 

    S996$ParityErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    S996$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$TransmitDisable	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_TransmitDisable(), 

    S996$TransmitEnable	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_TransmitEnable(), 

    S996$TxCollisionCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    S996$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    SendMsg@data	PTR unsigned char  size(1) Largest target is 12
		 -> main@parser(BANK1[12]), ProcessMsg@payload(BANK1[6]), SendNack@error(BANK0[1]), 

    SSPA_getPOut@sspa	PTR struct . size(1) Largest target is 24
		 -> sppas(BANK2[24]), 

    SSPA_getTemp@sspa	PTR struct . size(1) Largest target is 24
		 -> sppas(BANK2[24]), 

    SSPA_setMute@sspa	PTR struct . size(1) Largest target is 24
		 -> sppas(BANK2[24]), 

    UART$AutoBaudEventEnableGet	PTR FTN()_Bool  size(2) Largest target is 1
		 -> NULL(), 

    UART$AutoBaudQuery	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_AutoBaudQuery(), 

    UART$AutoBaudSet	PTR FTN(_Bool ,)void  size(2) Largest target is 1
		 -> EUSART_AutoBaudSet(), 

    UART$BaudRateGet	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> NULL(), 

    UART$BaudRateSet	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$BRGCountGet	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> NULL(), 

    UART$BRGCountSet	PTR FTN(unsigned long ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$Deinitialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Deinitialize(), 

    UART$ErrorGet	PTR FTN()unsigned int  size(2) Largest target is 2
		 -> EUSART_ErrorGet(), 

    UART$EventCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$FramingErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_FramingErrorCallbackRegister(), 

    UART$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    UART$IsRxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsRxReady(), 

    UART$IsTxDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsTxDone(), 

    UART$IsTxReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_IsTxReady(), 

    UART$OverrunErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_OverrunErrorCallbackRegister(), 

    UART$ParityErrorCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    UART$RxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$TransmitDisable	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_TransmitDisable(), 

    UART$TransmitEnable	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_TransmitEnable(), 

    UART$TxCollisionCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$TxCompleteCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> NULL(), 

    UART$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    unpackLong@data	PTR unsigned char  size(1) Largest target is 6
		 -> ProcessMsg@payload(BANK1[6]), 

    unpackWord@data	PTR unsigned char  size(1) Largest target is 6
		 -> ProcessMsg@payload(BANK1[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    vfpfcnvrt@cp_2048	PTR unsigned char  size(2) Largest target is 55
		 -> ?_printf(BANK0[2]), STR_10(CODE[36]), STR_11(CODE[7]), STR_12(CODE[13]), 
		 -> STR_16(CODE[55]), STR_17(CODE[7]), STR_18(CODE[13]), STR_4(CODE[43]), 
		 -> STR_5(CODE[7]), STR_6(CODE[12]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 35
		 -> STR_19(CODE[35]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _I2C1_ISR->_I2C1_EventHandler
    _I2C1_EventHandler->_I2C1_EVENT_TX
    _I2C1_ERROR_ISR->_I2C1_ErrorEventHandler
    _I2C1_ErrorEventHandler->_I2C1_EVENT_TX
    _I2C1_EVENT_TX->_I2C1_DataTransmit
    _I2C1_EVENT_SEND_WR_ADDR->_I2C1_DataTransmit

Critical Paths under _main in BANK0

    _INTERRUPT_Initialize->_INT_SetInterruptHandler
    _I2C1_Initialize->_I2C1_CallbackRegister
    _EUSART_Initialize->_EUSART_FramingErrorCallbackRegister
    _EUSART_Initialize->_EUSART_OverrunErrorCallbackRegister
    _ADC_Initialize->_ADC_SetInterruptHandler
    _SendNack->_SendMsg
    _SendMsg->_EUSART_Write
    _SSPA_getTemp->___fltol
    _SSPA_getPOut->___fltol
    _getADCValue->___assert_fail
    ___assert_fail->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _abort->_exit
    _exit->__Exit
    ___fltol->___fldiv
    ___flsub->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flsub
    _KAPS_setRelPos->_packLong
    _KAPS_setAbsPos->_packLong
    _KAPS_StorePos->_packLong

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Parse
    _Parse->_ProcessMsg
    _ProcessMsg->_SSPA_getPOut
    _ProcessMsg->_SSPA_getTemp
    _SSPA_getTemp->___fltol
    _SSPA_getPOut->___fltol

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   56814
                                             24 BANK1     13    13      0
                   _EUSART_IsRxReady
                        _EUSART_Read
                              _Parse
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     788
                     _ADC_Initialize
                   _CLOCK_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0     121
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0     242
              _I2C1_CallbackRegister
              _I2C1_InterruptsEnable
 ---------------------------------------------------------------------------------
 (3) _I2C1_InterruptsEnable                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C1_CallbackRegister                                2     0      2     242
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     304
_EUSART_FramingErrorCallbackRegister
_EUSART_OverrunErrorCallbackRegister
 ---------------------------------------------------------------------------------
 (3) _EUSART_OverrunErrorCallbackRegister                  2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_FramingErrorCallbackRegister                  2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0     121
            _ADC_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _ADC_SetInterruptHandler                              2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Parse                                                4     3      1   55670
                                             20 BANK1      4     3      1
                         _ProcessMsg
                            _SendMsg
                           _SendNack
 ---------------------------------------------------------------------------------
 (2) _SendNack                                             1     1      0    2097
                                              6 BANK0      1     1      0
                            _SendMsg
 ---------------------------------------------------------------------------------
 (2) _ProcessMsg                                           9     8      1   49899
                                             11 BANK1      9     8      1
                       _KAPS_GoToIdx
                      _KAPS_StorePos
                      _KAPS_getIndex
                        _KAPS_getPos
                     _KAPS_getStatus
                     _KAPS_setAbsPos
                     _KAPS_setRelPos
                       _SSPA_getPOut
                       _SSPA_getTemp
                       _SSPA_setMute
                            _SendMsg
                           _packLong
                         _unpackLong
                         _unpackWord
 ---------------------------------------------------------------------------------
 (3) _unpackWord                                           3     0      3     304
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _unpackLong                                           9     4      5     480
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _packLong                                            13     9      4     214
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (3) _SendMsg                                              5     3      2    2060
                                              1 BANK0      5     3      2
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         1     0      1     391
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (3) _SSPA_setMute                                         3     1      2     371
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _SSPA_getTemp                                         7     6      1   22160
                                              4 BANK1      7     6      1
                      ___assert_fail
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                        _getADCValue
 ---------------------------------------------------------------------------------
 (3) _SSPA_getPOut                                         7     6      1   22312
                                              4 BANK1      7     6      1
                      ___assert_fail
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                        _getADCValue
 ---------------------------------------------------------------------------------
 (4) _getADCValue                                          8     6      2    6152
                                             56 BANK0      8     6      2
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                      ___assert_fail
 ---------------------------------------------------------------------------------
 (5) ___assert_fail                                        8     0      8    5985
                                             48 BANK0      8     0      8
                              _abort
                             _printf
 ---------------------------------------------------------------------------------
 (6) _printf                                              13     3     10    4567
                                             37 BANK0     11     1     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (7) _vfprintf                                             8     3      5    4390
                                             29 BANK0      8     3      5
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (8) _vfpfcnvrt                                           18    14      4    3905
                                             11 BANK0     18    14      4
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                9     5      4    1137
                                              0 BANK0      9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (9) _abs                                                  4     2      2     142
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awmod                                              7     3      4     613
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              9     5      4     625
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (6) _abort                                                0     0      0     214
                               _exit
 ---------------------------------------------------------------------------------
 (7) _exit                                                 2     0      2     214
                                              2 BANK0      2     0      2
                              __Exit
                    ___funcs_on_exit
 ---------------------------------------------------------------------------------
 (8) ___funcs_on_exit                                      3     3      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) __Exit                                                2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_SelectChannel                                    2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     626
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     533
                                             74 BANK0      6     2      4
                                              0 BANK1      4     4      0
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    2921
                                             40 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    2136
                                              0 BANK0     20    12      8
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             26    18      8    3893
                                             14 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) __Umul8_16                                            9     7      2     980
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             26    18      8    1729
                                             48 BANK0     26    18      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _KAPS_setRelPos                                       5     1      4     145
                                             13 BANK0      5     1      4
                           _packLong (ARG)
 ---------------------------------------------------------------------------------
 (3) _KAPS_setAbsPos                                       5     1      4     145
                                             13 BANK0      5     1      4
                           _packLong (ARG)
 ---------------------------------------------------------------------------------
 (3) _KAPS_getStatus                                       1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _KAPS_getPos                                          1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _KAPS_getIndex                                        1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _KAPS_StorePos                                        6     1      5     235
                                             13 BANK0      6     1      5
                           _packLong (ARG)
 ---------------------------------------------------------------------------------
 (3) _KAPS_GoToIdx                                         2     1      1     188
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _EUSART_Read                                          0     0      0       0
                                NULL *
 _EUSART_DefaultFramingErrorCallback *
 _EUSART_DefaultOverrunErrorCallback *
 ---------------------------------------------------------------------------------
 (2) _EUSART_DefaultOverrunErrorCallback                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_DefaultFramingErrorCallback                   0     0      0       0
 ---------------------------------------------------------------------------------
 (14) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_IsRxReady                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0     328
                            _ADC_ISR
                     _I2C1_ERROR_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (12) _I2C1_ISR                                            0     0      0     164
                  _I2C1_EventHandler
 ---------------------------------------------------------------------------------
 (13) _I2C1_EventHandler                                   2     2      0     164
                                              4 COMMON     2     2      0
                   _I2C1_EVENT_ERROR *
                    _I2C1_EVENT_IDLE *
                    _I2C1_EVENT_NACK *
                   _I2C1_EVENT_RESET *
                      _I2C1_EVENT_RX *
            _I2C1_EVENT_SEND_RD_ADDR *
            _I2C1_EVENT_SEND_WR_ADDR *
                    _I2C1_EVENT_STOP *
                      _I2C1_EVENT_TX *
                _I2C1_InterruptClear
                        _I2C1_IsAddr
                        _I2C1_IsData
                        _I2C1_IsNack
 ---------------------------------------------------------------------------------
 (14) _I2C1_IsNack                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_IsData                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_IsAddr                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _I2C1_ERROR_ISR                                      0     0      0     164
             _I2C1_ErrorEventHandler
 ---------------------------------------------------------------------------------
 (13) _I2C1_ErrorEventHandler                              2     2      0     164
                                              4 COMMON     2     2      0
                                NULL *
               _I2C1_DefaultCallback *
                   _I2C1_EVENT_ERROR *
                    _I2C1_EVENT_IDLE *
                    _I2C1_EVENT_NACK *
                   _I2C1_EVENT_RESET *
                      _I2C1_EVENT_RX *
            _I2C1_EVENT_SEND_RD_ADDR *
            _I2C1_EVENT_SEND_WR_ADDR *
                    _I2C1_EVENT_STOP *
                      _I2C1_EVENT_TX *
           _I2C1_ErrorInterruptClear
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_TX                                       3     3      0      48
                                              1 COMMON     3     3      0
                  _I2C1_DataTransmit
                    _I2C1_EVENT_STOP
                 _I2C1_RestartEnable
 ---------------------------------------------------------------------------------
 (15) _I2C1_RestartEnable                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_SEND_WR_ADDR                             0     0      0      22
                  _I2C1_DataTransmit
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_SEND_RD_ADDR                             0     0      0      22
                  _I2C1_DataTransmit
 ---------------------------------------------------------------------------------
 (15) _I2C1_DataTransmit                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_RX                                       2     2      0      24
                                              0 COMMON     2     2      0
                       _I2C1_AckSend
                   _I2C1_DataReceive
                   _I2C1_IsRxBufFull
                      _I2C1_NackSend
                 _I2C1_ReceiveEnable
                _I2C1_RestartDisable
 ---------------------------------------------------------------------------------
 (15) _I2C1_RestartDisable                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_ReceiveEnable                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_NackSend                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_IsRxBufFull                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_DataReceive                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _I2C1_AckSend                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_NACK                                     1     1      0      24
                                              0 COMMON     1     1      0
                    _I2C1_EVENT_STOP
 ---------------------------------------------------------------------------------
 (15) _I2C1_EVENT_STOP                                     0     0      0       0
                         _I2C1_Close
                      _I2C1_StopSend
 ---------------------------------------------------------------------------------
 (16) _I2C1_StopSend                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _I2C1_Close                                          0     0      0       0
           _I2C1_ErrorInterruptClear
                _I2C1_InterruptClear
              _I2C1_StatusFlagsClear
 ---------------------------------------------------------------------------------
 (17) _I2C1_StatusFlagsClear                               0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_InterruptClear                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (17) _I2C1_ErrorInterruptClear                            0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_IDLE                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_ERROR                                    1     1      0      24
                                              0 COMMON     1     1      0
                   _I2C1_EVENT_RESET
 ---------------------------------------------------------------------------------
 (14) _I2C1_EVENT_RESET                                    0     0      0       0
                      _I2C1_BusReset
 ---------------------------------------------------------------------------------
 (15) _I2C1_BusReset                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _I2C1_DefaultCallback                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC_ISR                                             0     0      0       0
                                NULL *
        _ADC_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _ADC_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (14) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_IsRxReady
   _EUSART_Read
     NULL(Fake) *
     _EUSART_DefaultFramingErrorCallback *
     _EUSART_DefaultOverrunErrorCallback *
   _Parse
     _ProcessMsg
       _KAPS_GoToIdx
       _KAPS_StorePos
         _packLong (ARG)
       _KAPS_getIndex
       _KAPS_getPos
       _KAPS_getStatus
       _KAPS_setAbsPos
         _packLong (ARG)
       _KAPS_setRelPos
         _packLong (ARG)
       _SSPA_getPOut
         ___assert_fail
           _abort
             _exit
               __Exit
               ___funcs_on_exit
           _printf
             _vfprintf
               _vfpfcnvrt
                 ___awdiv
                 ___awmod
                 _abs
                   ___awmod (ARG)
                 _fputc
                   _putch
         ___fldiv
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___flsub (ARG)
             ___fladd
             ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
         ___flsub
         ___fltol
           ___fldiv (ARG)
           ___flmul (ARG)
           ___flsub (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _getADCValue
           _ADC_GetConversionResult
           _ADC_IsConversionDone
           _ADC_SelectChannel
           _ADC_StartConversion
           ___assert_fail
       _SSPA_getTemp
         ___assert_fail
         ___fldiv
         ___flmul
         ___flsub
         ___fltol
         ___xxtofl
         _getADCValue
       _SSPA_setMute
       _SendMsg
         _EUSART_Write
       _packLong
       _unpackLong
       _unpackWord
     _SendMsg
     _SendNack
       _SendMsg
   _SYSTEM_Initialize
     _ADC_Initialize
       _ADC_SetInterruptHandler
     _CLOCK_Initialize
     _EUSART_Initialize
       _EUSART_FramingErrorCallbackRegister
       _EUSART_OverrunErrorCallbackRegister
     _I2C1_Initialize
       _I2C1_CallbackRegister
       _I2C1_InterruptsEnable
     _INTERRUPT_Initialize
       _INT_SetInterruptHandler
     _PIN_MANAGER_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     NULL(Fake) *
     _ADC_DefaultInterruptHandler *
   _I2C1_ERROR_ISR
     _I2C1_ErrorEventHandler
       NULL(Fake) *
       _I2C1_DefaultCallback *
       _I2C1_EVENT_ERROR *
         _I2C1_EVENT_RESET
           _I2C1_BusReset
       _I2C1_EVENT_IDLE *
       _I2C1_EVENT_NACK *
         _I2C1_EVENT_STOP
           _I2C1_Close
             _I2C1_ErrorInterruptClear
             _I2C1_InterruptClear
             _I2C1_StatusFlagsClear
           _I2C1_StopSend
       _I2C1_EVENT_RESET *
       _I2C1_EVENT_RX *
         _I2C1_AckSend
         _I2C1_DataReceive
         _I2C1_IsRxBufFull
         _I2C1_NackSend
         _I2C1_ReceiveEnable
         _I2C1_RestartDisable
       _I2C1_EVENT_SEND_RD_ADDR *
         _I2C1_DataTransmit
       _I2C1_EVENT_SEND_WR_ADDR *
         _I2C1_DataTransmit
       _I2C1_EVENT_STOP *
       _I2C1_EVENT_TX *
         _I2C1_DataTransmit
         _I2C1_EVENT_STOP
         _I2C1_RestartEnable
       _I2C1_ErrorInterruptClear *
   _I2C1_ISR
     _I2C1_EventHandler
       _I2C1_EVENT_ERROR *
       _I2C1_EVENT_IDLE *
       _I2C1_EVENT_NACK *
       _I2C1_EVENT_RESET *
       _I2C1_EVENT_RX *
       _I2C1_EVENT_SEND_RD_ADDR *
       _I2C1_EVENT_SEND_WR_ADDR *
       _I2C1_EVENT_STOP *
       _I2C1_EVENT_TX *
       _I2C1_InterruptClear *
       _I2C1_IsAddr *
       _I2C1_IsData *
       _I2C1_IsNack *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      E0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     25      4C       8       95.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      38      10       70.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      E0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Jul 09 15:59:51 2024

                                      ___fldiv@aexp 0049                                        ___fldiv@bexp 0048  
                            ??_I2C1_DefaultCallback 0000                                        ___fldiv@sign 0041  
                                      ___awdiv@sign 0006         __end_of_EUSART_OverrunErrorCallbackRegister 000D  
             ??_EUSART_OverrunErrorCallbackRegister 0002                ?_EUSART_OverrunErrorCallbackRegister 0000  
               _EUSART_OverrunErrorCallbackRegister 0000                                     ??_I2C1_NackSend 0000  
                                   ??_I2C1_BusReset 0000                                       ?_KAPS_GoToIdx 0000  
                                     _KAPS_StorePos 0000                                  ___assert_fail@file 0032  
                                      _SSPA_getPOut 0000                                  ___assert_fail@func 0036  
                                ___assert_fail@line 0034                                  ___assert_fail@expr 0030  
                                      _SSPA_getTemp 0000                                 __Umul8_16@word_mpld 0006  
                                               l709 0001                                                 l690 0012  
                                               l682 0009                                                 l762 0172  
                                               l791 0142                                        ?_KAPS_getPos 0000  
                                               _abs 0000                           __end_of_I2C1_DataTransmit 0005  
                                   __end_of_ADC_ISR 000D                     __end_of_ADC_SetInterruptHandler 0009  
                                      ___awmod@sign 0006                                                 wreg 0009  
                          _I2C1_ErrorInterruptClear 0000                                        _SSPA_setMute 0000  
                                      ___flmul@aexp 001C                                        ___flmul@bexp 0021  
                      ?_ADC_DefaultInterruptHandler 0000                                       SendMsg@msg_id 0005  
                                      ___flmul@sign 001B                                        ___flmul@temp 0026  
                                      ___flmul@prod 0022                                       _KAPS_getIndex 0000  
                                      ?_EUSART_Read 0000                                        _BAUD1CONbits 019F  
                                  __end_of_I2C1_ISR 0003                                        ___fltol@exp1 004F  
                                              l1210 01AC                                                l1202 0194  
                                              ?_abs 0007                                                l1224 0043  
                                              l1321 0066                                                l1322 0070  
                                              l1314 0052                                                l1172 00B4  
                                              l1068 0050                                                l1308 001E  
                                              l1245 014A                                                l1246 0162  
                                              l1174 0099                                                l1248 016D  
                                              l1168 0045                                                l1345 0000  
                                              l1283 0011                                                l1276 0203  
                                              l1189 0135                                                l3501 015D  
                                              l5101 000C                                                l5031 016F  
                                              l3511 0168                                                l3431 009F  
                                              l3423 006D                                                l5111 0003  
                                              l5033 0186                                                l3433 00A1  
                                              l3441 00AF                                                l5113 0005  
                                              l5105 0015                                                l5043 019F  
                                              l3507 0166                                                l3363 0019  
                                              l5107 0020                                                l5053 01C8  
                                              l3533 01A8                                                l3365 0021  
                                              l5125 002F                                                l5117 0008  
                                              l5063 01F4                                                l5039 019D  
                                              l3383 003A                                                l3359 0016  
                                              l3623 0011                                                l5135 007B  
                                              l5151 016D                                                l5119 0013  
                                              l3713 006E                                                l5057 01DD  
                                              l3529 01A4                                                l3457 00D2  
                                              l3449 00C2                                                l3393 004F  
                                              l3641 004C                                                l3707 0062  
                                              l3459 00D4                                                l3467 00E3  
                                              l3387 003D                                                l3619 0008  
                                              l5171 0013                                                l5323 00BF  
                                              l5307 005E                                                l3733 00B5  
                                              l3741 0097                                                l3493 0154  
                                              l3485 0147                                                l3477 012D  
                                              l4701 0045                                                l5149 0161  
                                              l5341 0126                                                l5317 00AF  
                                              l5501 0134                                                l5421 00B6  
                                              l5413 007F                                                l5405 005D  
                                              l3743 00D3                                                l3639 003C  
                                              l5343 0137                                                l5335 00EE  
                                              l3673 0016                                                l3649 005D  
                                              l4705 004D                                                l4721 0012  
                                              l5185 002D                                                l5337 010B  
                                              l5329 00DE                                                l5433 010B  
                                              l5425 00DF                                                l5409 006E  
                                              l3739 00CE                                                l3499 015B  
                                              l4731 0024                                                l4811 00BF  
                                              l5099 0003                                                l5339 0115  
                                              l5347 014F                                                l5435 0117  
                                              l5419 0090                                                l5443 0129  
                                              l5373 001F                                                l5365 0011  
                                              l3765 0107                                                l3757 00D9  
                                              l3693 0038                                                l3677 0019  
                                              l4717 000B                                                l5293 0003  
                                              l5437 011A                                                l3759 00F0  
                                              l3679 0021                                                l3951 002D  
                                              l4743 0041                                                l4735 0030  
                                              l4751 0009                                                l5439 0120  
                                              l5391 0021                                                l3793 0169  
                                              l3769 0109                                                l3697 003B  
                                              l3945 0016                                                l4673 000B  
                                              l4729 0018                                                l4753 000D  
                                              l4809 00A2                                                l4921 001C  
                                              l5385 0011                                                l5465 0007  
                                              l3779 0132                                                l3955 002F  
                                              l4691 002A                                                l4739 0039  
                                              l4819 00D4                                                l4843 0149  
                                              l5299 0022                                                l5395 0036  
                                              l5387 0015                                                l5379 0003  
                                              l3965 0064                                                l3957 003F  
                                              l4757 0034                                                l4837 0120  
                                              l4829 0111                                                l4917 000E  
                                              l4951 0018                                                l3967 0057  
                                              l4767 0000                                                l4679 0016  
                                              l4839 013F                                                l4791 0061  
                                              l4783 003C                                                l4855 0005  
                                              l5399 0047                                                l4953 0020  
                                              l4697 003C                                                l4689 001E  
                                              l4857 0019                                                l4971 0041  
                                              l3979 008B                                                l4949 0016  
                                              l4797 005E                                                l4967 0037  
                                              l4799 0093                                                l4889 000B  
                                              l4969 0039                                                l4979 004F  
                                              STR_1 0000                                                STR_2 0000  
                                              STR_3 0000                                                STR_7 0000  
                                              STR_9 0000                                   _I2C1_Deinitialize 0000  
                                              u3005 0148                                                _LATA 010C  
                                              _LATB 010D                                                _LATC 010E  
                                              u3105 017F                                                u3305 0054  
                                              u4105 000B                                                u4115 0022  
                                              u5005 0012                                                u3245 0021  
                                              u4125 003A                                                u4135 0012  
                                              u3425 009F                                                u4145 0027  
                                              u3515 00E5                                                u3435 00A6  
                                              u3275 003D                                                u4155 003C  
                                              u3605 0154                                                u5205 017B  
                                              u5045 002A                                                u3455 00AF  
                                              u5135 00BF                                                u2840 008C  
                                              u3465 00C3                                                u5145 00EA  
                                              u2850 008D                                                u5155 0138  
                                              u2835 0081                                                u5165 014F  
                                              u3495 00DC                                                u5175 015E  
                                              u4615 0021                                                u3585 0120  
                                              u5185 0172                                                u3595 013B  
                                              u5275 01B6                                                u2963 00F5  
                                              u2955 00D8                                                u3915 0038  
                                              u4635 002B                                                u4715 001B  
                                              u5435 000E                                                u5285 01D1  
                                              u2885 00A5                                                u4645 0035  
                                              u4805 0032                                                u5445 002D  
                                              u5295 01E7                                                u3935 004C  
                                              u4655 003D                                                u4735 002A  
                                              u5455 0042                                                u4745 0031  
                                              u5465 0069                                                u4850 005B  
                                              u3955 005E                                                u5475 007E  
                                              u4860 005C                                                u5485 008F  
                                              u5495 0102                                                u3995 0078  
                                              _UART 0000                                                _WPUA 020C  
                                              _WPUB 020D                                                _WPUC 020E  
                                              abs@a 0007                                     ??_I2C1_StopSend 0000  
                                              _dbuf 0000                                                _main 0000  
                                              _kaps 001E                                                _exit 0000  
                                              _prec 0016                                    __end_of_I2C_Host 0014  
                                              fsr0h 0005                                                fsr1h 0007  
                                              indf0 0000                                                fsr0l 0004  
                                              indf1 0001                                                fsr1l 0006  
                                              btemp 007E                         _INT_DefaultInterruptHandler 0000  
                                              start 0000*         __end_of_EUSART_DefaultOverrunErrorCallback 0004  
              ??_EUSART_DefaultOverrunErrorCallback 0000                 ?_EUSART_DefaultOverrunErrorCallback 0000  
                _EUSART_DefaultOverrunErrorCallback 0000                                     ___fldiv@new_exp 0042  
                   __end_of_INT_SetInterruptHandler 0006                                       ___assert_fail 0000  
                                   _I2C1_EVENT_IDLE 0000                                     _I2C1_EVENT_NACK 0000  
                                        _i2c1Status 0000                                     _I2C1_EVENT_STOP 0000  
                                             ??_abs 0009                                     __end_of_SendMsg 0032  
                                    ??_KAPS_GoToIdx 0001                                      ?_KAPS_StorePos 000D  
                                    _KAPS_getStatus 0000                                       ?_EUSART_Write 0000  
                                     ___fltol@sign1 004E                                     __end_of___fladd 01B2  
                                             ?_main 0000                                               ?_exit 0002  
                                   __end_of___fldiv 0170                                     __end_of___awdiv 0052  
                                             STR_10 0000                                               STR_11 0000  
                                             STR_12 0000                                               STR_13 0000  
                                             STR_15 0000                                               STR_16 0000  
                                             STR_17 0000                                               STR_18 0000  
                                             STR_19 0000                                     __end_of___awmod 0046  
                                   __end_of___flmul 0210                                     __end_of___flsub 001F  
                                   __end_of___fltol 006C                                     ___awdiv@divisor 0000  
                                             _IOCAF 0393                                               _IOCBF 0396  
                                             _IOCCF 0399                                               _IOCAN 0392  
                                             _IOCAP 0391                                               _IOCBN 0395  
                                             _IOCBP 0394                                               _IOCCN 0398  
                                             _IOCCP 0397                                               i1l450 0018  
                                             i1l455 0020                                               i1l448 000E  
                                   ___awdiv@counter 0005                                        vfpfcnvrt@fmt 000D  
                                             _TRISA 008C                                               _TRISB 008D  
                                             _TRISC 008E                                               _RXPPS 0E24  
                          ?_I2C1_EVENT_SEND_RD_ADDR 0000                                               _Parse 0000  
                                    ?_KAPS_getIndex 0000                                               __Exit 0000  
                                 ??_I2C1_Initialize 0002                                               _abort 0000  
                                             _flags 0004                                     SendMsg@data_len 0002  
                           ??_I2C1_CallbackRegister 0002                                               _count 0005  
                                             _funcs 000E                                               _fputc 0000  
                                 ?_I2C1_IsRxBufFull 0000                                    ProcessMsg@msg_id 000D  
                          ?_I2C1_EVENT_SEND_WR_ADDR 0000                                               _width 0014  
                                             _sppas 0000                                               _putch 0000  
                                             pclath 000A                               I2C1_DataTransmit@data 0000  
                                    _KAPS_setAbsPos 0000                                  ??_I2C1_IsRxBufFull 0000  
                                             status 0003                                               wtemp0 007E  
                                    _KAPS_setRelPos 0000                                      ?___assert_fail 0030  
                                      ??_I2C1_Close 0000                                          SendMsg@sum 0004  
                                      __end_of_UART 0030                                     __initialization 0000  
                          ??_I2C1_ErrorEventHandler 0004                                        __end_of_main 0019  
                            __end_of_KAPS_getStatus 0001                                        __end_of_exit 000B  
                                    getADCValue@avg 003D                                    _I2C1_EVENT_ERROR 0000  
                                    ??_EUSART_Write 0001                                    _I2C1_EVENT_RESET 0000  
                                         ??_ADC_ISR 0000                         ?_INTERRUPT_InterruptManager 0000  
                                  __end_of_SendNack 000A                                              ??_main 0050  
                                            ??_exit 0004                                    SSPA_setMute@band 0000  
                                  SSPA_setMute@mute 0001                                    SSPA_setMute@sspa 0002  
EUSART_OverrunErrorCallbackRegister@callbackHandler 0000  EUSART_FramingErrorCallbackRegister@callbackHandler 0000  
              I2C1_CallbackRegister@callbackHandler 0000                                              ?_Parse 0014  
                                            ?__Exit 0000                                  __end_of_I2C1_Close 0014  
                                            ?_abort 0000                                              _ADCON0 009D  
                                            _ADCON1 009E                                              _ADCON2 009F  
                        _EUSART_OverrunErrorHandler 0018                               _I2C1_InterruptsEnable 0000  
                                            ?_fputc 0000                                              _ADRESH 009C  
                                            _ADRESL 009B                              __end_of_KAPS_setAbsPos 0001  
                                  ___awdiv@dividend 0002                                              _ANSELA 018C  
                                            ?_putch 0000                                              _ANSELB 018D  
                                            _ANSELC 018E                                              _BORCON 0116  
                                 KAPS_setAbsPos@pos 000D                                              _RC1REG 0199  
                                            _RC1STA 019D                                              _RC2PPS 0EA2  
                                            _RB5PPS 0E9D                                              _RB6PPS 0E9E  
                                            _ODCONA 028C                                              _ODCONB 028D  
                                            _ODCONC 028E                                              i1l4031 001A  
                                            i1l4041 0027                                              i1l4061 002C  
                                            i1l4039 0024                                              i1l4057 0024  
                                            i1l4065 0035                                              i1l4067 0037  
                                            i1l4251 0025                                              i1l4245 0014  
                                            _INLVLA 038C                                              _INLVLB 038D  
                                            _INLVLC 038E                                              _OSCCON 0099  
                            __end_of_KAPS_setRelPos 0001                                       vfpfcnvrt@done 0017  
                                            _SPBRGH 019C                                              _SPBRGL 019B  
                                            _TX1REG 019A                                              _TX1STA 019E  
                           __end_of_I2C1_EVENT_IDLE 0004                                    __end_of___xxtofl 0094  
                           __end_of_I2C1_EVENT_NACK 0005                             __end_of_I2C1_EVENT_STOP 0007  
                                KAPS_getStatus@kaps 0000                               SSPA_getPOut@adc_value 0008  
                                         ??_SendMsg 0003                                         Parse@parser 0017  
                       __end_of_I2C1_InterruptClear 0003                                        vfprintf@cfmt 0023  
                                   ??_KAPS_StorePos 0012                                           ??___fladd 0008  
                                   ?_KAPS_getStatus 0000                                           ??___fldiv 0038  
                                         ??___awdiv 0004                                    __end_of_packLong 0057  
                                         ??___awmod 0004                                           ??___flmul 0016  
                                         ??___flsub 0030                                           ??___fltol 0000  
                                _I2C1_RestartEnable 0000                                           ?_I2C1_ISR 0000  
                                  ___awdiv@quotient 0007                                   ?_EUSART_IsRxReady 0000  
                                   ___awmod@divisor 0000                     __end_of_I2C1_EVENT_SEND_RD_ADDR 0007  
                                 ProcessMsg@payload 000E                                     ___awmod@counter 0005  
                                            _printf 0000                                          _ProcessMsg 0000  
                                      packLong@data 000C                                   ?_CLOCK_Initialize 0000  
                                ??_EUSART_IsRxReady 0000                                     ??_KAPS_getIndex 0000  
                                            fputc@c 0000                                  ??_CLOCK_Initialize 0000  
                   __end_of_I2C1_EVENT_SEND_WR_ADDR 0006                                 ?_I2C1_RestartEnable 0000  
                                            putch@c 0000                                    __end_of_vfprintf 001C  
           INT_SetInterruptHandler@InterruptHandler 0000             ADC_SetInterruptHandler@InterruptHandler 0000  
                                   ?_KAPS_setAbsPos 000D                                        ___xxtofl@arg 000A  
                                      ___xxtofl@exp 0009                                __end_of_KAPS_GoToIdx 0009  
                                 _SYSTEM_Initialize 0000                                        ___xxtofl@val 0000  
                           __end_of__initialization 0021                                     ?_KAPS_setRelPos 000D  
                                     ??_I2C1_IsAddr 0000                                       ??_I2C1_IsData 0000  
                                   ??___assert_fail 0038                                       ??_I2C1_IsNack 0000  
                                ?_SYSTEM_Initialize 0000                                         SendMsg@data 0001  
                                getADCValue@channel 003C                                          ___fltol@f1 004A  
                              ??_I2C1_RestartEnable 0000                                      __pcstackCOMMON 0000  
                                     __end_of_Parse 0143                                       __end_of__Exit 0001  
                                      __pidataBANK2 0000                                 ??_SYSTEM_Initialize 0002  
                                     __end_of_abort 0008                                       __end_of_fputc 0056  
                        ??_I2C1_ErrorInterruptClear 0000                                       __end_of_putch 0001  
                                        ??_I2C1_ISR 0006                             _ADC_GetConversionResult 0000  
                                    _OPTION_REGbits 0095                                   ??___funcs_on_exit 0000  
                             __end_of_I2C1_EVENT_RX 0039                               __end_of_I2C1_EVENT_TX 0029  
                                           ??_Parse 0015                                             ??__Exit 0002  
                            ?_I2C1_InterruptsEnable 0000                                             ??_abort 0004  
                                 _I2C1_EventHandler 0000                                             ??_fputc 0004  
                         __end_of_SYSTEM_Initialize 0012                                             ??_putch 0000  
                                        __pbssBANK1 0000                                          __pbssBANK2 0000  
                              __end_of_EUSART_Write 0005                                  ?_I2C1_EventHandler 0000  
                             _I2C1_StatusFlagsClear 0000                                    ?_I2C1_EVENT_IDLE 0000  
                                  ?_I2C1_EVENT_NACK 0000                                           ?_SendNack 0000  
                                  ?_I2C1_EVENT_STOP 0000                                   __end_of__Umul8_16 0020  
                               ??_I2C1_EventHandler 0004                                          __pmaintext 0000  
                               __end_of_I2C1_IsAddr 0007                                 __end_of_I2C1_IsData 0005  
                               __end_of_I2C1_IsNack 0006                                          __pintentry 0000  
                                   _I2C1_Initialize 0000                                _EUSART_AutoBaudQuery 0000  
                                           _ADC_ISR 0000                                         ?_ProcessMsg 000B  
                                           ?_printf 0025                               __end_of_I2C1_NackSend 0004  
                                KAPS_setAbsPos@kaps 0011                               __end_of_I2C1_BusReset 0004  
                                   _EUSART_IsTxDone 0000                                           ?___xxtofl 0000  
                                   _EUSART_ErrorGet 0000                                           _I2C1_Read 0000  
                         __end_of_I2C1_EventHandler 003A                              _I2C1_ErrorEventHandler 0000  
                                           _OSCTUNE 0098                                             _SSP1ADD 0212  
                                           _SLRCONA 030C                                             _SLRCONB 030D  
                                           _SLRCONC 030E                                             _SSP1BUF 0211  
                          __end_of_I2C1_EVENT_ERROR 0005                            __end_of_I2C1_EVENT_RESET 0006  
                                         ?_packLong 0000                       __end_of_I2C1_CallbackRegister 000D  
                                   KAPS_getPos@kaps 0000                               __end_of_I2C1_StopSend 0003  
                                        ??_SendNack 0006                                _ADC_InterruptHandler 0000  
                                           _SendMsg 0000                             _ADC_SetInterruptHandler 0000  
                                     ??_getADCValue 003A                                             ___fladd 0000  
                                           ___fldiv 0000                                    KAPS_StorePos@idx 000D  
                                           ___awdiv 0000                                             ___awmod 0000  
                                  KAPS_StorePos@pos 000E                                             ___flmul 0000  
                                           ___flsub 0000                                             ___fltol 0000  
                                         ?_vfprintf 001D                           ??_ADC_GetConversionResult 0002  
                                           __ptext1 0000                                             __ptext2 0000  
                                           __ptext3 0000                                             __ptext4 0000  
                                           __ptext5 0000                                             __ptext6 0000  
                                           __ptext7 0000                                             __ptext8 0000  
                                           __ptext9 0000                                 _I2C1_RestartDisable 0000  
                                        ??___xxtofl 0004                                    ___awmod@dividend 0002  
                          ??_PIN_MANAGER_Initialize 0000                                       ?_I2C1_AckSend 0000  
                           _INT_SetInterruptHandler 0000                                     _i2c1_eventTable 0000  
                                           clrloop0 0001                                end_of_initialization 0021  
                                        ??_packLong 0004                              ?_I2C1_StatusFlagsClear 0000  
                                           fputc@fp 0002                                             init_ram 0000  
                                           initloop 0001                                         _I2C1_IsAddr 0000  
                                       _I2C1_IsData 0000                                    vfpfcnvrt@cp_2048 0013  
                                       _I2C1_IsNack 0000                                         _I2C1_IsBusy 0000  
                                  ??_KAPS_getStatus 0000                                   _EUSART_Initialize 0000  
                              ?_I2C1_RestartDisable 0000                             __end_of_I2C1_Initialize 0016  
                      __end_of_ADC_IsConversionDone 0007                                  ?_EUSART_Initialize 0000  
                                 __end_of_vfpfcnvrt 0163                                   KAPS_getIndex@kaps 0000  
                                  vfpfcnvrt@convarg 0018                                    _I2C1_DataReceive 0000  
                                        ??_vfprintf 0022                                 __end_of_getADCValue 0033  
                               ??_EUSART_Initialize 0002                                        _KAPS_GoToIdx 0000  
                                         _SSPDATPPS 0E21                                           _SSPCLKPPS 0E20  
                                       ___fladd@grs 0013                                    ??_KAPS_setAbsPos 0011  
                                    ??_I2C1_AckSend 0000                 __end_of_ADC_DefaultInterruptHandler 0001  
                       _ADC_DefaultInterruptHandler 0000                                       ___xxtofl@sign 0008  
                               _ADC_StartConversion 0000                                    ??_KAPS_setRelPos 0011  
                                       ___fldiv@grs 0044                                         ___fldiv@rem 003D  
                               _EUSART_Deinitialize 0000                                          _unpackLong 0000  
                                        _unpackWord 0000                                         ___flmul@grs 001D  
                         __end_of_EUSART_Initialize 001E                       ??_ADC_DefaultInterruptHandler 0000  
                         ??_ADC_SetInterruptHandler 0002                               ??_I2C1_RestartDisable 0000  
                                    ProcessMsg@data 000B                                          main@parser 0019  
                              ?_ADC_StartConversion 0000                                        getADCValue@i 003F  
                                   ___funcs_on_exit 0000                        __end_of_INTERRUPT_Initialize 000B  
                                    _I2C1_ERROR_ISR 0000                               __end_of_KAPS_StorePos 0001  
                                       vfpfcnvrt@ap 000E                                         vfpfcnvrt@cp 0015  
                                       vfpfcnvrt@fp 000B                                           Parse@data 0014  
                                     ?_SSPA_getPOut 0004                          __end_of_I2C1_ReceiveEnable 0003  
                                      _EUSART_Write 0000                                       ?_SSPA_getTemp 0004  
                           __end_of_i2c1_eventTable 0012                                      _ADC_Initialize 0000  
                              KAPS_setRelPos@offset 000D                                 SSPA_getPOut@channel 000A  
                         ??_INT_SetInterruptHandler 0002                             ??_I2C1_InterruptsEnable 0000  
                                     ??_KAPS_getPos 0000                                      __end_of_printf 000F  
                               start_initialization 0000                                       ?_SSPA_setMute 0000  
                             __end_of_KAPS_getIndex 0001                                         __end_of_abs 000F  
                                     ??_EUSART_Read 0000                             _I2C1_EVENT_SEND_RD_ADDR 0000  
                             __end_of___assert_fail 001B                                    ?_I2C1_Initialize 0000  
                             ??_ADC_StartConversion 0000                             _I2C1_EVENT_SEND_WR_ADDR 0000  
                                       _getADCValue 0000                              __end_of_I2C1_ERROR_ISR 0003  
                                       vfprintf@fmt 001F                          _EUSART_FramingErrorHandler 0000  
                                  _I2C1_IsRxBufFull 0000                              __end_of_ADC_Initialize 0013  
                                         __Umul8_16 0000                                         __pdataBANK2 0000  
                                    ??_SSPA_getPOut 0005                                      ??_SSPA_getTemp 0005  
                                          ?_ADC_ISR 0000                                     unpackLong@value 0000  
                                      ??_ProcessMsg 000C                                            ??_printf 002F  
                                         ___fladd@a 0004                                           ___fladd@b 0000  
                           ?_I2C1_ErrorEventHandler 0000                                           ___fldiv@a 0030  
                                         ___fldiv@b 0034                                      ??_SSPA_setMute 0002  
                                         ___flmul@a 0012                                           ___flmul@b 000E  
                                       __pbssCOMMON 0000                                           ___flsub@a 0028  
                                         ___flsub@b 002C                                           ___latbits 0001  
                                     __pcstackBANK0 0000                                       __pcstackBANK1 0000  
                                  KAPS_GoToIdx@kaps 0001                                _ADC_IsConversionDone 0000  
                                KAPS_setRelPos@kaps 0011                                         ?_unpackLong 0000  
                               __end_of_KAPS_getPos 0001                                         ?_unpackWord 0000  
                         ?_I2C1_ErrorInterruptClear 0000                        __end_of_I2C1_DefaultCallback 0001  
                                 ?_I2C1_EVENT_ERROR 0000                                   ?_I2C1_EVENT_RESET 0000  
                               __end_of_EUSART_Read 0022                                  ??_I2C1_EVENT_ERROR 0000  
                           __end_of___funcs_on_exit 000B                                  ??_I2C1_EVENT_RESET 0000  
                                         __pnvBANK1 0000                                  __end_of_ProcessMsg 0173  
                                          ?_SendMsg 0001                                __end_of_I2C1_AckSend 0004  
                            _PIN_MANAGER_Initialize 0000                                     ?_I2C1_ERROR_ISR 0000  
                                 _ADC_SelectChannel 0000                                            ?___fladd 0000  
                                          ?___fldiv 0030                                            ?___awdiv 0000  
                                          ?___awmod 0000                                            ?___flmul 000E  
                                          ?___flsub 0028                                            ?___fltol 004A  
                                        ?__Umul8_16 0000                                     ?_ADC_Initialize 0000  
                                ?_ADC_SelectChannel 0000                                            _I2C1_ISR 0000  
                      ??_INTERRUPT_InterruptManager 0006                      __end_of_I2C1_ErrorEventHandler 0022  
                                          _BAUD1CON 019F                              _EUSART_TransmitDisable 0000  
                                  SSPA_getPOut@band 0004                                            _I2C_Host 0000  
                               ??_ADC_SelectChannel 0000                                    SSPA_getPOut@sspa 0007  
                             ?_ADC_IsConversionDone 0000                       I2C1_EVENT_ERROR@retEventState 0000  
                           ??_I2C1_StatusFlagsClear 0000                            __end_of_I2C1_DataReceive 0003  
                         ??_I2C1_EVENT_SEND_RD_ADDR 0000                                    _EUSART_IsRxReady 0000  
                              _INTERRUPT_Initialize 0000                                     unpackWord@value 0000  
                                  _EUSART_IsTxReady 0000                                    _CLOCK_Initialize 0000  
                                      ?_I2C1_IsAddr 0000                                        ?_I2C1_IsData 0000  
                                          _LATCbits 010E                                        ?_I2C1_IsNack 0000  
                         ??_I2C1_EVENT_SEND_WR_ADDR 0001                               _I2C1_CallbackRegister 0000  
                                         clear_ram0 0000                                            _PIE1bits 0090  
                                          _PIE2bits 0091                                   _eusartRxLastError 001A  
                                        _I2C1_Close 0000                           __end_of_ADC_SelectChannel 000F  
                                          _PIR1bits 0010                                            _PIR2bits 0011  
                                        _I2C1_Write 0000                                      _I2C1_WriteRead 0000  
                                          _SSP1CON1 0215                                            _SSP1CON2 0216  
                                          _SSP1CON3 0217                                            _SSP1STAT 0214  
                                  SSPA_getTemp@band 0004                                           _vfpfcnvrt 0000  
                                  SSPA_getTemp@sspa 0009                                          _ADCON0bits 009D  
                          ADC_SelectChannel@channel 0001                                         _KAPS_getPos 0000  
                      I2C1_EVENT_NACK@retEventState 0000                                       _I2C1_EVENT_RX 0000  
                                     _I2C1_EVENT_TX 0000                                         _EUSART_Read 0000  
                                        vfpfcnvrt@c 001C                               ?_INTERRUPT_Initialize 0000  
                              __end_of_SSPA_getPOut 018C                                __end_of_SSPA_getTemp 00A3  
                               _I2C1_InterruptClear 0000                                    ?___funcs_on_exit 0000  
                                          _SendNack 0000                                            __Exit@ec 0000  
                              __end_of_SSPA_setMute 0028                                          vfprintf@ap 0021  
                                        vfprintf@fp 001D                            ?_ADC_GetConversionResult 0000  
                                    unpackLong@data 0004                                       _I2C1_Callback 001C  
                                       ??__Umul8_16 0002                                   KAPS_StorePos@kaps 0012  
                                        ?_vfpfcnvrt 000B                                _I2C1_DefaultCallback 0000  
                                   KAPS_GoToIdx@idx 0000                                ?_I2C1_InterruptClear 0000  
                                     _I2C1_NackSend 0000                              ??_ADC_IsConversionDone 0000  
                                     _I2C1_BusReset 0000                                   ??_I2C1_EVENT_IDLE 0000  
                                 ??_I2C1_EVENT_NACK 0000                                            ___xxtofl 0000  
                                 ??_I2C1_EVENT_STOP 0000                       __end_of_I2C1_InterruptsEnable 0004  
                                    ?_I2C1_EVENT_RX 0000                                      ?_I2C1_EVENT_TX 0000  
                                     _I2C1_ErrorGet 0000                                  _EUSART_AutoBaudSet 0000  
                                          __ptext10 0000                                            __ptext11 0000  
                                          __ptext20 0000                                            __ptext12 0000  
                                          __ptext21 0000                                            __ptext13 0000  
                                          __ptext30 0000                                            __ptext22 0000  
                                          __ptext14 0000                                            __ptext31 0000  
                                          __ptext23 0000                                            __ptext15 0000  
                                          __ptext40 0000                                            __ptext32 0000  
                                          __ptext24 0000                                            __ptext16 0000  
                                          __ptext41 0000                                            __ptext33 0000  
                                          __ptext25 0000                                            __ptext17 0000  
                                          __ptext50 0000                                            __ptext42 0000  
                                          __ptext34 0000                                            __ptext26 0000  
                                          __ptext18 0000                                            __ptext51 0000  
                                          __ptext43 0000                                            __ptext35 0000  
                                          __ptext27 0000                                            __ptext19 0000  
                                          __ptext60 0000                                            __ptext52 0000  
                                          __ptext44 0000                                            __ptext36 0000  
                                          __ptext28 0000                                            __ptext53 0000  
                                          __ptext45 0000                                            __ptext37 0000  
                                          __ptext29 0000                                            __ptext70 0000  
                                          __ptext62 0000                                            __ptext54 0000  
                                          __ptext46 0000                                            __ptext38 0000  
                                          __ptext71 0000                                            __ptext63 0000  
                                          __ptext55 0000                                            __ptext47 0000  
                                          __ptext39 0000                                            __ptext80 0000  
                                          __ptext72 0000                                            __ptext64 0000  
                                          __ptext56 0000                                            __ptext48 0000  
                                          __ptext81 0000                                            __ptext73 0000  
                                          __ptext65 0000                                            __ptext57 0000  
                                          __ptext49 0000                                            __ptext90 0000  
                                          __ptext82 0000                                            __ptext74 0000  
                                          __ptext66 0000                                            __ptext58 0000  
                                          __ptext91 0000                                            __ptext83 0000  
                                          __ptext75 0000                                            __ptext67 0000  
                                          __ptext59 0000                                            __ptext92 0000  
                                          __ptext84 0000                                            __ptext76 0000  
                                          __ptext68 0000                                            __ptext93 0000  
                                          __ptext85 0000                                            __ptext77 0000  
                                          __ptext69 0000                                            __ptext94 0000  
                                          __ptext86 0000                                            __ptext78 0000  
                                          __ptext87 0000                                            __ptext79 0000  
                                          __ptext88 0000                                            __ptext89 0000  
                          __end_of_I2C1_IsRxBufFull 0004                                        _SSP1CON1bits 0215  
                                      _SSP1CON2bits 0216                         __end_of_I2C1_RestartDisable 0003  
                                _I2C1_ReceiveEnable 0000                               _EUSART_TransmitEnable 0000  
                                          _packLong 0000                              ?_I2C1_CallbackRegister 0000  
                                    unpackWord@data 0002                                 ?_I2C1_ReceiveEnable 0000  
                                       ?_I2C1_Close 0000                                       _I2C1_StopSend 0000  
                                      ?_getADCValue 0038                                          _RC1STAbits 019D  
                                          int$flags 007E                                            _vfprintf 0000  
                __end_of_INTERRUPT_InterruptManager 0022                          _INTERRUPT_InterruptManager 0000  
       __end_of_EUSART_FramingErrorCallbackRegister 000A               ??_EUSART_FramingErrorCallbackRegister 0002  
              ?_EUSART_FramingErrorCallbackRegister 0000                 _EUSART_FramingErrorCallbackRegister 0000  
                             ?_I2C1_DefaultCallback 0000                                            main@data 0018  
                                         printf@fmt 0025                                        _SSP1STATbits 0214  
                             ??_I2C1_InterruptClear 0000                    __end_of_I2C1_ErrorInterruptClear 0003  
                             SSPA_getTemp@adc_value 0007                                      ?_I2C1_NackSend 0000  
                                    ?_I2C1_BusReset 0000                                ??_I2C1_ReceiveEnable 0000  
                                    packLong@result 0008                                          _INTCONbits 000B  
                                          exit@code 0002                                        _I2C1_AckSend 0000  
                              _INT_InterruptHandler 0002                                      __pstringtext10 0000  
                                    __pstringtext11 0000                                      __pstringtext12 0000  
                            ??_INTERRUPT_Initialize 0002                                        ??_unpackLong 0005  
                        I2C1_EVENT_RX@retEventState 0001                            ?_ADC_SetInterruptHandler 0000  
                                      ??_unpackWord 0003                                            intlevel1 0000* 
                       __end_of_ADC_StartConversion 0003                                    ??_I2C1_ERROR_ISR 0006  
                           ?_PIN_MANAGER_Initialize 0000                          __end_of_I2C1_RestartEnable 0003  
        __end_of_EUSART_DefaultFramingErrorCallback 0001                ??_EUSART_DefaultFramingErrorCallback 0000  
               ?_EUSART_DefaultFramingErrorCallback 0000                  _EUSART_DefaultFramingErrorCallback 0000  
                   __end_of_ADC_GetConversionResult 0009                                      ?_I2C1_StopSend 0000  
                                  ??_ADC_Initialize 0002                                            printf@ap 002F  
                          ?_INT_SetInterruptHandler 0000                            __end_of_EUSART_IsRxReady 0005  
                                       ??_vfpfcnvrt 000F                                  __end_of_unpackLong 0045  
                          __end_of_CLOCK_Initialize 0008                                  __end_of_unpackWord 000C  
                                     __pstringtext1 0000                                       __pstringtext2 0000  
                                     __pstringtext3 0000                                       __pstringtext4 0000  
                                     __pstringtext5 0000                                       __pstringtext6 0000  
                                     __pstringtext7 0000                                       __pstringtext8 0000  
                                     __pstringtext9 0000                              __Umul8_16@multiplicand 0000  
                                   ??_I2C1_EVENT_RX 0000                                     ??_I2C1_EVENT_TX 0001  
                                 _I2C1_DataTransmit 0000                                          _TX1STAbits 019E  
                                     ___fladd@signs 0010                                  ?_I2C1_DataTransmit 0000  
                               SSPA_getTemp@channel 000A                                   ?_I2C1_DataReceive 0000  
                                EUSART_Write@txData 0000                                       SendNack@error 0006  
                    __end_of_PIN_MANAGER_Initialize 004B                       __end_of_I2C1_StatusFlagsClear 0004  
                                      ___fladd@aexp 0011                                        ___fladd@bexp 0012  
                                ??_I2C1_DataReceive 0000                                __Umul8_16@multiplier 0008  
                        I2C1_EVENT_TX@retEventState 0003                                 ??_I2C1_DataTransmit 0000  
                                 __Umul8_16@product 0004  
